var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var require_bundle = __commonJS({
  "bundle.js"(exports, module) {
    function makeMap(str, expectsLowerCase) {
      const map2 = /* @__PURE__ */ Object.create(null);
      const list = str.split(",");
      for (let i2 = 0; i2 < list.length; i2++) {
        map2[list[i2]] = true;
      }
      return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
    }
    function normalizeStyle(value) {
      if (isArray$2(value)) {
        const res = {};
        for (let i2 = 0; i2 < value.length; i2++) {
          const item = value[i2];
          const normalized = isString$2(item) ? parseStringStyle(item) : normalizeStyle(item);
          if (normalized) {
            for (const key in normalized) {
              res[key] = normalized[key];
            }
          }
        }
        return res;
      } else if (isString$2(value)) {
        return value;
      } else if (isObject$3(value)) {
        return value;
      }
    }
    const listDelimiterRE = /;(?![^(]*\))/g;
    const propertyDelimiterRE = /:([^]+)/;
    const styleCommentRE = /\/\*.*?\*\//gs;
    function parseStringStyle(cssText) {
      const ret = {};
      cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
        if (item) {
          const tmp = item.split(propertyDelimiterRE);
          tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
      });
      return ret;
    }
    function normalizeClass(value) {
      let res = "";
      if (isString$2(value)) {
        res = value;
      } else if (isArray$2(value)) {
        for (let i2 = 0; i2 < value.length; i2++) {
          const normalized = normalizeClass(value[i2]);
          if (normalized) {
            res += normalized + " ";
          }
        }
      } else if (isObject$3(value)) {
        for (const name in value) {
          if (value[name]) {
            res += name + " ";
          }
        }
      }
      return res.trim();
    }
    function normalizeProps(props) {
      if (!props)
        return null;
      let { class: klass, style } = props;
      if (klass && !isString$2(klass)) {
        props.class = normalizeClass(klass);
      }
      if (style) {
        props.style = normalizeStyle(style);
      }
      return props;
    }
    const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
    const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
    function includeBooleanAttr(value) {
      return !!value || value === "";
    }
    function looseCompareArrays(a, b) {
      if (a.length !== b.length)
        return false;
      let equal = true;
      for (let i2 = 0; equal && i2 < a.length; i2++) {
        equal = looseEqual(a[i2], b[i2]);
      }
      return equal;
    }
    function looseEqual(a, b) {
      if (a === b)
        return true;
      let aValidType = isDate$2(a);
      let bValidType = isDate$2(b);
      if (aValidType || bValidType) {
        return aValidType && bValidType ? a.getTime() === b.getTime() : false;
      }
      aValidType = isSymbol(a);
      bValidType = isSymbol(b);
      if (aValidType || bValidType) {
        return a === b;
      }
      aValidType = isArray$2(a);
      bValidType = isArray$2(b);
      if (aValidType || bValidType) {
        return aValidType && bValidType ? looseCompareArrays(a, b) : false;
      }
      aValidType = isObject$3(a);
      bValidType = isObject$3(b);
      if (aValidType || bValidType) {
        if (!aValidType || !bValidType) {
          return false;
        }
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) {
          return false;
        }
        for (const key in a) {
          const aHasKey = a.hasOwnProperty(key);
          const bHasKey = b.hasOwnProperty(key);
          if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
            return false;
          }
        }
      }
      return String(a) === String(b);
    }
    function looseIndexOf(arr, val) {
      return arr.findIndex((item) => looseEqual(item, val));
    }
    const toDisplayString = (val) => {
      return isString$2(val) ? val : val == null ? "" : isArray$2(val) || isObject$3(val) && (val.toString === objectToString || !isFunction$4(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
    };
    const replacer = (_key, val) => {
      if (val && val.__v_isRef) {
        return replacer(_key, val.value);
      } else if (isMap(val)) {
        return {
          [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
            entries[`${key} =>`] = val2;
            return entries;
          }, {})
        };
      } else if (isSet(val)) {
        return {
          [`Set(${val.size})`]: [...val.values()]
        };
      } else if (isObject$3(val) && !isArray$2(val) && !isPlainObject$2(val)) {
        return String(val);
      }
      return val;
    };
    const EMPTY_OBJ = {};
    const EMPTY_ARR = [];
    const NOOP = () => {
    };
    const NO = () => false;
    const onRE = /^on[^a-z]/;
    const isOn = (key) => onRE.test(key);
    const isModelListener = (key) => key.startsWith("onUpdate:");
    const extend$2 = Object.assign;
    const remove = (arr, el) => {
      const i2 = arr.indexOf(el);
      if (i2 > -1) {
        arr.splice(i2, 1);
      }
    };
    const hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    const hasOwn = (val, key) => hasOwnProperty$2.call(val, key);
    const isArray$2 = Array.isArray;
    const isMap = (val) => toTypeString(val) === "[object Map]";
    const isSet = (val) => toTypeString(val) === "[object Set]";
    const isDate$2 = (val) => toTypeString(val) === "[object Date]";
    const isFunction$4 = (val) => typeof val === "function";
    const isString$2 = (val) => typeof val === "string";
    const isSymbol = (val) => typeof val === "symbol";
    const isObject$3 = (val) => val !== null && typeof val === "object";
    const isPromise = (val) => {
      return isObject$3(val) && isFunction$4(val.then) && isFunction$4(val.catch);
    };
    const objectToString = Object.prototype.toString;
    const toTypeString = (value) => objectToString.call(value);
    const toRawType = (value) => {
      return toTypeString(value).slice(8, -1);
    };
    const isPlainObject$2 = (val) => toTypeString(val) === "[object Object]";
    const isIntegerKey = (key) => isString$2(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
    const isReservedProp = /* @__PURE__ */ makeMap(
      // the leading comma is intentional so empty string "" is also included
      ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
    );
    const cacheStringFunction = (fn) => {
      const cache2 = /* @__PURE__ */ Object.create(null);
      return (str) => {
        const hit = cache2[str];
        return hit || (cache2[str] = fn(str));
      };
    };
    const camelizeRE = /-(\w)/g;
    const camelize = cacheStringFunction((str) => {
      return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
    });
    const hyphenateRE = /\B([A-Z])/g;
    const hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
    const capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
    const toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
    const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
    const invokeArrayFns = (fns, arg) => {
      for (let i2 = 0; i2 < fns.length; i2++) {
        fns[i2](arg);
      }
    };
    const def = (obj, key, value) => {
      Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
      });
    };
    const toNumber = (val) => {
      const n = parseFloat(val);
      return isNaN(n) ? val : n;
    };
    let _globalThis;
    const getGlobalThis = () => {
      return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    };
    let activeEffectScope;
    class EffectScope {
      constructor(detached = false) {
        this.detached = detached;
        this.active = true;
        this.effects = [];
        this.cleanups = [];
        this.parent = activeEffectScope;
        if (!detached && activeEffectScope) {
          this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
      }
      run(fn) {
        if (this.active) {
          const currentEffectScope = activeEffectScope;
          try {
            activeEffectScope = this;
            return fn();
          } finally {
            activeEffectScope = currentEffectScope;
          }
        }
      }
      /**
       * This should only be called on non-detached scopes
       * @internal
       */
      on() {
        activeEffectScope = this;
      }
      /**
       * This should only be called on non-detached scopes
       * @internal
       */
      off() {
        activeEffectScope = this.parent;
      }
      stop(fromParent) {
        if (this.active) {
          let i2, l;
          for (i2 = 0, l = this.effects.length; i2 < l; i2++) {
            this.effects[i2].stop();
          }
          for (i2 = 0, l = this.cleanups.length; i2 < l; i2++) {
            this.cleanups[i2]();
          }
          if (this.scopes) {
            for (i2 = 0, l = this.scopes.length; i2 < l; i2++) {
              this.scopes[i2].stop(true);
            }
          }
          if (!this.detached && this.parent && !fromParent) {
            const last = this.parent.scopes.pop();
            if (last && last !== this) {
              this.parent.scopes[this.index] = last;
              last.index = this.index;
            }
          }
          this.parent = void 0;
          this.active = false;
        }
      }
    }
    function effectScope(detached) {
      return new EffectScope(detached);
    }
    function recordEffectScope(effect2, scope = activeEffectScope) {
      if (scope && scope.active) {
        scope.effects.push(effect2);
      }
    }
    function getCurrentScope() {
      return activeEffectScope;
    }
    function onScopeDispose(fn) {
      if (activeEffectScope) {
        activeEffectScope.cleanups.push(fn);
      }
    }
    const createDep = (effects) => {
      const dep = new Set(effects);
      dep.w = 0;
      dep.n = 0;
      return dep;
    };
    const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
    const newTracked = (dep) => (dep.n & trackOpBit) > 0;
    const initDepMarkers = ({ deps }) => {
      if (deps.length) {
        for (let i2 = 0; i2 < deps.length; i2++) {
          deps[i2].w |= trackOpBit;
        }
      }
    };
    const finalizeDepMarkers = (effect2) => {
      const { deps } = effect2;
      if (deps.length) {
        let ptr = 0;
        for (let i2 = 0; i2 < deps.length; i2++) {
          const dep = deps[i2];
          if (wasTracked(dep) && !newTracked(dep)) {
            dep.delete(effect2);
          } else {
            deps[ptr++] = dep;
          }
          dep.w &= ~trackOpBit;
          dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
      }
    };
    const targetMap = /* @__PURE__ */ new WeakMap();
    let effectTrackDepth = 0;
    let trackOpBit = 1;
    const maxMarkerBits = 30;
    let activeEffect;
    const ITERATE_KEY = Symbol("");
    const MAP_KEY_ITERATE_KEY = Symbol("");
    class ReactiveEffect {
      constructor(fn, scheduler = null, scope) {
        this.fn = fn;
        this.scheduler = scheduler;
        this.active = true;
        this.deps = [];
        this.parent = void 0;
        recordEffectScope(this, scope);
      }
      run() {
        if (!this.active) {
          return this.fn();
        }
        let parent = activeEffect;
        let lastShouldTrack = shouldTrack;
        while (parent) {
          if (parent === this) {
            return;
          }
          parent = parent.parent;
        }
        try {
          this.parent = activeEffect;
          activeEffect = this;
          shouldTrack = true;
          trackOpBit = 1 << ++effectTrackDepth;
          if (effectTrackDepth <= maxMarkerBits) {
            initDepMarkers(this);
          } else {
            cleanupEffect(this);
          }
          return this.fn();
        } finally {
          if (effectTrackDepth <= maxMarkerBits) {
            finalizeDepMarkers(this);
          }
          trackOpBit = 1 << --effectTrackDepth;
          activeEffect = this.parent;
          shouldTrack = lastShouldTrack;
          this.parent = void 0;
          if (this.deferStop) {
            this.stop();
          }
        }
      }
      stop() {
        if (activeEffect === this) {
          this.deferStop = true;
        } else if (this.active) {
          cleanupEffect(this);
          if (this.onStop) {
            this.onStop();
          }
          this.active = false;
        }
      }
    }
    function cleanupEffect(effect2) {
      const { deps } = effect2;
      if (deps.length) {
        for (let i2 = 0; i2 < deps.length; i2++) {
          deps[i2].delete(effect2);
        }
        deps.length = 0;
      }
    }
    let shouldTrack = true;
    const trackStack = [];
    function pauseTracking() {
      trackStack.push(shouldTrack);
      shouldTrack = false;
    }
    function resetTracking() {
      const last = trackStack.pop();
      shouldTrack = last === void 0 ? true : last;
    }
    function track(target, type, key) {
      if (shouldTrack && activeEffect) {
        let depsMap = targetMap.get(target);
        if (!depsMap) {
          targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
        }
        let dep = depsMap.get(key);
        if (!dep) {
          depsMap.set(key, dep = createDep());
        }
        trackEffects(dep);
      }
    }
    function trackEffects(dep, debuggerEventExtraInfo) {
      let shouldTrack2 = false;
      if (effectTrackDepth <= maxMarkerBits) {
        if (!newTracked(dep)) {
          dep.n |= trackOpBit;
          shouldTrack2 = !wasTracked(dep);
        }
      } else {
        shouldTrack2 = !dep.has(activeEffect);
      }
      if (shouldTrack2) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
      }
    }
    function trigger(target, type, key, newValue, oldValue, oldTarget) {
      const depsMap = targetMap.get(target);
      if (!depsMap) {
        return;
      }
      let deps = [];
      if (type === "clear") {
        deps = [...depsMap.values()];
      } else if (key === "length" && isArray$2(target)) {
        const newLength = toNumber(newValue);
        depsMap.forEach((dep, key2) => {
          if (key2 === "length" || key2 >= newLength) {
            deps.push(dep);
          }
        });
      } else {
        if (key !== void 0) {
          deps.push(depsMap.get(key));
        }
        switch (type) {
          case "add":
            if (!isArray$2(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
              if (isMap(target)) {
                deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            } else if (isIntegerKey(key)) {
              deps.push(depsMap.get("length"));
            }
            break;
          case "delete":
            if (!isArray$2(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
              if (isMap(target)) {
                deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            }
            break;
          case "set":
            if (isMap(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
            }
            break;
        }
      }
      if (deps.length === 1) {
        if (deps[0]) {
          {
            triggerEffects(deps[0]);
          }
        }
      } else {
        const effects = [];
        for (const dep of deps) {
          if (dep) {
            effects.push(...dep);
          }
        }
        {
          triggerEffects(createDep(effects));
        }
      }
    }
    function triggerEffects(dep, debuggerEventExtraInfo) {
      const effects = isArray$2(dep) ? dep : [...dep];
      for (const effect2 of effects) {
        if (effect2.computed) {
          triggerEffect(effect2);
        }
      }
      for (const effect2 of effects) {
        if (!effect2.computed) {
          triggerEffect(effect2);
        }
      }
    }
    function triggerEffect(effect2, debuggerEventExtraInfo) {
      if (effect2 !== activeEffect || effect2.allowRecurse) {
        if (effect2.scheduler) {
          effect2.scheduler();
        } else {
          effect2.run();
        }
      }
    }
    const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
    const builtInSymbols = new Set(
      /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
    );
    const get$3 = /* @__PURE__ */ createGetter();
    const shallowGet = /* @__PURE__ */ createGetter(false, true);
    const readonlyGet = /* @__PURE__ */ createGetter(true);
    const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
    function createArrayInstrumentations() {
      const instrumentations = {};
      ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
        instrumentations[key] = function(...args) {
          const arr = toRaw(this);
          for (let i2 = 0, l = this.length; i2 < l; i2++) {
            track(arr, "get", i2 + "");
          }
          const res = arr[key](...args);
          if (res === -1 || res === false) {
            return arr[key](...args.map(toRaw));
          } else {
            return res;
          }
        };
      });
      ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
        instrumentations[key] = function(...args) {
          pauseTracking();
          const res = toRaw(this)[key].apply(this, args);
          resetTracking();
          return res;
        };
      });
      return instrumentations;
    }
    function createGetter(isReadonly2 = false, shallow = false) {
      return function get2(target, key, receiver) {
        if (key === "__v_isReactive") {
          return !isReadonly2;
        } else if (key === "__v_isReadonly") {
          return isReadonly2;
        } else if (key === "__v_isShallow") {
          return shallow;
        } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
          return target;
        }
        const targetIsArray = isArray$2(target);
        if (!isReadonly2 && targetIsArray && hasOwn(arrayInstrumentations, key)) {
          return Reflect.get(arrayInstrumentations, key, receiver);
        }
        const res = Reflect.get(target, key, receiver);
        if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
          return res;
        }
        if (!isReadonly2) {
          track(target, "get", key);
        }
        if (shallow) {
          return res;
        }
        if (isRef(res)) {
          return targetIsArray && isIntegerKey(key) ? res : res.value;
        }
        if (isObject$3(res)) {
          return isReadonly2 ? readonly(res) : reactive(res);
        }
        return res;
      };
    }
    const set$2 = /* @__PURE__ */ createSetter();
    const shallowSet = /* @__PURE__ */ createSetter(true);
    function createSetter(shallow = false) {
      return function set2(target, key, value, receiver) {
        let oldValue = target[key];
        if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
          return false;
        }
        if (!shallow) {
          if (!isShallow(value) && !isReadonly(value)) {
            oldValue = toRaw(oldValue);
            value = toRaw(value);
          }
          if (!isArray$2(target) && isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
          }
        }
        const hadKey = isArray$2(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
        const result = Reflect.set(target, key, value, receiver);
        if (target === toRaw(receiver)) {
          if (!hadKey) {
            trigger(target, "add", key, value);
          } else if (hasChanged(value, oldValue)) {
            trigger(target, "set", key, value);
          }
        }
        return result;
      };
    }
    function deleteProperty(target, key) {
      const hadKey = hasOwn(target, key);
      target[key];
      const result = Reflect.deleteProperty(target, key);
      if (result && hadKey) {
        trigger(target, "delete", key, void 0);
      }
      return result;
    }
    function has(target, key) {
      const result = Reflect.has(target, key);
      if (!isSymbol(key) || !builtInSymbols.has(key)) {
        track(target, "has", key);
      }
      return result;
    }
    function ownKeys$2(target) {
      track(target, "iterate", isArray$2(target) ? "length" : ITERATE_KEY);
      return Reflect.ownKeys(target);
    }
    const mutableHandlers = {
      get: get$3,
      set: set$2,
      deleteProperty,
      has,
      ownKeys: ownKeys$2
    };
    const readonlyHandlers = {
      get: readonlyGet,
      set(target, key) {
        return true;
      },
      deleteProperty(target, key) {
        return true;
      }
    };
    const shallowReactiveHandlers = /* @__PURE__ */ extend$2({}, mutableHandlers, {
      get: shallowGet,
      set: shallowSet
    });
    const toShallow = (value) => value;
    const getProto = (v) => Reflect.getPrototypeOf(v);
    function get$1$2(target, key, isReadonly2 = false, isShallow2 = false) {
      target = target[
        "__v_raw"
        /* ReactiveFlags.RAW */
      ];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (!isReadonly2) {
        if (key !== rawKey) {
          track(rawTarget, "get", key);
        }
        track(rawTarget, "get", rawKey);
      }
      const { has: has2 } = getProto(rawTarget);
      const wrap2 = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
      if (has2.call(rawTarget, key)) {
        return wrap2(target.get(key));
      } else if (has2.call(rawTarget, rawKey)) {
        return wrap2(target.get(rawKey));
      } else if (target !== rawTarget) {
        target.get(key);
      }
    }
    function has$1(key, isReadonly2 = false) {
      const target = this[
        "__v_raw"
        /* ReactiveFlags.RAW */
      ];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (!isReadonly2) {
        if (key !== rawKey) {
          track(rawTarget, "has", key);
        }
        track(rawTarget, "has", rawKey);
      }
      return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
    }
    function size(target, isReadonly2 = false) {
      target = target[
        "__v_raw"
        /* ReactiveFlags.RAW */
      ];
      !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
      return Reflect.get(target, "size", target);
    }
    function add$2(value) {
      value = toRaw(value);
      const target = toRaw(this);
      const proto2 = getProto(target);
      const hadKey = proto2.has.call(target, value);
      if (!hadKey) {
        target.add(value);
        trigger(target, "add", value, value);
      }
      return this;
    }
    function set$1$1(key, value) {
      value = toRaw(value);
      const target = toRaw(this);
      const { has: has2, get: get2 } = getProto(target);
      let hadKey = has2.call(target, key);
      if (!hadKey) {
        key = toRaw(key);
        hadKey = has2.call(target, key);
      }
      const oldValue = get2.call(target, key);
      target.set(key, value);
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value);
      }
      return this;
    }
    function deleteEntry(key) {
      const target = toRaw(this);
      const { has: has2, get: get2 } = getProto(target);
      let hadKey = has2.call(target, key);
      if (!hadKey) {
        key = toRaw(key);
        hadKey = has2.call(target, key);
      }
      get2 ? get2.call(target, key) : void 0;
      const result = target.delete(key);
      if (hadKey) {
        trigger(target, "delete", key, void 0);
      }
      return result;
    }
    function clear() {
      const target = toRaw(this);
      const hadItems = target.size !== 0;
      const result = target.clear();
      if (hadItems) {
        trigger(target, "clear", void 0, void 0);
      }
      return result;
    }
    function createForEach(isReadonly2, isShallow2) {
      return function forEach2(callback, thisArg) {
        const observed = this;
        const target = observed[
          "__v_raw"
          /* ReactiveFlags.RAW */
        ];
        const rawTarget = toRaw(target);
        const wrap2 = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
        return target.forEach((value, key) => {
          return callback.call(thisArg, wrap2(value), wrap2(key), observed);
        });
      };
    }
    function createIterableMethod(method, isReadonly2, isShallow2) {
      return function(...args) {
        const target = this[
          "__v_raw"
          /* ReactiveFlags.RAW */
        ];
        const rawTarget = toRaw(target);
        const targetIsMap = isMap(rawTarget);
        const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
        const isKeyOnly = method === "keys" && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap2 = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        return {
          // iterator protocol
          next() {
            const { value, done } = innerIterator.next();
            return done ? { value, done } : {
              value: isPair ? [wrap2(value[0]), wrap2(value[1])] : wrap2(value),
              done
            };
          },
          // iterable protocol
          [Symbol.iterator]() {
            return this;
          }
        };
      };
    }
    function createReadonlyMethod(type) {
      return function(...args) {
        return type === "delete" ? false : this;
      };
    }
    function createInstrumentations() {
      const mutableInstrumentations2 = {
        get(key) {
          return get$1$2(this, key);
        },
        get size() {
          return size(this);
        },
        has: has$1,
        add: add$2,
        set: set$1$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
      };
      const shallowInstrumentations2 = {
        get(key) {
          return get$1$2(this, key, false, true);
        },
        get size() {
          return size(this);
        },
        has: has$1,
        add: add$2,
        set: set$1$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
      };
      const readonlyInstrumentations2 = {
        get(key) {
          return get$1$2(this, key, true);
        },
        get size() {
          return size(this, true);
        },
        has(key) {
          return has$1.call(this, key, true);
        },
        add: createReadonlyMethod(
          "add"
          /* TriggerOpTypes.ADD */
        ),
        set: createReadonlyMethod(
          "set"
          /* TriggerOpTypes.SET */
        ),
        delete: createReadonlyMethod(
          "delete"
          /* TriggerOpTypes.DELETE */
        ),
        clear: createReadonlyMethod(
          "clear"
          /* TriggerOpTypes.CLEAR */
        ),
        forEach: createForEach(true, false)
      };
      const shallowReadonlyInstrumentations2 = {
        get(key) {
          return get$1$2(this, key, true, true);
        },
        get size() {
          return size(this, true);
        },
        has(key) {
          return has$1.call(this, key, true);
        },
        add: createReadonlyMethod(
          "add"
          /* TriggerOpTypes.ADD */
        ),
        set: createReadonlyMethod(
          "set"
          /* TriggerOpTypes.SET */
        ),
        delete: createReadonlyMethod(
          "delete"
          /* TriggerOpTypes.DELETE */
        ),
        clear: createReadonlyMethod(
          "clear"
          /* TriggerOpTypes.CLEAR */
        ),
        forEach: createForEach(true, true)
      };
      const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
      iteratorMethods.forEach((method) => {
        mutableInstrumentations2[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
        shallowInstrumentations2[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
      });
      return [
        mutableInstrumentations2,
        readonlyInstrumentations2,
        shallowInstrumentations2,
        shallowReadonlyInstrumentations2
      ];
    }
    const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
    function createInstrumentationGetter(isReadonly2, shallow) {
      const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
      return (target, key, receiver) => {
        if (key === "__v_isReactive") {
          return !isReadonly2;
        } else if (key === "__v_isReadonly") {
          return isReadonly2;
        } else if (key === "__v_raw") {
          return target;
        }
        return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
      };
    }
    const mutableCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(false, false)
    };
    const shallowCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(false, true)
    };
    const readonlyCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(true, false)
    };
    const reactiveMap = /* @__PURE__ */ new WeakMap();
    const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
    const readonlyMap = /* @__PURE__ */ new WeakMap();
    const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
    function targetTypeMap(rawType) {
      switch (rawType) {
        case "Object":
        case "Array":
          return 1;
        case "Map":
        case "Set":
        case "WeakMap":
        case "WeakSet":
          return 2;
        default:
          return 0;
      }
    }
    function getTargetType(value) {
      return value[
        "__v_skip"
        /* ReactiveFlags.SKIP */
      ] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
    }
    function reactive(target) {
      if (isReadonly(target)) {
        return target;
      }
      return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
    }
    function shallowReactive(target) {
      return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
    }
    function readonly(target) {
      return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
    }
    function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
      if (!isObject$3(target)) {
        return target;
      }
      if (target[
        "__v_raw"
        /* ReactiveFlags.RAW */
      ] && !(isReadonly2 && target[
        "__v_isReactive"
        /* ReactiveFlags.IS_REACTIVE */
      ])) {
        return target;
      }
      const existingProxy = proxyMap.get(target);
      if (existingProxy) {
        return existingProxy;
      }
      const targetType = getTargetType(target);
      if (targetType === 0) {
        return target;
      }
      const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
      proxyMap.set(target, proxy);
      return proxy;
    }
    function isReactive(value) {
      if (isReadonly(value)) {
        return isReactive(value[
          "__v_raw"
          /* ReactiveFlags.RAW */
        ]);
      }
      return !!(value && value[
        "__v_isReactive"
        /* ReactiveFlags.IS_REACTIVE */
      ]);
    }
    function isReadonly(value) {
      return !!(value && value[
        "__v_isReadonly"
        /* ReactiveFlags.IS_READONLY */
      ]);
    }
    function isShallow(value) {
      return !!(value && value[
        "__v_isShallow"
        /* ReactiveFlags.IS_SHALLOW */
      ]);
    }
    function isProxy$1(value) {
      return isReactive(value) || isReadonly(value);
    }
    function toRaw(observed) {
      const raw = observed && observed[
        "__v_raw"
        /* ReactiveFlags.RAW */
      ];
      return raw ? toRaw(raw) : observed;
    }
    function markRaw(value) {
      def(value, "__v_skip", true);
      return value;
    }
    const toReactive = (value) => isObject$3(value) ? reactive(value) : value;
    const toReadonly = (value) => isObject$3(value) ? readonly(value) : value;
    function trackRefValue(ref2) {
      if (shouldTrack && activeEffect) {
        ref2 = toRaw(ref2);
        {
          trackEffects(ref2.dep || (ref2.dep = createDep()));
        }
      }
    }
    function triggerRefValue(ref2, newVal) {
      ref2 = toRaw(ref2);
      if (ref2.dep) {
        {
          triggerEffects(ref2.dep);
        }
      }
    }
    function isRef(r) {
      return !!(r && r.__v_isRef === true);
    }
    function ref(value) {
      return createRef(value, false);
    }
    function createRef(rawValue, shallow) {
      if (isRef(rawValue)) {
        return rawValue;
      }
      return new RefImpl(rawValue, shallow);
    }
    class RefImpl {
      constructor(value, __v_isShallow) {
        this.__v_isShallow = __v_isShallow;
        this.dep = void 0;
        this.__v_isRef = true;
        this._rawValue = __v_isShallow ? value : toRaw(value);
        this._value = __v_isShallow ? value : toReactive(value);
      }
      get value() {
        trackRefValue(this);
        return this._value;
      }
      set value(newVal) {
        const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
        newVal = useDirectValue ? newVal : toRaw(newVal);
        if (hasChanged(newVal, this._rawValue)) {
          this._rawValue = newVal;
          this._value = useDirectValue ? newVal : toReactive(newVal);
          triggerRefValue(this);
        }
      }
    }
    function unref(ref2) {
      return isRef(ref2) ? ref2.value : ref2;
    }
    const shallowUnwrapHandlers = {
      get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
      set: (target, key, value, receiver) => {
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
          oldValue.value = value;
          return true;
        } else {
          return Reflect.set(target, key, value, receiver);
        }
      }
    };
    function proxyRefs(objectWithRefs) {
      return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
    }
    function toRefs(object) {
      const ret = isArray$2(object) ? new Array(object.length) : {};
      for (const key in object) {
        ret[key] = toRef(object, key);
      }
      return ret;
    }
    class ObjectRefImpl {
      constructor(_object, _key, _defaultValue) {
        this._object = _object;
        this._key = _key;
        this._defaultValue = _defaultValue;
        this.__v_isRef = true;
      }
      get value() {
        const val = this._object[this._key];
        return val === void 0 ? this._defaultValue : val;
      }
      set value(newVal) {
        this._object[this._key] = newVal;
      }
    }
    function toRef(object, key, defaultValue) {
      const val = object[key];
      return isRef(val) ? val : new ObjectRefImpl(object, key, defaultValue);
    }
    var _a;
    class ComputedRefImpl {
      constructor(getter, _setter, isReadonly2, isSSR) {
        this._setter = _setter;
        this.dep = void 0;
        this.__v_isRef = true;
        this[_a] = false;
        this._dirty = true;
        this.effect = new ReactiveEffect(getter, () => {
          if (!this._dirty) {
            this._dirty = true;
            triggerRefValue(this);
          }
        });
        this.effect.computed = this;
        this.effect.active = this._cacheable = !isSSR;
        this[
          "__v_isReadonly"
          /* ReactiveFlags.IS_READONLY */
        ] = isReadonly2;
      }
      get value() {
        const self2 = toRaw(this);
        trackRefValue(self2);
        if (self2._dirty || !self2._cacheable) {
          self2._dirty = false;
          self2._value = self2.effect.run();
        }
        return self2._value;
      }
      set value(newValue) {
        this._setter(newValue);
      }
    }
    _a = "__v_isReadonly";
    function computed$1(getterOrOptions, debugOptions, isSSR = false) {
      let getter;
      let setter;
      const onlyGetter = isFunction$4(getterOrOptions);
      if (onlyGetter) {
        getter = getterOrOptions;
        setter = NOOP;
      } else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
      }
      const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
      return cRef;
    }
    function warn$1(msg, ...args) {
      return;
    }
    function callWithErrorHandling(fn, instance, type, args) {
      let res;
      try {
        res = args ? fn(...args) : fn();
      } catch (err) {
        handleError(err, instance, type);
      }
      return res;
    }
    function callWithAsyncErrorHandling(fn, instance, type, args) {
      if (isFunction$4(fn)) {
        const res = callWithErrorHandling(fn, instance, type, args);
        if (res && isPromise(res)) {
          res.catch((err) => {
            handleError(err, instance, type);
          });
        }
        return res;
      }
      const values = [];
      for (let i2 = 0; i2 < fn.length; i2++) {
        values.push(callWithAsyncErrorHandling(fn[i2], instance, type, args));
      }
      return values;
    }
    function handleError(err, instance, type, throwInDev = true) {
      const contextVNode = instance ? instance.vnode : null;
      if (instance) {
        let cur = instance.parent;
        const exposedInstance = instance.proxy;
        const errorInfo = type;
        while (cur) {
          const errorCapturedHooks = cur.ec;
          if (errorCapturedHooks) {
            for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
              if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
                return;
              }
            }
          }
          cur = cur.parent;
        }
        const appErrorHandler = instance.appContext.config.errorHandler;
        if (appErrorHandler) {
          callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
          return;
        }
      }
      logError(err, type, contextVNode, throwInDev);
    }
    function logError(err, type, contextVNode, throwInDev = true) {
      {
        console.error(err);
      }
    }
    let isFlushing = false;
    let isFlushPending = false;
    const queue = [];
    let flushIndex = 0;
    const pendingPostFlushCbs = [];
    let activePostFlushCbs = null;
    let postFlushIndex = 0;
    const resolvedPromise = /* @__PURE__ */ Promise.resolve();
    let currentFlushPromise = null;
    function nextTick(fn) {
      const p2 = currentFlushPromise || resolvedPromise;
      return fn ? p2.then(this ? fn.bind(this) : fn) : p2;
    }
    function findInsertionIndex(id) {
      let start2 = flushIndex + 1;
      let end2 = queue.length;
      while (start2 < end2) {
        const middle = start2 + end2 >>> 1;
        const middleJobId = getId(queue[middle]);
        middleJobId < id ? start2 = middle + 1 : end2 = middle;
      }
      return start2;
    }
    function queueJob(job) {
      if (!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) {
        if (job.id == null) {
          queue.push(job);
        } else {
          queue.splice(findInsertionIndex(job.id), 0, job);
        }
        queueFlush();
      }
    }
    function queueFlush() {
      if (!isFlushing && !isFlushPending) {
        isFlushPending = true;
        currentFlushPromise = resolvedPromise.then(flushJobs);
      }
    }
    function invalidateJob(job) {
      const i2 = queue.indexOf(job);
      if (i2 > flushIndex) {
        queue.splice(i2, 1);
      }
    }
    function queuePostFlushCb(cb) {
      if (!isArray$2(cb)) {
        if (!activePostFlushCbs || !activePostFlushCbs.includes(cb, cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex)) {
          pendingPostFlushCbs.push(cb);
        }
      } else {
        pendingPostFlushCbs.push(...cb);
      }
      queueFlush();
    }
    function flushPreFlushCbs(seen, i2 = isFlushing ? flushIndex + 1 : 0) {
      for (; i2 < queue.length; i2++) {
        const cb = queue[i2];
        if (cb && cb.pre) {
          queue.splice(i2, 1);
          i2--;
          cb();
        }
      }
    }
    function flushPostFlushCbs(seen) {
      if (pendingPostFlushCbs.length) {
        const deduped = [...new Set(pendingPostFlushCbs)];
        pendingPostFlushCbs.length = 0;
        if (activePostFlushCbs) {
          activePostFlushCbs.push(...deduped);
          return;
        }
        activePostFlushCbs = deduped;
        activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
          activePostFlushCbs[postFlushIndex]();
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
      }
    }
    const getId = (job) => job.id == null ? Infinity : job.id;
    const comparator = (a, b) => {
      const diff2 = getId(a) - getId(b);
      if (diff2 === 0) {
        if (a.pre && !b.pre)
          return -1;
        if (b.pre && !a.pre)
          return 1;
      }
      return diff2;
    };
    function flushJobs(seen) {
      isFlushPending = false;
      isFlushing = true;
      queue.sort(comparator);
      const check = NOOP;
      try {
        for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
          const job = queue[flushIndex];
          if (job && job.active !== false) {
            if (false)
              ;
            callWithErrorHandling(
              job,
              null,
              14
              /* ErrorCodes.SCHEDULER */
            );
          }
        }
      } finally {
        flushIndex = 0;
        queue.length = 0;
        flushPostFlushCbs();
        isFlushing = false;
        currentFlushPromise = null;
        if (queue.length || pendingPostFlushCbs.length) {
          flushJobs();
        }
      }
    }
    function emit$1(instance, event, ...rawArgs) {
      if (instance.isUnmounted)
        return;
      const props = instance.vnode.props || EMPTY_OBJ;
      let args = rawArgs;
      const isModelListener2 = event.startsWith("update:");
      const modelArg = isModelListener2 && event.slice(7);
      if (modelArg && modelArg in props) {
        const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
        const { number, trim: trim2 } = props[modifiersKey] || EMPTY_OBJ;
        if (trim2) {
          args = rawArgs.map((a) => isString$2(a) ? a.trim() : a);
        }
        if (number) {
          args = rawArgs.map(toNumber);
        }
      }
      let handlerName;
      let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
      props[handlerName = toHandlerKey(camelize(event))];
      if (!handler && isModelListener2) {
        handler = props[handlerName = toHandlerKey(hyphenate(event))];
      }
      if (handler) {
        callWithAsyncErrorHandling(handler, instance, 6, args);
      }
      const onceHandler = props[handlerName + `Once`];
      if (onceHandler) {
        if (!instance.emitted) {
          instance.emitted = {};
        } else if (instance.emitted[handlerName]) {
          return;
        }
        instance.emitted[handlerName] = true;
        callWithAsyncErrorHandling(onceHandler, instance, 6, args);
      }
    }
    function normalizeEmitsOptions(comp, appContext, asMixin = false) {
      const cache2 = appContext.emitsCache;
      const cached = cache2.get(comp);
      if (cached !== void 0) {
        return cached;
      }
      const raw = comp.emits;
      let normalized = {};
      let hasExtends = false;
      if (!isFunction$4(comp)) {
        const extendEmits = (raw2) => {
          const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
          if (normalizedFromExtend) {
            hasExtends = true;
            extend$2(normalized, normalizedFromExtend);
          }
        };
        if (!asMixin && appContext.mixins.length) {
          appContext.mixins.forEach(extendEmits);
        }
        if (comp.extends) {
          extendEmits(comp.extends);
        }
        if (comp.mixins) {
          comp.mixins.forEach(extendEmits);
        }
      }
      if (!raw && !hasExtends) {
        if (isObject$3(comp)) {
          cache2.set(comp, null);
        }
        return null;
      }
      if (isArray$2(raw)) {
        raw.forEach((key) => normalized[key] = null);
      } else {
        extend$2(normalized, raw);
      }
      if (isObject$3(comp)) {
        cache2.set(comp, normalized);
      }
      return normalized;
    }
    function isEmitListener(options, key) {
      if (!options || !isOn(key)) {
        return false;
      }
      key = key.slice(2).replace(/Once$/, "");
      return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
    }
    let currentRenderingInstance = null;
    let currentScopeId = null;
    function setCurrentRenderingInstance(instance) {
      const prev = currentRenderingInstance;
      currentRenderingInstance = instance;
      currentScopeId = instance && instance.type.__scopeId || null;
      return prev;
    }
    function pushScopeId(id) {
      currentScopeId = id;
    }
    function popScopeId() {
      currentScopeId = null;
    }
    function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
      if (!ctx)
        return fn;
      if (fn._n) {
        return fn;
      }
      const renderFnWithContext = (...args) => {
        if (renderFnWithContext._d) {
          setBlockTracking(-1);
        }
        const prevInstance = setCurrentRenderingInstance(ctx);
        let res;
        try {
          res = fn(...args);
        } finally {
          setCurrentRenderingInstance(prevInstance);
          if (renderFnWithContext._d) {
            setBlockTracking(1);
          }
        }
        return res;
      };
      renderFnWithContext._n = true;
      renderFnWithContext._c = true;
      renderFnWithContext._d = true;
      return renderFnWithContext;
    }
    function markAttrsAccessed() {
    }
    function renderComponentRoot(instance) {
      const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;
      let result;
      let fallthroughAttrs;
      const prev = setCurrentRenderingInstance(instance);
      try {
        if (vnode.shapeFlag & 4) {
          const proxyToUse = withProxy || proxy;
          result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
          fallthroughAttrs = attrs;
        } else {
          const render2 = Component;
          if (false)
            ;
          result = normalizeVNode(render2.length > 1 ? render2(props, false ? {
            get attrs() {
              markAttrsAccessed();
              return attrs;
            },
            slots,
            emit
          } : { attrs, slots, emit }) : render2(
            props,
            null
            /* we know it doesn't need it */
          ));
          fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
        }
      } catch (err) {
        blockStack.length = 0;
        handleError(
          err,
          instance,
          1
          /* ErrorCodes.RENDER_FUNCTION */
        );
        result = createVNode(Comment);
      }
      let root = result;
      if (fallthroughAttrs && inheritAttrs !== false) {
        const keys2 = Object.keys(fallthroughAttrs);
        const { shapeFlag } = root;
        if (keys2.length) {
          if (shapeFlag & (1 | 6)) {
            if (propsOptions && keys2.some(isModelListener)) {
              fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
            }
            root = cloneVNode(root, fallthroughAttrs);
          }
        }
      }
      if (vnode.dirs) {
        root = cloneVNode(root);
        root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
      }
      if (vnode.transition) {
        root.transition = vnode.transition;
      }
      {
        result = root;
      }
      setCurrentRenderingInstance(prev);
      return result;
    }
    const getFunctionalFallthrough = (attrs) => {
      let res;
      for (const key in attrs) {
        if (key === "class" || key === "style" || isOn(key)) {
          (res || (res = {}))[key] = attrs[key];
        }
      }
      return res;
    };
    const filterModelListeners = (attrs, props) => {
      const res = {};
      for (const key in attrs) {
        if (!isModelListener(key) || !(key.slice(9) in props)) {
          res[key] = attrs[key];
        }
      }
      return res;
    };
    function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
      const { props: prevProps, children: prevChildren, component } = prevVNode;
      const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
      const emits = component.emitsOptions;
      if (nextVNode.dirs || nextVNode.transition) {
        return true;
      }
      if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024) {
          return true;
        }
        if (patchFlag & 16) {
          if (!prevProps) {
            return !!nextProps;
          }
          return hasPropsChanged(prevProps, nextProps, emits);
        } else if (patchFlag & 8) {
          const dynamicProps = nextVNode.dynamicProps;
          for (let i2 = 0; i2 < dynamicProps.length; i2++) {
            const key = dynamicProps[i2];
            if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
              return true;
            }
          }
        }
      } else {
        if (prevChildren || nextChildren) {
          if (!nextChildren || !nextChildren.$stable) {
            return true;
          }
        }
        if (prevProps === nextProps) {
          return false;
        }
        if (!prevProps) {
          return !!nextProps;
        }
        if (!nextProps) {
          return true;
        }
        return hasPropsChanged(prevProps, nextProps, emits);
      }
      return false;
    }
    function hasPropsChanged(prevProps, nextProps, emitsOptions) {
      const nextKeys = Object.keys(nextProps);
      if (nextKeys.length !== Object.keys(prevProps).length) {
        return true;
      }
      for (let i2 = 0; i2 < nextKeys.length; i2++) {
        const key = nextKeys[i2];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
          return true;
        }
      }
      return false;
    }
    function updateHOCHostEl({ vnode, parent }, el) {
      while (parent && parent.subTree === vnode) {
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
      }
    }
    const isSuspense = (type) => type.__isSuspense;
    function queueEffectWithSuspense(fn, suspense) {
      if (suspense && suspense.pendingBranch) {
        if (isArray$2(fn)) {
          suspense.effects.push(...fn);
        } else {
          suspense.effects.push(fn);
        }
      } else {
        queuePostFlushCb(fn);
      }
    }
    function provide(key, value) {
      if (!currentInstance)
        ;
      else {
        let provides = currentInstance.provides;
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) {
          provides = currentInstance.provides = Object.create(parentProvides);
        }
        provides[key] = value;
      }
    }
    function inject(key, defaultValue, treatDefaultAsFactory = false) {
      const instance = currentInstance || currentRenderingInstance;
      if (instance) {
        const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
        if (provides && key in provides) {
          return provides[key];
        } else if (arguments.length > 1) {
          return treatDefaultAsFactory && isFunction$4(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
        } else
          ;
      }
    }
    function watchPostEffect(effect2, options) {
      return doWatch(effect2, null, { flush: "post" });
    }
    const INITIAL_WATCHER_VALUE = {};
    function watch(source, cb, options) {
      return doWatch(source, cb, options);
    }
    function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
      const instance = currentInstance;
      let getter;
      let forceTrigger = false;
      let isMultiSource = false;
      if (isRef(source)) {
        getter = () => source.value;
        forceTrigger = isShallow(source);
      } else if (isReactive(source)) {
        getter = () => source;
        deep = true;
      } else if (isArray$2(source)) {
        isMultiSource = true;
        forceTrigger = source.some((s) => isReactive(s) || isShallow(s));
        getter = () => source.map((s) => {
          if (isRef(s)) {
            return s.value;
          } else if (isReactive(s)) {
            return traverse(s);
          } else if (isFunction$4(s)) {
            return callWithErrorHandling(
              s,
              instance,
              2
              /* ErrorCodes.WATCH_GETTER */
            );
          } else
            ;
        });
      } else if (isFunction$4(source)) {
        if (cb) {
          getter = () => callWithErrorHandling(
            source,
            instance,
            2
            /* ErrorCodes.WATCH_GETTER */
          );
        } else {
          getter = () => {
            if (instance && instance.isUnmounted) {
              return;
            }
            if (cleanup) {
              cleanup();
            }
            return callWithAsyncErrorHandling(source, instance, 3, [onCleanup]);
          };
        }
      } else {
        getter = NOOP;
      }
      if (cb && deep) {
        const baseGetter = getter;
        getter = () => traverse(baseGetter());
      }
      let cleanup;
      let onCleanup = (fn) => {
        cleanup = effect2.onStop = () => {
          callWithErrorHandling(
            fn,
            instance,
            4
            /* ErrorCodes.WATCH_CLEANUP */
          );
        };
      };
      let ssrCleanup;
      if (isInSSRComponentSetup) {
        onCleanup = NOOP;
        if (!cb) {
          getter();
        } else if (immediate) {
          callWithAsyncErrorHandling(cb, instance, 3, [
            getter(),
            isMultiSource ? [] : void 0,
            onCleanup
          ]);
        }
        if (flush === "sync") {
          const ctx = useSSRContext();
          ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
        } else {
          return NOOP;
        }
      }
      let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
      const job = () => {
        if (!effect2.active) {
          return;
        }
        if (cb) {
          const newValue = effect2.run();
          if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i2) => hasChanged(v, oldValue[i2])) : hasChanged(newValue, oldValue)) || false) {
            if (cleanup) {
              cleanup();
            }
            callWithAsyncErrorHandling(cb, instance, 3, [
              newValue,
              // pass undefined as the old value when it's changed for the first time
              oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
              onCleanup
            ]);
            oldValue = newValue;
          }
        } else {
          effect2.run();
        }
      };
      job.allowRecurse = !!cb;
      let scheduler;
      if (flush === "sync") {
        scheduler = job;
      } else if (flush === "post") {
        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
      } else {
        job.pre = true;
        if (instance)
          job.id = instance.uid;
        scheduler = () => queueJob(job);
      }
      const effect2 = new ReactiveEffect(getter, scheduler);
      if (cb) {
        if (immediate) {
          job();
        } else {
          oldValue = effect2.run();
        }
      } else if (flush === "post") {
        queuePostRenderEffect(effect2.run.bind(effect2), instance && instance.suspense);
      } else {
        effect2.run();
      }
      const unwatch = () => {
        effect2.stop();
        if (instance && instance.scope) {
          remove(instance.scope.effects, effect2);
        }
      };
      if (ssrCleanup)
        ssrCleanup.push(unwatch);
      return unwatch;
    }
    function instanceWatch(source, value, options) {
      const publicThis = this.proxy;
      const getter = isString$2(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
      let cb;
      if (isFunction$4(value)) {
        cb = value;
      } else {
        cb = value.handler;
        options = value;
      }
      const cur = currentInstance;
      setCurrentInstance(this);
      const res = doWatch(getter, cb.bind(publicThis), options);
      if (cur) {
        setCurrentInstance(cur);
      } else {
        unsetCurrentInstance();
      }
      return res;
    }
    function createPathGetter(ctx, path) {
      const segments = path.split(".");
      return () => {
        let cur = ctx;
        for (let i2 = 0; i2 < segments.length && cur; i2++) {
          cur = cur[segments[i2]];
        }
        return cur;
      };
    }
    function traverse(value, seen) {
      if (!isObject$3(value) || value[
        "__v_skip"
        /* ReactiveFlags.SKIP */
      ]) {
        return value;
      }
      seen = seen || /* @__PURE__ */ new Set();
      if (seen.has(value)) {
        return value;
      }
      seen.add(value);
      if (isRef(value)) {
        traverse(value.value, seen);
      } else if (isArray$2(value)) {
        for (let i2 = 0; i2 < value.length; i2++) {
          traverse(value[i2], seen);
        }
      } else if (isSet(value) || isMap(value)) {
        value.forEach((v) => {
          traverse(v, seen);
        });
      } else if (isPlainObject$2(value)) {
        for (const key in value) {
          traverse(value[key], seen);
        }
      }
      return value;
    }
    function useTransitionState() {
      const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: /* @__PURE__ */ new Map()
      };
      onMounted(() => {
        state.isMounted = true;
      });
      onBeforeUnmount(() => {
        state.isUnmounting = true;
      });
      return state;
    }
    const TransitionHookValidator = [Function, Array];
    const BaseTransitionImpl = {
      name: `BaseTransition`,
      props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        // enter
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        // leave
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        // appear
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
      },
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return () => {
          const children = slots.default && getTransitionRawChildren(slots.default(), true);
          if (!children || !children.length) {
            return;
          }
          let child = children[0];
          if (children.length > 1) {
            for (const c of children) {
              if (c.type !== Comment) {
                child = c;
                break;
              }
            }
          }
          const rawProps = toRaw(props);
          const { mode } = rawProps;
          if (state.isLeaving) {
            return emptyPlaceholder(child);
          }
          const innerChild = getKeepAliveChild(child);
          if (!innerChild) {
            return emptyPlaceholder(child);
          }
          const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
          setTransitionHooks(innerChild, enterHooks);
          const oldChild = instance.subTree;
          const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
          let transitionKeyChanged = false;
          const { getTransitionKey } = innerChild.type;
          if (getTransitionKey) {
            const key = getTransitionKey();
            if (prevTransitionKey === void 0) {
              prevTransitionKey = key;
            } else if (key !== prevTransitionKey) {
              prevTransitionKey = key;
              transitionKeyChanged = true;
            }
          }
          if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
            const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
            setTransitionHooks(oldInnerChild, leavingHooks);
            if (mode === "out-in") {
              state.isLeaving = true;
              leavingHooks.afterLeave = () => {
                state.isLeaving = false;
                if (instance.update.active !== false) {
                  instance.update();
                }
              };
              return emptyPlaceholder(child);
            } else if (mode === "in-out" && innerChild.type !== Comment) {
              leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
                const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                el._leaveCb = () => {
                  earlyRemove();
                  el._leaveCb = void 0;
                  delete enterHooks.delayedLeave;
                };
                enterHooks.delayedLeave = delayedLeave;
              };
            }
          }
          return child;
        };
      }
    };
    const BaseTransition = BaseTransitionImpl;
    function getLeavingNodesForType(state, vnode) {
      const { leavingVNodes } = state;
      let leavingVNodesCache = leavingVNodes.get(vnode.type);
      if (!leavingVNodesCache) {
        leavingVNodesCache = /* @__PURE__ */ Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
      }
      return leavingVNodesCache;
    }
    function resolveTransitionHooks(vnode, props, state, instance) {
      const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;
      const key = String(vnode.key);
      const leavingVNodesCache = getLeavingNodesForType(state, vnode);
      const callHook2 = (hook, args) => {
        hook && callWithAsyncErrorHandling(hook, instance, 9, args);
      };
      const callAsyncHook = (hook, args) => {
        const done = args[1];
        callHook2(hook, args);
        if (isArray$2(hook)) {
          if (hook.every((hook2) => hook2.length <= 1))
            done();
        } else if (hook.length <= 1) {
          done();
        }
      };
      const hooks2 = {
        mode,
        persisted,
        beforeEnter(el) {
          let hook = onBeforeEnter;
          if (!state.isMounted) {
            if (appear) {
              hook = onBeforeAppear || onBeforeEnter;
            } else {
              return;
            }
          }
          if (el._leaveCb) {
            el._leaveCb(
              true
              /* cancelled */
            );
          }
          const leavingVNode = leavingVNodesCache[key];
          if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
            leavingVNode.el._leaveCb();
          }
          callHook2(hook, [el]);
        },
        enter(el) {
          let hook = onEnter;
          let afterHook = onAfterEnter;
          let cancelHook = onEnterCancelled;
          if (!state.isMounted) {
            if (appear) {
              hook = onAppear || onEnter;
              afterHook = onAfterAppear || onAfterEnter;
              cancelHook = onAppearCancelled || onEnterCancelled;
            } else {
              return;
            }
          }
          let called = false;
          const done = el._enterCb = (cancelled) => {
            if (called)
              return;
            called = true;
            if (cancelled) {
              callHook2(cancelHook, [el]);
            } else {
              callHook2(afterHook, [el]);
            }
            if (hooks2.delayedLeave) {
              hooks2.delayedLeave();
            }
            el._enterCb = void 0;
          };
          if (hook) {
            callAsyncHook(hook, [el, done]);
          } else {
            done();
          }
        },
        leave(el, remove2) {
          const key2 = String(vnode.key);
          if (el._enterCb) {
            el._enterCb(
              true
              /* cancelled */
            );
          }
          if (state.isUnmounting) {
            return remove2();
          }
          callHook2(onBeforeLeave, [el]);
          let called = false;
          const done = el._leaveCb = (cancelled) => {
            if (called)
              return;
            called = true;
            remove2();
            if (cancelled) {
              callHook2(onLeaveCancelled, [el]);
            } else {
              callHook2(onAfterLeave, [el]);
            }
            el._leaveCb = void 0;
            if (leavingVNodesCache[key2] === vnode) {
              delete leavingVNodesCache[key2];
            }
          };
          leavingVNodesCache[key2] = vnode;
          if (onLeave) {
            callAsyncHook(onLeave, [el, done]);
          } else {
            done();
          }
        },
        clone(vnode2) {
          return resolveTransitionHooks(vnode2, props, state, instance);
        }
      };
      return hooks2;
    }
    function emptyPlaceholder(vnode) {
      if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
      }
    }
    function getKeepAliveChild(vnode) {
      return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
    }
    function setTransitionHooks(vnode, hooks2) {
      if (vnode.shapeFlag & 6 && vnode.component) {
        setTransitionHooks(vnode.component.subTree, hooks2);
      } else if (vnode.shapeFlag & 128) {
        vnode.ssContent.transition = hooks2.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks2.clone(vnode.ssFallback);
      } else {
        vnode.transition = hooks2;
      }
    }
    function getTransitionRawChildren(children, keepComment = false, parentKey) {
      let ret = [];
      let keyedFragmentCount = 0;
      for (let i2 = 0; i2 < children.length; i2++) {
        let child = children[i2];
        const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i2);
        if (child.type === Fragment) {
          if (child.patchFlag & 128)
            keyedFragmentCount++;
          ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));
        } else if (keepComment || child.type !== Comment) {
          ret.push(key != null ? cloneVNode(child, { key }) : child);
        }
      }
      if (keyedFragmentCount > 1) {
        for (let i2 = 0; i2 < ret.length; i2++) {
          ret[i2].patchFlag = -2;
        }
      }
      return ret;
    }
    const isAsyncWrapper = (i2) => !!i2.type.__asyncLoader;
    const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
    function onActivated(hook, target) {
      registerKeepAliveHook(hook, "a", target);
    }
    function onDeactivated(hook, target) {
      registerKeepAliveHook(hook, "da", target);
    }
    function registerKeepAliveHook(hook, type, target = currentInstance) {
      const wrappedHook = hook.__wdc || (hook.__wdc = () => {
        let current = target;
        while (current) {
          if (current.isDeactivated) {
            return;
          }
          current = current.parent;
        }
        return hook();
      });
      injectHook(type, wrappedHook, target);
      if (target) {
        let current = target.parent;
        while (current && current.parent) {
          if (isKeepAlive(current.parent.vnode)) {
            injectToKeepAliveRoot(wrappedHook, type, target, current);
          }
          current = current.parent;
        }
      }
    }
    function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
      const injected = injectHook(
        type,
        hook,
        keepAliveRoot,
        true
        /* prepend */
      );
      onUnmounted(() => {
        remove(keepAliveRoot[type], injected);
      }, target);
    }
    function injectHook(type, hook, target = currentInstance, prepend = false) {
      if (target) {
        const hooks2 = target[type] || (target[type] = []);
        const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
          if (target.isUnmounted) {
            return;
          }
          pauseTracking();
          setCurrentInstance(target);
          const res = callWithAsyncErrorHandling(hook, target, type, args);
          unsetCurrentInstance();
          resetTracking();
          return res;
        });
        if (prepend) {
          hooks2.unshift(wrappedHook);
        } else {
          hooks2.push(wrappedHook);
        }
        return wrappedHook;
      }
    }
    const createHook = (lifecycle) => (hook, target = currentInstance) => (
      // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
      (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, (...args) => hook(...args), target)
    );
    const onBeforeMount = createHook(
      "bm"
      /* LifecycleHooks.BEFORE_MOUNT */
    );
    const onMounted = createHook(
      "m"
      /* LifecycleHooks.MOUNTED */
    );
    const onBeforeUpdate = createHook(
      "bu"
      /* LifecycleHooks.BEFORE_UPDATE */
    );
    const onUpdated = createHook(
      "u"
      /* LifecycleHooks.UPDATED */
    );
    const onBeforeUnmount = createHook(
      "bum"
      /* LifecycleHooks.BEFORE_UNMOUNT */
    );
    const onUnmounted = createHook(
      "um"
      /* LifecycleHooks.UNMOUNTED */
    );
    const onServerPrefetch = createHook(
      "sp"
      /* LifecycleHooks.SERVER_PREFETCH */
    );
    const onRenderTriggered = createHook(
      "rtg"
      /* LifecycleHooks.RENDER_TRIGGERED */
    );
    const onRenderTracked = createHook(
      "rtc"
      /* LifecycleHooks.RENDER_TRACKED */
    );
    function onErrorCaptured(hook, target = currentInstance) {
      injectHook("ec", hook, target);
    }
    function withDirectives(vnode, directives) {
      const internalInstance = currentRenderingInstance;
      if (internalInstance === null) {
        return vnode;
      }
      const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
      const bindings = vnode.dirs || (vnode.dirs = []);
      for (let i2 = 0; i2 < directives.length; i2++) {
        let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i2];
        if (dir) {
          if (isFunction$4(dir)) {
            dir = {
              mounted: dir,
              updated: dir
            };
          }
          if (dir.deep) {
            traverse(value);
          }
          bindings.push({
            dir,
            instance,
            value,
            oldValue: void 0,
            arg,
            modifiers
          });
        }
      }
      return vnode;
    }
    function invokeDirectiveHook(vnode, prevVNode, instance, name) {
      const bindings = vnode.dirs;
      const oldBindings = prevVNode && prevVNode.dirs;
      for (let i2 = 0; i2 < bindings.length; i2++) {
        const binding = bindings[i2];
        if (oldBindings) {
          binding.oldValue = oldBindings[i2].value;
        }
        let hook = binding.dir[name];
        if (hook) {
          pauseTracking();
          callWithAsyncErrorHandling(hook, instance, 8, [
            vnode.el,
            binding,
            vnode,
            prevVNode
          ]);
          resetTracking();
        }
      }
    }
    const COMPONENTS = "components";
    const DIRECTIVES = "directives";
    function resolveComponent(name, maybeSelfReference) {
      return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
    }
    const NULL_DYNAMIC_COMPONENT = Symbol();
    function resolveDynamicComponent(component) {
      if (isString$2(component)) {
        return resolveAsset(COMPONENTS, component, false) || component;
      } else {
        return component || NULL_DYNAMIC_COMPONENT;
      }
    }
    function resolveDirective(name) {
      return resolveAsset(DIRECTIVES, name);
    }
    function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
      const instance = currentRenderingInstance || currentInstance;
      if (instance) {
        const Component = instance.type;
        if (type === COMPONENTS) {
          const selfName = getComponentName(
            Component,
            false
            /* do not include inferred name to avoid breaking existing code */
          );
          if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
            return Component;
          }
        }
        const res = (
          // local registration
          // check instance[type] first which is resolved for options API
          resolve(instance[type] || Component[type], name) || // global registration
          resolve(instance.appContext[type], name)
        );
        if (!res && maybeSelfReference) {
          return Component;
        }
        return res;
      }
    }
    function resolve(registry, name) {
      return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
    }
    function renderList(source, renderItem, cache2, index) {
      let ret;
      const cached = cache2 && cache2[index];
      if (isArray$2(source) || isString$2(source)) {
        ret = new Array(source.length);
        for (let i2 = 0, l = source.length; i2 < l; i2++) {
          ret[i2] = renderItem(source[i2], i2, void 0, cached && cached[i2]);
        }
      } else if (typeof source === "number") {
        ret = new Array(source);
        for (let i2 = 0; i2 < source; i2++) {
          ret[i2] = renderItem(i2 + 1, i2, void 0, cached && cached[i2]);
        }
      } else if (isObject$3(source)) {
        if (source[Symbol.iterator]) {
          ret = Array.from(source, (item, i2) => renderItem(item, i2, void 0, cached && cached[i2]));
        } else {
          const keys2 = Object.keys(source);
          ret = new Array(keys2.length);
          for (let i2 = 0, l = keys2.length; i2 < l; i2++) {
            const key = keys2[i2];
            ret[i2] = renderItem(source[key], key, i2, cached && cached[i2]);
          }
        }
      } else {
        ret = [];
      }
      if (cache2) {
        cache2[index] = ret;
      }
      return ret;
    }
    function createSlots(slots, dynamicSlots) {
      for (let i2 = 0; i2 < dynamicSlots.length; i2++) {
        const slot = dynamicSlots[i2];
        if (isArray$2(slot)) {
          for (let j = 0; j < slot.length; j++) {
            slots[slot[j].name] = slot[j].fn;
          }
        } else if (slot) {
          slots[slot.name] = slot.key ? (...args) => {
            const res = slot.fn(...args);
            if (res)
              res.key = slot.key;
            return res;
          } : slot.fn;
        }
      }
      return slots;
    }
    function renderSlot(slots, name, props = {}, fallback, noSlotted) {
      if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
        if (name !== "default")
          props.name = name;
        return createVNode("slot", props, fallback && fallback());
      }
      let slot = slots[name];
      if (slot && slot._c) {
        slot._d = false;
      }
      openBlock();
      const validSlotContent = slot && ensureValidVNode(slot(props));
      const rendered = createBlock(
        Fragment,
        {
          key: props.key || // slot content array of a dynamic conditional slot may have a branch
          // key attached in the `createSlots` helper, respect that
          validSlotContent && validSlotContent.key || `_${name}`
        },
        validSlotContent || (fallback ? fallback() : []),
        validSlotContent && slots._ === 1 ? 64 : -2
        /* PatchFlags.BAIL */
      );
      if (!noSlotted && rendered.scopeId) {
        rendered.slotScopeIds = [rendered.scopeId + "-s"];
      }
      if (slot && slot._c) {
        slot._d = true;
      }
      return rendered;
    }
    function ensureValidVNode(vnodes) {
      return vnodes.some((child) => {
        if (!isVNode(child))
          return true;
        if (child.type === Comment)
          return false;
        if (child.type === Fragment && !ensureValidVNode(child.children))
          return false;
        return true;
      }) ? vnodes : null;
    }
    function toHandlers(obj, preserveCaseIfNecessary) {
      const ret = {};
      for (const key in obj) {
        ret[preserveCaseIfNecessary && /[A-Z]/.test(key) ? `on:${key}` : toHandlerKey(key)] = obj[key];
      }
      return ret;
    }
    const getPublicInstance = (i2) => {
      if (!i2)
        return null;
      if (isStatefulComponent(i2))
        return getExposeProxy(i2) || i2.proxy;
      return getPublicInstance(i2.parent);
    };
    const publicPropertiesMap = (
      // Move PURE marker to new line to workaround compiler discarding it
      // due to type annotation
      /* @__PURE__ */ extend$2(/* @__PURE__ */ Object.create(null), {
        $: (i2) => i2,
        $el: (i2) => i2.vnode.el,
        $data: (i2) => i2.data,
        $props: (i2) => i2.props,
        $attrs: (i2) => i2.attrs,
        $slots: (i2) => i2.slots,
        $refs: (i2) => i2.refs,
        $parent: (i2) => getPublicInstance(i2.parent),
        $root: (i2) => getPublicInstance(i2.root),
        $emit: (i2) => i2.emit,
        $options: (i2) => resolveMergedOptions(i2),
        $forceUpdate: (i2) => i2.f || (i2.f = () => queueJob(i2.update)),
        $nextTick: (i2) => i2.n || (i2.n = nextTick.bind(i2.proxy)),
        $watch: (i2) => instanceWatch.bind(i2)
      })
    );
    const hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn(state, key);
    const PublicInstanceProxyHandlers = {
      get({ _: instance }, key) {
        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
        let normalizedProps;
        if (key[0] !== "$") {
          const n = accessCache[key];
          if (n !== void 0) {
            switch (n) {
              case 1:
                return setupState[key];
              case 2:
                return data[key];
              case 4:
                return ctx[key];
              case 3:
                return props[key];
            }
          } else if (hasSetupBinding(setupState, key)) {
            accessCache[key] = 1;
            return setupState[key];
          } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
            accessCache[key] = 2;
            return data[key];
          } else if (
            // only cache other properties when instance has declared (thus stable)
            // props
            (normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)
          ) {
            accessCache[key] = 3;
            return props[key];
          } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
            accessCache[key] = 4;
            return ctx[key];
          } else if (shouldCacheAccess) {
            accessCache[key] = 0;
          }
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        if (publicGetter) {
          if (key === "$attrs") {
            track(instance, "get", key);
          }
          return publicGetter(instance);
        } else if (
          // css module (injected by vue-loader)
          (cssModule = type.__cssModules) && (cssModule = cssModule[key])
        ) {
          return cssModule;
        } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
          accessCache[key] = 4;
          return ctx[key];
        } else if (
          // global properties
          globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)
        ) {
          {
            return globalProperties[key];
          }
        } else
          ;
      },
      set({ _: instance }, key, value) {
        const { data, setupState, ctx } = instance;
        if (hasSetupBinding(setupState, key)) {
          setupState[key] = value;
          return true;
        } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
          data[key] = value;
          return true;
        } else if (hasOwn(instance.props, key)) {
          return false;
        }
        if (key[0] === "$" && key.slice(1) in instance) {
          return false;
        } else {
          {
            ctx[key] = value;
          }
        }
        return true;
      },
      has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
        let normalizedProps;
        return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
      },
      defineProperty(target, key, descriptor) {
        if (descriptor.get != null) {
          target._.accessCache[key] = 0;
        } else if (hasOwn(descriptor, "value")) {
          this.set(target, key, descriptor.value, null);
        }
        return Reflect.defineProperty(target, key, descriptor);
      }
    };
    let shouldCacheAccess = true;
    function applyOptions(instance) {
      const options = resolveMergedOptions(instance);
      const publicThis = instance.proxy;
      const ctx = instance.ctx;
      shouldCacheAccess = false;
      if (options.beforeCreate) {
        callHook$1(
          options.beforeCreate,
          instance,
          "bc"
          /* LifecycleHooks.BEFORE_CREATE */
        );
      }
      const {
        // state
        data: dataOptions,
        computed: computedOptions,
        methods,
        watch: watchOptions,
        provide: provideOptions,
        inject: injectOptions,
        // lifecycle
        created,
        beforeMount,
        mounted,
        beforeUpdate,
        updated,
        activated,
        deactivated,
        beforeDestroy,
        beforeUnmount,
        destroyed,
        unmounted,
        render,
        renderTracked,
        renderTriggered,
        errorCaptured,
        serverPrefetch,
        // public API
        expose,
        inheritAttrs,
        // assets
        components,
        directives,
        filters
      } = options;
      const checkDuplicateProperties = null;
      if (injectOptions) {
        resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
      }
      if (methods) {
        for (const key in methods) {
          const methodHandler = methods[key];
          if (isFunction$4(methodHandler)) {
            {
              ctx[key] = methodHandler.bind(publicThis);
            }
          }
        }
      }
      if (dataOptions) {
        const data = dataOptions.call(publicThis, publicThis);
        if (!isObject$3(data))
          ;
        else {
          instance.data = reactive(data);
        }
      }
      shouldCacheAccess = true;
      if (computedOptions) {
        for (const key in computedOptions) {
          const opt = computedOptions[key];
          const get2 = isFunction$4(opt) ? opt.bind(publicThis, publicThis) : isFunction$4(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
          const set2 = !isFunction$4(opt) && isFunction$4(opt.set) ? opt.set.bind(publicThis) : NOOP;
          const c = computed({
            get: get2,
            set: set2
          });
          Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: () => c.value,
            set: (v) => c.value = v
          });
        }
      }
      if (watchOptions) {
        for (const key in watchOptions) {
          createWatcher(watchOptions[key], ctx, publicThis, key);
        }
      }
      if (provideOptions) {
        const provides = isFunction$4(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
        Reflect.ownKeys(provides).forEach((key) => {
          provide(key, provides[key]);
        });
      }
      if (created) {
        callHook$1(
          created,
          instance,
          "c"
          /* LifecycleHooks.CREATED */
        );
      }
      function registerLifecycleHook(register, hook) {
        if (isArray$2(hook)) {
          hook.forEach((_hook) => register(_hook.bind(publicThis)));
        } else if (hook) {
          register(hook.bind(publicThis));
        }
      }
      registerLifecycleHook(onBeforeMount, beforeMount);
      registerLifecycleHook(onMounted, mounted);
      registerLifecycleHook(onBeforeUpdate, beforeUpdate);
      registerLifecycleHook(onUpdated, updated);
      registerLifecycleHook(onActivated, activated);
      registerLifecycleHook(onDeactivated, deactivated);
      registerLifecycleHook(onErrorCaptured, errorCaptured);
      registerLifecycleHook(onRenderTracked, renderTracked);
      registerLifecycleHook(onRenderTriggered, renderTriggered);
      registerLifecycleHook(onBeforeUnmount, beforeUnmount);
      registerLifecycleHook(onUnmounted, unmounted);
      registerLifecycleHook(onServerPrefetch, serverPrefetch);
      if (isArray$2(expose)) {
        if (expose.length) {
          const exposed = instance.exposed || (instance.exposed = {});
          expose.forEach((key) => {
            Object.defineProperty(exposed, key, {
              get: () => publicThis[key],
              set: (val) => publicThis[key] = val
            });
          });
        } else if (!instance.exposed) {
          instance.exposed = {};
        }
      }
      if (render && instance.render === NOOP) {
        instance.render = render;
      }
      if (inheritAttrs != null) {
        instance.inheritAttrs = inheritAttrs;
      }
      if (components)
        instance.components = components;
      if (directives)
        instance.directives = directives;
    }
    function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {
      if (isArray$2(injectOptions)) {
        injectOptions = normalizeInject(injectOptions);
      }
      for (const key in injectOptions) {
        const opt = injectOptions[key];
        let injected;
        if (isObject$3(opt)) {
          if ("default" in opt) {
            injected = inject(
              opt.from || key,
              opt.default,
              true
              /* treat default function as factory */
            );
          } else {
            injected = inject(opt.from || key);
          }
        } else {
          injected = inject(opt);
        }
        if (isRef(injected)) {
          if (unwrapRef) {
            Object.defineProperty(ctx, key, {
              enumerable: true,
              configurable: true,
              get: () => injected.value,
              set: (v) => injected.value = v
            });
          } else {
            ctx[key] = injected;
          }
        } else {
          ctx[key] = injected;
        }
      }
    }
    function callHook$1(hook, instance, type) {
      callWithAsyncErrorHandling(isArray$2(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
    }
    function createWatcher(raw, ctx, publicThis, key) {
      const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
      if (isString$2(raw)) {
        const handler = ctx[raw];
        if (isFunction$4(handler)) {
          watch(getter, handler);
        }
      } else if (isFunction$4(raw)) {
        watch(getter, raw.bind(publicThis));
      } else if (isObject$3(raw)) {
        if (isArray$2(raw)) {
          raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
        } else {
          const handler = isFunction$4(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
          if (isFunction$4(handler)) {
            watch(getter, handler, raw);
          }
        }
      } else
        ;
    }
    function resolveMergedOptions(instance) {
      const base = instance.type;
      const { mixins, extends: extendsOptions } = base;
      const { mixins: globalMixins, optionsCache: cache2, config: { optionMergeStrategies } } = instance.appContext;
      const cached = cache2.get(base);
      let resolved;
      if (cached) {
        resolved = cached;
      } else if (!globalMixins.length && !mixins && !extendsOptions) {
        {
          resolved = base;
        }
      } else {
        resolved = {};
        if (globalMixins.length) {
          globalMixins.forEach((m) => mergeOptions(resolved, m, optionMergeStrategies, true));
        }
        mergeOptions(resolved, base, optionMergeStrategies);
      }
      if (isObject$3(base)) {
        cache2.set(base, resolved);
      }
      return resolved;
    }
    function mergeOptions(to2, from2, strats, asMixin = false) {
      const { mixins, extends: extendsOptions } = from2;
      if (extendsOptions) {
        mergeOptions(to2, extendsOptions, strats, true);
      }
      if (mixins) {
        mixins.forEach((m) => mergeOptions(to2, m, strats, true));
      }
      for (const key in from2) {
        if (asMixin && key === "expose")
          ;
        else {
          const strat = internalOptionMergeStrats[key] || strats && strats[key];
          to2[key] = strat ? strat(to2[key], from2[key]) : from2[key];
        }
      }
      return to2;
    }
    const internalOptionMergeStrats = {
      data: mergeDataFn,
      props: mergeObjectOptions,
      emits: mergeObjectOptions,
      // objects
      methods: mergeObjectOptions,
      computed: mergeObjectOptions,
      // lifecycle
      beforeCreate: mergeAsArray,
      created: mergeAsArray,
      beforeMount: mergeAsArray,
      mounted: mergeAsArray,
      beforeUpdate: mergeAsArray,
      updated: mergeAsArray,
      beforeDestroy: mergeAsArray,
      beforeUnmount: mergeAsArray,
      destroyed: mergeAsArray,
      unmounted: mergeAsArray,
      activated: mergeAsArray,
      deactivated: mergeAsArray,
      errorCaptured: mergeAsArray,
      serverPrefetch: mergeAsArray,
      // assets
      components: mergeObjectOptions,
      directives: mergeObjectOptions,
      // watch
      watch: mergeWatchOptions,
      // provide / inject
      provide: mergeDataFn,
      inject: mergeInject
    };
    function mergeDataFn(to2, from2) {
      if (!from2) {
        return to2;
      }
      if (!to2) {
        return from2;
      }
      return function mergedDataFn() {
        return extend$2(isFunction$4(to2) ? to2.call(this, this) : to2, isFunction$4(from2) ? from2.call(this, this) : from2);
      };
    }
    function mergeInject(to2, from2) {
      return mergeObjectOptions(normalizeInject(to2), normalizeInject(from2));
    }
    function normalizeInject(raw) {
      if (isArray$2(raw)) {
        const res = {};
        for (let i2 = 0; i2 < raw.length; i2++) {
          res[raw[i2]] = raw[i2];
        }
        return res;
      }
      return raw;
    }
    function mergeAsArray(to2, from2) {
      return to2 ? [...new Set([].concat(to2, from2))] : from2;
    }
    function mergeObjectOptions(to2, from2) {
      return to2 ? extend$2(extend$2(/* @__PURE__ */ Object.create(null), to2), from2) : from2;
    }
    function mergeWatchOptions(to2, from2) {
      if (!to2)
        return from2;
      if (!from2)
        return to2;
      const merged = extend$2(/* @__PURE__ */ Object.create(null), to2);
      for (const key in from2) {
        merged[key] = mergeAsArray(to2[key], from2[key]);
      }
      return merged;
    }
    function initProps(instance, rawProps, isStateful, isSSR = false) {
      const props = {};
      const attrs = {};
      def(attrs, InternalObjectKey, 1);
      instance.propsDefaults = /* @__PURE__ */ Object.create(null);
      setFullProps(instance, rawProps, props, attrs);
      for (const key in instance.propsOptions[0]) {
        if (!(key in props)) {
          props[key] = void 0;
        }
      }
      if (isStateful) {
        instance.props = isSSR ? props : shallowReactive(props);
      } else {
        if (!instance.type.props) {
          instance.props = attrs;
        } else {
          instance.props = props;
        }
      }
      instance.attrs = attrs;
    }
    function updateProps(instance, rawProps, rawPrevProps, optimized) {
      const { props, attrs, vnode: { patchFlag } } = instance;
      const rawCurrentProps = toRaw(props);
      const [options] = instance.propsOptions;
      let hasAttrsChanged = false;
      if (
        // always force full diff in dev
        // - #1942 if hmr is enabled with sfc component
        // - vite#872 non-sfc component used by sfc component
        (optimized || patchFlag > 0) && !(patchFlag & 16)
      ) {
        if (patchFlag & 8) {
          const propsToUpdate = instance.vnode.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            let key = propsToUpdate[i2];
            if (isEmitListener(instance.emitsOptions, key)) {
              continue;
            }
            const value = rawProps[key];
            if (options) {
              if (hasOwn(attrs, key)) {
                if (value !== attrs[key]) {
                  attrs[key] = value;
                  hasAttrsChanged = true;
                }
              } else {
                const camelizedKey = camelize(key);
                props[camelizedKey] = resolvePropValue(
                  options,
                  rawCurrentProps,
                  camelizedKey,
                  value,
                  instance,
                  false
                  /* isAbsent */
                );
              }
            } else {
              if (value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
              }
            }
          }
        }
      } else {
        if (setFullProps(instance, rawProps, props, attrs)) {
          hasAttrsChanged = true;
        }
        let kebabKey;
        for (const key in rawCurrentProps) {
          if (!rawProps || // for camelCase
          !hasOwn(rawProps, key) && // it's possible the original props was passed in as kebab-case
          // and converted to camelCase (#955)
          ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
            if (options) {
              if (rawPrevProps && // for camelCase
              (rawPrevProps[key] !== void 0 || // for kebab-case
              rawPrevProps[kebabKey] !== void 0)) {
                props[key] = resolvePropValue(
                  options,
                  rawCurrentProps,
                  key,
                  void 0,
                  instance,
                  true
                  /* isAbsent */
                );
              }
            } else {
              delete props[key];
            }
          }
        }
        if (attrs !== rawCurrentProps) {
          for (const key in attrs) {
            if (!rawProps || !hasOwn(rawProps, key) && true) {
              delete attrs[key];
              hasAttrsChanged = true;
            }
          }
        }
      }
      if (hasAttrsChanged) {
        trigger(instance, "set", "$attrs");
      }
    }
    function setFullProps(instance, rawProps, props, attrs) {
      const [options, needCastKeys] = instance.propsOptions;
      let hasAttrsChanged = false;
      let rawCastValues;
      if (rawProps) {
        for (let key in rawProps) {
          if (isReservedProp(key)) {
            continue;
          }
          const value = rawProps[key];
          let camelKey;
          if (options && hasOwn(options, camelKey = camelize(key))) {
            if (!needCastKeys || !needCastKeys.includes(camelKey)) {
              props[camelKey] = value;
            } else {
              (rawCastValues || (rawCastValues = {}))[camelKey] = value;
            }
          } else if (!isEmitListener(instance.emitsOptions, key)) {
            if (!(key in attrs) || value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          }
        }
      }
      if (needCastKeys) {
        const rawCurrentProps = toRaw(props);
        const castValues = rawCastValues || EMPTY_OBJ;
        for (let i2 = 0; i2 < needCastKeys.length; i2++) {
          const key = needCastKeys[i2];
          props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));
        }
      }
      return hasAttrsChanged;
    }
    function resolvePropValue(options, props, key, value, instance, isAbsent) {
      const opt = options[key];
      if (opt != null) {
        const hasDefault = hasOwn(opt, "default");
        if (hasDefault && value === void 0) {
          const defaultValue = opt.default;
          if (opt.type !== Function && isFunction$4(defaultValue)) {
            const { propsDefaults } = instance;
            if (key in propsDefaults) {
              value = propsDefaults[key];
            } else {
              setCurrentInstance(instance);
              value = propsDefaults[key] = defaultValue.call(null, props);
              unsetCurrentInstance();
            }
          } else {
            value = defaultValue;
          }
        }
        if (opt[
          0
          /* BooleanFlags.shouldCast */
        ]) {
          if (isAbsent && !hasDefault) {
            value = false;
          } else if (opt[
            1
            /* BooleanFlags.shouldCastTrue */
          ] && (value === "" || value === hyphenate(key))) {
            value = true;
          }
        }
      }
      return value;
    }
    function normalizePropsOptions(comp, appContext, asMixin = false) {
      const cache2 = appContext.propsCache;
      const cached = cache2.get(comp);
      if (cached) {
        return cached;
      }
      const raw = comp.props;
      const normalized = {};
      const needCastKeys = [];
      let hasExtends = false;
      if (!isFunction$4(comp)) {
        const extendProps = (raw2) => {
          hasExtends = true;
          const [props, keys2] = normalizePropsOptions(raw2, appContext, true);
          extend$2(normalized, props);
          if (keys2)
            needCastKeys.push(...keys2);
        };
        if (!asMixin && appContext.mixins.length) {
          appContext.mixins.forEach(extendProps);
        }
        if (comp.extends) {
          extendProps(comp.extends);
        }
        if (comp.mixins) {
          comp.mixins.forEach(extendProps);
        }
      }
      if (!raw && !hasExtends) {
        if (isObject$3(comp)) {
          cache2.set(comp, EMPTY_ARR);
        }
        return EMPTY_ARR;
      }
      if (isArray$2(raw)) {
        for (let i2 = 0; i2 < raw.length; i2++) {
          const normalizedKey = camelize(raw[i2]);
          if (validatePropName(normalizedKey)) {
            normalized[normalizedKey] = EMPTY_OBJ;
          }
        }
      } else if (raw) {
        for (const key in raw) {
          const normalizedKey = camelize(key);
          if (validatePropName(normalizedKey)) {
            const opt = raw[key];
            const prop = normalized[normalizedKey] = isArray$2(opt) || isFunction$4(opt) ? { type: opt } : Object.assign({}, opt);
            if (prop) {
              const booleanIndex = getTypeIndex(Boolean, prop.type);
              const stringIndex = getTypeIndex(String, prop.type);
              prop[
                0
                /* BooleanFlags.shouldCast */
              ] = booleanIndex > -1;
              prop[
                1
                /* BooleanFlags.shouldCastTrue */
              ] = stringIndex < 0 || booleanIndex < stringIndex;
              if (booleanIndex > -1 || hasOwn(prop, "default")) {
                needCastKeys.push(normalizedKey);
              }
            }
          }
        }
      }
      const res = [normalized, needCastKeys];
      if (isObject$3(comp)) {
        cache2.set(comp, res);
      }
      return res;
    }
    function validatePropName(key) {
      if (key[0] !== "$") {
        return true;
      }
      return false;
    }
    function getType(ctor) {
      const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
      return match ? match[1] : ctor === null ? "null" : "";
    }
    function isSameType(a, b) {
      return getType(a) === getType(b);
    }
    function getTypeIndex(type, expectedTypes) {
      if (isArray$2(expectedTypes)) {
        return expectedTypes.findIndex((t) => isSameType(t, type));
      } else if (isFunction$4(expectedTypes)) {
        return isSameType(expectedTypes, type) ? 0 : -1;
      }
      return -1;
    }
    const isInternalKey = (key) => key[0] === "_" || key === "$stable";
    const normalizeSlotValue = (value) => isArray$2(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
    const normalizeSlot = (key, rawSlot, ctx) => {
      if (rawSlot._n) {
        return rawSlot;
      }
      const normalized = withCtx((...args) => {
        if (false)
          ;
        return normalizeSlotValue(rawSlot(...args));
      }, ctx);
      normalized._c = false;
      return normalized;
    };
    const normalizeObjectSlots = (rawSlots, slots, instance) => {
      const ctx = rawSlots._ctx;
      for (const key in rawSlots) {
        if (isInternalKey(key))
          continue;
        const value = rawSlots[key];
        if (isFunction$4(value)) {
          slots[key] = normalizeSlot(key, value, ctx);
        } else if (value != null) {
          const normalized = normalizeSlotValue(value);
          slots[key] = () => normalized;
        }
      }
    };
    const normalizeVNodeSlots = (instance, children) => {
      const normalized = normalizeSlotValue(children);
      instance.slots.default = () => normalized;
    };
    const initSlots = (instance, children) => {
      if (instance.vnode.shapeFlag & 32) {
        const type = children._;
        if (type) {
          instance.slots = toRaw(children);
          def(children, "_", type);
        } else {
          normalizeObjectSlots(children, instance.slots = {});
        }
      } else {
        instance.slots = {};
        if (children) {
          normalizeVNodeSlots(instance, children);
        }
      }
      def(instance.slots, InternalObjectKey, 1);
    };
    const updateSlots = (instance, children, optimized) => {
      const { vnode, slots } = instance;
      let needDeletionCheck = true;
      let deletionComparisonTarget = EMPTY_OBJ;
      if (vnode.shapeFlag & 32) {
        const type = children._;
        if (type) {
          if (optimized && type === 1) {
            needDeletionCheck = false;
          } else {
            extend$2(slots, children);
            if (!optimized && type === 1) {
              delete slots._;
            }
          }
        } else {
          needDeletionCheck = !children.$stable;
          normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
      } else if (children) {
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = { default: 1 };
      }
      if (needDeletionCheck) {
        for (const key in slots) {
          if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
            delete slots[key];
          }
        }
      }
    };
    function createAppContext() {
      return {
        app: null,
        config: {
          isNativeTag: NO,
          performance: false,
          globalProperties: {},
          optionMergeStrategies: {},
          errorHandler: void 0,
          warnHandler: void 0,
          compilerOptions: {}
        },
        mixins: [],
        components: {},
        directives: {},
        provides: /* @__PURE__ */ Object.create(null),
        optionsCache: /* @__PURE__ */ new WeakMap(),
        propsCache: /* @__PURE__ */ new WeakMap(),
        emitsCache: /* @__PURE__ */ new WeakMap()
      };
    }
    let uid$1 = 0;
    function createAppAPI(render, hydrate) {
      return function createApp2(rootComponent, rootProps = null) {
        if (!isFunction$4(rootComponent)) {
          rootComponent = Object.assign({}, rootComponent);
        }
        if (rootProps != null && !isObject$3(rootProps)) {
          rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = /* @__PURE__ */ new Set();
        let isMounted = false;
        const app = context.app = {
          _uid: uid$1++,
          _component: rootComponent,
          _props: rootProps,
          _container: null,
          _context: context,
          _instance: null,
          version,
          get config() {
            return context.config;
          },
          set config(v) {
          },
          use(plugin, ...options) {
            if (installedPlugins.has(plugin))
              ;
            else if (plugin && isFunction$4(plugin.install)) {
              installedPlugins.add(plugin);
              plugin.install(app, ...options);
            } else if (isFunction$4(plugin)) {
              installedPlugins.add(plugin);
              plugin(app, ...options);
            } else
              ;
            return app;
          },
          mixin(mixin) {
            {
              if (!context.mixins.includes(mixin)) {
                context.mixins.push(mixin);
              }
            }
            return app;
          },
          component(name, component) {
            if (!component) {
              return context.components[name];
            }
            context.components[name] = component;
            return app;
          },
          directive(name, directive) {
            if (!directive) {
              return context.directives[name];
            }
            context.directives[name] = directive;
            return app;
          },
          mount(rootContainer, isHydrate, isSVG) {
            if (!isMounted) {
              const vnode = createVNode(rootComponent, rootProps);
              vnode.appContext = context;
              if (isHydrate && hydrate) {
                hydrate(vnode, rootContainer);
              } else {
                render(vnode, rootContainer, isSVG);
              }
              isMounted = true;
              app._container = rootContainer;
              rootContainer.__vue_app__ = app;
              return getExposeProxy(vnode.component) || vnode.component.proxy;
            }
          },
          unmount() {
            if (isMounted) {
              render(null, app._container);
              delete app._container.__vue_app__;
            }
          },
          provide(key, value) {
            context.provides[key] = value;
            return app;
          }
        };
        return app;
      };
    }
    function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
      if (isArray$2(rawRef)) {
        rawRef.forEach((r, i2) => setRef(r, oldRawRef && (isArray$2(oldRawRef) ? oldRawRef[i2] : oldRawRef), parentSuspense, vnode, isUnmount));
        return;
      }
      if (isAsyncWrapper(vnode) && !isUnmount) {
        return;
      }
      const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
      const value = isUnmount ? null : refValue;
      const { i: owner, r: ref2 } = rawRef;
      const oldRef = oldRawRef && oldRawRef.r;
      const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
      const setupState = owner.setupState;
      if (oldRef != null && oldRef !== ref2) {
        if (isString$2(oldRef)) {
          refs[oldRef] = null;
          if (hasOwn(setupState, oldRef)) {
            setupState[oldRef] = null;
          }
        } else if (isRef(oldRef)) {
          oldRef.value = null;
        }
      }
      if (isFunction$4(ref2)) {
        callWithErrorHandling(ref2, owner, 12, [value, refs]);
      } else {
        const _isString2 = isString$2(ref2);
        const _isRef = isRef(ref2);
        if (_isString2 || _isRef) {
          const doSet = () => {
            if (rawRef.f) {
              const existing = _isString2 ? hasOwn(setupState, ref2) ? setupState[ref2] : refs[ref2] : ref2.value;
              if (isUnmount) {
                isArray$2(existing) && remove(existing, refValue);
              } else {
                if (!isArray$2(existing)) {
                  if (_isString2) {
                    refs[ref2] = [refValue];
                    if (hasOwn(setupState, ref2)) {
                      setupState[ref2] = refs[ref2];
                    }
                  } else {
                    ref2.value = [refValue];
                    if (rawRef.k)
                      refs[rawRef.k] = ref2.value;
                  }
                } else if (!existing.includes(refValue)) {
                  existing.push(refValue);
                }
              }
            } else if (_isString2) {
              refs[ref2] = value;
              if (hasOwn(setupState, ref2)) {
                setupState[ref2] = value;
              }
            } else if (_isRef) {
              ref2.value = value;
              if (rawRef.k)
                refs[rawRef.k] = value;
            } else
              ;
          };
          if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
          } else {
            doSet();
          }
        }
      }
    }
    const queuePostRenderEffect = queueEffectWithSuspense;
    function createRenderer(options) {
      return baseCreateRenderer(options);
    }
    function baseCreateRenderer(options, createHydrationFns) {
      const target = getGlobalThis();
      target.__VUE__ = true;
      const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, insertStaticContent: hostInsertStaticContent } = options;
      const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
        if (n1 === n2) {
          return;
        }
        if (n1 && !isSameVNodeType(n1, n2)) {
          anchor = getNextHostNode(n1);
          unmount(n1, parentComponent, parentSuspense, true);
          n1 = null;
        }
        if (n2.patchFlag === -2) {
          optimized = false;
          n2.dynamicChildren = null;
        }
        const { type, ref: ref2, shapeFlag } = n2;
        switch (type) {
          case Text:
            processText(n1, n2, container, anchor);
            break;
          case Comment:
            processCommentNode(n1, n2, container, anchor);
            break;
          case Static:
            if (n1 == null) {
              mountStaticNode(n2, container, anchor, isSVG);
            }
            break;
          case Fragment:
            processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            break;
          default:
            if (shapeFlag & 1) {
              processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else if (shapeFlag & 6) {
              processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else if (shapeFlag & 64) {
              type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
            } else if (shapeFlag & 128) {
              type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
            } else
              ;
        }
        if (ref2 != null && parentComponent) {
          setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
        }
      };
      const processText = (n1, n2, container, anchor) => {
        if (n1 == null) {
          hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
        } else {
          const el = n2.el = n1.el;
          if (n2.children !== n1.children) {
            hostSetText(el, n2.children);
          }
        }
      };
      const processCommentNode = (n1, n2, container, anchor) => {
        if (n1 == null) {
          hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
        } else {
          n2.el = n1.el;
        }
      };
      const mountStaticNode = (n2, container, anchor, isSVG) => {
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
      };
      const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
        let next;
        while (el && el !== anchor) {
          next = hostNextSibling(el);
          hostInsert(el, container, nextSibling);
          el = next;
        }
        hostInsert(anchor, container, nextSibling);
      };
      const removeStaticNode = ({ el, anchor }) => {
        let next;
        while (el && el !== anchor) {
          next = hostNextSibling(el);
          hostRemove(el);
          el = next;
        }
        hostRemove(anchor);
      };
      const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        isSVG = isSVG || n2.type === "svg";
        if (n1 == null) {
          mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      };
      const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        let el;
        let vnodeHook;
        const { type, props, shapeFlag, transition, dirs } = vnode;
        el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
        if (shapeFlag & 8) {
          hostSetElementText(el, vnode.children);
        } else if (shapeFlag & 16) {
          mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
        }
        if (dirs) {
          invokeDirectiveHook(vnode, null, parentComponent, "created");
        }
        if (props) {
          for (const key in props) {
            if (key !== "value" && !isReservedProp(key)) {
              hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
          if ("value" in props) {
            hostPatchProp(el, "value", null, props.value);
          }
          if (vnodeHook = props.onVnodeBeforeMount) {
            invokeVNodeHook(vnodeHook, parentComponent, vnode);
          }
        }
        setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        if (dirs) {
          invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
        }
        const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
        if (needCallTransitionHooks) {
          transition.beforeEnter(el);
        }
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
          queuePostRenderEffect(() => {
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            needCallTransitionHooks && transition.enter(el);
            dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
          }, parentSuspense);
        }
      };
      const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
        if (scopeId) {
          hostSetScopeId(el, scopeId);
        }
        if (slotScopeIds) {
          for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
            hostSetScopeId(el, slotScopeIds[i2]);
          }
        }
        if (parentComponent) {
          let subTree = parentComponent.subTree;
          if (vnode === subTree) {
            const parentVNode = parentComponent.vnode;
            setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
          }
        }
      };
      const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start2 = 0) => {
        for (let i2 = start2; i2 < children.length; i2++) {
          const child = children[i2] = optimized ? cloneIfMounted(children[i2]) : normalizeVNode(children[i2]);
          patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      };
      const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        const el = n2.el = n1.el;
        let { patchFlag, dynamicChildren, dirs } = n2;
        patchFlag |= n1.patchFlag & 16;
        const oldProps = n1.props || EMPTY_OBJ;
        const newProps = n2.props || EMPTY_OBJ;
        let vnodeHook;
        parentComponent && toggleRecurse(parentComponent, false);
        if (vnodeHook = newProps.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        }
        if (dirs) {
          invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
        }
        parentComponent && toggleRecurse(parentComponent, true);
        const areChildrenSVG = isSVG && n2.type !== "foreignObject";
        if (dynamicChildren) {
          patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
        } else if (!optimized) {
          patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
        }
        if (patchFlag > 0) {
          if (patchFlag & 16) {
            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
          } else {
            if (patchFlag & 2) {
              if (oldProps.class !== newProps.class) {
                hostPatchProp(el, "class", null, newProps.class, isSVG);
              }
            }
            if (patchFlag & 4) {
              hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
            }
            if (patchFlag & 8) {
              const propsToUpdate = n2.dynamicProps;
              for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
                const key = propsToUpdate[i2];
                const prev = oldProps[key];
                const next = newProps[key];
                if (next !== prev || key === "value") {
                  hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
                }
              }
            }
          }
          if (patchFlag & 1) {
            if (n1.children !== n2.children) {
              hostSetElementText(el, n2.children);
            }
          }
        } else if (!optimized && dynamicChildren == null) {
          patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
        }
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
          queuePostRenderEffect(() => {
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
            dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
          }, parentSuspense);
        }
      };
      const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
        for (let i2 = 0; i2 < newChildren.length; i2++) {
          const oldVNode = oldChildren[i2];
          const newVNode = newChildren[i2];
          const container = (
            // oldVNode may be an errored async setup() component inside Suspense
            // which will not have a mounted element
            oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
            // of the Fragment itself so it can move its children.
            (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
            // which also requires the correct parent container
            !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
            oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
              // In other cases, the parent container is not actually used so we
              // just pass the block element here to avoid a DOM parentNode call.
              fallbackContainer
            )
          );
          patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
        }
      };
      const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
        if (oldProps !== newProps) {
          if (oldProps !== EMPTY_OBJ) {
            for (const key in oldProps) {
              if (!isReservedProp(key) && !(key in newProps)) {
                hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
              }
            }
          }
          for (const key in newProps) {
            if (isReservedProp(key))
              continue;
            const next = newProps[key];
            const prev = oldProps[key];
            if (next !== prev && key !== "value") {
              hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
          if ("value" in newProps) {
            hostPatchProp(el, "value", oldProps.value, newProps.value);
          }
        }
      };
      const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
        const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
        let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
        if (fragmentSlotScopeIds) {
          slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        }
        if (n1 == null) {
          hostInsert(fragmentStartAnchor, container, anchor);
          hostInsert(fragmentEndAnchor, container, anchor);
          mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
          // of renderSlot() with no valid children
          n1.dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
            if (
              // #2080 if the stable fragment has a key, it's a <template v-for> that may
              //  get moved around. Make sure all root level vnodes inherit el.
              // #2134 or if it's a component root, it may also get moved around
              // as the component is being moved.
              n2.key != null || parentComponent && n2 === parentComponent.subTree
            ) {
              traverseStaticChildren(
                n1,
                n2,
                true
                /* shallow */
              );
            }
          } else {
            patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          }
        }
      };
      const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
          if (n2.shapeFlag & 512) {
            parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
          } else {
            mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
          }
        } else {
          updateComponent(n1, n2, optimized);
        }
      };
      const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
        const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
        if (isKeepAlive(initialVNode)) {
          instance.ctx.renderer = internals;
        }
        {
          setupComponent(instance);
        }
        if (instance.asyncDep) {
          parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
          if (!initialVNode.el) {
            const placeholder = instance.subTree = createVNode(Comment);
            processCommentNode(null, placeholder, container, anchor);
          }
          return;
        }
        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
      };
      const updateComponent = (n1, n2, optimized) => {
        const instance = n2.component = n1.component;
        if (shouldUpdateComponent(n1, n2, optimized)) {
          if (instance.asyncDep && !instance.asyncResolved) {
            updateComponentPreRender(instance, n2, optimized);
            return;
          } else {
            instance.next = n2;
            invalidateJob(instance.update);
            instance.update();
          }
        } else {
          n2.el = n1.el;
          instance.vnode = n2;
        }
      };
      const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
        const componentUpdateFn = () => {
          if (!instance.isMounted) {
            let vnodeHook;
            const { el, props } = initialVNode;
            const { bm, m, parent } = instance;
            const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
            toggleRecurse(instance, false);
            if (bm) {
              invokeArrayFns(bm);
            }
            if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
              invokeVNodeHook(vnodeHook, parent, initialVNode);
            }
            toggleRecurse(instance, true);
            if (el && hydrateNode) {
              const hydrateSubTree = () => {
                instance.subTree = renderComponentRoot(instance);
                hydrateNode(el, instance.subTree, instance, parentSuspense, null);
              };
              if (isAsyncWrapperVNode) {
                initialVNode.type.__asyncLoader().then(
                  // note: we are moving the render call into an async callback,
                  // which means it won't track dependencies - but it's ok because
                  // a server-rendered async wrapper is already in resolved state
                  // and it will never need to change.
                  () => !instance.isUnmounted && hydrateSubTree()
                );
              } else {
                hydrateSubTree();
              }
            } else {
              const subTree = instance.subTree = renderComponentRoot(instance);
              patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
              initialVNode.el = subTree.el;
            }
            if (m) {
              queuePostRenderEffect(m, parentSuspense);
            }
            if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
              const scopedInitialVNode = initialVNode;
              queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
            }
            if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
              instance.a && queuePostRenderEffect(instance.a, parentSuspense);
            }
            instance.isMounted = true;
            initialVNode = container = anchor = null;
          } else {
            let { next, bu, u, parent, vnode } = instance;
            let originNext = next;
            let vnodeHook;
            toggleRecurse(instance, false);
            if (next) {
              next.el = vnode.el;
              updateComponentPreRender(instance, next, optimized);
            } else {
              next = vnode;
            }
            if (bu) {
              invokeArrayFns(bu);
            }
            if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
              invokeVNodeHook(vnodeHook, parent, next, vnode);
            }
            toggleRecurse(instance, true);
            const nextTree = renderComponentRoot(instance);
            const prevTree = instance.subTree;
            instance.subTree = nextTree;
            patch(
              prevTree,
              nextTree,
              // parent may have changed if it's in a teleport
              hostParentNode(prevTree.el),
              // anchor may have changed if it's in a fragment
              getNextHostNode(prevTree),
              instance,
              parentSuspense,
              isSVG
            );
            next.el = nextTree.el;
            if (originNext === null) {
              updateHOCHostEl(instance, nextTree.el);
            }
            if (u) {
              queuePostRenderEffect(u, parentSuspense);
            }
            if (vnodeHook = next.props && next.props.onVnodeUpdated) {
              queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
            }
          }
        };
        const effect2 = instance.effect = new ReactiveEffect(
          componentUpdateFn,
          () => queueJob(update),
          instance.scope
          // track it in component's effect scope
        );
        const update = instance.update = () => effect2.run();
        update.id = instance.uid;
        toggleRecurse(instance, true);
        update();
      };
      const updateComponentPreRender = (instance, nextVNode, optimized) => {
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        pauseTracking();
        flushPreFlushCbs();
        resetTracking();
      };
      const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag, shapeFlag } = n2;
        if (patchFlag > 0) {
          if (patchFlag & 128) {
            patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            return;
          } else if (patchFlag & 256) {
            patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            return;
          }
        }
        if (shapeFlag & 8) {
          if (prevShapeFlag & 16) {
            unmountChildren(c1, parentComponent, parentSuspense);
          }
          if (c2 !== c1) {
            hostSetElementText(container, c2);
          }
        } else {
          if (prevShapeFlag & 16) {
            if (shapeFlag & 16) {
              patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else {
              unmountChildren(c1, parentComponent, parentSuspense, true);
            }
          } else {
            if (prevShapeFlag & 8) {
              hostSetElementText(container, "");
            }
            if (shapeFlag & 16) {
              mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
          }
        }
      };
      const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        c1 = c1 || EMPTY_ARR;
        c2 = c2 || EMPTY_ARR;
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i2;
        for (i2 = 0; i2 < commonLength; i2++) {
          const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
          patch(c1[i2], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        if (oldLength > newLength) {
          unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        } else {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
        }
      };
      const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        let i2 = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1;
        let e2 = l2 - 1;
        while (i2 <= e1 && i2 <= e2) {
          const n1 = c1[i2];
          const n2 = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
          if (isSameVNodeType(n1, n2)) {
            patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          } else {
            break;
          }
          i2++;
        }
        while (i2 <= e1 && i2 <= e2) {
          const n1 = c1[e1];
          const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
          if (isSameVNodeType(n1, n2)) {
            patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          } else {
            break;
          }
          e1--;
          e2--;
        }
        if (i2 > e1) {
          if (i2 <= e2) {
            const nextPos = e2 + 1;
            const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
            while (i2 <= e2) {
              patch(null, c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
              i2++;
            }
          }
        } else if (i2 > e2) {
          while (i2 <= e1) {
            unmount(c1[i2], parentComponent, parentSuspense, true);
            i2++;
          }
        } else {
          const s1 = i2;
          const s2 = i2;
          const keyToNewIndexMap = /* @__PURE__ */ new Map();
          for (i2 = s2; i2 <= e2; i2++) {
            const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
            if (nextChild.key != null) {
              keyToNewIndexMap.set(nextChild.key, i2);
            }
          }
          let j;
          let patched = 0;
          const toBePatched = e2 - s2 + 1;
          let moved = false;
          let maxNewIndexSoFar = 0;
          const newIndexToOldIndexMap = new Array(toBePatched);
          for (i2 = 0; i2 < toBePatched; i2++)
            newIndexToOldIndexMap[i2] = 0;
          for (i2 = s1; i2 <= e1; i2++) {
            const prevChild = c1[i2];
            if (patched >= toBePatched) {
              unmount(prevChild, parentComponent, parentSuspense, true);
              continue;
            }
            let newIndex;
            if (prevChild.key != null) {
              newIndex = keyToNewIndexMap.get(prevChild.key);
            } else {
              for (j = s2; j <= e2; j++) {
                if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
                  newIndex = j;
                  break;
                }
              }
            }
            if (newIndex === void 0) {
              unmount(prevChild, parentComponent, parentSuspense, true);
            } else {
              newIndexToOldIndexMap[newIndex - s2] = i2 + 1;
              if (newIndex >= maxNewIndexSoFar) {
                maxNewIndexSoFar = newIndex;
              } else {
                moved = true;
              }
              patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
              patched++;
            }
          }
          const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
          j = increasingNewIndexSequence.length - 1;
          for (i2 = toBePatched - 1; i2 >= 0; i2--) {
            const nextIndex = s2 + i2;
            const nextChild = c2[nextIndex];
            const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
            if (newIndexToOldIndexMap[i2] === 0) {
              patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else if (moved) {
              if (j < 0 || i2 !== increasingNewIndexSequence[j]) {
                move(
                  nextChild,
                  container,
                  anchor,
                  2
                  /* MoveType.REORDER */
                );
              } else {
                j--;
              }
            }
          }
        }
      };
      const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
        const { el, type, transition, children, shapeFlag } = vnode;
        if (shapeFlag & 6) {
          move(vnode.component.subTree, container, anchor, moveType);
          return;
        }
        if (shapeFlag & 128) {
          vnode.suspense.move(container, anchor, moveType);
          return;
        }
        if (shapeFlag & 64) {
          type.move(vnode, container, anchor, internals);
          return;
        }
        if (type === Fragment) {
          hostInsert(el, container, anchor);
          for (let i2 = 0; i2 < children.length; i2++) {
            move(children[i2], container, anchor, moveType);
          }
          hostInsert(vnode.anchor, container, anchor);
          return;
        }
        if (type === Static) {
          moveStaticNode(vnode, container, anchor);
          return;
        }
        const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
        if (needTransition) {
          if (moveType === 0) {
            transition.beforeEnter(el);
            hostInsert(el, container, anchor);
            queuePostRenderEffect(() => transition.enter(el), parentSuspense);
          } else {
            const { leave, delayLeave, afterLeave } = transition;
            const remove3 = () => hostInsert(el, container, anchor);
            const performLeave = () => {
              leave(el, () => {
                remove3();
                afterLeave && afterLeave();
              });
            };
            if (delayLeave) {
              delayLeave(el, remove3, performLeave);
            } else {
              performLeave();
            }
          }
        } else {
          hostInsert(el, container, anchor);
        }
      };
      const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
        const { type, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
        if (ref2 != null) {
          setRef(ref2, null, parentSuspense, vnode, true);
        }
        if (shapeFlag & 256) {
          parentComponent.ctx.deactivate(vnode);
          return;
        }
        const shouldInvokeDirs = shapeFlag & 1 && dirs;
        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
        let vnodeHook;
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        if (shapeFlag & 6) {
          unmountComponent(vnode.component, parentSuspense, doRemove);
        } else {
          if (shapeFlag & 128) {
            vnode.suspense.unmount(parentSuspense, doRemove);
            return;
          }
          if (shouldInvokeDirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
          }
          if (shapeFlag & 64) {
            vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
          } else if (dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
          (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
            unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
          } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
            unmountChildren(children, parentComponent, parentSuspense);
          }
          if (doRemove) {
            remove2(vnode);
          }
        }
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
          queuePostRenderEffect(() => {
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
          }, parentSuspense);
        }
      };
      const remove2 = (vnode) => {
        const { type, el, anchor, transition } = vnode;
        if (type === Fragment) {
          {
            removeFragment(el, anchor);
          }
          return;
        }
        if (type === Static) {
          removeStaticNode(vnode);
          return;
        }
        const performRemove = () => {
          hostRemove(el);
          if (transition && !transition.persisted && transition.afterLeave) {
            transition.afterLeave();
          }
        };
        if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
          const { leave, delayLeave } = transition;
          const performLeave = () => leave(el, performRemove);
          if (delayLeave) {
            delayLeave(vnode.el, performRemove, performLeave);
          } else {
            performLeave();
          }
        } else {
          performRemove();
        }
      };
      const removeFragment = (cur, end2) => {
        let next;
        while (cur !== end2) {
          next = hostNextSibling(cur);
          hostRemove(cur);
          cur = next;
        }
        hostRemove(end2);
      };
      const unmountComponent = (instance, parentSuspense, doRemove) => {
        const { bum, scope, update, subTree, um } = instance;
        if (bum) {
          invokeArrayFns(bum);
        }
        scope.stop();
        if (update) {
          update.active = false;
          unmount(subTree, instance, parentSuspense, doRemove);
        }
        if (um) {
          queuePostRenderEffect(um, parentSuspense);
        }
        queuePostRenderEffect(() => {
          instance.isUnmounted = true;
        }, parentSuspense);
        if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
          parentSuspense.deps--;
          if (parentSuspense.deps === 0) {
            parentSuspense.resolve();
          }
        }
      };
      const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start2 = 0) => {
        for (let i2 = start2; i2 < children.length; i2++) {
          unmount(children[i2], parentComponent, parentSuspense, doRemove, optimized);
        }
      };
      const getNextHostNode = (vnode) => {
        if (vnode.shapeFlag & 6) {
          return getNextHostNode(vnode.component.subTree);
        }
        if (vnode.shapeFlag & 128) {
          return vnode.suspense.next();
        }
        return hostNextSibling(vnode.anchor || vnode.el);
      };
      const render = (vnode, container, isSVG) => {
        if (vnode == null) {
          if (container._vnode) {
            unmount(container._vnode, null, null, true);
          }
        } else {
          patch(container._vnode || null, vnode, container, null, null, null, isSVG);
        }
        flushPreFlushCbs();
        flushPostFlushCbs();
        container._vnode = vnode;
      };
      const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove2,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
      };
      let hydrate;
      let hydrateNode;
      if (createHydrationFns) {
        [hydrate, hydrateNode] = createHydrationFns(internals);
      }
      return {
        render,
        hydrate,
        createApp: createAppAPI(render, hydrate)
      };
    }
    function toggleRecurse({ effect: effect2, update }, allowed) {
      effect2.allowRecurse = update.allowRecurse = allowed;
    }
    function traverseStaticChildren(n1, n2, shallow = false) {
      const ch1 = n1.children;
      const ch2 = n2.children;
      if (isArray$2(ch1) && isArray$2(ch2)) {
        for (let i2 = 0; i2 < ch1.length; i2++) {
          const c1 = ch1[i2];
          let c2 = ch2[i2];
          if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
            if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
              c2 = ch2[i2] = cloneIfMounted(ch2[i2]);
              c2.el = c1.el;
            }
            if (!shallow)
              traverseStaticChildren(c1, c2);
          }
          if (c2.type === Text) {
            c2.el = c1.el;
          }
        }
      }
    }
    function getSequence(arr) {
      const p2 = arr.slice();
      const result = [0];
      let i2, j, u, v, c;
      const len2 = arr.length;
      for (i2 = 0; i2 < len2; i2++) {
        const arrI = arr[i2];
        if (arrI !== 0) {
          j = result[result.length - 1];
          if (arr[j] < arrI) {
            p2[i2] = j;
            result.push(i2);
            continue;
          }
          u = 0;
          v = result.length - 1;
          while (u < v) {
            c = u + v >> 1;
            if (arr[result[c]] < arrI) {
              u = c + 1;
            } else {
              v = c;
            }
          }
          if (arrI < arr[result[u]]) {
            if (u > 0) {
              p2[i2] = result[u - 1];
            }
            result[u] = i2;
          }
        }
      }
      u = result.length;
      v = result[u - 1];
      while (u-- > 0) {
        result[u] = v;
        v = p2[v];
      }
      return result;
    }
    const isTeleport = (type) => type.__isTeleport;
    const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
    const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
    const resolveTarget = (props, select) => {
      const targetSelector = props && props.to;
      if (isString$2(targetSelector)) {
        if (!select) {
          return null;
        } else {
          const target = select(targetSelector);
          return target;
        }
      } else {
        return targetSelector;
      }
    };
    const TeleportImpl = {
      __isTeleport: true,
      process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag, children, dynamicChildren } = n2;
        if (n1 == null) {
          const placeholder = n2.el = createText("");
          const mainAnchor = n2.anchor = createText("");
          insert(placeholder, container, anchor);
          insert(mainAnchor, container, anchor);
          const target = n2.target = resolveTarget(n2.props, querySelector);
          const targetAnchor = n2.targetAnchor = createText("");
          if (target) {
            insert(targetAnchor, target);
            isSVG = isSVG || isTargetSVG(target);
          }
          const mount = (container2, anchor2) => {
            if (shapeFlag & 16) {
              mountChildren(children, container2, anchor2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
          };
          if (disabled) {
            mount(container, mainAnchor);
          } else if (target) {
            mount(target, targetAnchor);
          }
        } else {
          n2.el = n1.el;
          const mainAnchor = n2.anchor = n1.anchor;
          const target = n2.target = n1.target;
          const targetAnchor = n2.targetAnchor = n1.targetAnchor;
          const wasDisabled = isTeleportDisabled(n1.props);
          const currentContainer = wasDisabled ? container : target;
          const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
          isSVG = isSVG || isTargetSVG(target);
          if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
            traverseStaticChildren(n1, n2, true);
          } else if (!optimized) {
            patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
          }
          if (disabled) {
            if (!wasDisabled) {
              moveTeleport(
                n2,
                container,
                mainAnchor,
                internals,
                1
                /* TeleportMoveTypes.TOGGLE */
              );
            }
          } else {
            if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
              const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
              if (nextTarget) {
                moveTeleport(
                  n2,
                  nextTarget,
                  null,
                  internals,
                  0
                  /* TeleportMoveTypes.TARGET_CHANGE */
                );
              }
            } else if (wasDisabled) {
              moveTeleport(
                n2,
                target,
                targetAnchor,
                internals,
                1
                /* TeleportMoveTypes.TOGGLE */
              );
            }
          }
        }
        updateCssVars(n2);
      },
      remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
        if (target) {
          hostRemove(targetAnchor);
        }
        if (doRemove || !isTeleportDisabled(props)) {
          hostRemove(anchor);
          if (shapeFlag & 16) {
            for (let i2 = 0; i2 < children.length; i2++) {
              const child = children[i2];
              unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
            }
          }
        }
      },
      move: moveTeleport,
      hydrate: hydrateTeleport
    };
    function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
      if (moveType === 0) {
        insert(vnode.targetAnchor, container, parentAnchor);
      }
      const { el, anchor, shapeFlag, children, props } = vnode;
      const isReorder = moveType === 2;
      if (isReorder) {
        insert(el, container, parentAnchor);
      }
      if (!isReorder || isTeleportDisabled(props)) {
        if (shapeFlag & 16) {
          for (let i2 = 0; i2 < children.length; i2++) {
            move(
              children[i2],
              container,
              parentAnchor,
              2
              /* MoveType.REORDER */
            );
          }
        }
      }
      if (isReorder) {
        insert(anchor, container, parentAnchor);
      }
    }
    function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {
      const target = vnode.target = resolveTarget(vnode.props, querySelector);
      if (target) {
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16) {
          if (isTeleportDisabled(vnode.props)) {
            vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
            vnode.targetAnchor = targetNode;
          } else {
            vnode.anchor = nextSibling(node);
            let targetAnchor = targetNode;
            while (targetAnchor) {
              targetAnchor = nextSibling(targetAnchor);
              if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
                vnode.targetAnchor = targetAnchor;
                target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
                break;
              }
            }
            hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
          }
        }
        updateCssVars(vnode);
      }
      return vnode.anchor && nextSibling(vnode.anchor);
    }
    const Teleport = TeleportImpl;
    function updateCssVars(vnode) {
      const ctx = vnode.ctx;
      if (ctx && ctx.ut) {
        let node = vnode.children[0].el;
        while (node !== vnode.targetAnchor) {
          if (node.nodeType === 1)
            node.setAttribute("data-v-owner", ctx.uid);
          node = node.nextSibling;
        }
        ctx.ut();
      }
    }
    const Fragment = Symbol(void 0);
    const Text = Symbol(void 0);
    const Comment = Symbol(void 0);
    const Static = Symbol(void 0);
    const blockStack = [];
    let currentBlock = null;
    function openBlock(disableTracking = false) {
      blockStack.push(currentBlock = disableTracking ? null : []);
    }
    function closeBlock() {
      blockStack.pop();
      currentBlock = blockStack[blockStack.length - 1] || null;
    }
    let isBlockTreeEnabled = 1;
    function setBlockTracking(value) {
      isBlockTreeEnabled += value;
    }
    function setupBlock(vnode) {
      vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
      closeBlock();
      if (isBlockTreeEnabled > 0 && currentBlock) {
        currentBlock.push(vnode);
      }
      return vnode;
    }
    function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
      return setupBlock(createBaseVNode(
        type,
        props,
        children,
        patchFlag,
        dynamicProps,
        shapeFlag,
        true
        /* isBlock */
      ));
    }
    function createBlock(type, props, children, patchFlag, dynamicProps) {
      return setupBlock(createVNode(
        type,
        props,
        children,
        patchFlag,
        dynamicProps,
        true
        /* isBlock: prevent a block from tracking itself */
      ));
    }
    function isVNode(value) {
      return value ? value.__v_isVNode === true : false;
    }
    function isSameVNodeType(n1, n2) {
      return n1.type === n2.type && n1.key === n2.key;
    }
    const InternalObjectKey = `__vInternal`;
    const normalizeKey = ({ key }) => key != null ? key : null;
    const normalizeRef = ({ ref: ref2, ref_key, ref_for }) => {
      return ref2 != null ? isString$2(ref2) || isRef(ref2) || isFunction$4(ref2) ? { i: currentRenderingInstance, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
    };
    function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
      const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetAnchor: null,
        staticCount: 0,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null,
        ctx: currentRenderingInstance
      };
      if (needFullChildrenNormalization) {
        normalizeChildren(vnode, children);
        if (shapeFlag & 128) {
          type.normalize(vnode);
        }
      } else if (children) {
        vnode.shapeFlag |= isString$2(children) ? 8 : 16;
      }
      if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
      !isBlockNode && // has current parent block
      currentBlock && // presence of a patch flag indicates this node needs patching on updates.
      // component nodes also should always be patched, because even if the
      // component doesn't need to update, it needs to persist the instance on to
      // the next vnode so that it can be properly unmounted later.
      (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
      // vnode should not be considered dynamic due to handler caching.
      vnode.patchFlag !== 32) {
        currentBlock.push(vnode);
      }
      return vnode;
    }
    const createVNode = _createVNode;
    function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
      if (!type || type === NULL_DYNAMIC_COMPONENT) {
        type = Comment;
      }
      if (isVNode(type)) {
        const cloned = cloneVNode(
          type,
          props,
          true
          /* mergeRef: true */
        );
        if (children) {
          normalizeChildren(cloned, children);
        }
        if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
          if (cloned.shapeFlag & 6) {
            currentBlock[currentBlock.indexOf(type)] = cloned;
          } else {
            currentBlock.push(cloned);
          }
        }
        cloned.patchFlag |= -2;
        return cloned;
      }
      if (isClassComponent(type)) {
        type = type.__vccOpts;
      }
      if (props) {
        props = guardReactiveProps(props);
        let { class: klass, style } = props;
        if (klass && !isString$2(klass)) {
          props.class = normalizeClass(klass);
        }
        if (isObject$3(style)) {
          if (isProxy$1(style) && !isArray$2(style)) {
            style = extend$2({}, style);
          }
          props.style = normalizeStyle(style);
        }
      }
      const shapeFlag = isString$2(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject$3(type) ? 4 : isFunction$4(type) ? 2 : 0;
      return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
    }
    function guardReactiveProps(props) {
      if (!props)
        return null;
      return isProxy$1(props) || InternalObjectKey in props ? extend$2({}, props) : props;
    }
    function cloneVNode(vnode, extraProps, mergeRef = false) {
      const { props, ref: ref2, patchFlag, children } = vnode;
      const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
      const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref ? (
          // #2078 in the case of <component :is="vnode" ref="extra"/>
          // if the vnode itself already has a ref, cloneVNode will need to merge
          // the refs so the single vnode can be set on multiple refs
          mergeRef && ref2 ? isArray$2(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps)
        ) : ref2,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children,
        target: vnode.target,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        // if the vnode is cloned with extra props, we can no longer assume its
        // existing patch flag to be reliable and need to add the FULL_PROPS flag.
        // note: preserve flag for fragments since they use the flag for children
        // fast paths only.
        patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition: vnode.transition,
        // These should technically only be non-null on mounted VNodes. However,
        // they *should* be copied for kept-alive vnodes. So we just always copy
        // them since them being non-null during a mount doesn't affect the logic as
        // they will simply be overwritten.
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor,
        ctx: vnode.ctx
      };
      return cloned;
    }
    function createTextVNode(text = " ", flag = 0) {
      return createVNode(Text, null, text, flag);
    }
    function createStaticVNode(content, numberOfNodes) {
      const vnode = createVNode(Static, null, content);
      vnode.staticCount = numberOfNodes;
      return vnode;
    }
    function createCommentVNode(text = "", asBlock = false) {
      return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
    }
    function normalizeVNode(child) {
      if (child == null || typeof child === "boolean") {
        return createVNode(Comment);
      } else if (isArray$2(child)) {
        return createVNode(
          Fragment,
          null,
          // #3666, avoid reference pollution when reusing vnode
          child.slice()
        );
      } else if (typeof child === "object") {
        return cloneIfMounted(child);
      } else {
        return createVNode(Text, null, String(child));
      }
    }
    function cloneIfMounted(child) {
      return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
    }
    function normalizeChildren(vnode, children) {
      let type = 0;
      const { shapeFlag } = vnode;
      if (children == null) {
        children = null;
      } else if (isArray$2(children)) {
        type = 16;
      } else if (typeof children === "object") {
        if (shapeFlag & (1 | 64)) {
          const slot = children.default;
          if (slot) {
            slot._c && (slot._d = false);
            normalizeChildren(vnode, slot());
            slot._c && (slot._d = true);
          }
          return;
        } else {
          type = 32;
          const slotFlag = children._;
          if (!slotFlag && !(InternalObjectKey in children)) {
            children._ctx = currentRenderingInstance;
          } else if (slotFlag === 3 && currentRenderingInstance) {
            if (currentRenderingInstance.slots._ === 1) {
              children._ = 1;
            } else {
              children._ = 2;
              vnode.patchFlag |= 1024;
            }
          }
        }
      } else if (isFunction$4(children)) {
        children = { default: children, _ctx: currentRenderingInstance };
        type = 32;
      } else {
        children = String(children);
        if (shapeFlag & 64) {
          type = 16;
          children = [createTextVNode(children)];
        } else {
          type = 8;
        }
      }
      vnode.children = children;
      vnode.shapeFlag |= type;
    }
    function mergeProps(...args) {
      const ret = {};
      for (let i2 = 0; i2 < args.length; i2++) {
        const toMerge = args[i2];
        for (const key in toMerge) {
          if (key === "class") {
            if (ret.class !== toMerge.class) {
              ret.class = normalizeClass([ret.class, toMerge.class]);
            }
          } else if (key === "style") {
            ret.style = normalizeStyle([ret.style, toMerge.style]);
          } else if (isOn(key)) {
            const existing = ret[key];
            const incoming = toMerge[key];
            if (incoming && existing !== incoming && !(isArray$2(existing) && existing.includes(incoming))) {
              ret[key] = existing ? [].concat(existing, incoming) : incoming;
            }
          } else if (key !== "") {
            ret[key] = toMerge[key];
          }
        }
      }
      return ret;
    }
    function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
      callWithAsyncErrorHandling(hook, instance, 7, [
        vnode,
        prevVNode
      ]);
    }
    const emptyAppContext = createAppContext();
    let uid$1$1 = 0;
    function createComponentInstance(vnode, parent, suspense) {
      const type = vnode.type;
      const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
      const instance = {
        uid: uid$1$1++,
        vnode,
        type,
        parent,
        appContext,
        root: null,
        next: null,
        subTree: null,
        effect: null,
        update: null,
        scope: new EffectScope(
          true
          /* detached */
        ),
        render: null,
        proxy: null,
        exposed: null,
        exposeProxy: null,
        withProxy: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        accessCache: null,
        renderCache: [],
        // local resolved assets
        components: null,
        directives: null,
        // resolved props and emits options
        propsOptions: normalizePropsOptions(type, appContext),
        emitsOptions: normalizeEmitsOptions(type, appContext),
        // emit
        emit: null,
        emitted: null,
        // props default value
        propsDefaults: EMPTY_OBJ,
        // inheritAttrs
        inheritAttrs: type.inheritAttrs,
        // state
        ctx: EMPTY_OBJ,
        data: EMPTY_OBJ,
        props: EMPTY_OBJ,
        attrs: EMPTY_OBJ,
        slots: EMPTY_OBJ,
        refs: EMPTY_OBJ,
        setupState: EMPTY_OBJ,
        setupContext: null,
        // suspense related
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        // lifecycle hooks
        // not using enums here because it results in computed properties
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
      };
      {
        instance.ctx = { _: instance };
      }
      instance.root = parent ? parent.root : instance;
      instance.emit = emit$1.bind(null, instance);
      if (vnode.ce) {
        vnode.ce(instance);
      }
      return instance;
    }
    let currentInstance = null;
    const getCurrentInstance = () => currentInstance || currentRenderingInstance;
    const setCurrentInstance = (instance) => {
      currentInstance = instance;
      instance.scope.on();
    };
    const unsetCurrentInstance = () => {
      currentInstance && currentInstance.scope.off();
      currentInstance = null;
    };
    function isStatefulComponent(instance) {
      return instance.vnode.shapeFlag & 4;
    }
    let isInSSRComponentSetup = false;
    function setupComponent(instance, isSSR = false) {
      isInSSRComponentSetup = isSSR;
      const { props, children } = instance.vnode;
      const isStateful = isStatefulComponent(instance);
      initProps(instance, props, isStateful, isSSR);
      initSlots(instance, children);
      const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
      isInSSRComponentSetup = false;
      return setupResult;
    }
    function setupStatefulComponent(instance, isSSR) {
      const Component = instance.type;
      instance.accessCache = /* @__PURE__ */ Object.create(null);
      instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
      const { setup } = Component;
      if (setup) {
        const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
        setCurrentInstance(instance);
        pauseTracking();
        const setupResult = callWithErrorHandling(setup, instance, 0, [instance.props, setupContext]);
        resetTracking();
        unsetCurrentInstance();
        if (isPromise(setupResult)) {
          setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
          if (isSSR) {
            return setupResult.then((resolvedResult) => {
              handleSetupResult(instance, resolvedResult, isSSR);
            }).catch((e) => {
              handleError(
                e,
                instance,
                0
                /* ErrorCodes.SETUP_FUNCTION */
              );
            });
          } else {
            instance.asyncDep = setupResult;
          }
        } else {
          handleSetupResult(instance, setupResult, isSSR);
        }
      } else {
        finishComponentSetup(instance, isSSR);
      }
    }
    function handleSetupResult(instance, setupResult, isSSR) {
      if (isFunction$4(setupResult)) {
        if (instance.type.__ssrInlineRender) {
          instance.ssrRender = setupResult;
        } else {
          instance.render = setupResult;
        }
      } else if (isObject$3(setupResult)) {
        instance.setupState = proxyRefs(setupResult);
      } else
        ;
      finishComponentSetup(instance, isSSR);
    }
    let compile;
    function finishComponentSetup(instance, isSSR, skipOptions) {
      const Component = instance.type;
      if (!instance.render) {
        if (!isSSR && compile && !Component.render) {
          const template = Component.template || resolveMergedOptions(instance).template;
          if (template) {
            const { isCustomElement, compilerOptions } = instance.appContext.config;
            const { delimiters, compilerOptions: componentCompilerOptions } = Component;
            const finalCompilerOptions = extend$2(extend$2({
              isCustomElement,
              delimiters
            }, compilerOptions), componentCompilerOptions);
            Component.render = compile(template, finalCompilerOptions);
          }
        }
        instance.render = Component.render || NOOP;
      }
      {
        setCurrentInstance(instance);
        pauseTracking();
        applyOptions(instance);
        resetTracking();
        unsetCurrentInstance();
      }
    }
    function createAttrsProxy(instance) {
      return new Proxy(instance.attrs, {
        get(target, key) {
          track(instance, "get", "$attrs");
          return target[key];
        }
      });
    }
    function createSetupContext(instance) {
      const expose = (exposed) => {
        instance.exposed = exposed || {};
      };
      let attrs;
      {
        return {
          get attrs() {
            return attrs || (attrs = createAttrsProxy(instance));
          },
          slots: instance.slots,
          emit: instance.emit,
          expose
        };
      }
    }
    function getExposeProxy(instance) {
      if (instance.exposed) {
        return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
          get(target, key) {
            if (key in target) {
              return target[key];
            } else if (key in publicPropertiesMap) {
              return publicPropertiesMap[key](instance);
            }
          },
          has(target, key) {
            return key in target || key in publicPropertiesMap;
          }
        }));
      }
    }
    function getComponentName(Component, includeInferred = true) {
      return isFunction$4(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
    }
    function isClassComponent(value) {
      return isFunction$4(value) && "__vccOpts" in value;
    }
    const computed = (getterOrOptions, debugOptions) => {
      return computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
    };
    function h(type, propsOrChildren, children) {
      const l = arguments.length;
      if (l === 2) {
        if (isObject$3(propsOrChildren) && !isArray$2(propsOrChildren)) {
          if (isVNode(propsOrChildren)) {
            return createVNode(type, null, [propsOrChildren]);
          }
          return createVNode(type, propsOrChildren);
        } else {
          return createVNode(type, null, propsOrChildren);
        }
      } else {
        if (l > 3) {
          children = Array.prototype.slice.call(arguments, 2);
        } else if (l === 3 && isVNode(children)) {
          children = [children];
        }
        return createVNode(type, propsOrChildren, children);
      }
    }
    const ssrContextKey = Symbol(``);
    const useSSRContext = () => {
      {
        const ctx = inject(ssrContextKey);
        return ctx;
      }
    };
    const version = "3.2.45";
    const svgNS = "http://www.w3.org/2000/svg";
    const doc = typeof document !== "undefined" ? document : null;
    const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
    const nodeOps = {
      insert: (child, parent, anchor) => {
        parent.insertBefore(child, anchor || null);
      },
      remove: (child) => {
        const parent = child.parentNode;
        if (parent) {
          parent.removeChild(child);
        }
      },
      createElement: (tag, isSVG, is, props) => {
        const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? { is } : void 0);
        if (tag === "select" && props && props.multiple != null) {
          el.setAttribute("multiple", props.multiple);
        }
        return el;
      },
      createText: (text) => doc.createTextNode(text),
      createComment: (text) => doc.createComment(text),
      setText: (node, text) => {
        node.nodeValue = text;
      },
      setElementText: (el, text) => {
        el.textContent = text;
      },
      parentNode: (node) => node.parentNode,
      nextSibling: (node) => node.nextSibling,
      querySelector: (selector2) => doc.querySelector(selector2),
      setScopeId(el, id) {
        el.setAttribute(id, "");
      },
      // __UNSAFE__
      // Reason: innerHTML.
      // Static content here can only come from compiled templates.
      // As long as the user only uses trusted templates, this is safe.
      insertStaticContent(content, parent, anchor, isSVG, start2, end2) {
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        if (start2 && (start2 === end2 || start2.nextSibling)) {
          while (true) {
            parent.insertBefore(start2.cloneNode(true), anchor);
            if (start2 === end2 || !(start2 = start2.nextSibling))
              break;
          }
        } else {
          templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
          const template = templateContainer.content;
          if (isSVG) {
            const wrapper = template.firstChild;
            while (wrapper.firstChild) {
              template.appendChild(wrapper.firstChild);
            }
            template.removeChild(wrapper);
          }
          parent.insertBefore(template, anchor);
        }
        return [
          // first
          before ? before.nextSibling : parent.firstChild,
          // last
          anchor ? anchor.previousSibling : parent.lastChild
        ];
      }
    };
    function patchClass(el, value, isSVG) {
      const transitionClasses = el._vtc;
      if (transitionClasses) {
        value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
      }
      if (value == null) {
        el.removeAttribute("class");
      } else if (isSVG) {
        el.setAttribute("class", value);
      } else {
        el.className = value;
      }
    }
    function patchStyle(el, prev, next) {
      const style = el.style;
      const isCssString = isString$2(next);
      if (next && !isCssString) {
        for (const key in next) {
          setStyle(style, key, next[key]);
        }
        if (prev && !isString$2(prev)) {
          for (const key in prev) {
            if (next[key] == null) {
              setStyle(style, key, "");
            }
          }
        }
      } else {
        const currentDisplay = style.display;
        if (isCssString) {
          if (prev !== next) {
            style.cssText = next;
          }
        } else if (prev) {
          el.removeAttribute("style");
        }
        if ("_vod" in el) {
          style.display = currentDisplay;
        }
      }
    }
    const importantRE = /\s*!important$/;
    function setStyle(style, name, val) {
      if (isArray$2(val)) {
        val.forEach((v) => setStyle(style, name, v));
      } else {
        if (val == null)
          val = "";
        if (name.startsWith("--")) {
          style.setProperty(name, val);
        } else {
          const prefixed = autoPrefix(style, name);
          if (importantRE.test(val)) {
            style.setProperty(hyphenate(prefixed), val.replace(importantRE, ""), "important");
          } else {
            style[prefixed] = val;
          }
        }
      }
    }
    const prefixes = ["Webkit", "Moz", "ms"];
    const prefixCache = {};
    function autoPrefix(style, rawName) {
      const cached = prefixCache[rawName];
      if (cached) {
        return cached;
      }
      let name = camelize(rawName);
      if (name !== "filter" && name in style) {
        return prefixCache[rawName] = name;
      }
      name = capitalize(name);
      for (let i2 = 0; i2 < prefixes.length; i2++) {
        const prefixed = prefixes[i2] + name;
        if (prefixed in style) {
          return prefixCache[rawName] = prefixed;
        }
      }
      return rawName;
    }
    const xlinkNS = "http://www.w3.org/1999/xlink";
    function patchAttr(el, key, value, isSVG, instance) {
      if (isSVG && key.startsWith("xlink:")) {
        if (value == null) {
          el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        } else {
          el.setAttributeNS(xlinkNS, key, value);
        }
      } else {
        const isBoolean2 = isSpecialBooleanAttr(key);
        if (value == null || isBoolean2 && !includeBooleanAttr(value)) {
          el.removeAttribute(key);
        } else {
          el.setAttribute(key, isBoolean2 ? "" : value);
        }
      }
    }
    function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
      if (key === "innerHTML" || key === "textContent") {
        if (prevChildren) {
          unmountChildren(prevChildren, parentComponent, parentSuspense);
        }
        el[key] = value == null ? "" : value;
        return;
      }
      if (key === "value" && el.tagName !== "PROGRESS" && // custom elements may use _value internally
      !el.tagName.includes("-")) {
        el._value = value;
        const newValue = value == null ? "" : value;
        if (el.value !== newValue || // #4956: always set for OPTION elements because its value falls back to
        // textContent if no value attribute is present. And setting .value for
        // OPTION has no side effect
        el.tagName === "OPTION") {
          el.value = newValue;
        }
        if (value == null) {
          el.removeAttribute(key);
        }
        return;
      }
      let needRemove = false;
      if (value === "" || value == null) {
        const type = typeof el[key];
        if (type === "boolean") {
          value = includeBooleanAttr(value);
        } else if (value == null && type === "string") {
          value = "";
          needRemove = true;
        } else if (type === "number") {
          value = 0;
          needRemove = true;
        }
      }
      try {
        el[key] = value;
      } catch (e) {
      }
      needRemove && el.removeAttribute(key);
    }
    function addEventListener(el, event, handler, options) {
      el.addEventListener(event, handler, options);
    }
    function removeEventListener(el, event, handler, options) {
      el.removeEventListener(event, handler, options);
    }
    function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
      const invokers = el._vei || (el._vei = {});
      const existingInvoker = invokers[rawName];
      if (nextValue && existingInvoker) {
        existingInvoker.value = nextValue;
      } else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
          const invoker = invokers[rawName] = createInvoker(nextValue, instance);
          addEventListener(el, name, invoker, options);
        } else if (existingInvoker) {
          removeEventListener(el, name, existingInvoker, options);
          invokers[rawName] = void 0;
        }
      }
    }
    const optionsModifierRE = /(?:Once|Passive|Capture)$/;
    function parseName(name) {
      let options;
      if (optionsModifierRE.test(name)) {
        options = {};
        let m;
        while (m = name.match(optionsModifierRE)) {
          name = name.slice(0, name.length - m[0].length);
          options[m[0].toLowerCase()] = true;
        }
      }
      const event = name[2] === ":" ? name.slice(3) : hyphenate(name.slice(2));
      return [event, options];
    }
    let cachedNow = 0;
    const p = /* @__PURE__ */ Promise.resolve();
    const getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());
    function createInvoker(initialValue, instance) {
      const invoker = (e) => {
        if (!e._vts) {
          e._vts = Date.now();
        } else if (e._vts <= invoker.attached) {
          return;
        }
        callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5, [e]);
      };
      invoker.value = initialValue;
      invoker.attached = getNow();
      return invoker;
    }
    function patchStopImmediatePropagation(e, value) {
      if (isArray$2(value)) {
        const originalStop = e.stopImmediatePropagation;
        e.stopImmediatePropagation = () => {
          originalStop.call(e);
          e._stopped = true;
        };
        return value.map((fn) => (e2) => !e2._stopped && fn && fn(e2));
      } else {
        return value;
      }
    }
    const nativeOnRE = /^on[a-z]/;
    const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
      if (key === "class") {
        patchClass(el, nextValue, isSVG);
      } else if (key === "style") {
        patchStyle(el, prevValue, nextValue);
      } else if (isOn(key)) {
        if (!isModelListener(key)) {
          patchEvent(el, key, prevValue, nextValue, parentComponent);
        }
      } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
      } else {
        if (key === "true-value") {
          el._trueValue = nextValue;
        } else if (key === "false-value") {
          el._falseValue = nextValue;
        }
        patchAttr(el, key, nextValue, isSVG);
      }
    };
    function shouldSetAsProp(el, key, value, isSVG) {
      if (isSVG) {
        if (key === "innerHTML" || key === "textContent") {
          return true;
        }
        if (key in el && nativeOnRE.test(key) && isFunction$4(value)) {
          return true;
        }
        return false;
      }
      if (key === "spellcheck" || key === "draggable" || key === "translate") {
        return false;
      }
      if (key === "form") {
        return false;
      }
      if (key === "list" && el.tagName === "INPUT") {
        return false;
      }
      if (key === "type" && el.tagName === "TEXTAREA") {
        return false;
      }
      if (nativeOnRE.test(key) && isString$2(value)) {
        return false;
      }
      return key in el;
    }
    function useCssVars(getter) {
      const instance = getCurrentInstance();
      if (!instance) {
        return;
      }
      const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
        Array.from(document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)).forEach((node) => setVarsOnNode(node, vars));
      };
      const setVars = () => {
        const vars = getter(instance.proxy);
        setVarsOnVNode(instance.subTree, vars);
        updateTeleports(vars);
      };
      watchPostEffect(setVars);
      onMounted(() => {
        const ob = new MutationObserver(setVars);
        ob.observe(instance.subTree.el.parentNode, { childList: true });
        onUnmounted(() => ob.disconnect());
      });
    }
    function setVarsOnVNode(vnode, vars) {
      if (vnode.shapeFlag & 128) {
        const suspense = vnode.suspense;
        vnode = suspense.activeBranch;
        if (suspense.pendingBranch && !suspense.isHydrating) {
          suspense.effects.push(() => {
            setVarsOnVNode(suspense.activeBranch, vars);
          });
        }
      }
      while (vnode.component) {
        vnode = vnode.component.subTree;
      }
      if (vnode.shapeFlag & 1 && vnode.el) {
        setVarsOnNode(vnode.el, vars);
      } else if (vnode.type === Fragment) {
        vnode.children.forEach((c) => setVarsOnVNode(c, vars));
      } else if (vnode.type === Static) {
        let { el, anchor } = vnode;
        while (el) {
          setVarsOnNode(el, vars);
          if (el === anchor)
            break;
          el = el.nextSibling;
        }
      }
    }
    function setVarsOnNode(el, vars) {
      if (el.nodeType === 1) {
        const style = el.style;
        for (const key in vars) {
          style.setProperty(`--${key}`, vars[key]);
        }
      }
    }
    const TRANSITION = "transition";
    const ANIMATION = "animation";
    const DOMTransitionPropsValidators = {
      name: String,
      type: String,
      css: {
        type: Boolean,
        default: true
      },
      duration: [String, Number, Object],
      enterFromClass: String,
      enterActiveClass: String,
      enterToClass: String,
      appearFromClass: String,
      appearActiveClass: String,
      appearToClass: String,
      leaveFromClass: String,
      leaveActiveClass: String,
      leaveToClass: String
    };
    const TransitionPropsValidators = /* @__PURE__ */ extend$2({}, BaseTransition.props, DOMTransitionPropsValidators);
    const callHook = (hook, args = []) => {
      if (isArray$2(hook)) {
        hook.forEach((h2) => h2(...args));
      } else if (hook) {
        hook(...args);
      }
    };
    const hasExplicitCallback = (hook) => {
      return hook ? isArray$2(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
    };
    function resolveTransitionProps(rawProps) {
      const baseProps = {};
      for (const key in rawProps) {
        if (!(key in DOMTransitionPropsValidators)) {
          baseProps[key] = rawProps[key];
        }
      }
      if (rawProps.css === false) {
        return baseProps;
      }
      const { name = "v", type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;
      const durations = normalizeDuration(duration);
      const enterDuration = durations && durations[0];
      const leaveDuration = durations && durations[1];
      const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
      const finishEnter = (el, isAppear, done) => {
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done && done();
      };
      const finishLeave = (el, done) => {
        el._isLeaving = false;
        removeTransitionClass(el, leaveFromClass);
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done && done();
      };
      const makeEnterHook = (isAppear) => {
        return (el, done) => {
          const hook = isAppear ? onAppear : onEnter;
          const resolve2 = () => finishEnter(el, isAppear, done);
          callHook(hook, [el, resolve2]);
          nextFrame(() => {
            removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
            addTransitionClass(el, isAppear ? appearToClass : enterToClass);
            if (!hasExplicitCallback(hook)) {
              whenTransitionEnds(el, type, enterDuration, resolve2);
            }
          });
        };
      };
      return extend$2(baseProps, {
        onBeforeEnter(el) {
          callHook(onBeforeEnter, [el]);
          addTransitionClass(el, enterFromClass);
          addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear(el) {
          callHook(onBeforeAppear, [el]);
          addTransitionClass(el, appearFromClass);
          addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave(el, done) {
          el._isLeaving = true;
          const resolve2 = () => finishLeave(el, done);
          addTransitionClass(el, leaveFromClass);
          forceReflow();
          addTransitionClass(el, leaveActiveClass);
          nextFrame(() => {
            if (!el._isLeaving) {
              return;
            }
            removeTransitionClass(el, leaveFromClass);
            addTransitionClass(el, leaveToClass);
            if (!hasExplicitCallback(onLeave)) {
              whenTransitionEnds(el, type, leaveDuration, resolve2);
            }
          });
          callHook(onLeave, [el, resolve2]);
        },
        onEnterCancelled(el) {
          finishEnter(el, false);
          callHook(onEnterCancelled, [el]);
        },
        onAppearCancelled(el) {
          finishEnter(el, true);
          callHook(onAppearCancelled, [el]);
        },
        onLeaveCancelled(el) {
          finishLeave(el);
          callHook(onLeaveCancelled, [el]);
        }
      });
    }
    function normalizeDuration(duration) {
      if (duration == null) {
        return null;
      } else if (isObject$3(duration)) {
        return [NumberOf(duration.enter), NumberOf(duration.leave)];
      } else {
        const n = NumberOf(duration);
        return [n, n];
      }
    }
    function NumberOf(val) {
      const res = toNumber(val);
      return res;
    }
    function addTransitionClass(el, cls) {
      cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
      (el._vtc || (el._vtc = /* @__PURE__ */ new Set())).add(cls);
    }
    function removeTransitionClass(el, cls) {
      cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
      const { _vtc } = el;
      if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) {
          el._vtc = void 0;
        }
      }
    }
    function nextFrame(cb) {
      requestAnimationFrame(() => {
        requestAnimationFrame(cb);
      });
    }
    let endId = 0;
    function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
      const id = el._endId = ++endId;
      const resolveIfNotStale = () => {
        if (id === el._endId) {
          resolve2();
        }
      };
      if (explicitTimeout) {
        return setTimeout(resolveIfNotStale, explicitTimeout);
      }
      const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
      if (!type) {
        return resolve2();
      }
      const endEvent = type + "end";
      let ended = 0;
      const end2 = () => {
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
      };
      const onEnd = (e) => {
        if (e.target === el && ++ended >= propCount) {
          end2();
        }
      };
      setTimeout(() => {
        if (ended < propCount) {
          end2();
        }
      }, timeout + 1);
      el.addEventListener(endEvent, onEnd);
    }
    function getTransitionInfo(el, expectedType) {
      const styles = window.getComputedStyle(el);
      const getStyleProperties = (key) => (styles[key] || "").split(", ");
      const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
      const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
      const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
      const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
      const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
      const animationTimeout = getTimeout(animationDelays, animationDurations);
      let type = null;
      let timeout = 0;
      let propCount = 0;
      if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
          type = TRANSITION;
          timeout = transitionTimeout;
          propCount = transitionDurations.length;
        }
      } else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
          type = ANIMATION;
          timeout = animationTimeout;
          propCount = animationDurations.length;
        }
      } else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
        propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
      }
      const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(getStyleProperties(`${TRANSITION}Property`).toString());
      return {
        type,
        timeout,
        propCount,
        hasTransform
      };
    }
    function getTimeout(delays, durations) {
      while (delays.length < durations.length) {
        delays = delays.concat(delays);
      }
      return Math.max(...durations.map((d, i2) => toMs(d) + toMs(delays[i2])));
    }
    function toMs(s) {
      return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
    }
    function forceReflow() {
      return document.body.offsetHeight;
    }
    const positionMap = /* @__PURE__ */ new WeakMap();
    const newPositionMap = /* @__PURE__ */ new WeakMap();
    const TransitionGroupImpl = {
      name: "TransitionGroup",
      props: /* @__PURE__ */ extend$2({}, TransitionPropsValidators, {
        tag: String,
        moveClass: String
      }),
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevChildren;
        let children;
        onUpdated(() => {
          if (!prevChildren.length) {
            return;
          }
          const moveClass = props.moveClass || `${props.name || "v"}-move`;
          if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
            return;
          }
          prevChildren.forEach(callPendingCbs);
          prevChildren.forEach(recordPosition);
          const movedChildren = prevChildren.filter(applyTranslation);
          forceReflow();
          movedChildren.forEach((c) => {
            const el = c.el;
            const style = el.style;
            addTransitionClass(el, moveClass);
            style.transform = style.webkitTransform = style.transitionDuration = "";
            const cb = el._moveCb = (e) => {
              if (e && e.target !== el) {
                return;
              }
              if (!e || /transform$/.test(e.propertyName)) {
                el.removeEventListener("transitionend", cb);
                el._moveCb = null;
                removeTransitionClass(el, moveClass);
              }
            };
            el.addEventListener("transitionend", cb);
          });
        });
        return () => {
          const rawProps = toRaw(props);
          const cssTransitionProps = resolveTransitionProps(rawProps);
          let tag = rawProps.tag || Fragment;
          prevChildren = children;
          children = slots.default ? getTransitionRawChildren(slots.default()) : [];
          for (let i2 = 0; i2 < children.length; i2++) {
            const child = children[i2];
            if (child.key != null) {
              setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
            }
          }
          if (prevChildren) {
            for (let i2 = 0; i2 < prevChildren.length; i2++) {
              const child = prevChildren[i2];
              setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
              positionMap.set(child, child.el.getBoundingClientRect());
            }
          }
          return createVNode(tag, null, children);
        };
      }
    };
    const TransitionGroup = TransitionGroupImpl;
    function callPendingCbs(c) {
      const el = c.el;
      if (el._moveCb) {
        el._moveCb();
      }
      if (el._enterCb) {
        el._enterCb();
      }
    }
    function recordPosition(c) {
      newPositionMap.set(c, c.el.getBoundingClientRect());
    }
    function applyTranslation(c) {
      const oldPos = positionMap.get(c);
      const newPos = newPositionMap.get(c);
      const dx = oldPos.left - newPos.left;
      const dy = oldPos.top - newPos.top;
      if (dx || dy) {
        const s = c.el.style;
        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
        s.transitionDuration = "0s";
        return c;
      }
    }
    function hasCSSTransform(el, root, moveClass) {
      const clone2 = el.cloneNode();
      if (el._vtc) {
        el._vtc.forEach((cls) => {
          cls.split(/\s+/).forEach((c) => c && clone2.classList.remove(c));
        });
      }
      moveClass.split(/\s+/).forEach((c) => c && clone2.classList.add(c));
      clone2.style.display = "none";
      const container = root.nodeType === 1 ? root : root.parentNode;
      container.appendChild(clone2);
      const { hasTransform } = getTransitionInfo(clone2);
      container.removeChild(clone2);
      return hasTransform;
    }
    const getModelAssigner = (vnode) => {
      const fn = vnode.props["onUpdate:modelValue"] || false;
      return isArray$2(fn) ? (value) => invokeArrayFns(fn, value) : fn;
    };
    function onCompositionStart(e) {
      e.target.composing = true;
    }
    function onCompositionEnd(e) {
      const target = e.target;
      if (target.composing) {
        target.composing = false;
        target.dispatchEvent(new Event("input"));
      }
    }
    const vModelText = {
      created(el, { modifiers: { lazy, trim: trim2, number } }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number || vnode.props && vnode.props.type === "number";
        addEventListener(el, lazy ? "change" : "input", (e) => {
          if (e.target.composing)
            return;
          let domValue = el.value;
          if (trim2) {
            domValue = domValue.trim();
          }
          if (castToNumber) {
            domValue = toNumber(domValue);
          }
          el._assign(domValue);
        });
        if (trim2) {
          addEventListener(el, "change", () => {
            el.value = el.value.trim();
          });
        }
        if (!lazy) {
          addEventListener(el, "compositionstart", onCompositionStart);
          addEventListener(el, "compositionend", onCompositionEnd);
          addEventListener(el, "change", onCompositionEnd);
        }
      },
      // set value on mounted so it's after min/max for type="range"
      mounted(el, { value }) {
        el.value = value == null ? "" : value;
      },
      beforeUpdate(el, { value, modifiers: { lazy, trim: trim2, number } }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (el.composing)
          return;
        if (document.activeElement === el && el.type !== "range") {
          if (lazy) {
            return;
          }
          if (trim2 && el.value.trim() === value) {
            return;
          }
          if ((number || el.type === "number") && toNumber(el.value) === value) {
            return;
          }
        }
        const newValue = value == null ? "" : value;
        if (el.value !== newValue) {
          el.value = newValue;
        }
      }
    };
    const vModelCheckbox = {
      // #4096 array checkboxes need to be deep traversed
      deep: true,
      created(el, _, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", () => {
          const modelValue = el._modelValue;
          const elementValue = getValue(el);
          const checked = el.checked;
          const assign2 = el._assign;
          if (isArray$2(modelValue)) {
            const index = looseIndexOf(modelValue, elementValue);
            const found = index !== -1;
            if (checked && !found) {
              assign2(modelValue.concat(elementValue));
            } else if (!checked && found) {
              const filtered = [...modelValue];
              filtered.splice(index, 1);
              assign2(filtered);
            }
          } else if (isSet(modelValue)) {
            const cloned = new Set(modelValue);
            if (checked) {
              cloned.add(elementValue);
            } else {
              cloned.delete(elementValue);
            }
            assign2(cloned);
          } else {
            assign2(getCheckboxValue(el, checked));
          }
        });
      },
      // set initial checked on mount to wait for true-value/false-value
      mounted: setChecked,
      beforeUpdate(el, binding, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
      }
    };
    function setChecked(el, { value, oldValue }, vnode) {
      el._modelValue = value;
      if (isArray$2(value)) {
        el.checked = looseIndexOf(value, vnode.props.value) > -1;
      } else if (isSet(value)) {
        el.checked = value.has(vnode.props.value);
      } else if (value !== oldValue) {
        el.checked = looseEqual(value, getCheckboxValue(el, true));
      }
    }
    const vModelRadio = {
      created(el, { value }, vnode) {
        el.checked = looseEqual(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", () => {
          el._assign(getValue(el));
        });
      },
      beforeUpdate(el, { value, oldValue }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) {
          el.checked = looseEqual(value, vnode.props.value);
        }
      }
    };
    function getValue(el) {
      return "_value" in el ? el._value : el.value;
    }
    function getCheckboxValue(el, checked) {
      const key = checked ? "_trueValue" : "_falseValue";
      return key in el ? el[key] : checked;
    }
    const systemModifiers = ["ctrl", "shift", "alt", "meta"];
    const modifierGuards = {
      stop: (e) => e.stopPropagation(),
      prevent: (e) => e.preventDefault(),
      self: (e) => e.target !== e.currentTarget,
      ctrl: (e) => !e.ctrlKey,
      shift: (e) => !e.shiftKey,
      alt: (e) => !e.altKey,
      meta: (e) => !e.metaKey,
      left: (e) => "button" in e && e.button !== 0,
      middle: (e) => "button" in e && e.button !== 1,
      right: (e) => "button" in e && e.button !== 2,
      exact: (e, modifiers) => systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m))
    };
    const withModifiers = (fn, modifiers) => {
      return (event, ...args) => {
        for (let i2 = 0; i2 < modifiers.length; i2++) {
          const guard = modifierGuards[modifiers[i2]];
          if (guard && guard(event, modifiers))
            return;
        }
        return fn(event, ...args);
      };
    };
    const keyNames = {
      esc: "escape",
      space: " ",
      up: "arrow-up",
      left: "arrow-left",
      right: "arrow-right",
      down: "arrow-down",
      delete: "backspace"
    };
    const withKeys = (fn, modifiers) => {
      return (event) => {
        if (!("key" in event)) {
          return;
        }
        const eventKey = hyphenate(event.key);
        if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
          return fn(event);
        }
      };
    };
    const vShow = {
      beforeMount(el, { value }, { transition }) {
        el._vod = el.style.display === "none" ? "" : el.style.display;
        if (transition && value) {
          transition.beforeEnter(el);
        } else {
          setDisplay(el, value);
        }
      },
      mounted(el, { value }, { transition }) {
        if (transition && value) {
          transition.enter(el);
        }
      },
      updated(el, { value, oldValue }, { transition }) {
        if (!value === !oldValue)
          return;
        if (transition) {
          if (value) {
            transition.beforeEnter(el);
            setDisplay(el, true);
            transition.enter(el);
          } else {
            transition.leave(el, () => {
              setDisplay(el, false);
            });
          }
        } else {
          setDisplay(el, value);
        }
      },
      beforeUnmount(el, { value }) {
        setDisplay(el, value);
      }
    };
    function setDisplay(el, value) {
      el.style.display = value ? el._vod : "none";
    }
    const rendererOptions = /* @__PURE__ */ extend$2({ patchProp }, nodeOps);
    let renderer;
    function ensureRenderer() {
      return renderer || (renderer = createRenderer(rendererOptions));
    }
    const createApp = (...args) => {
      const app = ensureRenderer().createApp(...args);
      const { mount } = app;
      app.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (!container)
          return;
        const component = app._component;
        if (!isFunction$4(component) && !component.render && !component.template) {
          component.template = container.innerHTML;
        }
        container.innerHTML = "";
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
          container.removeAttribute("v-cloak");
          container.setAttribute("data-v-app", "");
        }
        return proxy;
      };
      return app;
    };
    function normalizeContainer(container) {
      if (isString$2(container)) {
        const res = document.querySelector(container);
        return res;
      }
      return container;
    }
    var isVue2 = false;
    /*!
      * pinia v2.0.29
      * (c) 2023 Eduardo San Martin Morote
      * @license MIT
      */
    let activePinia;
    const setActivePinia = (pinia2) => activePinia = pinia2;
    const piniaSymbol = (
      /* istanbul ignore next */
      Symbol()
    );
    function isPlainObject$1(o) {
      return o && typeof o === "object" && Object.prototype.toString.call(o) === "[object Object]" && typeof o.toJSON !== "function";
    }
    var MutationType;
    (function(MutationType2) {
      MutationType2["direct"] = "direct";
      MutationType2["patchObject"] = "patch object";
      MutationType2["patchFunction"] = "patch function";
    })(MutationType || (MutationType = {}));
    function createPinia() {
      const scope = effectScope(true);
      const state = scope.run(() => ref({}));
      let _p = [];
      let toBeInstalled = [];
      const pinia2 = markRaw({
        install(app) {
          setActivePinia(pinia2);
          {
            pinia2._a = app;
            app.provide(piniaSymbol, pinia2);
            app.config.globalProperties.$pinia = pinia2;
            toBeInstalled.forEach((plugin) => _p.push(plugin));
            toBeInstalled = [];
          }
        },
        use(plugin) {
          if (!this._a && !isVue2) {
            toBeInstalled.push(plugin);
          } else {
            _p.push(plugin);
          }
          return this;
        },
        _p,
        // it's actually undefined here
        // @ts-expect-error
        _a: null,
        _e: scope,
        _s: /* @__PURE__ */ new Map(),
        state
      });
      return pinia2;
    }
    const noop$1 = () => {
    };
    function addSubscription(subscriptions, callback, detached, onCleanup = noop$1) {
      subscriptions.push(callback);
      const removeSubscription = () => {
        const idx = subscriptions.indexOf(callback);
        if (idx > -1) {
          subscriptions.splice(idx, 1);
          onCleanup();
        }
      };
      if (!detached && getCurrentScope()) {
        onScopeDispose(removeSubscription);
      }
      return removeSubscription;
    }
    function triggerSubscriptions(subscriptions, ...args) {
      subscriptions.slice().forEach((callback) => {
        callback(...args);
      });
    }
    function mergeReactiveObjects(target, patchToApply) {
      if (target instanceof Map && patchToApply instanceof Map) {
        patchToApply.forEach((value, key) => target.set(key, value));
      }
      if (target instanceof Set && patchToApply instanceof Set) {
        patchToApply.forEach(target.add, target);
      }
      for (const key in patchToApply) {
        if (!patchToApply.hasOwnProperty(key))
          continue;
        const subPatch = patchToApply[key];
        const targetValue = target[key];
        if (isPlainObject$1(targetValue) && isPlainObject$1(subPatch) && target.hasOwnProperty(key) && !isRef(subPatch) && !isReactive(subPatch)) {
          target[key] = mergeReactiveObjects(targetValue, subPatch);
        } else {
          target[key] = subPatch;
        }
      }
      return target;
    }
    const skipHydrateSymbol = (
      /* istanbul ignore next */
      Symbol()
    );
    function shouldHydrate(obj) {
      return !isPlainObject$1(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
    }
    const { assign } = Object;
    function isComputed(o) {
      return !!(isRef(o) && o.effect);
    }
    function createOptionsStore(id, options, pinia2, hot) {
      const { state, actions, getters } = options;
      const initialState = pinia2.state.value[id];
      let store;
      function setup() {
        if (!initialState && true) {
          {
            pinia2.state.value[id] = state ? state() : {};
          }
        }
        const localState = toRefs(pinia2.state.value[id]);
        return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {
          computedGetters[name] = markRaw(computed(() => {
            setActivePinia(pinia2);
            const store2 = pinia2._s.get(id);
            return getters[name].call(store2, store2);
          }));
          return computedGetters;
        }, {}));
      }
      store = createSetupStore(id, setup, options, pinia2, hot, true);
      store.$reset = function $reset() {
        const newState = state ? state() : {};
        this.$patch(($state) => {
          assign($state, newState);
        });
      };
      return store;
    }
    function createSetupStore($id, setup, options = {}, pinia2, hot, isOptionsStore) {
      let scope;
      const optionsForPlugin = assign({ actions: {} }, options);
      const $subscribeOptions = {
        deep: true
        // flush: 'post',
      };
      let isListening;
      let isSyncListening;
      let subscriptions = markRaw([]);
      let actionSubscriptions = markRaw([]);
      let debuggerEvents;
      const initialState = pinia2.state.value[$id];
      if (!isOptionsStore && !initialState && true) {
        {
          pinia2.state.value[$id] = {};
        }
      }
      ref({});
      let activeListener;
      function $patch(partialStateOrMutator) {
        let subscriptionMutation;
        isListening = isSyncListening = false;
        if (typeof partialStateOrMutator === "function") {
          partialStateOrMutator(pinia2.state.value[$id]);
          subscriptionMutation = {
            type: MutationType.patchFunction,
            storeId: $id,
            events: debuggerEvents
          };
        } else {
          mergeReactiveObjects(pinia2.state.value[$id], partialStateOrMutator);
          subscriptionMutation = {
            type: MutationType.patchObject,
            payload: partialStateOrMutator,
            storeId: $id,
            events: debuggerEvents
          };
        }
        const myListenerId = activeListener = Symbol();
        nextTick().then(() => {
          if (activeListener === myListenerId) {
            isListening = true;
          }
        });
        isSyncListening = true;
        triggerSubscriptions(subscriptions, subscriptionMutation, pinia2.state.value[$id]);
      }
      const $reset = noop$1;
      function $dispose() {
        scope.stop();
        subscriptions = [];
        actionSubscriptions = [];
        pinia2._s.delete($id);
      }
      function wrapAction(name, action) {
        return function() {
          setActivePinia(pinia2);
          const args = Array.from(arguments);
          const afterCallbackList = [];
          const onErrorCallbackList = [];
          function after(callback) {
            afterCallbackList.push(callback);
          }
          function onError(callback) {
            onErrorCallbackList.push(callback);
          }
          triggerSubscriptions(actionSubscriptions, {
            args,
            name,
            store,
            after,
            onError
          });
          let ret;
          try {
            ret = action.apply(this && this.$id === $id ? this : store, args);
          } catch (error) {
            triggerSubscriptions(onErrorCallbackList, error);
            throw error;
          }
          if (ret instanceof Promise) {
            return ret.then((value) => {
              triggerSubscriptions(afterCallbackList, value);
              return value;
            }).catch((error) => {
              triggerSubscriptions(onErrorCallbackList, error);
              return Promise.reject(error);
            });
          }
          triggerSubscriptions(afterCallbackList, ret);
          return ret;
        };
      }
      const partialStore = {
        _p: pinia2,
        // _s: scope,
        $id,
        $onAction: addSubscription.bind(null, actionSubscriptions),
        $patch,
        $reset,
        $subscribe(callback, options2 = {}) {
          const removeSubscription = addSubscription(subscriptions, callback, options2.detached, () => stopWatcher());
          const stopWatcher = scope.run(() => watch(() => pinia2.state.value[$id], (state) => {
            if (options2.flush === "sync" ? isSyncListening : isListening) {
              callback({
                storeId: $id,
                type: MutationType.direct,
                events: debuggerEvents
              }, state);
            }
          }, assign({}, $subscribeOptions, options2)));
          return removeSubscription;
        },
        $dispose
      };
      const store = reactive(partialStore);
      pinia2._s.set($id, store);
      const setupStore = pinia2._e.run(() => {
        scope = effectScope();
        return scope.run(() => setup());
      });
      for (const key in setupStore) {
        const prop = setupStore[key];
        if (isRef(prop) && !isComputed(prop) || isReactive(prop)) {
          if (!isOptionsStore) {
            if (initialState && shouldHydrate(prop)) {
              if (isRef(prop)) {
                prop.value = initialState[key];
              } else {
                mergeReactiveObjects(prop, initialState[key]);
              }
            }
            {
              pinia2.state.value[$id][key] = prop;
            }
          }
        } else if (typeof prop === "function") {
          const actionValue = wrapAction(key, prop);
          {
            setupStore[key] = actionValue;
          }
          optionsForPlugin.actions[key] = prop;
        } else
          ;
      }
      {
        assign(store, setupStore);
        assign(toRaw(store), setupStore);
      }
      Object.defineProperty(store, "$state", {
        get: () => pinia2.state.value[$id],
        set: (state) => {
          $patch(($state) => {
            assign($state, state);
          });
        }
      });
      pinia2._p.forEach((extender) => {
        {
          assign(store, scope.run(() => extender({
            store,
            app: pinia2._a,
            pinia: pinia2,
            options: optionsForPlugin
          })));
        }
      });
      if (initialState && isOptionsStore && options.hydrate) {
        options.hydrate(store.$state, initialState);
      }
      isListening = true;
      isSyncListening = true;
      return store;
    }
    function defineStore(idOrOptions, setup, setupOptions) {
      let id;
      let options;
      const isSetupStore = typeof setup === "function";
      if (typeof idOrOptions === "string") {
        id = idOrOptions;
        options = isSetupStore ? setupOptions : setup;
      } else {
        options = idOrOptions;
        id = idOrOptions.id;
      }
      function useStore2(pinia2, hot) {
        const currentInstance2 = getCurrentInstance();
        pinia2 = // in test mode, ignore the argument provided as we can always retrieve a
        // pinia instance with getActivePinia()
        pinia2 || currentInstance2 && inject(piniaSymbol, null);
        if (pinia2)
          setActivePinia(pinia2);
        pinia2 = activePinia;
        if (!pinia2._s.has(id)) {
          if (isSetupStore) {
            createSetupStore(id, setup, options, pinia2);
          } else {
            createOptionsStore(id, options, pinia2);
          }
        }
        const store = pinia2._s.get(id);
        return store;
      }
      useStore2.$id = id;
      return useStore2;
    }
    function mitt(n) {
      return { all: n = n || /* @__PURE__ */ new Map(), on: function(t, e) {
        var i2 = n.get(t);
        i2 ? i2.push(e) : n.set(t, [e]);
      }, off: function(t, e) {
        var i2 = n.get(t);
        i2 && (e ? i2.splice(i2.indexOf(e) >>> 0, 1) : n.set(t, []));
      }, emit: function(t, e) {
        var i2 = n.get(t);
        i2 && i2.slice().map(function(n2) {
          n2(e);
        }), (i2 = n.get("*")) && i2.slice().map(function(n2) {
          n2(t, e);
        });
      } };
    }
    const salesforceLightningDesignSystem_min = "";
    const spm = "";
    const spmKondo = "";
    const IconSettings = {
      name: "IconSettings",
      render() {
        const _default = this.$slots.default ? this.$slots.default()[0] : null;
        return _default;
      },
      props: {
        iconPath: String,
        actionSpritePath: String,
        customSpritePath: String,
        doctypeSpritePath: String,
        standardSpritePath: String,
        utilitySpritePath: String
      },
      provide() {
        return {
          $__getIconSettings: () => this.$props
        };
      }
    };
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x) {
      return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
    }
    var buffer = {};
    var base64Js = {};
    base64Js.byteLength = byteLength;
    base64Js.toByteArray = toByteArray;
    base64Js.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (var i = 0, len$1 = code.length; i < len$1; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start2, end2) {
      var tmp;
      var output = [];
      for (var i2 = start2; i2 < end2; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
    var ieee754 = {};
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    ieee754.read = function(buffer2, offset2, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i2 = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer2[offset2 + i2];
      i2 += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer2[offset2 + i2], i2 += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer2[offset2 + i2], i2 += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    ieee754.write = function(buffer2, value, offset2, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i2 = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer2[offset2 + i2] = m & 255, i2 += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer2[offset2 + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
      }
      buffer2[offset2 + i2 - d] |= s * 128;
    };
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    (function(exports2) {
      const base64 = base64Js;
      const ieee754$1 = ieee754;
      const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports2.Buffer = Buffer2;
      exports2.SlowBuffer = SlowBuffer;
      exports2.INSPECT_MAX_BYTES = 50;
      const K_MAX_LENGTH = 2147483647;
      exports2.kMaxLength = K_MAX_LENGTH;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto2 = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto2, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto2);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from2(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from2(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf2 = value.valueOf && value.valueOf();
        if (valueOf2 != null && valueOf2 !== value) {
          return Buffer2.from(valueOf2, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from2(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer2, Uint8Array);
      function assertSize(size2) {
        if (typeof size2 !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size2 < 0) {
          throw new RangeError('The value "' + size2 + '" is invalid for option "size"');
        }
      }
      function alloc(size2, fill, encoding) {
        assertSize(size2);
        if (size2 <= 0) {
          return createBuffer(size2);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size2).fill(fill, encoding) : createBuffer(size2).fill(fill);
        }
        return createBuffer(size2);
      }
      Buffer2.alloc = function(size2, fill, encoding) {
        return alloc(size2, fill, encoding);
      };
      function allocUnsafe(size2) {
        assertSize(size2);
        return createBuffer(size2 < 0 ? 0 : checked(size2) | 0);
      }
      Buffer2.allocUnsafe = function(size2) {
        return allocUnsafe(size2);
      };
      Buffer2.allocUnsafeSlow = function(size2) {
        return allocUnsafe(size2);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength2(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i2 = 0; i2 < length; i2 += 1) {
          buf[i2] = array[i2] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len2 = checked(obj.length) | 0;
          const buf = createBuffer(len2);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len2);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer2(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i2 = 0, len2 = Math.min(x, y); i2 < len2; ++i2) {
          if (a[i2] !== b[i2]) {
            x = a[i2];
            y = b[i2];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i2;
        if (length === void 0) {
          length = 0;
          for (i2 = 0; i2 < list.length; ++i2) {
            length += list[i2].length;
          }
        }
        const buffer2 = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          let buf = list[i2];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer2.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer2, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer2,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer2, pos);
          }
          pos += buf.length;
        }
        return buffer2;
      };
      function byteLength2(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len2 = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len2 === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len2;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len2 * 2;
            case "hex":
              return len2 >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength2;
      function slowToString(encoding, start2, end2) {
        let loweredCase = false;
        if (start2 === void 0 || start2 < 0) {
          start2 = 0;
        }
        if (start2 > this.length) {
          return "";
        }
        if (end2 === void 0 || end2 > this.length) {
          end2 = this.length;
        }
        if (end2 <= 0) {
          return "";
        }
        end2 >>>= 0;
        start2 >>>= 0;
        if (end2 <= start2) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start2, end2);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start2, end2);
            case "ascii":
              return asciiSlice(this, start2, end2);
            case "latin1":
            case "binary":
              return latin1Slice(this, start2, end2);
            case "base64":
              return base64Slice(this, start2, end2);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start2, end2);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i2 = b[n];
        b[n] = b[m];
        b[m] = i2;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len2 = this.length;
        if (len2 % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i2 = 0; i2 < len2; i2 += 2) {
          swap(this, i2, i2 + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len2 = this.length;
        if (len2 % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i2 = 0; i2 < len2; i2 += 4) {
          swap(this, i2, i2 + 3);
          swap(this, i2 + 1, i2 + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len2 = this.length;
        if (len2 % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i2 = 0; i2 < len2; i2 += 8) {
          swap(this, i2, i2 + 7);
          swap(this, i2 + 1, i2 + 6);
          swap(this, i2 + 2, i2 + 5);
          swap(this, i2 + 3, i2 + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString2() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect2() {
        let str = "";
        const max2 = exports2.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max2).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max2)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start2, end2, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start2 === void 0) {
          start2 = 0;
        }
        if (end2 === void 0) {
          end2 = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start2 < 0 || end2 > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start2 >= end2) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start2 >= end2) {
          return 1;
        }
        start2 >>>= 0;
        end2 >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end2 - start2;
        const len2 = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start2, end2);
        for (let i2 = 0; i2 < len2; ++i2) {
          if (thisCopy[i2] !== targetCopy[i2]) {
            x = thisCopy[i2];
            y = targetCopy[i2];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
        if (buffer2.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer2.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer2.length + byteOffset;
        if (byteOffset >= buffer2.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer2.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read2(buf, i3) {
          if (indexSize === 1) {
            return buf[i3];
          } else {
            return buf.readUInt16BE(i3 * indexSize);
          }
        }
        let i2;
        if (dir) {
          let foundIndex = -1;
          for (i2 = byteOffset; i2 < arrLength; i2++) {
            if (read2(arr, i2) === read2(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i2;
              if (i2 - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i2 -= i2 - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i2 = byteOffset; i2 >= 0; i2--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read2(arr, i2 + j) !== read2(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i2;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf2(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset2, length) {
        offset2 = Number(offset2) || 0;
        const remaining = buf.length - offset2;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i2;
        for (i2 = 0; i2 < length; ++i2) {
          const parsed = parseInt(string.substr(i2 * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i2;
          buf[offset2 + i2] = parsed;
        }
        return i2;
      }
      function utf8Write(buf, string, offset2, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset2), buf, offset2, length);
      }
      function asciiWrite(buf, string, offset2, length) {
        return blitBuffer(asciiToBytes(string), buf, offset2, length);
      }
      function base64Write(buf, string, offset2, length) {
        return blitBuffer(base64ToBytes(string), buf, offset2, length);
      }
      function ucs2Write(buf, string, offset2, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset2), buf, offset2, length);
      }
      Buffer2.prototype.write = function write2(string, offset2, length, encoding) {
        if (offset2 === void 0) {
          encoding = "utf8";
          length = this.length;
          offset2 = 0;
        } else if (length === void 0 && typeof offset2 === "string") {
          encoding = offset2;
          length = this.length;
          offset2 = 0;
        } else if (isFinite(offset2)) {
          offset2 = offset2 >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset2;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset2 < 0) || offset2 > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset2, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset2, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset2, length);
            case "base64":
              return base64Write(this, string, offset2, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset2, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON2() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start2, end2) {
        if (start2 === 0 && end2 === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start2, end2));
        }
      }
      function utf8Slice(buf, start2, end2) {
        end2 = Math.min(buf.length, end2);
        const res = [];
        let i2 = start2;
        while (i2 < end2) {
          const firstByte = buf[i2];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i2 + bytesPerSequence <= end2) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i2 + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i2 + 1];
                thirdByte = buf[i2 + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i2 + 1];
                thirdByte = buf[i2 + 2];
                fourthByte = buf[i2 + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i2 += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      const MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len2 = codePoints.length;
        if (len2 <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i2 = 0;
        while (i2 < len2) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start2, end2) {
        let ret = "";
        end2 = Math.min(buf.length, end2);
        for (let i2 = start2; i2 < end2; ++i2) {
          ret += String.fromCharCode(buf[i2] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start2, end2) {
        let ret = "";
        end2 = Math.min(buf.length, end2);
        for (let i2 = start2; i2 < end2; ++i2) {
          ret += String.fromCharCode(buf[i2]);
        }
        return ret;
      }
      function hexSlice(buf, start2, end2) {
        const len2 = buf.length;
        if (!start2 || start2 < 0)
          start2 = 0;
        if (!end2 || end2 < 0 || end2 > len2)
          end2 = len2;
        let out = "";
        for (let i2 = start2; i2 < end2; ++i2) {
          out += hexSliceLookupTable[buf[i2]];
        }
        return out;
      }
      function utf16leSlice(buf, start2, end2) {
        const bytes = buf.slice(start2, end2);
        let res = "";
        for (let i2 = 0; i2 < bytes.length - 1; i2 += 2) {
          res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start2, end2) {
        const len2 = this.length;
        start2 = ~~start2;
        end2 = end2 === void 0 ? len2 : ~~end2;
        if (start2 < 0) {
          start2 += len2;
          if (start2 < 0)
            start2 = 0;
        } else if (start2 > len2) {
          start2 = len2;
        }
        if (end2 < 0) {
          end2 += len2;
          if (end2 < 0)
            end2 = 0;
        } else if (end2 > len2) {
          end2 = len2;
        }
        if (end2 < start2)
          end2 = start2;
        const newBuf = this.subarray(start2, end2);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset2, ext, length) {
        if (offset2 % 1 !== 0 || offset2 < 0)
          throw new RangeError("offset is not uint");
        if (offset2 + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset2, byteLength3, noAssert) {
        offset2 = offset2 >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert)
          checkOffset(offset2, byteLength3, this.length);
        let val = this[offset2];
        let mul = 1;
        let i2 = 0;
        while (++i2 < byteLength3 && (mul *= 256)) {
          val += this[offset2 + i2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset2, byteLength3, noAssert) {
        offset2 = offset2 >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert) {
          checkOffset(offset2, byteLength3, this.length);
        }
        let val = this[offset2 + --byteLength3];
        let mul = 1;
        while (byteLength3 > 0 && (mul *= 256)) {
          val += this[offset2 + --byteLength3] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 1, this.length);
        return this[offset2];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 2, this.length);
        return this[offset2] | this[offset2 + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 2, this.length);
        return this[offset2] << 8 | this[offset2 + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 4, this.length);
        return (this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16) + this[offset2 + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 4, this.length);
        return this[offset2] * 16777216 + (this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset2) {
        offset2 = offset2 >>> 0;
        validateNumber(offset2, "offset");
        const first = this[offset2];
        const last = this[offset2 + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset2, this.length - 8);
        }
        const lo = first + this[++offset2] * 2 ** 8 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 24;
        const hi = this[++offset2] + this[++offset2] * 2 ** 8 + this[++offset2] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset2) {
        offset2 = offset2 >>> 0;
        validateNumber(offset2, "offset");
        const first = this[offset2];
        const last = this[offset2 + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset2, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + this[++offset2];
        const lo = this[++offset2] * 2 ** 24 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset2, byteLength3, noAssert) {
        offset2 = offset2 >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert)
          checkOffset(offset2, byteLength3, this.length);
        let val = this[offset2];
        let mul = 1;
        let i2 = 0;
        while (++i2 < byteLength3 && (mul *= 256)) {
          val += this[offset2 + i2] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength3);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset2, byteLength3, noAssert) {
        offset2 = offset2 >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert)
          checkOffset(offset2, byteLength3, this.length);
        let i2 = byteLength3;
        let mul = 1;
        let val = this[offset2 + --i2];
        while (i2 > 0 && (mul *= 256)) {
          val += this[offset2 + --i2] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength3);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 1, this.length);
        if (!(this[offset2] & 128))
          return this[offset2];
        return (255 - this[offset2] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 2, this.length);
        const val = this[offset2] | this[offset2 + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 2, this.length);
        const val = this[offset2 + 1] | this[offset2] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 4, this.length);
        return this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16 | this[offset2 + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 4, this.length);
        return this[offset2] << 24 | this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset2) {
        offset2 = offset2 >>> 0;
        validateNumber(offset2, "offset");
        const first = this[offset2];
        const last = this[offset2 + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset2, this.length - 8);
        }
        const val = this[offset2 + 4] + this[offset2 + 5] * 2 ** 8 + this[offset2 + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset2] * 2 ** 8 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset2) {
        offset2 = offset2 >>> 0;
        validateNumber(offset2, "offset");
        const first = this[offset2];
        const last = this[offset2 + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset2, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + this[++offset2];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset2] * 2 ** 24 + this[++offset2] * 2 ** 16 + this[++offset2] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 4, this.length);
        return ieee754$1.read(this, offset2, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 4, this.length);
        return ieee754$1.read(this, offset2, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 8, this.length);
        return ieee754$1.read(this, offset2, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset2, noAssert) {
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkOffset(offset2, 8, this.length);
        return ieee754$1.read(this, offset2, false, 52, 8);
      };
      function checkInt(buf, value, offset2, ext, max2, min2) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max2 || value < min2)
          throw new RangeError('"value" argument is out of bounds');
        if (offset2 + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset2, byteLength3, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
          checkInt(this, value, offset2, byteLength3, maxBytes, 0);
        }
        let mul = 1;
        let i2 = 0;
        this[offset2] = value & 255;
        while (++i2 < byteLength3 && (mul *= 256)) {
          this[offset2 + i2] = value / mul & 255;
        }
        return offset2 + byteLength3;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset2, byteLength3, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
          checkInt(this, value, offset2, byteLength3, maxBytes, 0);
        }
        let i2 = byteLength3 - 1;
        let mul = 1;
        this[offset2 + i2] = value & 255;
        while (--i2 >= 0 && (mul *= 256)) {
          this[offset2 + i2] = value / mul & 255;
        }
        return offset2 + byteLength3;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset2, 1, 255, 0);
        this[offset2] = value & 255;
        return offset2 + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset2, 2, 65535, 0);
        this[offset2] = value & 255;
        this[offset2 + 1] = value >>> 8;
        return offset2 + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset2, 2, 65535, 0);
        this[offset2] = value >>> 8;
        this[offset2 + 1] = value & 255;
        return offset2 + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset2, 4, 4294967295, 0);
        this[offset2 + 3] = value >>> 24;
        this[offset2 + 2] = value >>> 16;
        this[offset2 + 1] = value >>> 8;
        this[offset2] = value & 255;
        return offset2 + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset2, 4, 4294967295, 0);
        this[offset2] = value >>> 24;
        this[offset2 + 1] = value >>> 16;
        this[offset2 + 2] = value >>> 8;
        this[offset2 + 3] = value & 255;
        return offset2 + 4;
      };
      function wrtBigUInt64LE(buf, value, offset2, min2, max2) {
        checkIntBI(value, min2, max2, buf, offset2, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset2++] = lo;
        lo = lo >> 8;
        buf[offset2++] = lo;
        lo = lo >> 8;
        buf[offset2++] = lo;
        lo = lo >> 8;
        buf[offset2++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset2++] = hi;
        hi = hi >> 8;
        buf[offset2++] = hi;
        hi = hi >> 8;
        buf[offset2++] = hi;
        hi = hi >> 8;
        buf[offset2++] = hi;
        return offset2;
      }
      function wrtBigUInt64BE(buf, value, offset2, min2, max2) {
        checkIntBI(value, min2, max2, buf, offset2, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset2 + 7] = lo;
        lo = lo >> 8;
        buf[offset2 + 6] = lo;
        lo = lo >> 8;
        buf[offset2 + 5] = lo;
        lo = lo >> 8;
        buf[offset2 + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset2 + 3] = hi;
        hi = hi >> 8;
        buf[offset2 + 2] = hi;
        hi = hi >> 8;
        buf[offset2 + 1] = hi;
        hi = hi >> 8;
        buf[offset2] = hi;
        return offset2 + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset2 = 0) {
        return wrtBigUInt64LE(this, value, offset2, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset2 = 0) {
        return wrtBigUInt64BE(this, value, offset2, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset2, byteLength3, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength3 - 1);
          checkInt(this, value, offset2, byteLength3, limit - 1, -limit);
        }
        let i2 = 0;
        let mul = 1;
        let sub = 0;
        this[offset2] = value & 255;
        while (++i2 < byteLength3 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset2 + i2 - 1] !== 0) {
            sub = 1;
          }
          this[offset2 + i2] = (value / mul >> 0) - sub & 255;
        }
        return offset2 + byteLength3;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset2, byteLength3, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength3 - 1);
          checkInt(this, value, offset2, byteLength3, limit - 1, -limit);
        }
        let i2 = byteLength3 - 1;
        let mul = 1;
        let sub = 0;
        this[offset2 + i2] = value & 255;
        while (--i2 >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset2 + i2 + 1] !== 0) {
            sub = 1;
          }
          this[offset2 + i2] = (value / mul >> 0) - sub & 255;
        }
        return offset2 + byteLength3;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset2, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset2] = value & 255;
        return offset2 + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset2, 2, 32767, -32768);
        this[offset2] = value & 255;
        this[offset2 + 1] = value >>> 8;
        return offset2 + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset2, 2, 32767, -32768);
        this[offset2] = value >>> 8;
        this[offset2 + 1] = value & 255;
        return offset2 + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset2, 4, 2147483647, -2147483648);
        this[offset2] = value & 255;
        this[offset2 + 1] = value >>> 8;
        this[offset2 + 2] = value >>> 16;
        this[offset2 + 3] = value >>> 24;
        return offset2 + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset2, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert)
          checkInt(this, value, offset2, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset2] = value >>> 24;
        this[offset2 + 1] = value >>> 16;
        this[offset2 + 2] = value >>> 8;
        this[offset2 + 3] = value & 255;
        return offset2 + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset2 = 0) {
        return wrtBigUInt64LE(this, value, offset2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset2 = 0) {
        return wrtBigUInt64BE(this, value, offset2, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset2, ext, max2, min2) {
        if (offset2 + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset2 < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset2, littleEndian, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset2, 4);
        }
        ieee754$1.write(buf, value, offset2, littleEndian, 23, 4);
        return offset2 + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset2, noAssert) {
        return writeFloat(this, value, offset2, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset2, noAssert) {
        return writeFloat(this, value, offset2, false, noAssert);
      };
      function writeDouble(buf, value, offset2, littleEndian, noAssert) {
        value = +value;
        offset2 = offset2 >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset2, 8);
        }
        ieee754$1.write(buf, value, offset2, littleEndian, 52, 8);
        return offset2 + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset2, noAssert) {
        return writeDouble(this, value, offset2, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset2, noAssert) {
        return writeDouble(this, value, offset2, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start2, end2) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start2)
          start2 = 0;
        if (!end2 && end2 !== 0)
          end2 = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end2 > 0 && end2 < start2)
          end2 = start2;
        if (end2 === start2)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start2 < 0 || start2 >= this.length)
          throw new RangeError("Index out of range");
        if (end2 < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end2 > this.length)
          end2 = this.length;
        if (target.length - targetStart < end2 - start2) {
          end2 = target.length - targetStart + start2;
        }
        const len2 = end2 - start2;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start2, end2);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start2, end2),
            targetStart
          );
        }
        return len2;
      };
      Buffer2.prototype.fill = function fill(val, start2, end2, encoding) {
        if (typeof val === "string") {
          if (typeof start2 === "string") {
            encoding = start2;
            start2 = 0;
            end2 = this.length;
          } else if (typeof end2 === "string") {
            encoding = end2;
            end2 = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code2 = val.charCodeAt(0);
            if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
              val = code2;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start2 < 0 || this.length < start2 || this.length < end2) {
          throw new RangeError("Out of range index");
        }
        if (end2 <= start2) {
          return this;
        }
        start2 = start2 >>> 0;
        end2 = end2 === void 0 ? this.length : end2 >>> 0;
        if (!val)
          val = 0;
        let i2;
        if (typeof val === "number") {
          for (i2 = start2; i2 < end2; ++i2) {
            this[i2] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len2 = bytes.length;
          if (len2 === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i2 = 0; i2 < end2 - start2; ++i2) {
            this[i2 + start2] = bytes[i2 % len2];
          }
        }
        return this;
      };
      const errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i2 = val.length;
        const start2 = val[0] === "-" ? 1 : 0;
        for (; i2 >= start2 + 4; i2 -= 3) {
          res = `_${val.slice(i2 - 3, i2)}${res}`;
        }
        return `${val.slice(0, i2)}${res}`;
      }
      function checkBounds(buf, offset2, byteLength3) {
        validateNumber(offset2, "offset");
        if (buf[offset2] === void 0 || buf[offset2 + byteLength3] === void 0) {
          boundsError(offset2, buf.length - (byteLength3 + 1));
        }
      }
      function checkIntBI(value, min2, max2, buf, offset2, byteLength3) {
        if (value > max2 || value < min2) {
          const n = typeof min2 === "bigint" ? "n" : "";
          let range;
          if (byteLength3 > 3) {
            if (min2 === 0 || min2 === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength3 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength3 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength3 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min2}${n} and <= ${max2}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset2, byteLength3);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i2 = 0; i2 < length; ++i2) {
          codePoint = string.charCodeAt(i2);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i2 + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i2 = 0; i2 < str.length; ++i2) {
          byteArray.push(str.charCodeAt(i2) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i2 = 0; i2 < str.length; ++i2) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i2);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset2, length) {
        let i2;
        for (i2 = 0; i2 < length; ++i2) {
          if (i2 + offset2 >= dst.length || i2 >= src.length)
            break;
          dst[i2 + offset2] = src[i2];
        }
        return i2;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      const hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i2 = 0; i2 < 16; ++i2) {
          const i16 = i2 * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i2] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    })(buffer);
    var papaparse_min = { exports: {} };
    /* @license
    Papa Parse
    v5.3.2
    https://github.com/mholt/PapaParse
    License: MIT
    */
    (function(module2, exports2) {
      !function(e, t) {
        module2.exports = t();
      }(commonjsGlobal, function s() {
        var f = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== f ? f : {};
        var n = !f.document && !!f.postMessage, o = n && /blob:/i.test((f.location || {}).protocol), a = {}, h2 = 0, b = { parse: function(e, t) {
          var i3 = (t = t || {}).dynamicTyping || false;
          M(i3) && (t.dynamicTypingFunction = i3, i3 = {});
          if (t.dynamicTyping = i3, t.transform = !!M(t.transform) && t.transform, t.worker && b.WORKERS_SUPPORTED) {
            var r = function() {
              if (!b.WORKERS_SUPPORTED)
                return false;
              var e2 = (i4 = f.URL || f.webkitURL || null, r2 = s.toString(), b.BLOB_URL || (b.BLOB_URL = i4.createObjectURL(new Blob(["(", r2, ")();"], { type: "text/javascript" })))), t2 = new f.Worker(e2);
              var i4, r2;
              return t2.onmessage = _, t2.id = h2++, a[t2.id] = t2;
            }();
            return r.userStep = t.step, r.userChunk = t.chunk, r.userComplete = t.complete, r.userError = t.error, t.step = M(t.step), t.chunk = M(t.chunk), t.complete = M(t.complete), t.error = M(t.error), delete t.worker, void r.postMessage({ input: e, config: t, workerId: r.id });
          }
          var n2 = null;
          b.NODE_STREAM_INPUT, "string" == typeof e ? n2 = t.download ? new l(t) : new p2(t) : true === e.readable && M(e.read) && M(e.on) ? n2 = new g(t) : (f.File && e instanceof File || e instanceof Object) && (n2 = new c(t));
          return n2.stream(e);
        }, unparse: function(e, t) {
          var n2 = false, _2 = true, m2 = ",", y2 = "\r\n", s2 = '"', a2 = s2 + s2, i3 = false, r = null, o2 = false;
          !function() {
            if ("object" != typeof t)
              return;
            "string" != typeof t.delimiter || b.BAD_DELIMITERS.filter(function(e2) {
              return -1 !== t.delimiter.indexOf(e2);
            }).length || (m2 = t.delimiter);
            ("boolean" == typeof t.quotes || "function" == typeof t.quotes || Array.isArray(t.quotes)) && (n2 = t.quotes);
            "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (i3 = t.skipEmptyLines);
            "string" == typeof t.newline && (y2 = t.newline);
            "string" == typeof t.quoteChar && (s2 = t.quoteChar);
            "boolean" == typeof t.header && (_2 = t.header);
            if (Array.isArray(t.columns)) {
              if (0 === t.columns.length)
                throw new Error("Option columns is empty");
              r = t.columns;
            }
            void 0 !== t.escapeChar && (a2 = t.escapeChar + s2);
            ("boolean" == typeof t.escapeFormulae || t.escapeFormulae instanceof RegExp) && (o2 = t.escapeFormulae instanceof RegExp ? t.escapeFormulae : /^[=+\-@\t\r].*$/);
          }();
          var h3 = new RegExp(j(s2), "g");
          "string" == typeof e && (e = JSON.parse(e));
          if (Array.isArray(e)) {
            if (!e.length || Array.isArray(e[0]))
              return u2(null, e, i3);
            if ("object" == typeof e[0])
              return u2(r || Object.keys(e[0]), e, i3);
          } else if ("object" == typeof e)
            return "string" == typeof e.data && (e.data = JSON.parse(e.data)), Array.isArray(e.data) && (e.fields || (e.fields = e.meta && e.meta.fields || r), e.fields || (e.fields = Array.isArray(e.data[0]) ? e.fields : "object" == typeof e.data[0] ? Object.keys(e.data[0]) : []), Array.isArray(e.data[0]) || "object" == typeof e.data[0] || (e.data = [e.data])), u2(e.fields || [], e.data || [], i3);
          throw new Error("Unable to serialize unrecognized input");
          function u2(e2, t2, i4) {
            var r2 = "";
            "string" == typeof e2 && (e2 = JSON.parse(e2)), "string" == typeof t2 && (t2 = JSON.parse(t2));
            var n3 = Array.isArray(e2) && 0 < e2.length, s3 = !Array.isArray(t2[0]);
            if (n3 && _2) {
              for (var a3 = 0; a3 < e2.length; a3++)
                0 < a3 && (r2 += m2), r2 += v2(e2[a3], a3);
              0 < t2.length && (r2 += y2);
            }
            for (var o3 = 0; o3 < t2.length; o3++) {
              var h4 = n3 ? e2.length : t2[o3].length, u3 = false, f2 = n3 ? 0 === Object.keys(t2[o3]).length : 0 === t2[o3].length;
              if (i4 && !n3 && (u3 = "greedy" === i4 ? "" === t2[o3].join("").trim() : 1 === t2[o3].length && 0 === t2[o3][0].length), "greedy" === i4 && n3) {
                for (var d2 = [], l2 = 0; l2 < h4; l2++) {
                  var c2 = s3 ? e2[l2] : l2;
                  d2.push(t2[o3][c2]);
                }
                u3 = "" === d2.join("").trim();
              }
              if (!u3) {
                for (var p3 = 0; p3 < h4; p3++) {
                  0 < p3 && !f2 && (r2 += m2);
                  var g2 = n3 && s3 ? e2[p3] : p3;
                  r2 += v2(t2[o3][g2], p3);
                }
                o3 < t2.length - 1 && (!i4 || 0 < h4 && !f2) && (r2 += y2);
              }
            }
            return r2;
          }
          function v2(e2, t2) {
            if (null == e2)
              return "";
            if (e2.constructor === Date)
              return JSON.stringify(e2).slice(1, 25);
            var i4 = false;
            o2 && "string" == typeof e2 && o2.test(e2) && (e2 = "'" + e2, i4 = true);
            var r2 = e2.toString().replace(h3, a2);
            return (i4 = i4 || true === n2 || "function" == typeof n2 && n2(e2, t2) || Array.isArray(n2) && n2[t2] || function(e3, t3) {
              for (var i5 = 0; i5 < t3.length; i5++)
                if (-1 < e3.indexOf(t3[i5]))
                  return true;
              return false;
            }(r2, b.BAD_DELIMITERS) || -1 < r2.indexOf(m2) || " " === r2.charAt(0) || " " === r2.charAt(r2.length - 1)) ? s2 + r2 + s2 : r2;
          }
        } };
        if (b.RECORD_SEP = String.fromCharCode(30), b.UNIT_SEP = String.fromCharCode(31), b.BYTE_ORDER_MARK = "\uFEFF", b.BAD_DELIMITERS = ["\r", "\n", '"', b.BYTE_ORDER_MARK], b.WORKERS_SUPPORTED = !n && !!f.Worker, b.NODE_STREAM_INPUT = 1, b.LocalChunkSize = 10485760, b.RemoteChunkSize = 5242880, b.DefaultDelimiter = ",", b.Parser = E, b.ParserHandle = i2, b.NetworkStreamer = l, b.FileStreamer = c, b.StringStreamer = p2, b.ReadableStreamStreamer = g, f.jQuery) {
          var d = f.jQuery;
          d.fn.parse = function(o2) {
            var i3 = o2.config || {}, h3 = [];
            return this.each(function(e2) {
              if (!("INPUT" === d(this).prop("tagName").toUpperCase() && "file" === d(this).attr("type").toLowerCase() && f.FileReader) || !this.files || 0 === this.files.length)
                return true;
              for (var t = 0; t < this.files.length; t++)
                h3.push({ file: this.files[t], inputElem: this, instanceConfig: d.extend({}, i3) });
            }), e(), this;
            function e() {
              if (0 !== h3.length) {
                var e2, t, i4, r, n2 = h3[0];
                if (M(o2.before)) {
                  var s2 = o2.before(n2.file, n2.inputElem);
                  if ("object" == typeof s2) {
                    if ("abort" === s2.action)
                      return e2 = "AbortError", t = n2.file, i4 = n2.inputElem, r = s2.reason, void (M(o2.error) && o2.error({ name: e2 }, t, i4, r));
                    if ("skip" === s2.action)
                      return void u2();
                    "object" == typeof s2.config && (n2.instanceConfig = d.extend(n2.instanceConfig, s2.config));
                  } else if ("skip" === s2)
                    return void u2();
                }
                var a2 = n2.instanceConfig.complete;
                n2.instanceConfig.complete = function(e3) {
                  M(a2) && a2(e3, n2.file, n2.inputElem), u2();
                }, b.parse(n2.file, n2.instanceConfig);
              } else
                M(o2.complete) && o2.complete();
            }
            function u2() {
              h3.splice(0, 1), e();
            }
          };
        }
        function u(e) {
          this._handle = null, this._finished = false, this._completed = false, this._halted = false, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = true, this._completeResults = { data: [], errors: [], meta: {} }, (function(e2) {
            var t = w(e2);
            t.chunkSize = parseInt(t.chunkSize), e2.step || e2.chunk || (t.chunkSize = null);
            this._handle = new i2(t), (this._handle.streamer = this)._config = t;
          }).call(this, e), this.parseChunk = function(e2, t) {
            if (this.isFirstChunk && M(this._config.beforeFirstChunk)) {
              var i3 = this._config.beforeFirstChunk(e2);
              void 0 !== i3 && (e2 = i3);
            }
            this.isFirstChunk = false, this._halted = false;
            var r = this._partialLine + e2;
            this._partialLine = "";
            var n2 = this._handle.parse(r, this._baseIndex, !this._finished);
            if (!this._handle.paused() && !this._handle.aborted()) {
              var s2 = n2.meta.cursor;
              this._finished || (this._partialLine = r.substring(s2 - this._baseIndex), this._baseIndex = s2), n2 && n2.data && (this._rowCount += n2.data.length);
              var a2 = this._finished || this._config.preview && this._rowCount >= this._config.preview;
              if (o)
                f.postMessage({ results: n2, workerId: b.WORKER_ID, finished: a2 });
              else if (M(this._config.chunk) && !t) {
                if (this._config.chunk(n2, this._handle), this._handle.paused() || this._handle.aborted())
                  return void (this._halted = true);
                n2 = void 0, this._completeResults = void 0;
              }
              return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(n2.data), this._completeResults.errors = this._completeResults.errors.concat(n2.errors), this._completeResults.meta = n2.meta), this._completed || !a2 || !M(this._config.complete) || n2 && n2.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = true), a2 || n2 && n2.meta.paused || this._nextChunk(), n2;
            }
            this._halted = true;
          }, this._sendError = function(e2) {
            M(this._config.error) ? this._config.error(e2) : o && this._config.error && f.postMessage({ workerId: b.WORKER_ID, error: e2, finished: false });
          };
        }
        function l(e) {
          var r;
          (e = e || {}).chunkSize || (e.chunkSize = b.RemoteChunkSize), u.call(this, e), this._nextChunk = n ? function() {
            this._readChunk(), this._chunkLoaded();
          } : function() {
            this._readChunk();
          }, this.stream = function(e2) {
            this._input = e2, this._nextChunk();
          }, this._readChunk = function() {
            if (this._finished)
              this._chunkLoaded();
            else {
              if (r = new XMLHttpRequest(), this._config.withCredentials && (r.withCredentials = this._config.withCredentials), n || (r.onload = v(this._chunkLoaded, this), r.onerror = v(this._chunkError, this)), r.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !n), this._config.downloadRequestHeaders) {
                var e2 = this._config.downloadRequestHeaders;
                for (var t in e2)
                  r.setRequestHeader(t, e2[t]);
              }
              if (this._config.chunkSize) {
                var i3 = this._start + this._config.chunkSize - 1;
                r.setRequestHeader("Range", "bytes=" + this._start + "-" + i3);
              }
              try {
                r.send(this._config.downloadRequestBody);
              } catch (e3) {
                this._chunkError(e3.message);
              }
              n && 0 === r.status && this._chunkError();
            }
          }, this._chunkLoaded = function() {
            4 === r.readyState && (r.status < 200 || 400 <= r.status ? this._chunkError() : (this._start += this._config.chunkSize ? this._config.chunkSize : r.responseText.length, this._finished = !this._config.chunkSize || this._start >= function(e2) {
              var t = e2.getResponseHeader("Content-Range");
              if (null === t)
                return -1;
              return parseInt(t.substring(t.lastIndexOf("/") + 1));
            }(r), this.parseChunk(r.responseText)));
          }, this._chunkError = function(e2) {
            var t = r.statusText || e2;
            this._sendError(new Error(t));
          };
        }
        function c(e) {
          var r, n2;
          (e = e || {}).chunkSize || (e.chunkSize = b.LocalChunkSize), u.call(this, e);
          var s2 = "undefined" != typeof FileReader;
          this.stream = function(e2) {
            this._input = e2, n2 = e2.slice || e2.webkitSlice || e2.mozSlice, s2 ? ((r = new FileReader()).onload = v(this._chunkLoaded, this), r.onerror = v(this._chunkError, this)) : r = new FileReaderSync(), this._nextChunk();
          }, this._nextChunk = function() {
            this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
          }, this._readChunk = function() {
            var e2 = this._input;
            if (this._config.chunkSize) {
              var t = Math.min(this._start + this._config.chunkSize, this._input.size);
              e2 = n2.call(e2, this._start, t);
            }
            var i3 = r.readAsText(e2, this._config.encoding);
            s2 || this._chunkLoaded({ target: { result: i3 } });
          }, this._chunkLoaded = function(e2) {
            this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e2.target.result);
          }, this._chunkError = function() {
            this._sendError(r.error);
          };
        }
        function p2(e) {
          var i3;
          u.call(this, e = e || {}), this.stream = function(e2) {
            return i3 = e2, this._nextChunk();
          }, this._nextChunk = function() {
            if (!this._finished) {
              var e2, t = this._config.chunkSize;
              return t ? (e2 = i3.substring(0, t), i3 = i3.substring(t)) : (e2 = i3, i3 = ""), this._finished = !i3, this.parseChunk(e2);
            }
          };
        }
        function g(e) {
          u.call(this, e = e || {});
          var t = [], i3 = true, r = false;
          this.pause = function() {
            u.prototype.pause.apply(this, arguments), this._input.pause();
          }, this.resume = function() {
            u.prototype.resume.apply(this, arguments), this._input.resume();
          }, this.stream = function(e2) {
            this._input = e2, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
          }, this._checkIsFinished = function() {
            r && 1 === t.length && (this._finished = true);
          }, this._nextChunk = function() {
            this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : i3 = true;
          }, this._streamData = v(function(e2) {
            try {
              t.push("string" == typeof e2 ? e2 : e2.toString(this._config.encoding)), i3 && (i3 = false, this._checkIsFinished(), this.parseChunk(t.shift()));
            } catch (e3) {
              this._streamError(e3);
            }
          }, this), this._streamError = v(function(e2) {
            this._streamCleanUp(), this._sendError(e2);
          }, this), this._streamEnd = v(function() {
            this._streamCleanUp(), r = true, this._streamData("");
          }, this), this._streamCleanUp = v(function() {
            this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
          }, this);
        }
        function i2(m2) {
          var a2, o2, h3, r = Math.pow(2, 53), n2 = -r, s2 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, u2 = /^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/, t = this, i3 = 0, f2 = 0, d2 = false, e = false, l2 = [], c2 = { data: [], errors: [], meta: {} };
          if (M(m2.step)) {
            var p3 = m2.step;
            m2.step = function(e2) {
              if (c2 = e2, _2())
                g2();
              else {
                if (g2(), 0 === c2.data.length)
                  return;
                i3 += e2.data.length, m2.preview && i3 > m2.preview ? o2.abort() : (c2.data = c2.data[0], p3(c2, t));
              }
            };
          }
          function y2(e2) {
            return "greedy" === m2.skipEmptyLines ? "" === e2.join("").trim() : 1 === e2.length && 0 === e2[0].length;
          }
          function g2() {
            return c2 && h3 && (k("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + b.DefaultDelimiter + "'"), h3 = false), m2.skipEmptyLines && (c2.data = c2.data.filter(function(e2) {
              return !y2(e2);
            })), _2() && function() {
              if (!c2)
                return;
              function e2(e3, t3) {
                M(m2.transformHeader) && (e3 = m2.transformHeader(e3, t3)), l2.push(e3);
              }
              if (Array.isArray(c2.data[0])) {
                for (var t2 = 0; _2() && t2 < c2.data.length; t2++)
                  c2.data[t2].forEach(e2);
                c2.data.splice(0, 1);
              } else
                c2.data.forEach(e2);
            }(), function() {
              if (!c2 || !m2.header && !m2.dynamicTyping && !m2.transform)
                return c2;
              function e2(e3, t3) {
                var i4, r2 = m2.header ? {} : [];
                for (i4 = 0; i4 < e3.length; i4++) {
                  var n3 = i4, s3 = e3[i4];
                  m2.header && (n3 = i4 >= l2.length ? "__parsed_extra" : l2[i4]), m2.transform && (s3 = m2.transform(s3, n3)), s3 = v2(n3, s3), "__parsed_extra" === n3 ? (r2[n3] = r2[n3] || [], r2[n3].push(s3)) : r2[n3] = s3;
                }
                return m2.header && (i4 > l2.length ? k("FieldMismatch", "TooManyFields", "Too many fields: expected " + l2.length + " fields but parsed " + i4, f2 + t3) : i4 < l2.length && k("FieldMismatch", "TooFewFields", "Too few fields: expected " + l2.length + " fields but parsed " + i4, f2 + t3)), r2;
              }
              var t2 = 1;
              !c2.data.length || Array.isArray(c2.data[0]) ? (c2.data = c2.data.map(e2), t2 = c2.data.length) : c2.data = e2(c2.data, 0);
              m2.header && c2.meta && (c2.meta.fields = l2);
              return f2 += t2, c2;
            }();
          }
          function _2() {
            return m2.header && 0 === l2.length;
          }
          function v2(e2, t2) {
            return i4 = e2, m2.dynamicTypingFunction && void 0 === m2.dynamicTyping[i4] && (m2.dynamicTyping[i4] = m2.dynamicTypingFunction(i4)), true === (m2.dynamicTyping[i4] || m2.dynamicTyping) ? "true" === t2 || "TRUE" === t2 || "false" !== t2 && "FALSE" !== t2 && (function(e3) {
              if (s2.test(e3)) {
                var t3 = parseFloat(e3);
                if (n2 < t3 && t3 < r)
                  return true;
              }
              return false;
            }(t2) ? parseFloat(t2) : u2.test(t2) ? new Date(t2) : "" === t2 ? null : t2) : t2;
            var i4;
          }
          function k(e2, t2, i4, r2) {
            var n3 = { type: e2, code: t2, message: i4 };
            void 0 !== r2 && (n3.row = r2), c2.errors.push(n3);
          }
          this.parse = function(e2, t2, i4) {
            var r2 = m2.quoteChar || '"';
            if (m2.newline || (m2.newline = function(e3, t3) {
              e3 = e3.substring(0, 1048576);
              var i5 = new RegExp(j(t3) + "([^]*?)" + j(t3), "gm"), r3 = (e3 = e3.replace(i5, "")).split("\r"), n4 = e3.split("\n"), s4 = 1 < n4.length && n4[0].length < r3[0].length;
              if (1 === r3.length || s4)
                return "\n";
              for (var a3 = 0, o3 = 0; o3 < r3.length; o3++)
                "\n" === r3[o3][0] && a3++;
              return a3 >= r3.length / 2 ? "\r\n" : "\r";
            }(e2, r2)), h3 = false, m2.delimiter)
              M(m2.delimiter) && (m2.delimiter = m2.delimiter(e2), c2.meta.delimiter = m2.delimiter);
            else {
              var n3 = function(e3, t3, i5, r3, n4) {
                var s4, a3, o3, h4;
                n4 = n4 || [",", "	", "|", ";", b.RECORD_SEP, b.UNIT_SEP];
                for (var u3 = 0; u3 < n4.length; u3++) {
                  var f3 = n4[u3], d3 = 0, l3 = 0, c3 = 0;
                  o3 = void 0;
                  for (var p4 = new E({ comments: r3, delimiter: f3, newline: t3, preview: 10 }).parse(e3), g3 = 0; g3 < p4.data.length; g3++)
                    if (i5 && y2(p4.data[g3]))
                      c3++;
                    else {
                      var _3 = p4.data[g3].length;
                      l3 += _3, void 0 !== o3 ? 0 < _3 && (d3 += Math.abs(_3 - o3), o3 = _3) : o3 = _3;
                    }
                  0 < p4.data.length && (l3 /= p4.data.length - c3), (void 0 === a3 || d3 <= a3) && (void 0 === h4 || h4 < l3) && 1.99 < l3 && (a3 = d3, s4 = f3, h4 = l3);
                }
                return { successful: !!(m2.delimiter = s4), bestDelimiter: s4 };
              }(e2, m2.newline, m2.skipEmptyLines, m2.comments, m2.delimitersToGuess);
              n3.successful ? m2.delimiter = n3.bestDelimiter : (h3 = true, m2.delimiter = b.DefaultDelimiter), c2.meta.delimiter = m2.delimiter;
            }
            var s3 = w(m2);
            return m2.preview && m2.header && s3.preview++, a2 = e2, o2 = new E(s3), c2 = o2.parse(a2, t2, i4), g2(), d2 ? { meta: { paused: true } } : c2 || { meta: { paused: false } };
          }, this.paused = function() {
            return d2;
          }, this.pause = function() {
            d2 = true, o2.abort(), a2 = M(m2.chunk) ? "" : a2.substring(o2.getCharIndex());
          }, this.resume = function() {
            t.streamer._halted ? (d2 = false, t.streamer.parseChunk(a2, true)) : setTimeout(t.resume, 3);
          }, this.aborted = function() {
            return e;
          }, this.abort = function() {
            e = true, o2.abort(), c2.meta.aborted = true, M(m2.complete) && m2.complete(c2), a2 = "";
          };
        }
        function j(e) {
          return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        }
        function E(e) {
          var S, O = (e = e || {}).delimiter, x = e.newline, I = e.comments, T = e.step, D = e.preview, A = e.fastMode, L = S = void 0 === e.quoteChar || null === e.quoteChar ? '"' : e.quoteChar;
          if (void 0 !== e.escapeChar && (L = e.escapeChar), ("string" != typeof O || -1 < b.BAD_DELIMITERS.indexOf(O)) && (O = ","), I === O)
            throw new Error("Comment character same as delimiter");
          true === I ? I = "#" : ("string" != typeof I || -1 < b.BAD_DELIMITERS.indexOf(I)) && (I = false), "\n" !== x && "\r" !== x && "\r\n" !== x && (x = "\n");
          var F = 0, z = false;
          this.parse = function(r, t, i3) {
            if ("string" != typeof r)
              throw new Error("Input must be a string");
            var n2 = r.length, e2 = O.length, s2 = x.length, a2 = I.length, o2 = M(T), h3 = [], u2 = [], f2 = [], d2 = F = 0;
            if (!r)
              return C();
            if (A || false !== A && -1 === r.indexOf(S)) {
              for (var l2 = r.split(x), c2 = 0; c2 < l2.length; c2++) {
                if (f2 = l2[c2], F += f2.length, c2 !== l2.length - 1)
                  F += x.length;
                else if (i3)
                  return C();
                if (!I || f2.substring(0, a2) !== I) {
                  if (o2) {
                    if (h3 = [], k(f2.split(O)), R(), z)
                      return C();
                  } else
                    k(f2.split(O));
                  if (D && D <= c2)
                    return h3 = h3.slice(0, D), C(true);
                }
              }
              return C();
            }
            for (var p3 = r.indexOf(O, F), g2 = r.indexOf(x, F), _2 = new RegExp(j(L) + j(S), "g"), m2 = r.indexOf(S, F); ; )
              if (r[F] !== S)
                if (I && 0 === f2.length && r.substring(F, F + a2) === I) {
                  if (-1 === g2)
                    return C();
                  F = g2 + s2, g2 = r.indexOf(x, F), p3 = r.indexOf(O, F);
                } else if (-1 !== p3 && (p3 < g2 || -1 === g2))
                  f2.push(r.substring(F, p3)), F = p3 + e2, p3 = r.indexOf(O, F);
                else {
                  if (-1 === g2)
                    break;
                  if (f2.push(r.substring(F, g2)), w2(g2 + s2), o2 && (R(), z))
                    return C();
                  if (D && h3.length >= D)
                    return C(true);
                }
              else
                for (m2 = F, F++; ; ) {
                  if (-1 === (m2 = r.indexOf(S, m2 + 1)))
                    return i3 || u2.push({ type: "Quotes", code: "MissingQuotes", message: "Quoted field unterminated", row: h3.length, index: F }), E2();
                  if (m2 === n2 - 1)
                    return E2(r.substring(F, m2).replace(_2, S));
                  if (S !== L || r[m2 + 1] !== L) {
                    if (S === L || 0 === m2 || r[m2 - 1] !== L) {
                      -1 !== p3 && p3 < m2 + 1 && (p3 = r.indexOf(O, m2 + 1)), -1 !== g2 && g2 < m2 + 1 && (g2 = r.indexOf(x, m2 + 1));
                      var y2 = b2(-1 === g2 ? p3 : Math.min(p3, g2));
                      if (r.substr(m2 + 1 + y2, e2) === O) {
                        f2.push(r.substring(F, m2).replace(_2, S)), r[F = m2 + 1 + y2 + e2] !== S && (m2 = r.indexOf(S, F)), p3 = r.indexOf(O, F), g2 = r.indexOf(x, F);
                        break;
                      }
                      var v2 = b2(g2);
                      if (r.substring(m2 + 1 + v2, m2 + 1 + v2 + s2) === x) {
                        if (f2.push(r.substring(F, m2).replace(_2, S)), w2(m2 + 1 + v2 + s2), p3 = r.indexOf(O, F), m2 = r.indexOf(S, F), o2 && (R(), z))
                          return C();
                        if (D && h3.length >= D)
                          return C(true);
                        break;
                      }
                      u2.push({ type: "Quotes", code: "InvalidQuotes", message: "Trailing quote on quoted field is malformed", row: h3.length, index: F }), m2++;
                    }
                  } else
                    m2++;
                }
            return E2();
            function k(e3) {
              h3.push(e3), d2 = F;
            }
            function b2(e3) {
              var t2 = 0;
              if (-1 !== e3) {
                var i4 = r.substring(m2 + 1, e3);
                i4 && "" === i4.trim() && (t2 = i4.length);
              }
              return t2;
            }
            function E2(e3) {
              return i3 || (void 0 === e3 && (e3 = r.substring(F)), f2.push(e3), F = n2, k(f2), o2 && R()), C();
            }
            function w2(e3) {
              F = e3, k(f2), f2 = [], g2 = r.indexOf(x, F);
            }
            function C(e3) {
              return { data: h3, errors: u2, meta: { delimiter: O, linebreak: x, aborted: z, truncated: !!e3, cursor: d2 + (t || 0) } };
            }
            function R() {
              T(C()), h3 = [], u2 = [];
            }
          }, this.abort = function() {
            z = true;
          }, this.getCharIndex = function() {
            return F;
          };
        }
        function _(e) {
          var t = e.data, i3 = a[t.workerId], r = false;
          if (t.error)
            i3.userError(t.error, t.file);
          else if (t.results && t.results.data) {
            var n2 = { abort: function() {
              r = true, m(t.workerId, { data: [], errors: [], meta: { aborted: true } });
            }, pause: y, resume: y };
            if (M(i3.userStep)) {
              for (var s2 = 0; s2 < t.results.data.length && (i3.userStep({ data: t.results.data[s2], errors: t.results.errors, meta: t.results.meta }, n2), !r); s2++)
                ;
              delete t.results;
            } else
              M(i3.userChunk) && (i3.userChunk(t.results, n2, t.file), delete t.results);
          }
          t.finished && !r && m(t.workerId, t.results);
        }
        function m(e, t) {
          var i3 = a[e];
          M(i3.userComplete) && i3.userComplete(t), i3.terminate(), delete a[e];
        }
        function y() {
          throw new Error("Not implemented.");
        }
        function w(e) {
          if ("object" != typeof e || null === e)
            return e;
          var t = Array.isArray(e) ? [] : {};
          for (var i3 in e)
            t[i3] = w(e[i3]);
          return t;
        }
        function v(e, t) {
          return function() {
            e.apply(t, arguments);
          };
        }
        function M(e) {
          return "function" == typeof e;
        }
        return o && (f.onmessage = function(e) {
          var t = e.data;
          void 0 === b.WORKER_ID && t && (b.WORKER_ID = t.workerId);
          if ("string" == typeof t.input)
            f.postMessage({ workerId: b.WORKER_ID, results: b.parse(t.input, t.config), finished: true });
          else if (f.File && t.input instanceof File || t.input instanceof Object) {
            var i3 = b.parse(t.input, t.config);
            i3 && f.postMessage({ workerId: b.WORKER_ID, results: i3, finished: true });
          }
        }), (l.prototype = Object.create(u.prototype)).constructor = l, (c.prototype = Object.create(u.prototype)).constructor = c, (p2.prototype = Object.create(p2.prototype)).constructor = p2, (g.prototype = Object.create(u.prototype)).constructor = g, b;
      });
    })(papaparse_min);
    var papaparse_minExports = papaparse_min.exports;
    const Papa = /* @__PURE__ */ getDefaultExportFromCjs(papaparse_minExports);
    function bind$1(fn, thisArg) {
      return function wrap2() {
        return fn.apply(thisArg, arguments);
      };
    }
    const { toString: toString$1 } = Object.prototype;
    const { getPrototypeOf } = Object;
    const kindOf = ((cache2) => (thing) => {
      const str = toString$1.call(thing);
      return cache2[str] || (cache2[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    const kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    const typeOfTest = (type) => (thing) => typeof thing === type;
    const { isArray: isArray$1 } = Array;
    const isUndefined$1 = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined$1(val) && val.constructor !== null && !isUndefined$1(val.constructor) && isFunction$3(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    const isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    const isString$1 = typeOfTest("string");
    const isFunction$3 = typeOfTest("function");
    const isNumber$1 = typeOfTest("number");
    const isObject$2 = (thing) => thing !== null && typeof thing === "object";
    const isBoolean = (thing) => thing === true || thing === false;
    const isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    const isDate$1 = kindOfTest("Date");
    const isFile = kindOfTest("File");
    const isBlob = kindOfTest("Blob");
    const isFileList = kindOfTest("FileList");
    const isStream = (val) => isObject$2(val) && isFunction$3(val.pipe);
    const isFormData = (thing) => {
      const pattern = "[object FormData]";
      return thing && (typeof FormData === "function" && thing instanceof FormData || toString$1.call(thing) === pattern || isFunction$3(thing.toString) && thing.toString() === pattern);
    };
    const isURLSearchParams = kindOfTest("URLSearchParams");
    const trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach$1(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i2;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray$1(obj)) {
        for (i2 = 0, l = obj.length; i2 < l; i2++) {
          fn.call(null, obj[i2], i2, obj);
        }
      } else {
        const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len2 = keys2.length;
        let key;
        for (i2 = 0; i2 < len2; i2++) {
          key = keys2[i2];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys2 = Object.keys(obj);
      let i2 = keys2.length;
      let _key;
      while (i2-- > 0) {
        _key = keys2[i2];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    const _global = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    const isContextDefined = (context) => !isUndefined$1(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray$1(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i2 = 0, l = arguments.length; i2 < l; i2++) {
        arguments[i2] && forEach$1(arguments[i2], assignValue);
      }
      return result;
    }
    const extend$1 = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach$1(b, (val, key) => {
        if (thisArg && isFunction$3(val)) {
          a[key] = bind$1(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    const stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    const inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i2;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i2 = props.length;
        while (i2-- > 0) {
          prop = props[i2];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    const endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    const toArray$2 = (thing) => {
      if (!thing)
        return null;
      if (isArray$1(thing))
        return thing;
      let i2 = thing.length;
      if (!isNumber$1(i2))
        return null;
      const arr = new Array(i2);
      while (i2-- > 0) {
        arr[i2] = thing[i2];
      }
      return arr;
    };
    const isTypedArray = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    const forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    const matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    const isHTMLForm = kindOfTest("HTMLFormElement");
    const toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[_-\s]([a-z\d])(\w*)/g,
        function replacer2(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    const hasOwnProperty$1 = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    const isRegExp = kindOfTest("RegExp");
    const reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach$1(descriptors2, (descriptor, name) => {
        if (reducer(descriptor, name, obj) !== false) {
          reducedDescriptors[name] = descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    const freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction$3(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction$3(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    const toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray$1(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    const noop = () => {
    };
    const toFiniteNumber = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };
    const toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i2) => {
        if (isObject$2(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i2] = source;
            const target = isArray$1(source) ? [] : {};
            forEach$1(source, (value, key) => {
              const reducedValue = visit(value, i2 + 1);
              !isUndefined$1(reducedValue) && (target[key] = reducedValue);
            });
            stack[i2] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    const utils = {
      isArray: isArray$1,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString: isString$1,
      isNumber: isNumber$1,
      isBoolean,
      isObject: isObject$2,
      isPlainObject,
      isUndefined: isUndefined$1,
      isDate: isDate$1,
      isFile,
      isBlob,
      isRegExp,
      isFunction: isFunction$3,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach: forEach$1,
      merge,
      extend: extend$1,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray: toArray$2,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty: hasOwnProperty$1,
      hasOwnProp: hasOwnProperty$1,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      toJSONObject
    };
    function AxiosError(message, code2, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code2 && (this.code = code2);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON2() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    const prototype$1 = AxiosError.prototype;
    const descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code2) => {
      descriptors[code2] = { value: code2 };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code2, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code2, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var browser = typeof self == "object" ? self.FormData : window.FormData;
    const FormData$2 = /* @__PURE__ */ getDefaultExportFromCjs(browser);
    function isVisitable(thing) {
      return utils.isPlainObject(thing) || utils.isArray(thing);
    }
    function removeBrackets(key) {
      return utils.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path)
        return key;
      return path.concat(key).map(function each(token2, i2) {
        token2 = removeBrackets(token2);
        return !dots && i2 ? "[" + token2 + "]" : token2;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils.isArray(arr) && !arr.some(isVisitable);
    }
    const predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function isSpecCompliant(thing) {
      return thing && utils.isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator];
    }
    function toFormData(obj, formData, options) {
      if (!utils.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new (FormData$2 || FormData)();
      options = utils.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && isSpecCompliant(formData);
      if (!utils.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils.isArray(value) && isFlatArray(value) || (utils.isFileList(value) || utils.endsWith(key, "[]") && (arr = utils.toArray(value)))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index) {
              !(utils.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils.forEach(value, function each(el, key) {
          const result = !(utils.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer2(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    const prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode;
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    class InterceptorManager {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h2) {
          if (h2 !== null) {
            fn(h2);
          }
        });
      }
    }
    const InterceptorManager$1 = InterceptorManager;
    const transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    const URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    const FormData$1 = FormData;
    const isStandardBrowserEnv = (() => {
      let product;
      if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    })();
    const isStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    const platform = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob
      },
      isStandardBrowserEnv,
      isStandardBrowserWebWorkerEnv,
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys2 = Object.keys(arr);
      let i2;
      const len2 = keys2.length;
      let key;
      for (i2 = 0; i2 < len2; i2++) {
        key = keys2[i2];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
        const obj = {};
        utils.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    const DEFAULT_CONTENT_TYPE = {
      "Content-Type": void 0
    };
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    const defaults$1 = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils.isObject(data);
        if (isObjectPayload && utils.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils.isFormData(data);
        if (isFormData2) {
          if (!hasJSONContentType) {
            return data;
          }
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults$1.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (data && utils.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults$1.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults$1.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    const defaults$2 = defaults$1;
    const ignoreDuplicateOf = utils.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    const parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i2;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i2 = line.indexOf(":");
        key = line.substring(0, i2).trim().toLowerCase();
        val = line.substring(i2 + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    const $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens2 = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens2[match[1]] = match[2];
      }
      return tokens2;
    }
    function isValidHeaderName(str) {
      return /^[-_a-zA-Z]+$/.test(str.trim());
    }
    function matchHeaderValue(context, value, header, filter) {
      if (utils.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (!utils.isString(value))
        return;
      if (utils.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    class AxiosHeaders {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils.findKey(this, header);
          return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear() {
        return Object.keys(this).forEach(this.delete.bind(this));
      }
      normalize(format2) {
        const self2 = this;
        const headers = {};
        utils.forEach(this, (value, header) => {
          const key = utils.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format2 ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed2 = new this(first);
        targets.forEach((target) => computed2.set(target));
        return computed2;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    }
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent"]);
    utils.freezeMethods(AxiosHeaders.prototype);
    utils.freezeMethods(AxiosHeaders);
    const AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$2;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    const httpAdapter = null;
    function settle(resolve2, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve2(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    const cookies = platform.isStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write2(name, value, expires, path, domain, secure) {
            const cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read2(name) {
            const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove2(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write2() {
          },
          read: function read2() {
            return null;
          },
          remove: function remove2() {
          }
        };
      }()
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    const isURLSameOrigin = platform.isStandardBrowserEnv ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        const msie = /(msie|trident)/i.test(navigator.userAgent);
        const urlParsingNode = document.createElement("a");
        let originURL;
        function resolveURL(url) {
          let href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin2(requestURL) {
          const parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin2() {
          return true;
        };
      }()
    );
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min2) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min2 = min2 !== void 0 ? min2 : 1e3;
      return function push(chunkLength) {
        const now2 = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now2;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now2;
        let i2 = tail;
        let bytesCount = 0;
        while (i2 !== head) {
          bytesCount += bytes[i2++];
          i2 = i2 % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now2 - firstSampleTS < min2) {
          return;
        }
        const passed = startedAt && now2 - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function progressEventReducer(listener, isDownloadStream) {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return (e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e
        };
        data[isDownloadStream ? "download" : "upload"] = true;
        listener(data);
      };
    }
    const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    const xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve2, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData) && (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv)) {
          requestHeaders.setContentType(false);
        }
        let request = new XMLHttpRequest();
        if (config.auth) {
          const username = config.auth.username || "";
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve2(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError2() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (platform.isStandardBrowserEnv) {
          const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName && cookies.read(config.xsrfCookieName);
          if (xsrfValue) {
            requestHeaders.set(config.xsrfHeaderName, xsrfValue);
          }
        }
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
        }
        if (config.cancelToken || config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(fullPath);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    const knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter
    };
    utils.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    const adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        for (let i2 = 0; i2 < length; i2++) {
          nameOrAdapter = adapters2[i2];
          if (adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
            break;
          }
        }
        if (!adapter) {
          if (adapter === false) {
            throw new AxiosError(
              `Adapter ${nameOrAdapter} is not supported by the environment`,
              "ERR_NOT_SUPPORT"
            );
          }
          throw new Error(
            utils.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`
          );
        }
        if (!utils.isFunction(adapter)) {
          throw new TypeError("adapter is not a function");
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$2.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, caseless) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge.call({ caseless }, target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, caseless) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(a, b, caseless);
        } else if (!utils.isUndefined(a)) {
          return getMergedValue(void 0, a, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    const VERSION = "1.2.3";
    const validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i2) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
      };
    });
    const deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version2, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version2 && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version2 + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys2 = Object.keys(options);
      let i2 = keys2.length;
      while (i2-- > 0) {
        const opt = keys2[i2];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    const validator = {
      assertOptions,
      validators: validators$1
    };
    const validators = validator.validators;
    class Axios {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer !== void 0) {
          validator.assertOptions(paramsSerializer, {
            encode: validators.function,
            serialize: validators.function
          }, true);
        }
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders;
        contextHeaders = headers && utils.merge(
          headers.common,
          headers[config.method]
        );
        contextHeaders && utils.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i2 = 0;
        let len2;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len2 = chain.length;
          promise = Promise.resolve(config);
          while (i2 < len2) {
            promise = promise.then(chain[i2++], chain[i2++]);
          }
          return promise;
        }
        len2 = requestInterceptorChain.length;
        let newConfig = config;
        i2 = 0;
        while (i2 < len2) {
          const onFulfilled = requestInterceptorChain[i2++];
          const onRejected = requestInterceptorChain[i2++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i2 = 0;
        len2 = responseInterceptorChain.length;
        while (i2 < len2) {
          promise = promise.then(responseInterceptorChain[i2++], responseInterceptorChain[i2++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    }
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    const Axios$1 = Axios;
    class CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve2) {
          resolvePromise = resolve2;
        });
        const token2 = this;
        this.promise.then((cancel) => {
          if (!token2._listeners)
            return;
          let i2 = token2._listeners.length;
          while (i2-- > 0) {
            token2._listeners[i2](cancel);
          }
          token2._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve2) => {
            token2.subscribe(resolve2);
            _resolve = resolve2;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token2.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token2.reason) {
            return;
          }
          token2.reason = new CanceledError(message, config, request);
          resolvePromise(token2.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token2 = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token: token2,
          cancel
        };
      }
    }
    const CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap2(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    }
    const HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    const HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind$1(Axios$1.prototype.request, context);
      utils.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    const axios = createInstance(defaults$2);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    const axios$1 = axios;
    const Node$2 = function() {
      this.keys = /* @__PURE__ */ new Map();
      this.childCount = 0;
      this.end = false;
      this.setEnd = function() {
        this.end = true;
      };
      this.isEnd = function() {
        return this.end;
      };
    };
    const Trie = function() {
      this.root = new Node$2();
      this.add = function(input, node = this.root) {
        if (input.length === 0) {
          node.setEnd();
          return;
        }
        node.childCount++;
        if (!node.keys.has(input[0])) {
          node.keys.set(input[0], new Node$2());
          return this.add(input.substr(1), node.keys.get(input[0]));
        }
        return this.add(input.substr(1), node.keys.get(input[0]));
      };
      this.countChildren = function(word) {
        let node = this.findNode(word);
        if (node === false)
          return -1;
        return node.childCount;
      };
      this.isWord = function(word) {
        let node = this.root;
        while (word.length > 1) {
          if (!node.keys.has(word[0])) {
            return false;
          }
          node = node.keys.get(word[0]);
          word = word.substr(1);
        }
        return !!(node.keys.has(word) && node.keys.get(word).isEnd());
      };
      this.findNode = (word) => {
        let node = this.root;
        while (word.length > 1) {
          if (!node.keys.has(word[0])) {
            return false;
          }
          node = node.keys.get(word[0]);
          word = word.substr(1);
        }
        if (node.keys.get(word))
          return node.keys.get(word);
        else
          return false;
      };
      this.prefixMatchingWords = (prefix) => {
        const words = new Array();
        let node = this.findNode(prefix);
        if (!node)
          return words;
        if (node.childCount === 0)
          return [prefix];
        const search = function(node2, string) {
          if (node2.keys.size != 0) {
            for (const letter of node2.keys.keys()) {
              search(node2.keys.get(letter), string.concat(letter));
            }
            if (node2.isEnd()) {
              words.push(string);
            }
          } else {
            string.length > 0 ? words.push(string) : void 0;
          }
        };
        search(node, new String());
        if (words.length > 0) {
          return words.map((word) => `${prefix}${word}`);
        }
        return [];
      };
      this.countDirectChildren = function(word) {
        let node = this.root;
        while (word.length > 1) {
          if (!node.keys.has(word[0])) {
            return false;
          }
          node = node.keys.get(word[0]);
          word = word.substr(1);
        }
        if (!node.keys.has(word))
          return false;
        if (node.keys.get(word).isEnd()) {
          return 0;
        }
        return node.keys.get(word).keys.size;
      };
      this.print = function() {
        const words = new Array();
        const search = function(node, string) {
          if (node.keys.size != 0) {
            for (const letter of node.keys.keys()) {
              search(node.keys.get(letter), string.concat(letter));
            }
            if (node.isEnd()) {
              words.push(string);
            }
          } else {
            string.length > 0 ? words.push(string) : void 0;
          }
        };
        search(this.root, new String());
        return words.length > 0 ? words : mo;
      };
    };
    const Trie$1 = { Trie };
    const getGUID = () => {
      function s4() {
        return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
      }
      return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;
    };
    const hasOwnProperty = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);
    const getMissingProps = (object, props) => {
      const missing = [];
      props.forEach((prop) => {
        if (!hasOwnProperty(object, prop)) {
          missing.push(prop);
        }
      });
      return missing;
    };
    const Symbols = {
      Circle: {
        label: "Circle",
        marker: "●",
        svg: `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="1.0rem" height="1.0rem">
                <circle r="24" cy="26" cx="26" style="fill:#706e6b;stroke:#706e6b;stroke-width:3.847;stroke-linejoin:round;fill-opacity:1;stroke-opacity:1"/>
            </svg>
        `
      },
      Square: {
        label: "Square",
        marker: "■",
        svg: `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="1.0rem" height="1.0rem">
                <path style="fill:#706e6b;fill-opacity:1;stroke:#706e6b;stroke-width:3.77953;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" d="M1.889765 1.889765h48v48h-48z"/>
            </svg>
        `
      },
      Pyramid: {
        label: "Pyramid",
        marker: "▲",
        svg: `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="1.0rem" height="1.0rem">
                <path  d="M52 52 25 0 0 52Z" style="fill:#706e6b;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:1"/>
            </svg>
        `
      },
      Triangle: {
        label: "Triangle",
        marker: "▼",
        svg: `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="1.0rem" height="1.0rem">
                <path d="m0 0 27 52L52 0Z" style="fill:#706e6b;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"/>
            </svg>
        `
      },
      Diamond: {
        label: "Diamond",
        marker: "◆",
        svg: `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="1.0rem" height="1.0rem">
                <path d="M26 0 0 26l26 26 26-26Z" style="fill:#706e6b;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:1"/>
            </svg>
        `
      },
      Star: {
        label: "Star",
        marker: "★",
        svg: `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="1.0rem" height="1.0rem">
                <path transform="matrix(1.04945 0 0 1.10341 -.23623862 1.1584795)" d="m25.000001 0 7.347315 14.887288 16.429097 2.387288-11.888207 11.588136 2.806425 16.362713L25 37.5l-14.694632 7.725424 2.806426-16.362712L1.2235873 17.274575l16.4290967-2.387287Z" style="fill:#706e6b;fill-rule:evenodd;stroke:#706e6b;stroke-width:.929286;stroke-opacity:1;fill-opacity:1"/>
            </svg>
        `
      },
      Parallelogram: {
        label: "Parallelogram",
        marker: "▰",
        svg: `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="1.0rem" height="1.0rem">
                <path d="M52-2.6e-7H10L0 51.999999h43z" style="fill:#706e6b;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"/>
            </svg>
        `
      },
      Rectangle: {
        label: "Rectangle",
        marker: "▬",
        svg: `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="1.0rem" height="1.0rem">
                <path d="M52 10H0v32h52z" style="fill:#706e6b;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"/>
            </svg>
        `
      },
      Box: {
        label: "Box",
        marker: "▮",
        svg: `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="1.0rem" height="1.0rem">
                <path d="M43 0 10-2.6e-7V52l33-.000001z" style="fill:#706e6b;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"/>
            </svg>
        `
      }
    };
    const MapUtil = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      Symbols
    }, Symbol.toStringTag, { value: "Module" }));
    function SegClient({ Buffer: Buffer2, Papa: Papa2 } = {}) {
      const Rule = {
        toSaql(rule, dataSource) {
          const saqlExpressions = rule.sfsp__SalesNodeRuleItems__r.map((item) => {
            return Filter.toSaql({
              field: item.sfsp__Field__c,
              operator: item.sfsp__Operator__c,
              value: item.sfsp__Value__c,
              dataType: dataSource._referenceFields.find((f) => f.id === item.sfsp__Field__c).dataType === "Numeric" ? "Numeric" : "Text"
            });
          });
          return Filter.mergeBooleanFilter(rule.sfsp__BooleanFilter__c, saqlExpressions);
        }
      };
      const Filter = {
        mergeBooleanFilter(booleanFilter, expressions) {
          booleanFilter = booleanFilter.toLowerCase().replaceAll(" and ", " && ").replaceAll(" or ", " || ");
          let result = "";
          let currentToken = "";
          for (let i2 = 0; i2 < booleanFilter.length; i2++) {
            const char = booleanFilter[i2];
            if (/[0-9]/.test(char)) {
              currentToken += char;
              continue;
            }
            if (currentToken) {
              result += expressions[parseInt(currentToken) - 1];
              currentToken = "";
            }
            result += char;
          }
          if (currentToken)
            result += expressions[parseInt(currentToken) - 1];
          return result;
        },
        toSaql(filter) {
          const { field, operator, value = "", dataType } = filter;
          if (dataType === "Text") {
            let values = value.split(",");
            values = values.map((v) => v.trimStart());
            switch (operator) {
              case "==":
                return values.length > 1 ? values.some((v) => !v) ? `(${field} in ["${values.join('","')}"] || ${field} is null)` : `${field} in ["${values.join('","')}"]` : value ? `${field} == "${value}"` : `(${field} == "" || ${field} is null)`;
              case "!=":
                return values.length > 1 ? values.some((v) => !v) ? `(${field} not in ["${values.join('","')}"] && ${field} is not null)` : `${field} not in ["${values.join('","')}"]` : value ? `${field} != "${value}"` : `(${field} != "" && ${field} is not null)`;
              case "like":
                return values.length > 1 ? `(${values.map((v) => `${field} like "%${v}%"`).join(" || ")})` : `${field} like "%${value}%"`;
              case "startsWith":
                return values.length > 1 ? `(${values.map((v) => `${field} like "${v}%"`).join(" || ")})` : `${field} like "${value}%"`;
              case "doesnotcontain":
                return values.length > 1 ? `(${values.map((v) => `!(${field} matches "${v}")`).join(" && ")})` : `!(${field} matches "${value}")`;
              default:
                return `${field} ${operator} "${value}"`;
            }
          } else {
            switch (operator) {
              case "between":
                const [from2, to2] = value.split(",");
                return `(${field} >= ${from2} && ${field} <= ${to2})`;
              default:
                return `${field} ${operator} ${value}`;
            }
          }
        }
      };
      const Node2 = {
        defaults: () => ({
          sobjectType: "sfsp__SalesNode__c",
          Name: "",
          sfsp__SalesNodes__r: [],
          sfsp__SalesNodeRules__r: [],
          sfsp__RuleLogics__c: ""
        }),
        getDataSetCountSaql({ datasetId, versionId }) {
          return `
                -- load records
                q = load "${datasetId}/${versionId}";
    
                -- results
                results = group q by all;
                results = foreach results generate count() as count;
            `;
        },
        // saql generation
        generateHierarchySaql({ node, nodeMap, dataSource, fields = [] }) {
          if (!node._parentId) {
            return `
                    ------------------------------------
                    -- Records
                    ------------------------------------
                    q = load "${dataSource._dataset.id}/${dataSource._dataset.currentVersionId}";
    
                    ------------------------------------
                    -- Filters
                    ------------------------------------
    
                    -- all org
                    all_org = group q by all;
                    ${node.sfsp__SalesNodes__r.map((childNode) => this.generateHierarchySaql({ node: childNode, nodeMap, dataSource, fields })).join("")}
    
                    ------------------------------------
                    -- Projections
                    ------------------------------------
                    ${Object.keys(nodeMap).map((id) => `
                        ${id} = group ${id} by all;
                        ${id} = foreach ${id} generate ${[
              `"${id}" as __NodeId`,
              `count() as __Records`,
              ...fields.map((f) => `sum(${f}) as ${f}`)
            ].join(", ")};
                    `).join("")}
    
                    ------------------------------------
                    -- Results
                    ------------------------------------
                    ${Object.keys(nodeMap).length > 1 ? `results = union ${Object.keys(nodeMap).join(", ")};` : `results = limit ${Object.keys(nodeMap)[0]} 1;`}
                `.replace(/^ */gm, "");
          }
          return `
                -- ${node.Name}
                ${node.Id} = filter ${node._parentId} by ${this.generateRules({ node, nodeMap, dataSource, uniqueIdField: dataSource._referenceFields.find((f) => f.isId).id })};
                ${node.sfsp__SalesNodes__r.map((childNode) => this.generateHierarchySaql({ node: childNode, nodeMap, dataSource, fields })).join("")}`;
        },
        generateNodeFilterSaql({ node, nodeMap, dataSource, descendantFilters = [], isBurndown = false }) {
          descendantFilters.push(this.generateRules({ node, nodeMap, dataSource, uniqueIdField: dataSource._referenceFields.find((f) => f.isId).id, isBurndown }));
          if (!node._parentId) {
            return `
                    -- load records
                    q = load "${dataSource._dataset.id}/${dataSource._dataset.currentVersionId}";
    
                    -- filters
                    results = filter q by (${descendantFilters.join(") && (")});
                `;
          }
          return this.generateNodeFilterSaql({ node: nodeMap[node._parentId], nodeMap, dataSource, descendantFilters });
        },
        generateRules({ node, nodeMap, dataSource, uniqueIdField, isBurndown }) {
          const burndownNodes = isBurndown ? node.sfsp__SalesNodes__r : [];
          if (node.sfsp__SalesNodeRules__r.length === 0 && burndownNodes.length === 0)
            return `${uniqueIdField} ${node.Id === "all_org" ? "is not null" : "is null"}`;
          const saqlParts = [];
          if (node.sfsp__SalesNodeRules__r.length) {
            const matchingRulesLogic = this.getRuleLogic({ node });
            const matchingRulesFilterExpression = Filter.mergeBooleanFilter(
              matchingRulesLogic,
              node.sfsp__SalesNodeRules__r.map((r) => Rule.toSaql(r, dataSource))
            );
            saqlParts.push(`(${matchingRulesFilterExpression})`);
          }
          if (burndownNodes.length) {
            const childSaqlParts = burndownNodes.map((childNode) => `(${this.generateRules({ node: childNode, nodeMap, dataSource, uniqueIdField })})`);
            saqlParts.push(`!(${childSaqlParts.join(" || ")})`);
          }
          return saqlParts.join(" && ");
        },
        // rule logic
        getRuleLogic({ node }) {
          const existingRuleLogic = node.sfsp__RuleLogics__c;
          if (existingRuleLogic)
            return existingRuleLogic;
          return node.sfsp__SalesNodeRules__r.length === 0 ? "" : Array(node.sfsp__SalesNodeRules__r.length).fill().map((item, i2) => i2 + 1).join(" or ");
        },
        setRuleLogic({ node, logic }) {
          node.sfsp__RuleLogics__c = logic;
        },
        // hierarchy
        async buildNodeMap({ nodeId: nodeId2 }) {
          const nodeMap = {
            all_org: {
              ...SPM.Utils.Segment.Node.defaults(),
              Id: "all_org",
              Name: "All Org"
            }
          };
          const loadAncestors = async (parentId) => {
            let [node] = await SPM.Utils.Apex.invoke("Query", [`
                    SELECT
                        Id,
                        Name,
                        sfsp__SalesPlan__c,
                        sfsp__Parent__c,
                        ${Array(5).fill().map((item, i2) => {
              const prefix = Array(i2 + 1).fill().map(() => "sfsp__Parent__r").join(".");
              return `
                                ${prefix}.Name,
                                ${prefix}.sfsp__Parent__c,
                                ${prefix}.sfsp__RuleLogics__c,
                            `;
            }).join("")}
                        sfsp__RuleLogics__c
                    FROM sfsp__SalesNode__c
                    WHERE Id = '${parentId}'
                `]);
            while (node) {
              nodeMap[node.Id] = {
                ...SPM.Utils.Segment.Node.defaults(),
                ...node,
                _parentId: node.sfsp__Parent__c || "all_org"
              };
              if (node.sfsp__Parent__c && !node.sfsp__Parent__r) {
                await loadAncestors(node.sfsp__Parent__c);
              }
              node = node.sfsp__Parent__r;
            }
          };
          await loadAncestors(nodeId2);
          const rules = await SPM.Utils.Apex.invoke("Query", [`
                SELECT
                    Id, Name, sfsp__SalesNode__c, sfsp__FilterLogic__c, sfsp__BooleanFilter__c,
                    (
                        SELECT Id, sfsp__SalesNodeRule__r.sfsp__SalesNode__c, sfsp__Field__c, sfsp__Operator__c, sfsp__Value__c
                        FROM sfsp__SalesNodeRuleItems__r
                        ORDER BY sfsp__SortOrder__c
                    )
                FROM sfsp__SalesNodeRule__c
                WHERE sfsp__SalesNode__c IN ('${Object.keys(nodeMap).filter((id) => id !== "all_org").join(`','`)}')
                ORDER BY sfsp__SortOrder__c
            `]);
          rules.forEach((r) => nodeMap[r.sfsp__SalesNode__c].sfsp__SalesNodeRules__r.push(r));
          return nodeMap;
        },
        isAncestor({ node, ancestor, nodeMap }) {
          while (node = nodeMap[node._parentId]) {
            if (node === ancestor)
              return true;
          }
          return false;
        },
        getDescendants({ nodes }) {
          if (nodes.length === 0)
            return [];
          const childNodes = nodes.reduce((arr, n) => arr.concat(n.sfsp__SalesNodes__r || []), []);
          return [
            ...nodes,
            ...Node2.getDescendants({ nodes: childNodes })
          ];
        },
        compare({ node, compareNode, breadcrumbs = [] }) {
          const diff2 = [];
          const map2 = {};
          node.sfsp__SalesNodes__r.forEach((n) => {
            const matchingNodeIndex = compareNode.sfsp__SalesNodes__r.findIndex((n2) => n2.Name === n.Name);
            if (matchingNodeIndex !== -1) {
              const matchingNode = compareNode.sfsp__SalesNodes__r.splice(matchingNodeIndex, 1)[0];
              map2[n.Id] = matchingNode;
              const childCompareResults = Node2.compare({ node: n, compareNode: matchingNode, breadcrumbs: [...breadcrumbs, n] });
              diff2.push(...childCompareResults.diff);
              Object.assign(map2, childCompareResults.map);
            } else {
              diff2.push({ node: n, label: [...breadcrumbs, n].map(({ Name }) => Name).join(" -> "), reason: "Target Not Found" });
            }
          });
          compareNode.sfsp__SalesNodes__r.forEach((n) => {
            diff2.push({ node: n, label: [...breadcrumbs, n].map(({ Name }) => Name).join(" -> "), reason: "Source Not Found" });
          });
          return { diff: diff2, map: map2 };
        },
        // queries
        async getRecordCount({ segmentId, dataSource, nodeMap }) {
          var _a2;
          nodeMap = nodeMap || await Node2.buildNodeMap({ segmentId });
          const { results: aggregateResults } = await SPM.Utils.Rest.invoke("RunSaql", { query: `
                ${Node2.generateNodeFilterSaql({
            node: nodeMap[nodeId],
            nodeMap,
            dataSource
          })}
    
                -- results
                results = group results by all;
                results = foreach results generate count() as count;
            `.replace(/^ */gm, "") });
          return ((_a2 = aggregateResults == null ? void 0 : aggregateResults.records[0]) == null ? void 0 : _a2.count) || 0;
        },
        async resetStampedDataSource(segmentId) {
          await SPM.Utils.CRM.upsert({ records: [{
            Id: segmentId,
            sfsp__StampDataSourceId__c: ""
          }] });
        },
        async buildDataSource({ planId }) {
          const [dataSource] = await SPM.Utils.Apex.invoke("Query", [`
                SELECT Id, Name, sfsp__SourceId__c, sfsp__ReferenceFields__c
                FROM sfsp__SalesDataSource__c
                WHERE Id IN (SELECT sfsp__SalesDataSource__c FROM sfsp__SalesPlan__c WHERE Id = '${planId}')
            `]);
          dataSource._referenceFields = JSON.parse(dataSource.sfsp__ReferenceFields__c);
          dataSource._dataset = await SPM.Utils.Rest.invoke("GetDataset", { id: dataSource.sfsp__SourceId__c });
          return dataSource;
        },
        async getRecords({ segmentId, dataSource, nodeMap, uniqueIds = [], limit = 1, offset: offset2 }) {
          nodeMap = nodeMap || await this.buildNodeMap({ segmentId });
          if (uniqueIds.length > 0)
            limit = uniqueIds.length;
          const { results } = await SPM.Utils.Rest.invoke("RunSaql", {
            query: `
                    ${Node2.generateNodeFilterSaql({
              node: nodeMap[segmentId],
              nodeMap,
              dataSource,
              uniqueIds
            })}

                    -- results
                    results = foreach results generate ${dataSource._referenceFields.map((f) => `${f.id} as ${f.id}`).join(", ")};
                    ${offset2 ? `results = offset results ${offset2};` : ""}
                    results = limit results ${limit};
                `.replace(/^ */gm, "")
          });
          return results.records;
        }
      };
      const ExternalData = {
        async getNumericScaleData({ dataSource }) {
          const scaleData = /* @__PURE__ */ new Map();
          const metadata = await SPM.Utils.Rest.invoke("GetDatasetMetadata", { url: dataSource._dataset.currentVersionUrl });
          metadata.measures.forEach((m) => {
            scaleData.set(m.fullyQualifiedName, m.format.decimalDigits);
          });
          return scaleData;
        },
        generateCsvMetadata({ segmentId, dataSource, scaleDataMap, datasetName, datasetLabel }) {
          const fields = [];
          dataSource._referenceFields.forEach((f) => {
            const field = {
              fullyQualifiedName: f.id,
              name: f.id,
              label: f.label,
              isUniqueId: false,
              type: f.dataType,
              isSystemField: false,
              isMultiValue: false,
              description: ""
            };
            if (f.dataType === "Numeric") {
              field.precision = 18;
              field.scale = scaleDataMap.get(f.id) || 0;
              field.defaultValue = 0;
            }
            fields.push(field);
          });
          const csvMetadata = {
            fileFormat: {
              charsetName: "UTF-8",
              fieldsDelimitedBy: ",",
              fieldsEnclosedBy: '"',
              fieldsEscapedBy: "",
              linesTerminatedBy: "\r\n",
              numberOfLinesToIgnore: 0
            },
            objects: [
              {
                connector: "SalesPlanningCSVConnector",
                fullyQualifiedName: "SegmentData",
                label: "Segment Data",
                name: "SegmentData",
                description: "",
                fields
              }
            ]
          };
          return csvMetadata;
        },
        async waitDataflowJobComplete({ jobId, retries = 5 }) {
          let waitInMilliseconds = 1e4;
          while (retries > 0) {
            const response = await SPM.Utils.Rest.invoke("GetCurrentDataflowJob", { id: jobId });
            if (!["Failure", "Warning", "Success"].includes(response.status)) {
              await SPM.Utils.Async.wait(waitInMilliseconds);
              waitInMilliseconds *= 2;
              retries--;
            } else if (["Success", "Warning"].includes(response.status)) {
              return true;
            } else if (["Failure"].includes(response.status)) {
              return false;
            }
          }
          return false;
        },
        async stampDataSource({ segmentId, dataSource, planName, planId, segmentName }) {
          var _a2;
          const nodeMap = await Node2.buildNodeMap({ nodeId: segmentId });
          const scaleDataMap = await ExternalData.getNumericScaleData({ dataSource });
          const datasetName = planId + "_" + segmentId;
          const datasetLabel = (planName + " - " + segmentName).slice(0, 80);
          const csvMetadata = ExternalData.generateCsvMetadata({
            segmentId,
            dataSource,
            scaleDataMap
          });
          const crmafolder = await SPM.Utils.Apex.invoke("Query", [`
                SELECT
                    Id
                    FROM Folder
                    WHERE Type = 'Insights' AND Name = '${dataSource._dataset.folder.label}'
            `]);
          SPM.Utils.Splunk.sendLog({
            logName: "spmStampingJob",
            logPayload: {
              planId,
              segmentId,
              origDatasetName: dataSource._dataset.name,
              stampDatasetName: datasetLabel,
              jobName: "Stamp Records"
            }
          });
          const stampJobStartTime = performance.now();
          const jobResponse2 = await SPM.Utils.Rest.invoke("CreateExternalDataJob", { metadata: Buffer2.from(JSON.stringify(csvMetadata, 0, 4)).toString("base64"), alias: datasetName, label: datasetLabel, app: (_a2 = crmafolder[0]) == null ? void 0 : _a2.Id, operation: "Overwrite" });
          if (!jobResponse2.success)
            throw jobResponse2.errors[0] || "";
          const batchSize = 5e4;
          let batchNum = 0;
          let batchStats = [];
          let datasetRowMap = {};
          let csvParts = [];
          let recordBatches = [];
          let partNumber = 0;
          let offset2 = 0;
          let doMore = true;
          const uniqueIdField = dataSource._referenceFields.find((f) => f.isId).id;
          const saql = `
                ${Node2.generateNodeFilterSaql({
            node: nodeMap[segmentId],
            nodeMap,
            dataSource
          })}
    
                -- results
                results = foreach results generate ${dataSource._referenceFields.map((f) => `${f.id} as ${f.id}`).join(", ")};
                results = order results by ${dataSource._referenceFields.find((f) => f.isId).id};
            `;
          while (doMore) {
            datasetRowMap = {};
            csvParts = [];
            const saqlBatch = saql + `
                results = offset results ${offset2};
                results = limit results ${batchSize};
                `;
            const downloadStartTime = performance.now();
            const { results } = await SPM.Utils.Rest.invoke("RunSaql", { query: saqlBatch.replace(/^ */gm, "") });
            const downloadEndTime = performance.now();
            if (results.records.length === 0) {
              doMore = false;
              continue;
            }
            batchNum++;
            results.records.forEach((record) => {
              datasetRowMap[record[uniqueIdField]] = record;
            });
            recordBatches = [];
            const rowValues = Object.values(datasetRowMap);
            while (rowValues.length)
              recordBatches.push(rowValues.splice(0, 1e6).map((record) => csvMetadata.objects[0].fields.map((field) => record[field.name] || (field.type === "Text" ? "" : 0))));
            const csv = Papa2.unparse(recordBatches[0]);
            const chunkSize = 9e6;
            Papa2.parse(csv, {
              chunkSize,
              chunk(results2, parser) {
                csvParts.unshift(Papa2.unparse(results2.data));
              }
            });
            const uploadStartTime = performance.now();
            await SPM.Utils.Async.forEachParallel(csvParts, async (data) => {
              const base64String = Buffer2.from(`${data}\r
`).toString("base64");
              const csvPart = base64String;
              partNumber += 1;
              const partResponse = await SPM.Utils.Rest.invoke("UploadCsvPart", { parentId: jobResponse2.id, csvPart, partNumber });
              if (!partResponse.success)
                throw partResponse.errors[0] || "";
            }, 5);
            const uploadEndtime = performance.now();
            batchStats.push({
              numRows: results.records.length,
              downloadTime: downloadEndTime - downloadStartTime,
              uploadTime: uploadEndtime - uploadStartTime
            });
            offset2 += results.records.length;
          }
          await SPM.Utils.Rest.invoke("StartExternalDataJob", { parentId: jobResponse2.id });
          SPM.Utils.Splunk.sendLog({
            logName: "spmStampingJob",
            logPayload: {
              planId,
              segmentId,
              origDataset: {
                id: dataSource._dataset.id,
                name: dataSource._dataset.name,
                numRows: dataSource._dataset.currentVersionTotalRowCount,
                numColumns: csvMetadata.objects[0].fields.length
              },
              stampDataset: {
                name: datasetLabel,
                numRows: offset2,
                numColumns: csvMetadata.objects[0].fields.length
              },
              jobRunTime: Math.round(performance.now() - stampJobStartTime),
              numBatches: batchNum,
              batchStats,
              crmaJobId: jobResponse2.id,
              status: "SUCCESS"
            }
          });
          return { jobId: jobResponse2.id, datasetLabel, numRecords: offset2, numFields: csvMetadata.objects[0].fields.length };
        },
        async fetchStampJobResults(jobId, datasetId, datasetLabel, segmentId) {
          const jobStatus = await ExternalData.waitDataflowJobComplete({ jobId });
          if (!jobStatus) {
            SPM.$store.toast({ state: "error", message: `${errorToastMessage}`, duration: null });
            return;
          }
          if (datasetId) {
            const datasetResponse = await SPM.Utils.Rest.invoke("GetDataset", { id: datasetId });
            try {
              if (datasetResponse.label !== datasetLabel) {
                await SPM.Utils.Rest.invoke("PatchDataset", { id: datasetId, metadata: { label: datasetLabel } });
              }
            } catch (err) {
            }
          } else {
            const datasetsResponse = await SPM.Utils.Rest.invoke("GetDatasets", { alias: datasetLabel.replaceAll("'", "%5C%27") });
            if (!(datasetsResponse == null ? void 0 : datasetsResponse.length)) {
              SPM.$store.toast({ state: "error", message: `${errorToastMessage}`, duration: null });
              return;
            }
            const dataset = datasetsResponse[0];
            await SPM.Utils.CRM.upsert({ records: [{
              Id: segmentId,
              sfsp__StampDataSourceId__c: dataset.id
            }] });
          }
        }
      };
      const TPDataSet = {
        async fetchRelatedDataSets() {
          let dataSets = [];
          const externalAssets = await SPM.Utils.Apex.invoke("Query", [`SELECT Id, sfsp__AssetType__c, sfsp__AssetId__c FROM sfsp__SalesNodeExternalAsset__c WHERE sfsp__SalesNode__c = '${SPM.$store.segment.Id}'`]);
          try {
            dataSets = await SPM.Utils.Apex.invoke("Query", [`
                    SELECT
                        Id,
                        Name,
                        maps__Config__c,
                        (SELECT Id, Name, CreatedById, CreatedBy.Name, CreatedDate FROM maps__Alignments__r WHERE maps__Status__c != 'Deleted')
                    FROM maps__TPDataSet__c
                    WHERE Id IN ('${externalAssets.filter((a) => a.sfsp__AssetType__c === "Territory Plan").map((a) => a.sfsp__AssetId__c).join("','")}') AND maps__Status__c != 'Deleted'
                `]);
          } catch (err) {
          }
          const matchingDataSets = dataSets.filter((ds) => {
            return JSON.parse(ds.maps__Config__c).dataSources.find((s) => s.type === "Segment Data Source" && s.segmentId === SPM.$store.segment.Id);
          });
          SPM.$store.$patch((state) => state.TPDataSets = matchingDataSets);
          return matchingDataSets || [];
        },
        async fetchRelatedAlignments() {
          const alignments = [];
          const dataSets = await TPDataSet.fetchRelatedDataSets();
          dataSets.forEach((ds) => {
            if ((ds == null ? void 0 : ds.maps__Alignments__r) && JSON.parse(ds.maps__Config__c).dataSources.find((s) => s.type === "Segment Data Source" && s.segmentId === SPM.$store.segment.Id))
              alignments.push(...ds == null ? void 0 : ds.maps__Alignments__r);
          });
          SPM.$store.$patch((state) => state.TPAlignments = alignments);
          return alignments;
        }
      };
      const TerritoryStampUtils = {
        parsedStampDetails(stampDetails, referenceFields) {
          return stampDetails.map((detail) => {
            const hierarchyData = JSON.parse(detail.sfsp__HierarchyReferenceData__c);
            const parsedData = {};
            Object.keys(hierarchyData).forEach((key) => {
              const referenceMetadata = referenceFields.find((f) => f.type === "Territory" && f.id === key);
              parsedData[key] = "";
              if (referenceMetadata.dataType === "Number") {
                parsedData[key] = hierarchyData[key].SUM;
              } else if (referenceMetadata.dataType === "String") {
                parsedData[key] = hierarchyData[key].VALUE;
              }
            });
            const labeledData = referenceFields.reduce((acc, field) => {
              const keyValue = parsedData[field.id];
              if (keyValue === void 0) {
                if (field.dataType === "Number") {
                  acc[field.label] = 0;
                } else {
                  acc[field.label] = "";
                }
              } else {
                acc[field.label] = keyValue;
              }
              return acc;
            }, {});
            return {
              ...detail,
              data: labeledData
            };
          });
        },
        hierarchicalStampDetails(parsedStampDetails) {
          const detailsMap = /* @__PURE__ */ new Map();
          parsedStampDetails.forEach((detail) => {
            detail.children = [];
            detailsMap.set(detail.Id, detail);
          });
          const rootDetails = [];
          detailsMap.forEach((detail) => {
            if (detail.sfsp__Parent__c) {
              const parentDetail = detailsMap.get(detail.sfsp__Parent__c);
              if (parentDetail) {
                parentDetail.children.push(detail);
              }
            } else {
              rootDetails.push(detail);
            }
          });
          const result = [];
          const traverse2 = (details, indent) => {
            details.forEach((detail) => {
              detail.indent = indent;
              result.push(detail);
              traverse2(detail.children, indent + 1);
            });
          };
          traverse2(rootDetails, 0);
          return result;
        }
      };
      return {
        Rule,
        Filter,
        Node: Node2,
        ExternalData,
        TPDataSet,
        TerritoryStampUtils
      };
    }
    const DEFAULT_MAX_LOOKUP_DEPTH = 3;
    const DEFAULT_RESOLVE_DELAY = 500;
    const cache = {
      fields: /* @__PURE__ */ new Map(),
      labels: /* @__PURE__ */ new Map()
    };
    const settings = {
      maxLookupDepth: DEFAULT_MAX_LOOKUP_DEPTH,
      resolveDelay: DEFAULT_RESOLVE_DELAY,
      useCache: true,
      useSObjectLabels: true
    };
    const getMaxLookupDepth = () => settings.maxLookupDepth;
    const constructFQAPIName = ({ field, lookups = [] }) => {
      let result = "";
      if (lookups.length) {
        result += `${lookups.map((l) => l.relationshipName).join(".")}.`;
      }
      return result + field;
    };
    const deconstructFQAPIName = (field = []) => {
      const parts = field.split(".");
      return {
        field: parts[parts.length - 1],
        lookups: parts.splice(0, parts.length - 1)
      };
    };
    const getValueFromRecord = (fullyQualifiedApiName, record = {}) => {
      const { field, lookups = [] } = deconstructFQAPIName(fullyQualifiedApiName);
      const obj = lookups.reduce((r, l) => r == null ? void 0 : r[l], record);
      return obj == null ? void 0 : obj[field];
    };
    const getLabelBySObject = async (sobject) => {
      const cacheId = sobject.toLowerCase();
      if (!cache.labels.has(cacheId)) {
        cache.labels.set(cacheId, new Promise(async (resolve2) => {
          const query = `SELECT Label, QualifiedApiName FROM EntityDefinition WHERE QualifiedApiName = '${cacheId}'`;
          const { records = [] } = await SPM.Utils.Rest.invoke("ToolingQuery", query);
          if (!records.length)
            return resolve2("");
          const { Label } = records[0] || {};
          {
            cache.labels.set(cacheId, Label);
          }
          resolve2(Label);
        }));
      }
      const item = cache.labels.get(cacheId);
      return typeof item === "function" ? item() : item;
    };
    const getFieldsBySObject = async (sobject) => {
      const cacheId = sobject.toLowerCase();
      if (!cache.fields.has(cacheId)) {
        cache.fields.set(cacheId, new Promise(async (resolve2) => {
          const { fields = [] } = await SPM.Utils.Rest.invoke("SObject", { sObject: sobject });
          const labelsForApply = [];
          const sobjects = /* @__PURE__ */ new Set();
          fields.forEach((field) => {
            var _a2;
            field.sobject = cacheId;
            if (field.relationshipName && ((_a2 = field.referenceTo) == null ? void 0 : _a2.length)) {
              field.spm__references = new Array(field.referenceTo.length);
              field.referenceTo.forEach((name, index) => {
                field.spm__references[index] = { name };
                const cacheId2 = name.toLowerCase();
                if (cache.labels.has(cacheId2)) {
                  field.spm__references[index].label = cache.labels.get(cacheId2);
                } else {
                  field.spm__references[index].label = name;
                  sobjects.add(name);
                  labelsForApply.push(field.spm__references[index]);
                }
              });
            }
          });
          if (sobjects.size) {
            const query = `SELECT Label, QualifiedApiName FROM EntityDefinition WHERE QualifiedApiName IN (${Array.from(sobjects).map((k) => `'${k}'`).join(",")})`;
            const { records = [] } = await SPM.Utils.Rest.invoke("ToolingQuery", query);
            const labelMap = /* @__PURE__ */ new Map();
            records.forEach((r) => labelMap.set(r.QualifiedApiName.toLowerCase(), r.Label));
            labelsForApply.forEach((o) => {
              o.label = labelMap.get(o.name.toLowerCase());
              {
                const cacheId2 = o.name.toLowerCase();
                cache.labels.set(cacheId2, labelMap.get(cacheId2));
              }
            });
          }
          {
            cache.fields.set(cacheId, fields);
          }
          setTimeout(() => {
            resolve2(fields);
          }, settings.resolveDelay);
        }));
      }
      const item = cache.fields.get(cacheId);
      return typeof item === "function" ? item() : item;
    };
    function UtilsClient({ Buffer: Buffer2, Papa: Papa2, randomLocation } = {}) {
      const Apex = {
        async invoke(action, params = [], { cls = "SPMRemoteActions" } = {}) {
          const startTime = window.performance.now();
          const promise = new Promise((resolve2) => {
            const args = [
              `sfsp.${cls}.${action}`,
              ...params,
              (data, event) => resolve2({ data, event })
            ];
            Visualforce.remoting.Manager.invokeAction(...args, { buffer: false, escape: false, timeout: 12e4 });
          });
          const result = await promise;
          if (!result.event.status) {
            throw {
              type: "RemoteActionException",
              error: result.event
            };
          } else {
            if (action === "Query") {
              SPM.Utils.Splunk.sendLog({
                logName: "spmAPEX",
                logPayload: {
                  query: params[0],
                  returnCount: result.data.length,
                  executionTime: window.performance.now() - startTime
                }
              });
            }
            return result.data;
          }
        }
      };
      const Rest = {
        async invoke() {
          const [method, params = {}] = arguments;
          const headers = { Authorization: `Bearer ${SPM.SessionId}` };
          const promise = new SPM.Utils.DeferredPromise();
          const response = await this.Actions[method](headers, params);
          promise.resolve(response);
          if (SPM.Utils.Debug) {
            promise.then((r) => {
              console.groupCollapsed(method);
              [params, r].forEach((obj) => console.log(obj));
              console.groupEnd();
            }).catch((err) => {
              console.groupCollapsed(method);
              [params, err].forEach((obj) => console.log(obj));
              console.groupEnd();
            });
          }
          return promise;
        },
        Actions: {
          async Query(headers, { query }) {
            const startTime = window.performance.now();
            const records = [];
            let { data: results } = await axios$1({
              method: "GET",
              url: "/services/data/v53.0/query",
              params: {
                q: query
              },
              headers
            });
            records.push(...results.records);
            while (results.nextRecordsUrl) {
              results = (await axios$1({ method: "GET", url: results.nextRecordsUrl, headers })).data;
              records.push(...results.records);
            }
            records.forEach((r) => {
              Object.keys(r).forEach((key) => {
                var _a2;
                if ((_a2 = r[key]) == null ? void 0 : _a2.records) {
                  r[key] = r[key].records;
                }
              });
            });
            SPM.Utils.Splunk.sendLog({
              logName: "spmREST",
              logPayload: {
                query,
                returnCount: records.length,
                executionTime: window.performance.now() - startTime
              }
            });
            return records;
          },
          async Insert(headers, { records }) {
            if (records.length === 0)
              return [];
            const { data: results } = await axios$1({
              method: "POST",
              url: "/services/data/v53.0/composite/sobjects",
              data: {
                allOrNone: true,
                records
              },
              headers
            });
            return results;
          },
          async Delete(headers, { ids }) {
            const batches = [];
            while (ids.length)
              batches.push(ids.splice(0, 1e3));
            await Async.forEachParallel(batches, async (batch) => {
              await axios$1({
                method: "DELETE",
                url: "/services/data/v53.0/composite/sobjects",
                params: {
                  ids: batch.join(",")
                },
                headers
              });
            }, 5);
          },
          async tpRest(headers, { action, data }) {
            const { data: results } = await axios$1({
              method: "POST",
              url: `/services/apexrest/maps/TPRest/${action}`,
              data,
              headers
            });
            return results.data;
          },
          async ToolingQuery(headers, query) {
            const { data: results } = await axios$1({
              method: "GET",
              url: `/services/data/v53.0/tooling/query/?q=${query}`,
              headers
            });
            return results;
          },
          async ToolingSObject(headers, { sObject }) {
            const { data: results } = await axios$1({
              method: "GET",
              url: `/services/data/v53.0/tooling/sobjects/${sObject}/describe`,
              headers
            });
            return results;
          },
          async ToolingSObjectPatch(headers, { url, metadata }) {
            const { data: results } = await axios$1({
              method: "PATCH",
              url,
              data: metadata,
              headers
            });
            return results;
          },
          async SObjects(headers) {
            const { data: results } = await axios$1({
              method: "GET",
              url: "/services/data/v53.0/sobjects",
              headers
            });
            return results;
          },
          async SObject(headers, { sObject }) {
            const { data: results } = await axios$1({
              method: "GET",
              url: `/services/data/v53.0/sobjects/${sObject}/describe`,
              headers
            });
            return results;
          },
          async RunSaql(headers, { query }) {
            var _a2, _b;
            const startTime = window.performance.now();
            let res;
            try {
              const { data: results } = await axios$1({
                method: "POST",
                url: "/services/data/v53.0/wave/query",
                data: {
                  query
                },
                headers
              });
              res = results;
              return results;
            } catch (e) {
              SPM.$store.toast({ message: e.response.data[0].message, duration: 5e3, state: "error" });
              return { records: [] };
            } finally {
              SPM.Utils.Splunk.sendLog({
                logName: "spmSAQL",
                logPayload: {
                  query,
                  returnCount: ((_b = (_a2 = res == null ? void 0 : res.results) == null ? void 0 : _a2.records) == null ? void 0 : _b.length) || 0,
                  executionTime: window.performance.now() - startTime
                }
              });
            }
          },
          async GetDataflows(headers, { alias }) {
            const { data: results } = await axios$1({
              method: "GET",
              url: `/services/data/v53.0/wave/dataflows?hasCurrentOnly&q=${alias}`,
              headers
            });
            return results.dataflows || [];
          },
          async UpdateDataflow(headers, { dataflowId, definition }) {
            const { data: results } = await axios$1({
              method: "PATCH",
              url: `/services/data/v50.0/wave/dataflows/${dataflowId}`,
              data: {
                definition
              },
              headers
            });
            return results;
          },
          async RunDataflow(headers, { dataflowId }) {
            const { data: results } = await axios$1({
              method: "POST",
              url: "/services/data/v53.0/wave/dataflowjobs",
              data: {
                dataflowId,
                command: "Start"
              },
              headers
            });
            return results;
          },
          async GetDatasets(headers, { alias, hasCurrentOnly = true }) {
            const { data: results } = await axios$1({
              method: "GET",
              url: `/services/data/v53.0/wave/datasets?hasCurrentOnly=${hasCurrentOnly}&q=${alias}&filterGroup=Supplemental`,
              headers
            });
            return results.datasets || [];
          },
          async GetDataset(headers, { id }) {
            const { data: results } = await axios$1({
              method: "GET",
              url: `/services/data/v53.0/wave/datasets/${id}?t=${Date.now()}`,
              headers
            });
            return results;
          },
          async PatchDataset(headers, { id, metadata }) {
            await axios$1({
              method: "PATCH",
              url: `/services/data/v53.0/wave/datasets/${id}`,
              data: metadata,
              headers
            });
          },
          async GetDatasetMetadata(headers, { url }) {
            const { data: results } = await axios$1({
              method: "GET",
              url: `${url}/xmds/main`,
              headers
            });
            return results;
          },
          async GetCurrentDataflowJob(headers, { id }) {
            const { data: results } = await axios$1({
              method: "GET",
              url: `/services/data/v53.0/wave/dataflowjobs/`,
              headers
            });
            results.dataflowJobs.filter((f) => f.label.includes(id));
            results.dataflowJobs.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));
            return results.dataflowJobs[0];
          },
          async CreateExternalDataJob(headers, { metadata, alias, label, app, operation }) {
            const { data: results } = await axios$1({
              method: "POST",
              url: "/services/data/v56.0/sobjects/InsightsExternalData",
              data: {
                Format: "Csv",
                LicenseType: SPM.isScratch ? "EinsteinAnalytics" : "Sonic",
                EdgemartAlias: alias,
                EdgemartLabel: label || alias,
                EdgemartContainer: app || "",
                Operation: operation,
                Action: "None",
                NotificationSent: "Always",
                MetadataJson: metadata
              },
              headers
            });
            return results;
          },
          async UploadCsvPart(headers, { parentId, csvPart, partNumber }) {
            const { data: results } = await axios$1({
              method: "POST",
              url: "/services/data/v56.0/sobjects/InsightsExternalDataPart",
              data: {
                DataFile: csvPart,
                InsightsExternalDataId: parentId,
                PartNumber: partNumber
              },
              headers
            });
            return results;
          },
          async StartExternalDataJob(headers, { parentId }) {
            const { data: results } = await axios$1({
              method: "PATCH",
              url: `/services/data/v56.0/sobjects/InsightsExternalData/${parentId}`,
              data: {
                Action: "Process"
              },
              headers
            });
            return results;
          },
          async UploadAutoAssignmentData(headers, { scus, mapping }) {
            const uploadResponse = await Apex.invoke("GetAutoAssignmentUploadUrl", []);
            const data = {
              records: scus,
              mapping: mapping || {
                "Unique Id": "Id",
                "Assignment": "Assignment",
                "Boundaries": "Boundaries",
                "Locked": "Locked",
                "Latitude": "Latitude",
                "Longitude": "Longitude",
                "Weight": "Weight",
                "Volume": "Volume"
              }
            };
            await axios$1({
              method: "PUT",
              url: uploadResponse.externalDataUrl,
              headers: { "Content-Type": "application/json" },
              data
            });
            return uploadResponse.requestId;
          },
          async MoveDatasetToSharedFolder(headers, { datasetId }) {
            let response = await Apex.invoke("MoveDatasetToSharedFolder", [datasetId]);
            if (!response.success) {
              const folder = await Apex.invoke("Query", [`SELECT Id FROM Folder where Type = 'Insights' AND DeveloperName = 'Sales_Planning'`]);
              const data = {
                folder: { id: folder[0].Id }
              };
              ({ data: response } = await axios$1({
                method: "PATCH",
                url: `/services/data/v56.0/wave/datasets/${datasetId}`,
                headers,
                data
              }));
            }
            return response;
          }
        }
      };
      const HTTP = {
        async get({ url }) {
          const results = await axios$1({
            method: "GET",
            url
          });
          return results;
        }
      };
      const CRM = {
        MasterDetailRelationships: {
          sfsp__SalesNodeRuleItem__c: {
            sfsp__SalesNodeRule__c: true
          }
        },
        upsert: async ({ records, onProgress = () => {
        } }) => {
          const recordsToInsert = [];
          const recordsToUpdate = [];
          records.forEach((r) => (r.Id ? recordsToUpdate : recordsToInsert).push(r));
          const batches = [];
          while (recordsToInsert.length)
            batches.push({ type: "InsertSObjects", records: recordsToInsert.splice(0, 1e3) });
          while (recordsToUpdate.length)
            batches.push({ type: "UpdateSObjects", records: recordsToUpdate.splice(0, 1e3) });
          let recordsUpserted = 0;
          await Async.forEachParallel(batches, async (batch) => {
            const primitiveRecords = batch.records.map((r) => {
              return Object.keys(r).reduce((obj, key) => {
                var _a2, _b;
                const isPrivate = key.startsWith("_");
                const isTypeWithId = key === "sobjectType" && r.Id;
                const isChildRecords = key.endsWith("__r");
                const isUpdateMaster = batch.type === "UpdateSObjects" && ((_b = (_a2 = CRM.MasterDetailRelationships) == null ? void 0 : _a2[r.sobjectType]) == null ? void 0 : _b[key]);
                const isReserved = ["CreatedBy", "CreatedById", "CreatedDate"].includes(key);
                if (!isPrivate && !isTypeWithId && !isChildRecords && !isUpdateMaster && !isReserved)
                  obj[key] = r[key];
                return obj;
              }, {});
            });
            const response = await Apex.invoke(batch.type, [primitiveRecords, true]);
            if (batch.type === "InsertSObjects") {
              response.forEach((r, i2) => batch.records[i2].Id = r.Id);
            }
            recordsUpserted += batch.records.length;
            onProgress(Math.floor(100 * recordsUpserted / records.length));
          }, 5);
        },
        delete: async ({ records, onProgress = () => {
        } }) => {
          const recordIdsToDelete = records.map((r) => r.Id).sort();
          const batches = [];
          while (recordIdsToDelete.length)
            batches.push(recordIdsToDelete.splice(0, 1e3));
          let recordsDeleted = 0;
          await Async.forEachParallel(batches, async (batch) => {
            await Apex.invoke("DeleteIds", [batch, true]);
            recordsDeleted += batch.length;
            onProgress(Math.floor(100 * recordsDeleted / records.length));
          }, 5);
        }
      };
      const CRMA = {
        async checkDatasets(assignmentObject, options, callback = () => {
        }) {
          var _a2, _b, _c;
          const toasts = [];
          const updateDatasets = async ({ recordsDataset, assignmentsDataset }) => {
            let canShare = true;
            await SPM.Utils.Async.forEachParallel([recordsDataset, assignmentsDataset], async (dataset) => {
              if (dataset.folder.name !== "Sales_Planning") {
                try {
                  const response = await SPM.Utils.Rest.invoke("MoveDatasetToSharedFolder", { datasetId: dataset.id });
                  if (response.folder)
                    dataset.folder = { name: "Sales_Planning" };
                } catch (err) {
                  canShare = false;
                }
              }
            });
            if (!canShare) {
              toasts.push({ showOnce: true, state: "warning", message: "This plan cannot be shared. Please see your admin about adding a Sales Planning app if you need to share with others." });
            }
            recordsDataset.dataflowStatus = "";
            assignmentsDataset.dataflowStatus = "";
            Object.assign(storeAssignment, { recordsDataset, assignmentsDataset, totalCount: recordsDataset.currentVersionTotalRowCount, assignmentCount: storeAssignment.assignmentCount || 0 });
            if (assignmentAsyncJob)
              Object.assign(assignmentAsyncJob, { status: "Success" });
            storeAssignment.asyncJob.status = "Success";
            callback();
          };
          const checkDataflowJobs = async (assignmentObject2, retries = 5) => {
            const { dataflowJobs } = await SPM.Utils.Apex.invoke("GetDataflowJobs", [SPM.$store.plan.Id, assignmentObject2.id]);
            const assignmentsJob = dataflowJobs.find((df) => {
              var _a3;
              return (_a3 = df == null ? void 0 : df.label) == null ? void 0 : _a3.startsWith(`${SPM.$store.plan.Id}_${assignmentObject2.id}_Assignments`);
            });
            const recordsJob = dataflowJobs.find((df) => {
              var _a3;
              return (_a3 = df == null ? void 0 : df.label) == null ? void 0 : _a3.startsWith(`${SPM.$store.plan.Id}_${assignmentObject2.id}_Records`);
            });
            if (!recordsJob || !assignmentsJob) {
              const datasetResponse2 = await SPM.Utils.AssignmentObject.loadDatasets({ assignmentObjectId: assignmentObject2.id, planId: SPM.$store.plan.Id });
              if (datasetResponse2) {
                await updateDatasets({ recordsDataset: datasetResponse2.recordsDataset, assignmentsDataset: datasetResponse2.assignmentsDataset });
                return 0;
              }
              await Async.wait(1e4);
              return retries;
            } else {
              assignmentObject2.recordsDataset.dataflowStatus = recordsJob.status;
              assignmentObject2.assignmentsDataset.dataflowStatus = assignmentsJob.status;
              if (!["Failure", "Warning", "Success"].includes(recordsJob.status) || !["Failure", "Warning", "Success"].includes(assignmentsJob.status)) {
                await Async.wait(1e4);
                return retries;
              } else if (["Success", "Warning"].includes(recordsJob.status) && ["Success", "Warning"].includes(assignmentsJob.status)) {
                const datasetResponse2 = await SPM.Utils.AssignmentObject.loadDatasets({ assignmentObjectId: assignmentObject2.id, planId: SPM.$store.plan.Id });
                if (datasetResponse2) {
                  await updateDatasets({ recordsDataset: datasetResponse2.recordsDataset, assignmentsDataset: datasetResponse2.assignmentsDataset });
                  if (["create", "update"].includes(options == null ? void 0 : options.type)) {
                    toasts.push(
                      recordsJob.status === "Warning" ? { message: `Assignment Object "${assignmentObject2.label}" was created with some warnings.`, duration: null, state: "warning", subMessage: `${SPM.orgDomainUrl}/analytics/dataManager` } : { message: `Assignment Object "${assignmentObject2.label}" was ${(options == null ? void 0 : options.type) === "create" ? "created" : "updated"}.`, duration: 3e3, state: "success" }
                    );
                    if (assignmentObject2.asyncJob.type === "Refresh Assignment Object")
                      await SPM.Utils.AssignmentObject.updateReferenceFields({ assignmentObject: assignmentObject2 });
                  }
                  return 0;
                }
                if (retries - 1 === 1) {
                  try {
                    await Promise.allSettled([
                      SPM.Utils.Apex.invoke("MoveDatasetToSharedFolderByAlias", [`${SPM.$store.plan.Id}_${storeAssignment.id}_Records`]),
                      SPM.Utils.Apex.invoke("MoveDatasetToSharedFolderByAlias", [`${SPM.$store.plan.Id}_${storeAssignment.id}_Assignments`])
                    ]);
                  } catch (err) {
                  }
                }
                await Async.wait(1e4);
                return retries - 1;
              } else if (["Failure"].includes(recordsJob.status) || ["Failure"].includes(assignmentsJob.status)) {
                const datasetResponse2 = await SPM.Utils.AssignmentObject.loadDatasets({ assignmentObjectId: assignmentObject2.id, planId: SPM.$store.plan.Id });
                if (datasetResponse2)
                  await updateDatasets({ recordsDataset: datasetResponse2.recordsDataset, assignmentsDataset: datasetResponse2.assignmentsDataset });
                toasts.push({ message: `Assignment Object "${assignmentObject2.label}" dataflow had a failure ${(options == null ? void 0 : options.type) === "create" ? "creating" : options.type === "update" ? "updating" : "loading"}.`, duration: null, state: "error", subMessage: `Records: ${recordsJob.message}, Assignments: ${assignmentsJob.message}` });
                return 0;
              }
            }
          };
          const checkAsyncJobs = async (assignmentObject2) => {
            const latestJob = (await SPM.Utils.AssignmentObject.getSalesAsyncJobs({ objectId: assignmentObject2.id, statusFilter: ["Queued", "Running", "Waiting", "Failure"] }))[0] || false;
            if (!latestJob)
              return;
            SPM.$store.$patch((state) => {
              const storeSalesAsyncJob = SPM.$store.salesAsyncJobs.find((job) => job.Id === latestJob.Id);
              if (storeSalesAsyncJob)
                Object.assign(storeSalesAsyncJob, latestJob);
              const storeAssignmentObject = state.assignmentObjects.find((a) => a.id === assignmentObject2.id);
              if (storeAssignmentObject.recordsDataset && latestJob.sfsp__Status__c === "Waiting") {
                CRM.upsert({ records: [{ Id: latestJob.Id, sfsp__Status__c: "Success" }] });
                latestJob.sfsp__Status__c = "Success";
              }
              Object.assign(storeAssignmentObject.asyncJob, { id: latestJob.Id, type: latestJob.sfsp__Type__c, status: latestJob.sfsp__Status__c, details: latestJob.sfsp__Details__c });
              state.hasChanged = true;
            });
            if (!["Success", "Warning"].includes(latestJob.sfsp__Status__c)) {
              if (["Failure"].includes(latestJob.sfsp__Status__c)) {
                return latestJob;
              } else {
                await Async.wait(5e3);
                return await checkAsyncJobs(assignmentObject2);
              }
            }
          };
          const assignmentAsyncJob = SPM.$store.salesAsyncJobs.find((s) => s.sfsp__SalesAssignmentObject__c === assignmentObject.Id);
          const storeAssignment = SPM.$store.assignmentObjects.find((a) => a.id === assignmentObject.Id);
          if (!storeAssignment) {
            const asyncJobIndex = SPM.$store.salesAsyncJobs.findIndex((j) => j.Id === assignmentAsyncJob.Id);
            if (asyncJobIndex > -1)
              SPM.$store.salesAsyncJobs.splice(asyncJobIndex, 1);
            if (options.type === "delete") {
              callback();
              toasts.push({ message: `Assignment Object "${options.assignmentObject.sfsp__Label__c}" was deleted.`, duration: 3e3, state: "success" });
            }
            return;
          }
          let datasetResponse = null;
          try {
            datasetResponse = await SPM.Utils.AssignmentObject.loadDatasets({ assignmentObjectId: assignmentObject.Id, planId: SPM.$store.plan.Id });
          } catch (err) {
            const errorCode = ((_a2 = err.response) == null ? void 0 : _a2.data[0].errorCode) || null;
            if (errorCode === "FUNCTIONALITY_NOT_ENABLED")
              toasts.push({ showOnce: true, state: "warning", message: "Some features may not work properly. Please contact your admin to ensure you are properly licensed.", duration: null });
          }
          if (datasetResponse)
            await updateDatasets({ recordsDataset: datasetResponse.recordsDataset, assignmentsDataset: datasetResponse.assignmentsDataset });
          if (assignmentAsyncJob) {
            const failedJob = await checkAsyncJobs(storeAssignment);
            if (!failedJob) {
              let retries = await checkDataflowJobs(storeAssignment, 5);
              while (retries !== 0) {
                retries = await checkDataflowJobs(storeAssignment, retries);
                await Async.wait(2e3);
              }
            } else {
              SPM.$store.toast({ message: `Can’t ${options.type === "create" ? "create" : "update"} the ${options.assignmentObject.sfsp__Label__c} assignment object. Try again or contact Salesforce Customer Support.`, duration: null, state: "error" });
            }
            if (failedJob || ["Warning", "Success"].includes(storeAssignment.asyncJob.status)) {
              if (assignmentAsyncJob.sfsp__Splunk__c)
                SPM.Utils.Splunk.sendLog(JSON.parse(assignmentAsyncJob.sfsp__Splunk__c));
              try {
                await SPM.Utils.CRM.delete({ records: [{ Id: assignmentAsyncJob.Id }] });
              } catch (err) {
              }
              const asyncJobIndex = SPM.$store.salesAsyncJobs.findIndex((j) => j.Id === assignmentAsyncJob.Id);
              if (asyncJobIndex > -1)
                SPM.$store.salesAsyncJobs.splice(asyncJobIndex, 1);
            }
          }
          if (!((_b = storeAssignment == null ? void 0 : storeAssignment.recordsDataset) == null ? void 0 : _b.dimensions) || !((_c = storeAssignment == null ? void 0 : storeAssignment.assignmentsDataset) == null ? void 0 : _c.dimensions)) {
            try {
              const settle2 = await Promise.allSettled([
                SPM.Utils.Apex.invoke("MoveDatasetToSharedFolderByAlias", [`${SPM.$store.plan.Id}_${storeAssignment.id}_Records`]),
                SPM.Utils.Apex.invoke("MoveDatasetToSharedFolderByAlias", [`${SPM.$store.plan.Id}_${storeAssignment.id}_Assignments`])
              ]);
              await checkDataflowJobs(storeAssignment, 1);
              if (settle2.some((s) => s.status === "rejected")) {
                toasts.push({ state: "error", message: `Unable to load ${storeAssignment.label}. Please contact your admin to ensure Sales Planning is properly configured.`, duration: null });
              }
            } catch (err) {
              toasts.push({ state: "error", message: `Unable to load ${storeAssignment.label}. Please contact your admin to ensure Sales Planning is properly configured.`, duration: null });
            }
          }
          toasts.forEach((toast) => {
            if (SPM.$store.showOnLoadToasts || !toast.showOnce)
              SPM.$store.toast(toast);
          });
          SPM.$store.showOnLoadToasts = false;
          return;
        }
      };
      const Async = {
        forEach: async (array, callback) => {
          for (let i2 = 0; i2 < array.length; i2++) {
            await callback(array[i2], i2, array);
          }
        },
        forEachParallel: (array, callback, threads) => {
          array = array.map((item) => item);
          return Promise.all(
            threads ? Array(threads).fill().map(() => (async () => {
              for (let item; item = array.shift(); )
                await callback(item);
            })()) : array.map((item, index) => (async () => callback(item, index, array))())
          );
        },
        forEachBulk: async (array, callback, blockCount) => {
          let blockStart = 0;
          while (blockStart < array.length) {
            const blockEnd = Math.min(blockStart + blockCount, array.length);
            for (let i2 = blockStart; i2 < blockEnd; i2++) {
              callback(array[i2]);
            }
            blockStart += blockCount;
            await Async.wait(1);
          }
        },
        wrapper: (callback) => (resolveAsync, rejectAsync) => {
          callback().then(resolveAsync).catch((err) => rejectAsync(err));
        },
        wait(milliseconds2, callback = async () => {
        }) {
          return new Promise((resolve2, reject) => setTimeout(() => {
            callback().then((val) => resolve2(val)).catch(reject);
          }, milliseconds2));
        }
      };
      const Store = {
        on(store, event, callback) {
          store.$onAction(async ({ name, args, after }) => {
            if (name === "emit" && args[0] === event)
              after(callback);
          });
        }
      };
      const Obj = {
        get(obj = {}, path, def2 = "") {
          const fullPath = path.replace(/\[/g, ".").replace(/]/g, "").split(".").filter(Boolean);
          return fullPath.every((part) => {
            obj = obj[part];
            return obj !== null && obj !== void 0;
          }) ? obj : def2;
        },
        compare(a, b, criteria) {
          const aVal = a[criteria];
          const bVal = b[criteria];
          if (aVal > bVal)
            return 1;
          if (aVal < bVal)
            return -1;
          return 0;
        },
        shallowCompare(a, b) {
          return Object.keys(a).length === Object.keys(b).length && Object.keys(a).every((key) => b.hasOwnProperty(key) && a[key] === b[key]);
        }
      };
      const Arr2 = {
        move(arr, from2, to2) {
          arr.splice(to2, 0, arr.splice(from2, 1)[0]);
        },
        splice(arr, fn) {
          if (arr.length === 0)
            return [];
          const spliced = [];
          arr.length - 1;
          for (let i2 = arr.length - 1; i2 >= 0; i2--) {
            if (fn(arr[i2]))
              spliced.push(arr.splice(i2, 1)[0]);
          }
          return spliced;
        }
      };
      const Tree2 = {
        inspect({ node, nodeCount = 1, depth = 1 }) {
          var _a2;
          let maxDepth = depth;
          (_a2 = node == null ? void 0 : node.children) == null ? void 0 : _a2.forEach((child) => {
            const childDetails = this.inspect({ node: child, depth: depth + 1 });
            nodeCount += childDetails.nodeCount;
            maxDepth = Math.max(maxDepth, childDetails.maxDepth);
          });
          return { nodeCount, maxDepth };
        }
      };
      const Rule = {
        RuleItem: {
          ETMOperators: {
            equals: "==",
            notEqual: "!=",
            lessThan: "<",
            lessOrEqual: "<=",
            greaterThan: ">",
            greaterOrEqual: ">=",
            contains: "like",
            notContain: "doesnotcontain",
            startsWith: "startsWith"
          },
          fromFilter(filter) {
            const isMeasure = typeof filter.value === "object";
            return {
              sobjectType: "sfsp__SalesNodeRuleItem__c",
              sfsp__Field__c: filter.key,
              sfsp__Operator__c: isMeasure ? "between" : "==",
              sfsp__Value__c: isMeasure ? `${filter.value.from},${filter.value.to}` : filter.value
            };
          },
          fromRecordFilter(filter) {
            return {
              sobjectType: "sfsp__SalesNodeRuleItem__c",
              sfsp__Field__c: filter.field,
              sfsp__Operator__c: filter.operator,
              sfsp__Value__c: filter.value
            };
          }
        },
        fromFilterSet(filterSet, assignmentObjectId, startItemIndex = 1) {
          const booleanFilterParts = [];
          const ruleItems = [];
          const ancestorFilters = filterSet[0].slice(0, filterSet[0].length - 1);
          const filters = filterSet.map((fs) => fs.slice(-1)[0]);
          if (ancestorFilters.length) {
            booleanFilterParts.push(ancestorFilters.map((f, index) => startItemIndex + index + ruleItems.length).join(" and "));
            ruleItems.push(...ancestorFilters.map((f) => Rule.RuleItem.fromFilter(f)));
          }
          const isMeasure = typeof filters[0].value === "object";
          if (isMeasure) {
            const indices = filters.map((f, index) => startItemIndex + index + ruleItems.length);
            booleanFilterParts.push(`(${indices.join(" or ")})`);
            ruleItems.push(...filters.map((f) => SPM.Utils.Rule.RuleItem.fromFilter(f)));
          } else {
            booleanFilterParts.push(String(startItemIndex + ruleItems.length));
            ruleItems.push({
              sobjectType: "sfsp__SalesNodeRuleItem__c",
              sfsp__Field__c: filters[0].key,
              sfsp__Operator__c: "==",
              sfsp__Value__c: filters.map((f) => f.value).join(",")
            });
          }
          return {
            sobjectType: "sfsp__SalesNodeRule__c",
            sfsp__BooleanFilter__c: booleanFilterParts.join(" and "),
            sfsp__SalesNodeRuleItems__r: ruleItems.map((ruleItem, i2) => ({
              ...ruleItem,
              sfsp__SortOrder__c: i2 + 1
            }))
          };
        },
        fromBoundaries({ boundaries, boundaryObject }) {
          const containerSet = SPM.$store.containerSets[boundaryObject.containerSetId];
          let availableContainers = containerSet.containers;
          if (!boundaryObject.includesPoints) {
            availableContainers = Object.keys(availableContainers).filter((key) => !availableContainers[key].parent).reduce((res, key) => (res[key] = availableContainers[key], res), {});
          }
          const ruleItemOperator = "startsWith";
          boundaries = SPM.Utils.Rule.simplifyValues(Object.values(availableContainers).map((c) => c.name), boundaries);
          const ruleItemValues = [];
          let currentValue = "";
          boundaries.forEach((boundary) => {
            if (currentValue.length + boundary.length + 1 >= 1e3) {
              ruleItemValues.push(currentValue.slice(0, currentValue.length - 1));
              currentValue = "";
            }
            currentValue += `${boundary},`;
          });
          if (currentValue)
            ruleItemValues.push(currentValue.slice(0, currentValue.length - 1));
          return {
            sobjectType: "sfsp__SalesNodeRule__c",
            Name: containerSet.label,
            sfsp__SalesNodeBoundary__c: boundaryObject.id,
            sfsp__SortOrder__c: 1,
            sfsp__FilterLogic__c: "any",
            sfsp__BooleanFilter__c: Array(ruleItemValues.length).fill().map((v, i2) => i2 + 1).join(" or "),
            sfsp__SalesNodeRuleItems__r: ruleItemValues.map((value, i2) => ({
              sobjectType: "sfsp__SalesNodeRuleItem__c",
              sfsp__Field__c: boundaryObject.name,
              sfsp__Operator__c: ruleItemOperator,
              sfsp__Value__c: value,
              sfsp__SortOrder__c: i2 + 1
            }))
          };
        },
        toString(rule) {
          const expressions = rule.sfsp__SalesNodeRuleItems__r.map((item) => `${item.sfsp__Field__c} ${item.sfsp__Operator__c} ${JSON.stringify(item.sfsp__Value__c)}`);
          return Filter.mergeBooleanFilter(rule.sfsp__BooleanFilter__c, expressions);
        },
        toSaql(rule, assignmentObject) {
          const saqlExpressions = rule.sfsp__SalesNodeRuleItems__r.map((item) => {
            return Filter.toSaql({
              field: item.sfsp__Field__c,
              operator: item.sfsp__Operator__c,
              value: item.sfsp__Value__c,
              dataType: rule.sfsp__SalesNodeBoundary__c ? "Text" : assignmentObject.referenceFields.find((f) => f.id === item.sfsp__Field__c).type
            });
          });
          return Filter.mergeBooleanFilter(rule.sfsp__BooleanFilter__c, saqlExpressions);
        },
        simplifyValues(allValues, selectedValues) {
          const allTrie = new Trie$1.Trie();
          allValues.forEach((v) => allTrie.add(v));
          const selectedTrie = new Trie$1.Trie();
          selectedValues.forEach((v) => selectedTrie.add(v));
          const simplifiedValues = /* @__PURE__ */ new Set();
          selectedValues.forEach((value) => {
            for (let i2 = 1; i2 <= value.length; i2++) {
              const matchString = value.slice(0, i2);
              if (selectedTrie.countChildren(matchString) === allTrie.countChildren(matchString)) {
                simplifiedValues.add(matchString);
                break;
              }
            }
          });
          return [...simplifiedValues];
        },
        unsimplifyValues(allValues, selectedValues) {
          const allTrie = new Trie$1.Trie();
          allValues.forEach((v) => allTrie.add(v));
          const unsimplifiedValues = selectedValues.map((v) => allTrie.prefixMatchingWords(v)).flat();
          return unsimplifiedValues;
        },
        validateCustomLogic(expression, numCriteria) {
          if (!expression || numCriteria == 0) {
            return false;
          }
          var numCritArr = [];
          for (let i2 = 1; i2 <= numCriteria; i2++) {
            numCritArr.push(i2.toString());
          }
          const pattern = /\d+/g;
          const values = expression.match(pattern);
          if (values) {
            for (let i2 = 0; i2 < values.length; i2++) {
              if (values[i2] < 1 || values[i2] > numCriteria) {
                return false;
              }
              let position = numCritArr.indexOf(values[i2]);
              if (position >= 0)
                numCritArr.splice(position, 1);
            }
          }
          if (numCritArr.length !== 0) {
            return false;
          }
          return this.validateBooleanExpr(expression);
        },
        validateBooleanExpr(expression) {
          let expressionLC = expression.toLowerCase();
          const pattern = /\(\d+\)|\d+ (?:and|or|\|\||\&\&) \d+|\d+/g;
          while (true) {
            const replaced = expressionLC.replace(pattern, "1");
            if (replaced == "1")
              return true;
            if (replaced == expressionLC)
              return false;
            expressionLC = replaced;
          }
        }
      };
      const Filter = {
        toSaql(filter) {
          const { field, operator, value = "", dataType } = filter;
          if (dataType === "Text") {
            let values = value.split(",");
            values = values.map((v) => v.trimStart());
            switch (operator) {
              case "==":
                return values.length > 1 ? values.some((v) => !v) ? `(${field} in ["${values.join('","')}"] || ${field} is null)` : `${field} in ["${values.join('","')}"]` : value ? `${field} == "${value}"` : `(${field} == "" || ${field} is null)`;
              case "!=":
                return values.length > 1 ? values.some((v) => !v) ? `(${field} not in ["${values.join('","')}"] || ${field} is null)` : `${field} not in ["${values.join('","')}"]` : value ? `(${field} != "${value}" || ${field} is null)` : `(${field} != "" || ${field} is not null)`;
              case "like":
                return values.length > 1 ? `(${values.map((v) => `${field} like "%${v}%"`).join(" || ")})` : `${field} like "%${value}%"`;
              case "startsWith":
                return values.length > 1 ? `(${values.map((v) => `${field} like "${v}%"`).join(" || ")})` : `${field} like "${value}%"`;
              default:
                return `${field} ${operator} "${value}"`;
            }
          } else {
            switch (operator) {
              case "between":
                const [from2, to2] = value.split(",");
                return `(${field} >= ${from2} && ${field} <= ${to2})`;
              default:
                return `${field} ${operator} ${value}`;
            }
          }
        },
        evaluate({ filters, filterLogic, record }) {
          if (filters.length === 0)
            return true;
          const expressions = filters.map((filter) => {
            const { field, operator, value = "", dataType } = filter;
            const values = operator === "between" ? [value] : value.split(",");
            const recordValue = record[field];
            const recordValueLower = (recordValue || "").toString().toLowerCase();
            return values.some((v) => {
              switch (operator) {
                case "==":
                  return recordValue == v;
                case "!=":
                  return recordValue != v;
                case "like":
                  return recordValueLower.includes(v.toLowerCase());
                case "startsWith":
                  return recordValueLower.startsWith(v.toLowerCase());
                case "between":
                  const [from2, to2] = v.split(",");
                  return recordValue >= from2 && recordValue <= to2;
                case "<":
                  return recordValue < v;
                case "<=":
                  return recordValue <= v;
                case ">":
                  return recordValue > v;
                case ">=":
                  return recordValue >= v;
                default:
                  return false;
              }
            });
          });
          const mergedExpressions = Filter.mergeBooleanFilter(filterLogic, expressions);
          return Function(`"use strict";return (${mergedExpressions})`)();
        },
        mergeBooleanFilter(booleanFilter, expressions) {
          booleanFilter = booleanFilter.toLowerCase().replaceAll(" and ", " && ").replaceAll(" or ", " || ");
          let result = "";
          let currentToken = "";
          for (let i2 = 0; i2 < booleanFilter.length; i2++) {
            const char = booleanFilter[i2];
            if (/[0-9]/.test(char)) {
              currentToken += char;
              continue;
            }
            if (currentToken) {
              result += expressions[parseInt(currentToken) - 1];
              currentToken = "";
            }
            result += char;
          }
          if (currentToken)
            result += expressions[parseInt(currentToken) - 1];
          return result;
        },
        removeBooleanFilterExpression(booleanFilter, expressionIndex, startIndex = 0) {
          booleanFilter = booleanFilter.toLowerCase();
          expressionIndex = String(expressionIndex);
          let currentToken = "";
          let matchingIndex;
          for (let i2 = startIndex; i2 < booleanFilter.length; i2++) {
            const char = booleanFilter[i2];
            if (/[0-9]/.test(char)) {
              currentToken += char;
              continue;
            }
            if (currentToken === expressionIndex) {
              matchingIndex = i2 - String(expressionIndex).length;
              break;
            }
            if (Number(currentToken) > Number(expressionIndex)) {
              const newToken = String(Number(currentToken) - 1);
              booleanFilter = `${booleanFilter.slice(0, i2 - 1)}${newToken}${booleanFilter.slice(i2 - 1 + currentToken.length)}`;
              if (newToken.length < expressionIndex.length)
                i2--;
            }
            currentToken = "";
          }
          if (!matchingIndex && currentToken === expressionIndex) {
            matchingIndex = booleanFilter.length - String(expressionIndex).length;
          } else if (!matchingIndex && currentToken && Number(currentToken) > Number(expressionIndex)) {
            const newToken = String(Number(currentToken) - 1);
            booleanFilter = booleanFilter.replace(new RegExp(`${currentToken}$`), newToken);
          }
          if (matchingIndex) {
            const { start: start2, end: end2 } = Filter.getOperatorBounds(booleanFilter, matchingIndex, expressionIndex.length);
            return Filter.removeBooleanFilterExpression(
              `${booleanFilter.slice(0, start2)}${booleanFilter.slice(end2)}`,
              expressionIndex,
              start2
            );
          }
          let paramIndex;
          while ((paramIndex = booleanFilter.indexOf("()")) !== -1) {
            const { start: start2, end: end2 } = Filter.getOperatorBounds(booleanFilter, paramIndex, 2);
            booleanFilter = `${booleanFilter.slice(0, start2)}${booleanFilter.slice(end2)}`;
          }
          return booleanFilter;
        },
        getOperatorBounds(booleanFilter, matchingIndex, matchLength) {
          const matchingIndexEnd = matchingIndex + matchLength;
          let start2;
          let end2;
          if (matchingIndex > 4 && booleanFilter.slice(matchingIndex - 4, matchingIndex) === " or ") {
            start2 = matchingIndex - 4;
            end2 = matchingIndexEnd;
          } else if (matchingIndexEnd < booleanFilter.length - 4 && booleanFilter.slice(matchingIndexEnd, matchingIndexEnd + 4) === " or ") {
            start2 = matchingIndex;
            end2 = matchingIndexEnd + 4;
          } else if (matchingIndex > 5 && booleanFilter.slice(matchingIndex - 5, matchingIndex) === " and ") {
            start2 = matchingIndex - 5;
            end2 = matchingIndexEnd;
          } else if (matchingIndexEnd < booleanFilter.length - 5 && booleanFilter.slice(matchingIndexEnd, matchingIndexEnd + 5) === " and ") {
            start2 = matchingIndex;
            end2 = matchingIndexEnd + 5;
          } else {
            start2 = matchingIndex;
            end2 = matchingIndexEnd;
          }
          return { start: start2, end: end2 };
        }
      };
      const DeferredPromise = function() {
        this._promise = new Promise((resolve2, reject) => {
          this.resolve = resolve2;
          this.reject = reject;
        });
        this.then = this._promise.then.bind(this._promise);
        this.catch = this._promise.catch.bind(this._promise);
        this.finally = this._promise.finally.bind(this._promise);
        this[Symbol.toStringTag] = "Promise";
      };
      const Plan = {
        defaults: () => ({
          sobjectType: "sfsp__SalesPlan__c",
          Name: "",
          sfsp__SalesMetrics__r: [],
          sfsp__SalesAssignmentObjects__r: [],
          sfsp__SalesNodeMetrics__r: [],
          sfsp__ListViews__r: [],
          sfsp__SalesNodeBoundaries__r: [],
          sfsp__SalesPlanUsers__r: [],
          sfsp__SalesUserAccess__r: []
        })
      };
      const AssignmentObject = {
        getIcon(objName) {
          const icons = {
            Account: { category: "standard", name: "account", color: "#5867E8" },
            Lead: { category: "standard", name: "lead", color: "#FF5D2D" },
            Contact: { category: "standard", name: "contact", color: "#a094ed" },
            Opportunity: { category: "standard", name: "opportunity", color: "#fcb95b" },
            User: { category: "standard", name: "customers", color: "#06A59A" }
          };
          return icons[objName] || { category: "standard", name: "entity", color: "#f88962" };
        },
        getReferenceMetadata({ assignmentObject }) {
          return [
            ...assignmentObject.recordsDataset.dimensions.map((d) => ({ id: d.id, title: `Unique ${d.title}`, type: "unique" })),
            ...assignmentObject.recordsDataset.measures.reduce((arr, m) => [
              { id: m.id, title: `Sum of ${m.title}`, type: "sum" },
              { id: m.id, title: `Min ${m.title}`, type: "min" },
              { id: m.id, title: `Max ${m.title}`, type: "max" }
            ].concat(arr), [])
          ];
        },
        getFieldOptions({ assignmentObject, mode = "Record" }) {
          const aggregateIdPrefix = mode === "Record" ? "" : "sum__";
          const aggregateLabelPrefix = mode === "Record" ? "" : "Sum of ";
          const fields = assignmentObject.referenceFields.filter((f) => f.type === "Numeric" || mode === "Record").map(({ id, label, type, isNameField }) => ({
            id: `${aggregateIdPrefix}${assignmentObject.id}__${id}`,
            label: `${aggregateLabelPrefix}${label}`,
            type,
            isNameField
          }));
          if (mode === "Record") {
            SPM.$store.boundaryObjects.forEach((boundaryObject) => {
              var _a2, _b;
              if ((_b = (_a2 = assignmentObject.recordsDataset) == null ? void 0 : _a2.dimensions) == null ? void 0 : _b.find((f) => f.id === boundaryObject.name)) {
                fields.push({ id: `${assignmentObject.id}__${boundaryObject.name}`, label: boundaryObject.label, type: "Text" });
              }
            });
          }
          fields.sort((a, b) => {
            if (a.label > b.label)
              return 1;
            if (a.label < b.label)
              return -1;
            return 0;
          });
          if (fields.find((f) => f.isNameField)) {
            fields.unshift(fields.splice(fields.findIndex((f) => f.isNameField), 1)[0]);
            if (mode === "Record") {
              fields.splice(
                1,
                0,
                { id: "AssignedTo", label: "Assigned To", type: "Assignment" },
                { id: "AssignmentType", label: "Assignment Type", type: "Assignment" }
              );
            }
          } else if (mode === "Record") {
            fields.push(
              { id: "AssignedTo", label: "Assigned To", type: "Assignment" },
              { id: "AssignmentType", label: "Assignment Type", type: "Assignment" }
            );
          }
          return fields;
        },
        getDefaultColumns({ assignmentObject, mode = "Record" }) {
          const fields = AssignmentObject.getFieldOptions({ assignmentObject, mode });
          if (fields.find((f) => f.isNameField)) {
            return fields.filter((f) => f.id !== `${assignmentObject.id}__Id`).map(({ id, type, isNameField }) => ({
              id,
              summaryFormat: type === "Numeric" ? "Sum" : type === "Assignment" ? "Assignment" : "Unique",
              isNameField
            }));
          }
          return fields.map(({ id, type }) => ({
            id,
            summaryFormat: type === "Numeric" ? "Sum" : type === "Assignment" ? "Assignment" : "Unique"
          }));
        },
        async getDatasetInfo({ alias }) {
          let response = {};
          let dataset = [];
          let metadata = {};
          if (!SPM.hasDataPipelinesAccess) {
            ({ datasets: response, metadata } = await SPM.Utils.Apex.invoke("GetDatasets", [alias]));
            if (!(response == null ? void 0 : response.length))
              return false;
            dataset = response[0];
          } else {
            response = await SPM.Utils.Rest.invoke("GetDatasets", { alias });
            if (!(response == null ? void 0 : response.length))
              return false;
            dataset = response[0];
            metadata = await SPM.Utils.Rest.invoke("GetDatasetMetadata", { url: dataset.currentVersionUrl });
          }
          return { dataset, metadata };
        },
        async loadDatasets({ assignmentObjectId, planId }) {
          const { dataset: recordsDataset, metadata: recordsMetadata } = await SPM.Utils.AssignmentObject.getDatasetInfo({ alias: `${planId}_${assignmentObjectId}_Records` });
          if (!recordsDataset || !recordsMetadata)
            return false;
          const { dataset: assignmentsDataset, metadata: assignmentsMetadata } = await SPM.Utils.AssignmentObject.getDatasetInfo({ alias: `${planId}_${assignmentObjectId}_Assignments` });
          if (!assignmentsDataset || !assignmentsDataset)
            return false;
          Object.assign(recordsDataset, {
            measures: recordsMetadata.measures.map((m) => ({
              type: "measure",
              id: m.field,
              title: m.label
            })),
            measuresMetadata: recordsMetadata.measures,
            dimensions: recordsMetadata.dimensions.map((d) => ({
              type: "dimension",
              id: d.field,
              title: d.label
            }))
          });
          Object.assign(assignmentsDataset, {
            measures: assignmentsMetadata.measures.map((m) => ({
              type: "measure",
              id: m.field,
              title: m.label
            })),
            measuresMetadata: assignmentsMetadata.measures,
            dimensions: assignmentsMetadata.dimensions.map((d) => ({
              type: "dimension",
              id: d.field,
              title: d.label
            }))
          });
          return { recordsDataset, assignmentsDataset };
        },
        async reassign({ objectId, reassignments }) {
          const recordAssignmentsMap = SPM.Utils.Node.getDescendants({ nodes: [SPM.$store.rootNode] }).reduce((map2, node) => {
            if (node !== SPM.$store.rootNode) {
              node.assignments.forEach((a) => {
                if (a.sfsp__SalesAssignmentObject__c === objectId) {
                  map2[a.sfsp__RecordId__c] = map2[a.sfsp__RecordId__c] || [];
                  map2[a.sfsp__RecordId__c].push(a);
                }
              });
            }
            return map2;
          }, {});
          const assignmentsToDelete = [];
          const assignmentsToInsert = [];
          const impactedNodeIds = /* @__PURE__ */ new Set();
          reassignments.forEach(({ recordId, targetId }) => {
            const existingAssignments = recordAssignmentsMap[recordId];
            existingAssignments == null ? void 0 : existingAssignments.forEach((a) => {
              assignmentsToDelete.push(a);
              impactedNodeIds.add(a.sfsp__SalesNode__c);
            });
            let currentNode = SPM.$store.nodeMap[targetId];
            while (currentNode !== SPM.$store.rootNode) {
              impactedNodeIds.add(currentNode.id);
              assignmentsToInsert.push({
                sobjectType: "sfsp__SalesNodeAssignment__c",
                sfsp__SalesAssignmentObject__c: objectId,
                sfsp__RecordId__c: recordId,
                sfsp__AssignmentType__c: "Manual",
                sfsp__SalesNode__c: currentNode.id,
                sfsp__Status__c: "Active"
              });
              currentNode = SPM.$store.nodeMap[currentNode.parentId];
            }
          });
          await Promise.all([
            SPM.Utils.CRM.delete({ records: assignmentsToDelete }),
            SPM.Utils.CRM.upsert({ records: assignmentsToInsert })
          ]);
          impactedNodeIds.forEach((nodeId2) => {
            SPM.$store.nodeMap[nodeId2].assignments = SPM.$store.nodeMap[nodeId2].assignments.filter((a) => !assignmentsToDelete.includes(a));
            SPM.$store.nodeMap[nodeId2].assignments.push(...assignmentsToInsert.filter((a) => a.sfsp__SalesNode__c === nodeId2));
          });
        },
        async reassignBoundaries({ objectId, reassignments, isPreview, onProgress = () => {
        } }) {
          const boundaryObject = SPM.$store.boundaryObjects.find((o) => o.id === objectId);
          const rulesToDelete = [];
          const rulesToUpsert = [];
          SPM.$store.allNodes.forEach((node) => {
            if (node.id === "All Org")
              return;
            const nodeBoundaryMap = SPM.Utils.Node.getBoundaries({ node, boundaryObject, format: "map" });
            const considerSiblings = SPM.$store.rootNode.assignmentBehavior === "Exclusive";
            let isAffected = false;
            reassignments.forEach(({ boundary, targetId }) => {
              const targetNode = SPM.$store.nodeMap[targetId];
              const shouldHaveBoundary = node.id === targetNode.id || SPM.Utils.Node.isAncestor({ node: targetNode, ancestor: node, nodeMap: SPM.$store.nodeMap });
              if (shouldHaveBoundary && !nodeBoundaryMap[boundary]) {
                nodeBoundaryMap[boundary] = true;
                isAffected = true;
              } else if (considerSiblings && !shouldHaveBoundary && nodeBoundaryMap[boundary]) {
                delete nodeBoundaryMap[boundary];
                isAffected = true;
              }
            });
            if (isAffected) {
              if (isPreview) {
                const previewRules = [...(node.previewRules || node.rules).filter((r) => r.sfsp__SalesNodeBoundary__c !== objectId)];
                rulesToDelete.push(...(node.previewRules || node.rules).filter((r) => r.sfsp__SalesNodeBoundary__c === objectId));
                if (Object.keys(nodeBoundaryMap).length) {
                  const newBoundaryRule = SPM.Utils.Rule.fromBoundaries({
                    boundaries: Object.keys(nodeBoundaryMap),
                    boundaryObject
                  });
                  previewRules.push(newBoundaryRule);
                }
                node.previewRules = previewRules;
              } else {
                rulesToDelete.push(...node.rules.filter((r) => r.sfsp__SalesNodeBoundary__c === objectId));
                node.rules = node.rules.filter((r) => r.sfsp__SalesNodeBoundary__c !== objectId);
                if (Object.keys(nodeBoundaryMap).length) {
                  const newBoundaryRule = {
                    ...SPM.Utils.Rule.fromBoundaries({
                      boundaries: Object.keys(nodeBoundaryMap),
                      boundaryObject
                    }),
                    sfsp__SalesNode__c: node.id
                  };
                  node.rules.push(newBoundaryRule);
                  rulesToUpsert.push(newBoundaryRule);
                }
              }
            }
          });
          if (isPreview)
            return;
          await SPM.Utils.CRM.upsert({
            records: rulesToUpsert,
            onProgress: (percent) => onProgress(`Saving Rules...${percent}%`)
          });
          const ruleItemsToUpsert = [];
          rulesToUpsert.forEach((rule) => {
            rule.sfsp__SalesNodeRuleItems__r.forEach((item) => {
              item.sfsp__SalesNodeRule__c = rule.Id;
              ruleItemsToUpsert.push(item);
            });
          });
          await SPM.Utils.CRM.upsert({
            records: ruleItemsToUpsert,
            onProgress: (percent) => onProgress(`Saving Rule Items...${percent}%`)
          });
          await SPM.Utils.CRM.delete({
            records: rulesToDelete,
            onProgress: (percent) => onProgress(`Cleaning Up...${percent}%`)
          });
        },
        async getSalesAsyncJobs({ objectId, statuses = [] }) {
          const objectFilter = objectId ? ` AND sfsp__SalesAssignmentObject__c = '${objectId}'` : "";
          const statusFilter = statuses.length > 0 ? ` AND sfsp__Status__c IN ('${statuses.join("','")}')` : "";
          return await SPM.Utils.Apex.invoke("Query", [`
                SELECT
                    Name,
                    CreatedDate,
                    sfsp__Details__c,
                    sfsp__Status__c,
                    sfsp__Type__c,
                    sfsp__Splunk__c,
                    sfsp__SalesAssignmentObject__c,
                    sfsp__SalesAssignmentObject__r.Name,
                    sfsp__SalesAssignmentObject__r.sfsp__Label__c,
                    sfsp__SalesAssignmentObject__r.sfsp__SalesPlan__c
                FROM sfsp__SalesAsyncJob__c
                WHERE sfsp__SalesAssignmentObject__r.sfsp__SalesPlan__c = '${SPM.$store.plan.Id}'${objectFilter}${statusFilter}
                ORDER BY CreatedDate DESC
            `]) || [];
        },
        async updateReferenceFields({ assignmentObject }) {
          const referenceFields = JSON.parse((SPM.$store.plan.sfsp__SalesAssignmentObjects__r.find((obj) => obj.Id === assignmentObject.id) || {}).sfsp__ReferenceFields__c);
          referenceFields.forEach((field) => field.lastModifiedDate = Date.now());
          const [updatedAssignmentObject] = await SPM.Utils.Apex.invoke("UpdateSObjects", [
            [{
              Id: assignmentObject.id,
              Name: assignmentObject.name,
              sfsp__Label__c: assignmentObject.label,
              sfsp__ReferenceFields__c: JSON.stringify(referenceFields)
            }],
            true
          ]);
          SPM.$store.$patch((state) => {
            const assignmentObjectIndex = state.plan.sfsp__SalesAssignmentObjects__r.findIndex((a) => a.Id === assignmentObject.id);
            state.plan.sfsp__SalesAssignmentObjects__r.splice(assignmentObjectIndex, 1, updatedAssignmentObject);
            state.hasChanged = true;
          });
        }
      };
      const BoundaryObject = {
        Defaults: {
          type: "boundary",
          icon: "location",
          styles: {
            visible: true,
            opacity: 0.3
          }
        },
        getFieldOptions({ boundaryObject }) {
          const fields = [
            { id: "Name", label: boundaryObject.label, type: "Text" },
            { id: "AssignedTo", label: "Assigned To", type: "Text" }
          ];
          const objectsWithGeoField = SPM.$store.assignmentObjects.filter((o) => {
            var _a2, _b;
            return (_b = (_a2 = o.recordsDataset) == null ? void 0 : _a2.dimensions) == null ? void 0 : _b.find((f) => f.id === boundaryObject.name);
          });
          objectsWithGeoField.forEach((assignmentObject) => {
            fields.push(
              { id: `unique__${assignmentObject.id}__Id`, label: assignmentObject.label, type: "Numeric" },
              ...assignmentObject.referenceFields.filter((f) => f.type === "Numeric").map(({ id, label, type }) => ({
                id: `sum__${assignmentObject.id}__${id}`,
                label,
                type
              }))
            );
          });
          Object.entries(boundaryObject.metadata).forEach(([key, { label, type, visible }]) => {
            if (visible)
              fields.push({ id: `BoundaryMetadata:${key}`, label, type: type === "float" ? "Numeric" : "Text" });
          });
          return fields.sort((a, b) => {
            if (a.label > b.label)
              return 1;
            if (a.label < b.label)
              return -1;
            return 0;
          });
        },
        getDefaultColumns({ boundaryObject }) {
          const defaultColumns = [
            { id: "Name", summaryFormat: "Unique" },
            { id: "AssignedTo", summaryFormat: "Unique" }
          ];
          const objectsWithGeoField = SPM.$store.assignmentObjects.filter((o) => {
            var _a2, _b;
            return (_b = (_a2 = o.recordsDataset) == null ? void 0 : _a2.dimensions) == null ? void 0 : _b.find((f) => f.id === boundaryObject.name);
          });
          objectsWithGeoField.forEach((assignmentObject) => {
            defaultColumns.push({ id: `unique__${assignmentObject.id}__Id`, summaryFormat: "Sum" });
          });
          return defaultColumns;
        }
      };
      const Node2 = {
        defaults: () => ({
          sobjectType: "sfsp__SalesNode__c",
          Name: "",
          sfsp__SalesNodes__r: [],
          sfsp__SalesNodeRules__r: [],
          sfsp__RuleLogics__c: "{}"
        }),
        buildRows({ parentRow, childNodes, lazy, includeBoundaries = true }) {
          const childRows = [];
          childNodes.forEach((node) => {
            const row = {
              id: node.id,
              name: node.name,
              data: [
                { id: "Name", format: "Name", type: "custom", node },
                ...SPM.$store.assignmentObjects.filter((obj) => obj.recordsDataset.dimensions).map((assignment) => ({
                  id: assignment.id,
                  format: "Assignment",
                  type: "custom",
                  state: "loading",
                  value: 0,
                  columnName: assignment.name
                })),
                ...((includeBoundaries ? SPM.$store.boundaryObjects : []) || []).map((boundary) => ({
                  id: boundary.id,
                  format: "Boundary",
                  type: "custom",
                  state: "loading",
                  value: 0
                })),
                ...node.metrics.map((metric) => {
                  const salesMetric = SPM.$store.plan.sfsp__SalesMetrics__r.find((m) => m.Id === metric.sfsp__SalesMetric__c);
                  const monthKeys = [...Object.keys(metric)].filter((name) => name.startsWith("sfsp__Target_Month"));
                  const metricDetails = {
                    id: metric.Id,
                    format: "Allocation",
                    type: "custom",
                    dataType: salesMetric.sfsp__Type__c,
                    value: monthKeys.reduce((agg, field) => agg + metric[field], 0),
                    columnName: salesMetric.Name
                  };
                  metricDetails.overrideAmount = salesMetric.sfsp__TargetOverrideEnabled__c ? metric.sfsp__TargetOverrideType__c === "Percentage" ? metric.sfsp__TargetOverrideAmount__c / 100 * metricDetails.value : metric.sfsp__TargetOverrideAmount__c : 0;
                  return metricDetails;
                })
              ],
              parent: parentRow,
              children: [],
              childCount: 0,
              expanded: !lazy,
              loaded: !lazy
            };
            if (SPM.$store.hasSalesPlanningTemplateApp && SPM.$store.isEditor)
              row.data.splice(1, 0, { id: "SharedWith", format: "Shared with", type: "custom", node });
            childRows.push(row);
            parentRow.children.push(row);
          });
          parentRow.loaded = true;
          parentRow.expanded = true;
          return childRows;
        },
        async importHierarchy({ hierarchy, includeBoundaries = true }) {
          const rowMap = {};
          const traverse2 = (rows) => {
            rows.forEach((r) => {
              rowMap[r.id] = r;
              traverse2(r.children);
            });
          };
          traverse2(SPM.Components.Hierarchy.rows);
          let hierarchyNodes = [hierarchy];
          while (hierarchyNodes.length) {
            const parentIds = hierarchyNodes.map((n) => n.id);
            hierarchyNodes = hierarchyNodes.reduce((arr, hierarchyNode) => arr.concat(
              hierarchyNode.children.map((hierarchyChild) => Object.assign(hierarchyChild, {
                parentNode: SPM.$store.nodeMap[hierarchyNode.id] || { id: hierarchyNode.id, childCount: 0 }
              }))
            ), []);
            const nodesToInsert = hierarchyNodes.map((hierarchyNode, i2) => ({
              sobjectType: "sfsp__SalesNode__c",
              Name: hierarchyNode.name,
              sfsp__SalesPlan__c: SPM.$store.plan.Id,
              sfsp__Parent__c: hierarchyNode.parentNode.id.replace("All Org", ""),
              sfsp__Priority__c: hierarchyNode.parentNode.childCount + i2 + 1,
              sfsp__Color__c: SPM.Utils.Node.randomColor(),
              sfsp__AssignmentBehavior__c: "Exclusive"
            }));
            await SPM.Utils.CRM.upsert({ records: nodesToInsert });
            nodesToInsert.forEach((node, i2) => {
              hierarchyNodes[i2].id = node.Id;
              const parentId = node.sfsp__Parent__c || "All Org";
              const parentNode = SPM.$store.nodeMap[parentId];
              if (!(parentNode == null ? void 0 : parentNode.children))
                return;
              const newNode = {
                id: node.Id,
                name: node.Name,
                color: node.sfsp__Color__c,
                assignmentBehavior: node.sfsp__AssignmentBehavior__c || "Exclusive",
                ownerId: "",
                ownerName: "",
                level: parentNode.level + 1,
                parentId,
                childCount: 0,
                children: [],
                metrics: SPM.$store.plan.sfsp__SalesMetrics__r.map((metric) => ({
                  ...SPM.Utils.NodeMetric.Defaults,
                  sfsp__SalesPlan__c: SPM.$store.plan.Id,
                  sfsp__SalesMetric__c: metric.Id,
                  sfsp__SalesNode__c: node.Id
                })),
                users: [],
                accessRecords: [],
                rules: [],
                ruleLogics: {},
                previewRuleLogics: {},
                assignments: [],
                boundaries: [],
                referenceData: []
              };
              SPM.$store.nodeMap[newNode.id] = newNode;
              parentNode.children.push(newNode);
              rowMap[newNode.id] = this.buildRows({ parentRow: rowMap[parentNode.id], childNodes: [newNode], includeBoundaries })[0];
            });
            parentIds.forEach((parentId) => {
              const parentNode = SPM.$store.nodeMap[parentId];
              if (!(parentNode == null ? void 0 : parentNode.children))
                return;
              parentNode.childCount = parentNode.children.length;
              parentNode.children.forEach((childNode) => {
                childNode.siblingIds = parentNode.children.filter((n) => n.id !== childNode.id).map((n) => n.id);
                childNode.olderSiblingIds = parentNode.children.slice(0, parentNode.children.indexOf(childNode)).map((n) => n.id);
              });
            });
            SPM.$store.branch.descendantIds.push(...nodesToInsert.map((node) => node.Id));
          }
          this.calculateValues(SPM.Components.Hierarchy.rows);
        },
        getBoundaryValue({ cell, nodeId: nodeId2, boundaryObjectId }) {
          const count = SPM.Utils.Node.getBoundaries({ node: SPM.$store.nodeMap[nodeId2], boundaryObject: SPM.$store.boundaryObjects.find((o) => o.id === boundaryObjectId) }).length;
          cell.state = "loaded";
          cell.value = count;
        },
        async getAssignmentValues({ nodeId: nodeId2, assignmentObjectId, referenceFields = [] }) {
          var _a2;
          const assignmentObject = SPM.$store.assignmentObjects.find((o) => o.id === assignmentObjectId);
          if (!((_a2 = assignmentObject == null ? void 0 : assignmentObject.recordsDataset) == null ? void 0 : _a2.dimensions))
            return;
          const saql = SPM.Utils.Node.generateSaql({
            node: SPM.$store.nodeMap[nodeId2],
            assignmentObject,
            referenceFields,
            boundaryObjects: SPM.$store.boundaryObjects,
            nodeMap: SPM.$store.nodeMap,
            recordsDataset: assignmentObject.recordsDataset,
            assignmentsDataset: assignmentObject.assignmentsDataset,
            type: "cogroup"
          });
          const { results } = await SPM.Utils.Rest.invoke("RunSaql", { query: saql.replace(/^ */gm, "") });
          return ((results == null ? void 0 : results.records) || []).reduce((map2, rec) => {
            map2[rec.nodeId] = {};
            Object.entries(rec).forEach(([key, value]) => {
              if (key !== "nodeId")
                map2[rec.nodeId][key] = value;
            }, {});
            return map2;
          }, {});
        },
        calculateValues(rows) {
          const boundaryCalculations = [];
          const parentToObjectMap = {};
          const findValues = (parents) => {
            parents.forEach((row) => {
              var _a2;
              const parentId = ((_a2 = row.parent) == null ? void 0 : _a2.id) || "All Org";
              parentToObjectMap[parentId] = parentToObjectMap[parentId] || {};
              row.data.forEach((col) => {
                if (col.format === "Assignment" && col.state === "loading") {
                  parentToObjectMap[parentId][col.id] = parentToObjectMap[parentId][col.id] || {};
                  parentToObjectMap[parentId][col.id][row.id] = col;
                } else if (col.format === "Boundary" && col.state === "loading") {
                  boundaryCalculations.push({ cell: col, nodeId: row.id, boundaryObjectId: col.id });
                }
              });
              findValues(row.children);
            });
          };
          findValues(rows);
          SPM.Utils.Async.forEachParallel(boundaryCalculations, (boundaryToCalculate) => this.getBoundaryValue(boundaryToCalculate), 5);
          SPM.Utils.Async.forEach(Object.values(parentToObjectMap), async (assignmentObjectToCellMap) => {
            await SPM.Utils.Async.forEachParallel(Object.entries(assignmentObjectToCellMap), async ([assignmentObjectId, cellMap]) => {
              const nodeIds = Object.keys(cellMap);
              const lastSiblingId = nodeIds[nodeIds.length - 1];
              const assignmentValues = await this.getAssignmentValues({ nodeId: lastSiblingId, assignmentObjectId });
              nodeIds.forEach((nodeId2) => {
                var _a2;
                const value = ((_a2 = assignmentValues[nodeId2]) == null ? void 0 : _a2.count) || 0;
                cellMap[nodeId2].value = value;
                cellMap[nodeId2].state = "loaded";
              });
            }, 5);
          });
        },
        async getMaxLevel({ planId, nodeIds, currentLevel }) {
          if (nodeIds.includes(""))
            throw new Error("Blank node id is not supported");
          const fifthLevelChildNodes = await SPM.Utils.Apex.invoke("Query", [`SELECT Id FROM sfsp__SalesNode__c WHERE sfsp__SalesPlan__c = '${planId}' AND sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.Id IN ('${nodeIds.join("','")}')`]);
          if (fifthLevelChildNodes.length) {
            return Node2.getMaxLevel({ planId, nodeIds: fifthLevelChildNodes.map((n) => n.Id), currentLevel: currentLevel + 5 });
          }
          for (let i2 = 4; i2 > 0; i2--) {
            const ancestorPath = Array(i2).fill().map((item) => "sfsp__Parent__r").join(".");
            const nodes = await Apex.invoke("Query", [`SELECT Id FROM sfsp__SalesNode__c WHERE sfsp__SalesPlan__c = '${planId}' AND ${ancestorPath}.Id IN ('${nodeIds.join("','")}') LIMIT 1`]);
            if (nodes.length) {
              return currentLevel + i2;
            }
          }
          return currentLevel;
        },
        async getNodeLevel({ nodeId: nodeId2 }) {
          var _a2, _b, _c, _d, _e;
          let level = 1;
          while (nodeId2) {
            const node = (await Apex.invoke("Query", [`
                    SELECT Id,
                        sfsp__Parent__r.Id,
                        sfsp__Parent__r.sfsp__Parent__r.Id,
                        sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.Id,
                        sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.Id,
                        sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.Id
                    FROM sfsp__SalesNode__c WHERE Id = '${nodeId2}'
                `]))[0];
            let parentNode = node;
            while (parentNode = (_a2 = parentNode == null ? void 0 : parentNode.sfsp__Parent__r) == null ? void 0 : _a2.Id)
              level++;
            nodeId2 = (_e = (_d = (_c = (_b = node == null ? void 0 : node.sfsp__Parent__r) == null ? void 0 : _b.sfsp__Parent__r) == null ? void 0 : _c.sfsp__Parent__r) == null ? void 0 : _d.sfsp__Parent__r) == null ? void 0 : _e.sfsp__Parent__r.Id;
          }
          return level;
        },
        async getDescendantIds({ planId, nodeIds }) {
          if (!nodeIds || nodeIds.length === 0)
            return [];
          const descendantIds = (await Apex.invoke("Query", [`
                SELECT Id, sfsp__SalesPlan__c, sfsp__Parent__r.Id FROM sfsp__SalesNode__c WHERE sfsp__Parent__r.Id IN ('${nodeIds.join("','")}') AND sfsp__SalesPlan__c = '${planId}'
            `])).map((node) => node.Id);
          return [
            ...descendantIds,
            ...await Node2.getDescendantIds({ planId, nodeIds: descendantIds })
          ];
        },
        async getAncestorIds({ nodeId: nodeId2 }) {
          if (!nodeId2 || nodeId2 === "All Org")
            return [];
          let node = (await Apex.invoke("Query", [`
                SELECT Id,
                    sfsp__Parent__r.Id,
                    sfsp__Parent__r.sfsp__Parent__r.Id,
                    sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.Id,
                    sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.Id,
                    sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.sfsp__Parent__r.Id
                FROM sfsp__SalesNode__c WHERE Id = '${nodeId2}'
            `]))[0];
          const ancestorIds = [];
          while (node = node.sfsp__Parent__r)
            ancestorIds.push(node.Id);
          return [
            ...ancestorIds,
            ...await Node2.getAncestorIds({ nodeId: ancestorIds[4] }),
            "All Org"
          ];
        },
        async loadScope({ planId, metrics = [], nodeMap = {}, loadRuleItems = false, loadAssignments = false, rootNodeId, parentNodeIds = [] }) {
          if (rootNodeId && nodeMap[rootNodeId]) {
            parentNodeIds.push(rootNodeId);
            rootNodeId = null;
          }
          parentNodeIds = [...new Set(parentNodeIds)].filter((id) => {
            var _a2;
            return !((_a2 = nodeMap[id || "All Org"]) == null ? void 0 : _a2.children);
          });
          const parentNodeBatches = rootNodeId ? [[]] : [];
          let parentNodeIndex = 0;
          while (parentNodeIndex < parentNodeIds.length) {
            parentNodeBatches.push(parentNodeIds.slice(parentNodeIndex, parentNodeIndex + 1e3));
            parentNodeIndex += 1e3;
          }
          const nodes = [];
          await Async.forEachParallel(parentNodeBatches, async (batchIds) => {
            const parentClause = rootNodeId ? `(Id = '${rootNodeId}' OR sfsp__Parent__c = '${rootNodeId}')` : `sfsp__Parent__c IN ('${batchIds.join("','")}')`;
            const batchNodes = await Apex.invoke(
              "Query",
              [`
                        SELECT
                            Id,
                            Name,
                            sfsp__Parent__c,
                            sfsp__Color__c,
                            sfsp__Owner__c,
                            sfsp__Owner__r.Name,
                            sfsp__AssignmentBehavior__c,
                            sfsp__RuleLogics__c,
                            sfsp__HierarchyReferenceData__c,
                            (
                                SELECT
                                    Id,
                                    sfsp__TargetOverrideAmount__c,
                                    sfsp__TargetOverrideType__c,
                                    ${Array(12).fill().map((v, i2) => `sfsp__Target_Month${i2 + 1}__c`).join(", ")},
                                    sfsp__SalesMetric__c
                                FROM sfsp__SalesNodeMetrics__r
                            ),
                            (
                                SELECT Id, Name, sfsp__SalesNode__c, sfsp__FilterLogic__c, sfsp__BooleanFilter__c, sfsp__SalesAssignmentObject__c, sfsp__SalesNodeBoundary__c
                                FROM sfsp__SalesNodeRules__r
                            ),
                            (
                                SELECT Id, Name, sfsp__SalesNode__c, sfsp__ContainerSet__c, sfsp__Filter__c, sfsp__IncludePoints__c, sfsp__SalesBoundary__c, sfsp__SalesBoundary__r.Name, sfsp__SalesBoundary__r.sfsp__ContainerSet__c, sfsp__SalesBoundary__r.sfsp__IncludePoints__c, sfsp__SalesBoundary__r.sfsp__SalesPlan__c
                                FROM sfsp__SalesNodeBoundaries__r
                            ),
                            (
                                SELECT Id, sfsp__SalesNode__c, sfsp__User__c, sfsp__User__r.Name, sfsp__Role__c
                                FROM sfsp__SalesNodeUsers__r
                            ),
                            (
                                SELECT Id
                                FROM sfsp__SalesNodes__r
                            ),
                            (
                                SELECT Id, sfsp__User__r.Name, sfsp__AccessLevel__c, sfsp__SalesNode__r.Name FROM sfsp__SalesUserAccess__r 
                            )
                        FROM sfsp__SalesNode__c
                        WHERE sfsp__SalesPlan__c = '${planId}' AND ${parentClause}
                        ORDER BY sfsp__Priority__c ASC
                    `]
            );
            nodes.push(...batchNodes);
            if (loadRuleItems) {
              const batchRuleMap = batchNodes.reduce((map2, node) => {
                (node.sfsp__SalesNodeRules__r || []).forEach((rule) => {
                  rule.sfsp__SalesNodeRuleItems__r = [];
                  map2[rule.Id] = rule;
                });
                return map2;
              }, {});
              const batchRuleItems = Object.keys(batchRuleMap).length === 0 ? [] : await Apex.invoke(
                "Query",
                [`
                            SELECT Id, sfsp__SalesNodeRule__c, sfsp__Field__c, sfsp__Operator__c, sfsp__Value__c
                            FROM sfsp__SalesNodeRuleItem__c
                            WHERE sfsp__SalesNodeRule__c IN ('${Object.keys(batchRuleMap).join("','")}')
                        `]
              );
              batchRuleItems.forEach((item) => batchRuleMap[item.sfsp__SalesNodeRule__c].sfsp__SalesNodeRuleItems__r.push(item));
            }
            if (loadAssignments) {
              const batchNodeMap = batchNodes.reduce((map2, node) => {
                node.assignments = [];
                map2[node.Id] = node;
                return map2;
              }, {});
              const batchAssignments = Object.keys(batchNodeMap).length === 0 ? [] : await SPM.Utils.Rest.invoke(
                "Query",
                { query: `
                            SELECT sfsp__SalesNode__c, sfsp__SalesAssignmentObject__c, sfsp__AssignmentType__c, sfsp__RecordId__c, sfsp__Status__c
                            FROM sfsp__SalesNodeAssignment__c
                            WHERE sfsp__SalesNode__c IN ('${Object.keys(batchNodeMap).join("','")}') AND sfsp__Status__c != 'Deleted'
                        ` }
              );
              batchAssignments.forEach((assignment) => batchNodeMap[assignment.sfsp__SalesNode__c].assignments.push(assignment));
            }
          }, 5);
          let rootNodeLevel;
          if (rootNodeId) {
            rootNodeLevel = await Node2.getNodeLevel({ nodeId: rootNodeId });
            nodeMap[rootNodeId] = {
              level: rootNodeLevel,
              siblingIds: [],
              olderSiblingIds: [],
              users: [],
              rules: [],
              ruleLogics: {},
              previewRuleLogics: {},
              assignments: [],
              boundaries: [],
              referenceData: []
            };
          }
          nodes.forEach((node) => {
            var _a2, _b, _c;
            const nodeMetrics = node.sfsp__SalesNodeMetrics__r || [];
            const childNode = {
              ...nodeMap[node.Id],
              id: node.Id,
              name: node.Name,
              color: node.sfsp__Color__c,
              assignmentBehavior: node.sfsp__AssignmentBehavior__c || "Exclusive",
              ownerId: node.sfsp__Owner__c || "",
              ownerName: ((_a2 = node == null ? void 0 : node.sfsp__Owner__r) == null ? void 0 : _a2.Name) || "",
              level: node.Id === rootNodeId ? rootNodeLevel : nodeMap[node.sfsp__Parent__c || "All Org"].level + 1,
              parentId: node.sfsp__Parent__c || "All Org",
              childCount: ((_b = node == null ? void 0 : node.sfsp__SalesNodes__r) == null ? void 0 : _b.length) || 0,
              metrics: metrics.map((metric) => {
                const nodeMetric = nodeMetrics.find((m) => m.sfsp__SalesMetric__c === metric.Id);
                return {
                  ...NodeMetric.Defaults,
                  sfsp__SalesNode__c: node.Id,
                  sfsp__SalesMetric__c: metric.Id,
                  ...nodeMetric || {}
                };
              }),
              users: node.sfsp__SalesNodeUsers__r || [],
              accessRecords: ((_c = node.sfsp__SalesUserAccess__r) == null ? void 0 : _c.map(({ sfsp__User__r, sfsp__User__c, sfsp__SalesNode__c }) => ({ name: sfsp__User__r.Name, userId: sfsp__User__c, nodeId: sfsp__SalesNode__c }))) || [],
              rules: node.sfsp__SalesNodeRules__r || [],
              ruleLogics: JSON.parse(node.sfsp__RuleLogics__c || "{}"),
              previewRuleLogics: {},
              assignments: node.assignments || [],
              boundaries: node.sfsp__SalesNodeBoundaries__r || [],
              referenceData: JSON.parse((node == null ? void 0 : node.sfsp__HierarchyReferenceData__c) || "[]")
            };
            nodeMap[node.Id] = childNode;
            const parentNode = nodeMap[node.sfsp__Parent__c || "All Org"];
            if (parentNode) {
              parentNode.children = parentNode.children || [];
              const childIndex = parentNode.children.findIndex((c) => c.id === childNode.id);
              if (childIndex === -1) {
                parentNode.children.push(childNode);
              } else {
                parentNode.children.splice(childIndex, 1, childNode);
              }
            }
          });
          const parentIdsToInit = rootNodeId ? [rootNodeId, ...parentNodeIds] : parentNodeIds;
          parentIdsToInit.forEach((parentId) => {
            const parentNode = nodeMap[parentId || "All Org"];
            parentNode.children = parentNode.children || [];
            parentNode.childCount = parentNode.children.length;
            parentNode.rules = parentNode.rules || [];
            parentNode.boundaries = parentNode.boundaries || [];
            parentNode.children.forEach((childNode) => {
              childNode.siblingIds = parentNode.children.filter((n) => n.id !== childNode.id).map((n) => n.id);
              childNode.olderSiblingIds = parentNode.children.slice(0, parentNode.children.indexOf(childNode)).map((n) => n.id);
            });
          });
        },
        async loadAncestors({ planId, nodeId: nodeId2, metrics = [], nodeMap = {}, loadRuleItems = false, loadAssignments = false }) {
          var _a2;
          const ancestorIds = await Node2.getAncestorIds({ nodeId: nodeId2 });
          if (!ancestorIds.length)
            return;
          if (!nodeMap["All Org"]) {
            const allOrgMetrics = await SPM.Utils.Apex.invoke("Query", [`SELECT Id, sfsp__TargetOverrideAmount__c, sfsp__TargetOverrideType__c, ${Array(12).fill().map((v, i2) => `sfsp__Target_Month${i2 + 1}__c`).join(", ")}, sfsp__SalesMetric__c FROM sfsp__SalesNodeMetric__c WHERE sfsp__SalesPlan__c = '${planId}' AND sfsp__SalesNode__c = ''`]);
            const planNodeBoundaries = await SPM.Utils.Rest.invoke("Query", { query: `SELECT Id, Name, sfsp__SalesNode__c, sfsp__ContainerSet__c, sfsp__Filter__c, sfsp__IncludePoints__c, sfsp__SalesBoundary__c, sfsp__SalesBoundary__r.Name, sfsp__SalesBoundary__r.sfsp__ContainerSet__c, sfsp__SalesBoundary__r.sfsp__IncludePoints__c, sfsp__SalesBoundary__r.sfsp__SalesPlan__c FROM sfsp__SalesNodeBoundary__c WHERE sfsp__SalesPlan__c = '${planId}' AND sfsp__SalesNode__c = ''` });
            nodeMap["All Org"] = {
              id: "All Org",
              name: "All Org",
              color: "#2C7ED0",
              assignmentBehavior: SPM.$store.plan.sfsp__AssignmentBehavior__c || "Exclusive",
              ownerId: SPM.$store.plan.sfsp__Owner__c || "",
              ownerName: ((_a2 = SPM.$store.plan.sfsp__Owner__r) == null ? void 0 : _a2.Name) || "",
              level: 0,
              metrics: metrics.map((metric) => {
                const nodeMetric = allOrgMetrics.find((m) => m.sfsp__SalesMetric__c === metric.Id);
                return {
                  ...NodeMetric.Defaults,
                  sfsp__SalesMetric__c: metric.Id,
                  ...nodeMetric || {}
                };
              }),
              users: SPM.$store.plan.sfsp__SalesPlanUsers__r || [],
              accessRecords: SPM.$store.plan.sfsp__SalesUserAccess__r.filter((ua) => !ua.sfsp__SalesNode__c && !SPM.$store.availableAdminIds.has(ua.sfsp__User__c) && !SPM.$store.availableManagerIds.has(ua.sfsp__User__c)).map(({ sfsp__User__r, sfsp__User__c }) => ({ name: sfsp__User__r.Name, userId: sfsp__User__c, nodeId: "All Org" })) || [],
              rules: [],
              ruleLogics: {},
              previewRuleLogics: {},
              assignments: [],
              boundaries: planNodeBoundaries,
              siblingIds: [],
              olderSiblingIds: []
            };
            await Node2.loadScope({ planId, metrics, nodeMap, loadRuleItems, loadAssignments, parentNodeIds: [""] });
          }
          let currentAncestor = nodeMap["All Org"].children.find((c) => c.id === nodeId2 || ancestorIds.includes(c.id));
          while (currentAncestor.id !== nodeId2) {
            await Node2.loadScope({
              planId,
              metrics,
              nodeMap,
              loadRuleItems,
              loadAssignments,
              parentNodeIds: [currentAncestor.id]
            });
            currentAncestor = currentAncestor.children.find((c) => c.id === nodeId2 || ancestorIds.includes(c.id));
          }
        },
        getProjectionFields({ node, referenceFields }) {
          const fields = /* @__PURE__ */ new Set(["Id"]);
          referenceFields.forEach((f) => fields.add(f.name));
          const checkParent = (node2) => {
            if (node2.parentId) {
              const parentNode = SPM.$store.nodeMap[node2.parentId];
              const allRules = [...parentNode.rules, ...parentNode.previewRules || []];
              allRules.forEach((rule) => {
                (rule.sfsp__SalesNodeRuleItems__r || []).forEach((ruleItem) => {
                  fields.add(ruleItem.sfsp__Field__c);
                });
              });
              [...parentNode.olderSiblingIds].forEach((nodeId2) => {
                const levelNode = SPM.$store.nodeMap[nodeId2];
                const allRules2 = [...levelNode.rules, ...levelNode.previewRules || []];
                allRules2.forEach((rule) => {
                  (rule.sfsp__SalesNodeRuleItems__r || []).forEach((ruleItem) => {
                    fields.add(ruleItem.sfsp__Field__c);
                  });
                });
              });
              checkParent(parentNode);
            }
          };
          checkParent(node);
          [...node.olderSiblingIds, node.id].forEach((nodeId2) => {
            const levelNode = SPM.$store.nodeMap[nodeId2];
            const allRules = [...levelNode.rules, ...levelNode.previewRules || []];
            allRules.forEach((rule) => {
              (rule.sfsp__SalesNodeRuleItems__r || []).forEach((ruleItem) => {
                fields.add(ruleItem.sfsp__Field__c);
              });
            });
          });
          return fields;
        },
        generateSaql({ node, assignmentObject, boundaryObjects, projectionFields, referenceFields = [], nodeMap, recordIds, type, returnType = "count", descendantNodes = [], descendantSaql = "", prefix = "", skipLoad = false, isBurndown = false }) {
          const dimensions = [...assignmentObject.recordsDataset.dimensions].map((d) => d.id);
          const measures = [...assignmentObject.recordsDataset.measures].map((d) => d.id);
          const uniqueIdField = "Id";
          prefix = prefix ? `${prefix}_` : "";
          if (!projectionFields) {
            if (returnType === "count") {
              projectionFields = this.getProjectionFields({ node, referenceFields });
            } else {
              projectionFields = /* @__PURE__ */ new Set([...dimensions, ...measures]);
            }
          }
          const referenceProjections = referenceFields.reduce((str, field) => {
            const aggregatePrefix = field.type === "Text" ? "unique" : "sum";
            str += ` ${aggregatePrefix}('${field.name}') as ${field.name},`;
            return str;
          }, "");
          function projection(dataStream = "") {
            const streamPrefix = dataStream ? `${dataStream}.` : "";
            return [
              ...dimensions.filter((d) => projectionFields.has(d)).map((d) => `${streamPrefix}${d} as ${d}`),
              ...measures.filter((m) => projectionFields.has(m)).map((m) => `sum(${streamPrefix}${m}) as ${m}`)
            ].join(", ");
          }
          function grouping() {
            return `(${dimensions.filter((d) => projectionFields.has(d)).map((f) => f).join(", ")})`;
          }
          if (!node.parentId) {
            const filterNodes = isBurndown && node === SPM.$store.rootNode ? [node, ...descendantNodes] : descendantNodes;
            return `
                    ${skipLoad ? `` : `
                            -- load records
                            q = load "${assignmentObject.recordsDataset.id}/${assignmentObject.recordsDataset.currentVersionId}";
                        `}

                    ------------------------------------------------------------------
                    -- All Possible
                    ------------------------------------------------------------------
                    ${recordIds ? `
                            all_possible = filter q by ${uniqueIdField} in ${JSON.stringify(recordIds)};
                            all_possible = foreach all_possible generate ${projection()};
                        ` : `
                            all_possible = filter q by ${filterNodes.length ? `(${filterNodes.map((n) => this.generateRules(n, nodeMap, assignmentObject, boundaryObjects, uniqueIdField, isBurndown && n === SPM.$store.rootNode)).join(") && (")})` : `${uniqueIdField} is not null`};
                            all_possible = foreach all_possible generate ${projection()};
                        `}
                    ${descendantSaql || (returnType === "count" ? `
                            -- All Org
                            ${prefix}all_possible = group all_possible by all;
                            ${prefix}all_possible = foreach all_possible generate "All Org" as nodeId,${referenceProjections} count() as count;
                        ` : `
                            -- all records
                            ${prefix}all_possible = filter all_possible by ${uniqueIdField} != "";
                        `)}
                `.replace(/^ */gm, "");
          }
          const considerSiblings = nodeMap[node.parentId || "All Org"].assignmentBehavior === "Exclusive";
          let saql = "";
          [...node.olderSiblingIds.map((id) => nodeMap[id]), node].forEach((n, i2) => {
            const parentId = n.parentId.replace("All Org", "");
            saql += `
                    ------------------------------------------------------------------
                    -- ${n.name}${n.id !== node.id ? `(${node.name} sibling)` : ""}
                    ------------------------------------------------------------------
                `;
            saql += `
                    -- rules
                    ${n.id} = filter ${parentId || "all_possible"} by ${this.generateRules(n, nodeMap, assignmentObject, boundaryObjects, uniqueIdField, isBurndown && n === SPM.$store.rootNode)};
                `;
            if (considerSiblings) {
              if (i2 === 0) {
                saql += `
                            -- exclusions
                            exclusions = union ${n.id}, ${n.id};
                        `;
              } else {
                saql += type === "join" ? `
                                -- remove exclusions from older siblings
                                ${n.id} = join ${n.id} by ${uniqueIdField} anti, exclusions by ${uniqueIdField};
                            ` : `
                                -- remove exclusions from older siblings
                                ${n.id} = cogroup ${n.id} by ${grouping()} left, exclusions by ${grouping()};
                                ${n.id} = foreach ${n.id} generate ${projection(n.id)}, exclusions.${uniqueIdField} as UnexceptionId;
                                ${n.id} = filter ${n.id} by UnexceptionId is null;
                            `;
                saql += `
                            -- exclusions
                            exclusions = union exclusions, ${n.id};
                        `;
              }
            }
          });
          if (!descendantSaql) {
            saql += `
                    ------------------------------------------------------------------
                    -- Results
                    ------------------------------------------------------------------
                `;
            if (returnType === "count") {
              const resultStreams = [];
              [nodeMap[node.parentId], ...node.olderSiblingIds.map((id) => nodeMap[id]), node].forEach((n) => {
                const streamId = n.id === "All Org" ? "all_possible" : n.id;
                saql += `
                            -- ${n.name}
                            ${prefix}${streamId} = group ${streamId} by all;
                            ${prefix}${streamId} = foreach ${prefix}${streamId} generate "${n.id}" as nodeId,${referenceProjections} count() as count;
                        `;
                resultStreams.push(`${prefix}${streamId}`);
              });
              saql += `
                        -- union results for target node, parent node, older siblings
                        results = union ${resultStreams.join(", ")};
                    `;
            } else {
              saql += `
                        -- all records
                        ${prefix}${node.id} = filter ${node.id} by ${uniqueIdField} != "";
                    `;
            }
          }
          return this.generateSaql({
            node: nodeMap[node.parentId || "All Org"],
            assignmentObject,
            boundaryObjects,
            projectionFields,
            nodeMap,
            recordIds,
            type,
            descendantNodes: descendantSaql ? [node, ...descendantNodes] : descendantNodes,
            descendantSaql: saql + descendantSaql
          });
        },
        generateRules(node, nodeMap, assignmentObject, boundaryObjects, uniqueIdField, isBurndown) {
          var _a2, _b;
          const matchingRules = (node.previewRules || node.rules).filter((r) => {
            const matchesAssignmentObject = r.sfsp__SalesAssignmentObject__c === assignmentObject.id && r.state !== "deleted";
            return matchesAssignmentObject;
          });
          const matchingBoundaryRules = (node.previewRules || node.rules).filter((r) => {
            var _a3, _b2, _c;
            const boundaryField = (_a3 = boundaryObjects == null ? void 0 : boundaryObjects.find((o) => o.id === r.sfsp__SalesNodeBoundary__c)) == null ? void 0 : _a3.name;
            const matchesBoundary = (_c = (_b2 = assignmentObject.recordsDataset) == null ? void 0 : _b2.dimensions) == null ? void 0 : _c.some((f) => f.id === boundaryField);
            return matchesBoundary;
          });
          const matchingAssignments = (node.previewAssignments || node.assignments).filter((a) => a.sfsp__SalesAssignmentObject__c === assignmentObject.id && a.sfsp__Status__c !== "Deleted");
          const burndownNodes = isBurndown ? node.children : [];
          if (matchingRules.length === 0 && matchingBoundaryRules.length === 0 && matchingAssignments.length === 0 && burndownNodes.length === 0)
            return `${uniqueIdField} is null`;
          const ruleAndAssignmentSaqlParts = [];
          if (matchingRules.length) {
            const matchingRulesLogic = ((_a2 = node == null ? void 0 : node.previewRuleLogics) == null ? void 0 : _a2[assignmentObject.id]) || ((_b = node == null ? void 0 : node.ruleLogics) == null ? void 0 : _b[assignmentObject.id]) || Array(matchingRules.length).fill().map((item, i2) => i2 + 1).join(" or ");
            const matchingRulesFilterExpression = SPM.Utils.Filter.mergeBooleanFilter(
              matchingRulesLogic,
              matchingRules.map((r) => Rule.toSaql(r, assignmentObject))
            );
            ruleAndAssignmentSaqlParts.push(`(${matchingRulesFilterExpression})`);
          }
          if (matchingBoundaryRules.length) {
            ruleAndAssignmentSaqlParts.push(`(${matchingBoundaryRules.map((r) => Rule.toSaql(r, assignmentObject)).join(" || ")})`);
          }
          if (matchingAssignments.length) {
            ruleAndAssignmentSaqlParts.push(`${uniqueIdField} in ${JSON.stringify(matchingAssignments.map((a) => a.sfsp__RecordId__c))}`);
          }
          const saqlParts = [];
          if (ruleAndAssignmentSaqlParts.length) {
            saqlParts.push(`(${ruleAndAssignmentSaqlParts.join(" || ")})`);
          }
          const considerSiblings = nodeMap[node.parentId || "All Org"].assignmentBehavior === "Exclusive";
          if (considerSiblings) {
            const unexceptionIds = Node2.getUnexceptionIds(node, nodeMap, assignmentObject);
            if (unexceptionIds.length) {
              saqlParts.push(`${uniqueIdField} not in ${JSON.stringify(unexceptionIds)}`);
            }
          }
          if (burndownNodes.length) {
            const childSaqlParts = burndownNodes.map((childNode) => `(${Node2.generateRules(childNode, nodeMap, assignmentObject, boundaryObjects, uniqueIdField)})`);
            saqlParts.push(`!(${childSaqlParts.join(" || ")})`);
          }
          return saqlParts.join(" && ");
        },
        getUnexceptionIds(node, nodeMap, assignmentObject) {
          const nodeExceptionMap = (node.previewAssignments || node.assignments).filter((a) => a.sfsp__SalesAssignmentObject__c === assignmentObject.id && a.sfsp__Status__c !== "Deleted").reduce((map2, a) => {
            map2[a.sfsp__RecordId__c] = a;
            return map2;
          }, {});
          const unexceptionMap = [];
          node.siblingIds.forEach((siblingId) => {
            const siblingNode = nodeMap[siblingId];
            const siblingIsOlder = node.olderSiblingIds.includes(siblingId);
            (siblingNode.previewAssignments || siblingNode.assignments).forEach((siblingAssignment) => {
              if (siblingAssignment.sfsp__SalesAssignmentObject__c !== assignmentObject.id || siblingAssignment.sfsp__Status__c === "Deleted")
                return;
              if (siblingIsOlder || !nodeExceptionMap[siblingAssignment.sfsp__RecordId__c])
                unexceptionMap[siblingAssignment.sfsp__RecordId__c] = siblingAssignment;
            });
          });
          return Object.keys(unexceptionMap);
        },
        getDescendants({ nodes }) {
          if (nodes.length === 0)
            return [];
          const childNodes = nodes.reduce((arr, n) => arr.concat(n.children || []), []);
          return [
            ...nodes,
            ...Node2.getDescendants({ nodes: childNodes })
          ];
        },
        getAncestors({ node, nodeMap }) {
          const ancestors = [];
          while (node = nodeMap[node.parentId]) {
            ancestors.unshift(node);
          }
          return ancestors;
        },
        isAncestor({ node, ancestor, nodeMap }) {
          while (node = nodeMap[node.parentId]) {
            if (node === ancestor)
              return true;
          }
          return false;
        },
        async getChildren({ node }) {
          const children = [];
          const childrenResponse = await SPM.Utils.Apex.invoke(
            "Query",
            [`
                    SELECT
                        Id,
                        Name,
                        sfsp__Parent__c,
                        (
                            SELECT
                                Id,
                                sfsp__TargetOverrideAmount__c,
                                sfsp__TargetOverrideType__c,
                                ${Array(12).fill().map((v, i2) => `sfsp__Target_Month${i2 + 1}__c`).join(", ")},
                                sfsp__SalesMetric__c
                            FROM sfsp__SalesNodeMetrics__r
                        ),
                        (
                            SELECT Id
                            FROM sfsp__SalesNodes__r
                        )
                    FROM sfsp__SalesNode__c
                    WHERE sfsp__SalesPlan__c = '${SPM.$store.plan.Id}' AND sfsp__Parent__c = '${node.id}'
                `]
          );
          childrenResponse.forEach((c) => {
            var _a2;
            children.push({
              id: c.Id,
              name: c.Name,
              parentId: c.sfsp__Parent__c || "All Org",
              childCount: ((_a2 = c.sfsp__SalesNodes__r) == null ? void 0 : _a2.length) || 0,
              metrics: SPM.$store.plan.sfsp__SalesMetrics__r.map((metric) => {
                const nodeMetric = (c.sfsp__SalesNodeMetrics__r || []).find((m) => m.sfsp__SalesMetric__c === metric.Id);
                return {
                  ...NodeMetric.Defaults,
                  sfsp__SalesNode__c: node.id,
                  sfsp__SalesMetric__c: metric.Id,
                  ...nodeMetric || {}
                };
              })
            });
          });
          return children;
        },
        isExclusiveBranch({ node }) {
          return Node2.getDescendants({ nodes: [node] }).every((n) => n.assignmentBehavior === "Exclusive");
        },
        getBoundaryObjects({ node, nodeMap, includeDescendants = false }) {
          return [...Node2.getAncestors({ node, nodeMap }), ...includeDescendants ? Node2.getDescendants({ nodes: [node] }) : [node]].reduce((arr, n) => {
            arr.push(...(n.boundaries || []).map((b) => {
              const salesBoundary = SPM.$store.salesBoundaries.find((s) => s.Id === b.sfsp__SalesBoundary__c);
              const containerSet = SPM.$store.containerSets[b.sfsp__ContainerSet__c];
              const includesPoints = (salesBoundary == null ? void 0 : salesBoundary.sfsp__IncludePoints__c) || b.sfsp__IncludePoints__c;
              const fieldName = salesBoundary ? `${n.id === "All Org" || b.sfsp__SalesBoundary__c ? SPM.$store.plan.Id : n.id}_${b.sfsp__ContainerSet__c}${includesPoints ? "_points" : ""}` : `${n.id === "All Org" ? SPM.$store.plan.Id : n.id}_${b.sfsp__ContainerSet__c}`;
              return {
                id: b.Id,
                containerSetId: (salesBoundary == null ? void 0 : salesBoundary.sfsp__ContainerSet__c) || b.sfsp__ContainerSet__c,
                salesBoundary: b == null ? void 0 : b.sfsp__SalesBoundary__c,
                rootNodeId: n.id,
                name: fieldName,
                includesPoints,
                label: containerSet.label,
                metadata: containerSet.metadata,
                assignmentCount: 0,
                totalCount: containerSet.size + (b.sfsp__IncludePoints__c ? Object.keys(containerSet.childContainers || {}).length : 0),
                progress: null,
                icon: { category: "standard", name: "address", color: "#3BA755" }
              };
            }));
            return arr;
          }, []);
        },
        getBoundaries({ node, boundaryObject, format: format2 = "array" }) {
          let containers2 = SPM.$store.containerSets[boundaryObject.containerSetId].containers;
          if (!boundaryObject.includesPoints) {
            containers2 = Object.keys(containers2).filter((key) => !containers2[key].parent).reduce((res, key) => (res[key] = containers2[key], res), {});
          }
          if (boundaryObject.rootNodeId === node.id) {
            return format2 === "map" ? Object.values(containers2).reduce((map2, boundary) => {
              map2[boundary.name] = true;
              return map2;
            }, {}) : Object.values(containers2).map((boundary) => boundary.name);
          }
          const boundaryRule = (node.previewRules || node.rules).find((r) => r.sfsp__SalesNodeBoundary__c === boundaryObject.id);
          const boundaryValueMap = ((boundaryRule == null ? void 0 : boundaryRule.sfsp__SalesNodeRuleItems__r) || []).reduce((map2, ruleItem) => {
            ruleItem.sfsp__Value__c.split(",").forEach((v) => map2[v] = true);
            return map2;
          }, {});
          const boundaryPrefixValues = Object.keys(boundaryValueMap);
          const expandedBoundaries = SPM.Utils.Rule.unsimplifyValues(Object.values(containers2).map((c) => c.name), boundaryPrefixValues);
          const boundaries = expandedBoundaries.map((boundary) => containers2[boundary]);
          return format2 === "map" ? boundaries.reduce((map2, boundary) => {
            map2[boundary.name] = true;
            return map2;
          }, {}) : boundaries.map((boundary) => boundary.name);
        },
        async getBoundaryData({ nodes, boundaryObject }) {
          var _a2, _b;
          const boundaryNodeMap = {};
          Node2.getDescendants({ nodes }).forEach((descendant) => {
            if (descendant.level > SPM.$store.scope)
              return;
            SPM.Utils.Node.getBoundaries({ node: descendant, boundaryObject }).forEach((boundary) => {
              boundaryNodeMap[boundary] = boundaryNodeMap[boundary] || [];
              const newBoundaryNodes = [];
              let isAncestor = false;
              boundaryNodeMap[boundary].forEach((n) => {
                if (SPM.Utils.Node.isAncestor({ node: n, ancestor: descendant, nodeMap: SPM.$store.nodeMap })) {
                  isAncestor = true;
                  return;
                } else if (!SPM.Utils.Node.isAncestor({ node: descendant, ancestor: n, nodeMap: SPM.$store.nodeMap })) {
                  newBoundaryNodes.push(n);
                }
              });
              if (!isAncestor)
                newBoundaryNodes.push(descendant);
              boundaryNodeMap[boundary] = newBoundaryNodes;
            });
          });
          const objectsWithGeoField = SPM.$store.assignmentObjects.filter((o) => {
            var _a3, _b2;
            return (_b2 = (_a3 = o.recordsDataset) == null ? void 0 : _a3.dimensions) == null ? void 0 : _b2.find((f) => f.id === boundaryObject.name);
          });
          const containerMap = SPM.$store.containerMap[boundaryObject.containerSetId];
          const recordMap = {};
          Object.keys(boundaryNodeMap).forEach((boundary) => {
            recordMap[boundary] = {
              id: boundary,
              label: containerMap[boundary].label,
              nodeId: boundaryNodeMap[boundary][0].id,
              // nodeId is only used in exclusive assignment where there will be a single value
              AssignedTo: boundaryNodeMap[boundary].map((n) => n.name).join(", ")
            };
            objectsWithGeoField.forEach((o) => recordMap[boundary][o.id] = 0);
          });
          for (const assignmentObject of objectsWithGeoField) {
            let saql = "";
            nodes.forEach((node) => {
              saql += SPM.Utils.Node.generateSaql({
                node,
                assignmentObject,
                boundaryObjects: SPM.$store.boundaryObjects,
                nodeMap: SPM.$store.nodeMap,
                type: "cogroup",
                returnType: "records",
                prefix: "boundary",
                skipLoad: !!saql
              });
            });
            let rootStream = "all_possible";
            if (nodes.length > 1) {
              saql += `
                        ------------------------------------------------------------------
                        -- Combine Filter Nodes
                        ------------------------------------------------------------------
                        all_possible = union ${nodes.map((n) => `boundary_${n.id}`).join(", ")};
                    `;
            } else {
              rootStream = `boundary_${nodes[0].id.replace("All Org", "all_possible")}`;
            }
            const geoField = (_b = (_a2 = assignmentObject.recordsDataset) == null ? void 0 : _a2.dimensions) == null ? void 0 : _b.find((f) => f.id === boundaryObject.name);
            saql += `
                    ------------------------------------------------------------------
                    -- Boundary Aggregation
                    ------------------------------------------------------------------
                    boundaries = group ${rootStream} by ${`'${geoField.id}'`};
                    boundaries = foreach boundaries generate ${`'${geoField.id}' as '${geoField.id}'`}, count() as '${assignmentObject.id}';
                    boundaries = order boundaries by '${assignmentObject.id}' desc;
                `;
            const { results } = await SPM.Utils.Rest.invoke("RunSaql", { query: saql.replace(/^ */gm, "") });
            ((results == null ? void 0 : results.records) || []).forEach((record) => {
              const existingRecord = recordMap[record[geoField.id]];
              if (existingRecord) {
                existingRecord[assignmentObject.id] = record[assignmentObject.id];
              }
            });
          }
          return Object.values(recordMap);
        },
        async getAssignments({ recordIds, assignmentObject, nodes = SPM.$store.scopeChildNodes }) {
          const assignments = recordIds.reduce((map2, id) => {
            map2[id] = [];
            return map2;
          }, {});
          await Async.forEachParallel(nodes, async (node) => {
            const saql = Node2.generateSaql({
              node,
              assignmentObject,
              boundaryObjects: SPM.$store.boundaryObjects,
              nodeMap: SPM.$store.nodeMap,
              recordIds,
              type: "cogroup",
              returnType: "records"
            });
            const { results } = await SPM.Utils.Rest.invoke("RunSaql", { query: saql.replace(/^ */gm, "") });
            results.records.forEach((record) => {
              var _a2, _b, _c;
              const currentLevel = ((_c = (_b = SPM.$store.nodeMap) == null ? void 0 : _b[(_a2 = assignments[record.Id]) == null ? void 0 : _a2[0]]) == null ? void 0 : _c.level) || 0;
              if (node.level > currentLevel) {
                assignments[record.Id] = [node.id];
              } else if (node.level === currentLevel) {
                assignments[record.Id].push(node.id);
              }
            });
          });
          return assignments;
        },
        async getAssignmentData({ nodes, includeDescendants = false, filters = [], filterLogic, assignmentObject, type, isBurndown }) {
          let saql = "";
          nodes.forEach((node) => {
            saql += SPM.Utils.Node.generateSaql({
              node,
              assignmentObject,
              boundaryObjects: SPM.$store.boundaryObjects,
              nodeMap: SPM.$store.nodeMap,
              type: "cogroup",
              returnType: "records",
              prefix: "filter",
              skipLoad: !!saql,
              isBurndown
            });
          });
          let rootStream = "all_possible";
          if (nodes.length > 1) {
            saql += `
                    ------------------------------------------------------------------
                    -- Combine Nodes
                    ------------------------------------------------------------------
                    all_possible = union ${nodes.map((n) => `filter_${n.id.replace("All Org", "all_possible")}`).join(", ")};
                `;
          } else {
            rootStream = `filter_${nodes[0].id.replace("All Org", "all_possible")}`;
          }
          if (filters.length) {
            const recordFiltersExpression = SPM.Utils.Filter.mergeBooleanFilter(
              filterLogic || Array(filters.length).fill("").map((item, i2) => i2 + 1).join(" and "),
              filters.map((f) => SPM.Utils.Filter.toSaql(f))
            );
            saql += `
                    ------------------------------------------------------------------
                    -- Record Filters
                    ------------------------------------------------------------------
                    q = filter ${rootStream} by ${recordFiltersExpression};
                `;
            rootStream = "q";
          }
          if (type === "aggregates") {
            const referenceMetadata = AssignmentObject.getReferenceMetadata({ assignmentObject });
            saql += `
                    ------------------------------------------------------------------
                    -- Measure Aggregation
                    ------------------------------------------------------------------
                    q = group ${rootStream} by all;
                    q = foreach q generate ${referenceMetadata.map(
              (m) => ["min", "max"].includes(m.type) ? `floor(${m.type}(${m.id})) as ${m.type}__${assignmentObject.id}__${m.id}` : `${m.type}(${m.id}) as ${m.type}__${assignmentObject.id}__${m.id}`
            ).join(", ")};
                `;
            const { results: aggregateResults } = await SPM.Utils.Rest.invoke("RunSaql", { query: saql.replace(/^ */gm, "") });
            return referenceMetadata.reduce((map2, m) => {
              var _a2, _b, _c, _d;
              map2[`${m.type}__${assignmentObject.id}__${m.id}`] = ["min", "max"].includes(m.type) ? (_b = (_a2 = aggregateResults == null ? void 0 : aggregateResults.records) == null ? void 0 : _a2[0]) == null ? void 0 : _b[`${m.type}__${assignmentObject.id}__${m.id}`] : ((_d = (_c = aggregateResults == null ? void 0 : aggregateResults.records) == null ? void 0 : _c[0]) == null ? void 0 : _d[`${m.type}__${assignmentObject.id}__${m.id}`]) || 0;
              return map2;
            }, {});
          }
          if (type === "records") {
            saql += `
                    ------------------------------------------------------------------
                    -- Record Projections
                    ------------------------------------------------------------------
                    q = foreach ${rootStream} generate ${[
              ...assignmentObject.recordsDataset.dimensions.map((d) => d.id),
              ...assignmentObject.recordsDataset.measures.map((m) => m.id)
            ].map((f) => `${f} as ${assignmentObject.id}__${f}`).join(", ")};
                `;
            const { results: recordResults } = await SPM.Utils.Rest.invoke("RunSaql", { query: saql.replace(/^ */gm, "") });
            const records = Object.values(((recordResults == null ? void 0 : recordResults.records) || []).reduce((map2, record) => {
              const recordId = record[`${assignmentObject.id}__Id`];
              if (!map2[recordId])
                map2[recordId] = record;
              return map2;
            }, {}));
            const assignments = await SPM.Utils.Node.getAssignments({
              recordIds: records.map((r) => r[`${assignmentObject.id}__Id`]),
              assignmentObject,
              nodes: includeDescendants ? SPM.Utils.Node.getDescendants({ nodes: [SPM.$store.rootNode] }) : SPM.$store.scopeNodes
            });
            const cachedNodeAssignments = /* @__PURE__ */ new Map();
            records.forEach((record) => {
              var _a2;
              const recordId = record[`${assignmentObject.id}__Id`];
              assignments[recordId].forEach((nodeId2) => {
                if (!cachedNodeAssignments.has(nodeId2)) {
                  cachedNodeAssignments.set(nodeId2, new Map(SPM.$store.nodeMap[nodeId2].assignments.map((a) => [`${a.sfsp__RecordId__c}:${a.sfsp__SalesAssignmentObject__c}`, a])));
                }
              });
              record.NodeId = ((_a2 = assignments[recordId]) == null ? void 0 : _a2[0]) || "";
              record.AssignedTo = assignments[recordId].join(", ");
              record.AssignmentType = assignments[recordId].map((nodeId2) => cachedNodeAssignments.get(nodeId2).has(`${recordId}:${assignmentObject.id}`) ? "Manual" : "Rule").join(", ") || "Rule";
            });
            return records;
          }
          if (type === "saql") {
            return { saql, rootStream };
          }
        },
        Colors: [
          // standard; a11y
          "#FFFA00",
          "#FF6E00",
          "#FF7B96",
          "#D31A28",
          "#D053FF",
          "#6C2777",
          "#46E71B",
          "#6FB384",
          "#68FFD7",
          "#01BFBF",
          "#ADD4F3",
          "#2C7ED0",
          // expanded
          "#e3abec",
          "#c2dbf7",
          "#9fd6ff",
          "#9de7da",
          "#9df0c0",
          "#fff099",
          "#fed49a",
          "#d073e0",
          "#86baf3",
          "#5ebbff",
          "#44d8be",
          "#3be282",
          "#ffe654",
          "#ffb758",
          "#bd35bd",
          "#5779c1",
          "#05007a",
          "#00aea9",
          "#3cba4c",
          "#f5bc25",
          "#f99221",
          "#580d8c",
          "#001970",
          "#0a2399",
          "#0b7477",
          "#0b6b50",
          "#b67e11",
          "#b85d0d"
        ],
        randomColor() {
          return SPM.Utils.Node.Colors[Math.floor(Math.random() * SPM.Utils.Node.Colors.length)];
        }
      };
      const NodeMetric = {
        Defaults: {
          sobjectType: "sfsp__SalesNodeMetric__c",
          sfsp__TargetOverrideAmount__c: 0,
          sfsp__TargetOverrideType__c: null,
          ...[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].reduce((fieldMap, monthIndex) => {
            fieldMap[`sfsp__Target_Month${monthIndex}__c`] = 0;
            fieldMap[`previewValue${monthIndex}`] = void 0;
            return fieldMap;
          }, {})
        },
        changeTarget({ nodeMetric, period, index, target, isPreview, startingMonth, customPercentages }) {
          function targetFieldName(i2) {
            return isPreview ? `previewValue${i2}` : `sfsp__Target_Month${i2}__c`;
          }
          if (customPercentages) {
            for (let i2 = 1; i2 < 13; i2++) {
              const monthValue = customPercentages[i2];
              nodeMetric[targetFieldName(i2)] = monthValue;
            }
          } else if (period === "Year") {
            const monthValue = Math.floor(target / 12);
            for (let i2 = 1; i2 < 12; i2++) {
              nodeMetric[targetFieldName(i2)] = monthValue;
            }
            nodeMetric[targetFieldName(12)] = monthValue + (target - monthValue * 12);
          } else if (period === "Quarter") {
            const monthValue = Math.floor(target / 3);
            let month = startingMonth + (index - 1) * 3 <= 12 ? startingMonth + (index - 1) * 3 : (startingMonth + (index - 1) * 3) % 12;
            for (let i2 = 0; i2 < 2; i2++) {
              nodeMetric[targetFieldName(month)] = monthValue;
              month = month + 1 <= 12 ? month + 1 : (month + 1) % 12;
            }
            nodeMetric[targetFieldName(month)] = monthValue + (target - monthValue * 3);
          } else {
            const month = index + startingMonth - 1 <= 12 ? index + startingMonth - 1 : (index + startingMonth - 1) % 12;
            nodeMetric[targetFieldName(month)] = target;
          }
        },
        getTarget({ nodeMetric, period = "Year", index = 0 }) {
          let startMonth;
          let endMonth;
          if (period === "Year") {
            startMonth = 1;
            endMonth = 12;
          } else if (period === "Quarter") {
            startMonth = (index - 1) * 3 + 1;
            endMonth = index * 3;
          } else {
            startMonth = index;
            endMonth = index;
          }
          let target = 0;
          for (let i2 = startMonth; i2 <= endMonth; i2++) {
            target += typeof nodeMetric[`previewValue${i2}`] === "undefined" ? nodeMetric[`sfsp__Target_Month${i2}__c`] : nodeMetric[`previewValue${i2}`];
          }
          return target;
        }
      };
      const Allocation = {
        generateAllocationDistributionTable() {
          const allocationTable = [];
          const quarterLength = SPM.FiscalPeriod.Quarter.length;
          const percentToAllocateEachQuarter = Math.round(100 / quarterLength * 10) / 10;
          for (let i2 = 0; i2 < quarterLength; i2++) {
            const months2 = SPM.FiscalPeriod.Quarter[i2];
            allocationTable[i2] = allocationTable[i2] || { months: [], percent: percentToAllocateEachQuarter, label: `Quarter ${i2 + 1}`, previewPercent: null };
            allocationTable[i2].percent = percentToAllocateEachQuarter;
            const percentToAllocateEachMonth = Math.round(percentToAllocateEachQuarter / months2.length * 10) / 10;
            for (let m = 0; m < months2.length - 1; m++) {
              const id = months2[m];
              const monthLabel = !SPM.$store.plan.fiscalPeriodLabel ? SPM.FiscalLabels.Month[id] : SPM.app.config.globalProperties.$F("DateTime", new Date(2023, id - 1), { month: "long" });
              allocationTable[i2].months.push({
                label: monthLabel,
                percent: percentToAllocateEachMonth,
                id,
                previewPercent: null
              });
            }
            const lastMonthOfQuarter = months2[months2.length - 1];
            const lastMonthLabel = !SPM.$store.plan.fiscalPeriodLabel ? SPM.FiscalLabels.Month[lastMonthOfQuarter] : SPM.app.config.globalProperties.$F("DateTime", new Date(2023, lastMonthOfQuarter - 1), { month: "long" });
            allocationTable[i2].months.push({
              label: lastMonthLabel,
              percent: Math.round((percentToAllocateEachMonth + (percentToAllocateEachQuarter - percentToAllocateEachMonth * months2.length)) * 10) / 10,
              id: lastMonthOfQuarter,
              previewPercent: null
            });
          }
          allocationTable[quarterLength - 1].percent = Math.round((percentToAllocateEachQuarter + (100 - percentToAllocateEachQuarter * quarterLength)) * 10) / 10;
          return allocationTable;
        },
        getPercentageChange(oldNumber, newNumber) {
          const decreaseValue = newNumber - oldNumber;
          const change = Math.floor(decreaseValue / oldNumber * 100);
          if (change === 0 || decreaseValue === 0) {
            return "0%";
          }
          if (change === Infinity) {
            return `+ ${newNumber}%`;
          }
          return change > 0 ? `+ ${change}%` : `- ${change * -1}%`;
        }
      };
      const ExternalData = {
        // https://developer.salesforce.com/docs/atlas.en-us.238.0.bi_dev_guide_ext_data.meta/bi_dev_guide_ext_data/bi_ext_data_overview.htm
        generateMetadata({ planName, datasetType, assignmentObject, geoBoundaries }) {
          const fields = [];
          JSON.parse(assignmentObject.sfsp__ReferenceFields__c).forEach((f) => {
            const field = {
              fullyQualifiedName: `${assignmentObject.Id}.${f.name}`,
              name: f.name,
              label: f.label,
              isUniqueId: f.unique,
              type: f.type,
              isSystemField: false,
              isMultiValue: false,
              description: ""
            };
            if (f.type === "Numeric") {
              field.precision = f.precision;
              field.scale = f.scale;
              field.defaultValue = 0;
            }
            if (["Latitude", "Longitude"].includes(f.type))
              field.type = "Text";
            fields.push(field);
          });
          const boundaryFields = [];
          geoBoundaries == null ? void 0 : geoBoundaries.forEach((boundary) => {
            const fieldName = `${boundary.sfsp__SalesNode__c || boundary.sfsp__SalesPlan__c}_${boundary.sfsp__ContainerSet__c}`;
            const field = {
              fullyQualifiedName: `${assignmentObject.Id}.${fieldName}`,
              name: fieldName,
              label: boundary.Name,
              isUniqueId: false,
              type: "Text",
              isMultiValue: false,
              description: ""
            };
            const existingField = boundaryFields.find((f) => f.name === field.name);
            if (existingField)
              Object.assign(existingField, field);
            else
              boundaryFields.push(field);
          });
          fields.push(...boundaryFields);
          if (datasetType === "Assignments") {
            fields.push(
              {
                description: "",
                fullyQualifiedName: `${assignmentObject.Id}.AssignmentNode`,
                label: "Assignment Node",
                name: "AssignmentNode",
                isSystemField: false,
                isUniqueId: false,
                isMultiValue: false,
                type: "Text"
              },
              {
                description: "",
                fullyQualifiedName: `${assignmentObject.Id}.AssignmentType`,
                label: "Assignment Type",
                name: "AssignmentType",
                isSystemField: false,
                isUniqueId: false,
                isMultiValue: false,
                type: "Text"
              }
            );
          }
          return {
            fileFormat: {
              charsetName: "UTF-8",
              fieldsDelimitedBy: ",",
              fieldsEnclosedBy: '"',
              fieldsEscapedBy: "",
              linesTerminatedBy: "\r\n",
              numberOfLinesToIgnore: 0
            },
            objects: [
              {
                connector: "SalesPlanningCSVConnector",
                fullyQualifiedName: assignmentObject.Id,
                label: `${planName} ${assignmentObject.sfsp__Label__c} ${datasetType}`,
                name: assignmentObject.Name,
                description: "",
                fields
              }
            ]
          };
        },
        async getDatasetRecords({ alias, assignmentObject }) {
          const { dataset: recordsDataset, metadata: recordsMetadata } = await SPM.Utils.AssignmentObject.getDatasetInfo({ alias });
          Object.assign(recordsDataset, {
            measures: recordsMetadata.measures.map((m) => ({
              type: "measure",
              id: m.field,
              title: m.label
            })),
            measuresMetadata: recordsMetadata.measures,
            dimensions: recordsMetadata.dimensions.map((d) => ({
              type: "dimension",
              id: d.field,
              title: d.label
            }))
          });
          const datasetRowMap = {};
          const uniqueIdField = JSON.parse(assignmentObject.sfsp__ReferenceFields__c).find((f) => f.unique).name;
          await async function getBatch(offset2, batchSize) {
            const saql = `
                    // total records
                    records_batch = load "${recordsDataset.id}/${recordsDataset.currentVersionId}";
                    records_batch = foreach records_batch generate ${recordsDataset.dimensions.concat(recordsDataset.measures).map((field) => `'${field.id}' as '${field.id}'`).join(", ")};
                    records_batch = order records_batch by '${uniqueIdField}';
                    records_batch = offset records_batch ${offset2};
                    records_batch = limit records_batch ${batchSize};
                `;
            const { query, results } = await SPM.Utils.Rest.invoke("RunSaql", { query: saql.replace(/^ */gm, "") }) || { query: "", records: [] };
            results.records.forEach((record) => {
              datasetRowMap[record[uniqueIdField]] = record;
            });
            if (results.records.length === batchSize)
              await getBatch(offset2 + batchSize, batchSize);
          }(0, 1e4);
          return datasetRowMap;
        },
        async updateDataset({ planId, planName, datasetType, assignmentObject, geoBoundaries, rowsToUpdate }) {
          const csvMetadata = this.generateMetadata({ planName, datasetType, assignmentObject, geoBoundaries });
          const jobResponse2 = await SPM.Utils.Rest.invoke("CreateExternalDataJob", { metadata: Buffer2.from(JSON.stringify(csvMetadata, 0, 4)).toString("base64"), alias: `${planId}_${assignmentObject.Id}_${datasetType}`, operation: "Overwrite" });
          if (!jobResponse2.success)
            throw jobResponse2.errors[0] || "";
          const csvParts = [];
          if (datasetType === "Records") {
            const datasetRowMap = await this.getDatasetRecords({ alias: `${planId}_${assignmentObject.Id}_Records`, assignmentObject });
            const uniqueIdField = JSON.parse(assignmentObject.sfsp__ReferenceFields__c).find((f) => f.unique).name;
            rowsToUpdate.forEach((row) => {
              const existingRow = datasetRowMap[row[uniqueIdField]];
              if (existingRow) {
                Object.keys(row).forEach((fieldName) => {
                  existingRow[fieldName] = row[fieldName];
                });
                datasetRowMap[row[uniqueIdField]] = existingRow;
              }
            });
            const recordBatches = [];
            const rowValues = Object.values(datasetRowMap);
            while (rowValues.length)
              recordBatches.push(rowValues.splice(0, 1e6).map((record) => csvMetadata.objects[0].fields.map((field) => record[field.name] || (field.type === "Text" ? "" : 0))));
            await Async.forEachParallel(recordBatches, async (batch) => {
              const csv = Papa2.unparse(batch);
              const chunkSize = 3e6;
              Papa2.parse(csv, {
                chunkSize,
                chunk(results, parser) {
                  csvParts.unshift(Papa2.unparse(results.data));
                }
              });
            }, 5);
          } else if (datasetType === "Assignments") {
            const placeholderRow = csvMetadata.objects[0].fields.map((f) => f.type === "Text" ? "spm_placeholder" : 0);
            const csv = Papa2.unparse([placeholderRow]);
            const chunkSize = 3e6;
            Papa2.parse(csv, {
              chunkSize,
              chunk(results, parser) {
                csvParts.unshift(Papa2.unparse(results.data));
              }
            });
          }
          let partNumber = 0;
          await SPM.Utils.Async.forEachParallel(csvParts, async (data) => {
            const base64String = Buffer2.from(partNumber === csvParts.length - 1 ? data : `${data}\r
`).toString("base64");
            const csvPart = base64String;
            partNumber += 1;
            const partResponse = await SPM.Utils.Rest.invoke("UploadCsvPart", { parentId: jobResponse2.id, csvPart, partNumber });
            if (!partResponse.success)
              throw partResponse.errors[0] || "";
          }, 5);
          await SPM.Utils.Rest.invoke("StartExternalDataJob", { parentId: jobResponse2.id });
        },
        async createManualDataset({ planId, planName, datasetType, assignmentObject, records }) {
          const csvMetadata = this.generateMetadata({ planName, datasetType, assignmentObject });
          const jobResponse2 = await SPM.Utils.Rest.invoke("CreateExternalDataJob", { metadata: Buffer2.from(JSON.stringify(csvMetadata, 0, 4)).toString("base64"), alias: `${planId}_${assignmentObject.Id}_${datasetType}`, operation: "Overwrite" });
          if (!jobResponse2.success)
            throw jobResponse2.errors[0] || "";
          const csvParts = [];
          if (datasetType === "Records") {
            const recordBatches = [];
            while (records.length) {
              recordBatches.push(records.splice(0, 1e6).map((record) => csvMetadata.objects[0].fields.map((field) => {
                return getValueFromRecord(field.name, record) || (field.type === "Text" ? "" : 0);
              })));
            }
            await Async.forEachParallel(recordBatches, async (batch) => {
              const csv = Papa2.unparse(batch);
              const chunkSize = 3e6;
              Papa2.parse(csv, {
                chunkSize,
                chunk(results, parser) {
                  csvParts.unshift(Papa2.unparse(results.data));
                }
              });
            }, 5);
          } else if (datasetType === "Assignments") {
            const placeholderRow = csvMetadata.objects[0].fields.map((f) => f.type === "Text" ? "spm_placeholder" : 0);
            const csv = Papa2.unparse([placeholderRow]);
            const chunkSize = 3e6;
            Papa2.parse(csv, {
              chunkSize,
              chunk(results, parser) {
                csvParts.unshift(Papa2.unparse(results.data));
              }
            });
          }
          let partNumber = 0;
          await SPM.Utils.Async.forEachParallel(csvParts, async (data) => {
            const base64String = Buffer2.from(partNumber === csvParts.length - 1 ? data : `${data}\r
`).toString("base64");
            const csvPart = base64String;
            partNumber += 1;
            const partResponse = await SPM.Utils.Rest.invoke("UploadCsvPart", { parentId: jobResponse2.id, csvPart, partNumber });
            if (!partResponse.success)
              throw partResponse.errors[0] || "";
          }, 5);
          await SPM.Utils.Rest.invoke("StartExternalDataJob", { parentId: jobResponse2.id });
        }
      };
      const AutoAssignment = {
        async buildAssignmentObjectScus({ balanceField, geoAssignment, selectedObject, selectedRecords, targetNodeIds }) {
          const rootNodeId = SPM.$store.rootNode.id === "All Org" ? SPM.$store.plan.Id : SPM.$store.rootNode.id;
          const containerSetIds = /* @__PURE__ */ new Set();
          SPM.$store.boundaryObjects.forEach((o) => containerSetIds.add(o.containerSetId));
          const scus = {};
          selectedRecords.forEach((unit) => {
            var _a2, _b;
            const boundaryFields = Object.keys(unit).filter((fieldName) => fieldName.startsWith(`${selectedObject.id}__${rootNodeId}`));
            const boundaryKey = boundaryFields.find((f) => !!unit[f]);
            let boundary = unit[boundaryKey] || "";
            const record = {
              Id: unit[`${selectedObject.id}__Id`],
              Locked: false,
              Boundaries: boundary || "",
              Weight: balanceField === "Unit" ? 1 : unit[`${selectedObject.id}__${balanceField}`] || 0,
              Volume: balanceField === "Unit" ? 1 : unit[`${selectedObject.id}__${balanceField}`] || 0
            };
            const latitudeField = (_a2 = selectedObject.latitude) == null ? void 0 : _a2.name;
            const longitudeField = (_b = selectedObject.longitude) == null ? void 0 : _b.name;
            if (latitudeField && longitudeField) {
              record.Latitude = parseFloat(unit[`${selectedObject.id}__${latitudeField}`]);
              record.Longitude = parseFloat(unit[`${selectedObject.id}__${longitudeField}`]);
            }
            if (geoAssignment === "nonContiguous" && (!record.Latitude || !record.Longitude)) {
              const middleUSA = { latitude: 39.8283, longitude: 98.5795 };
              const radius = 944685;
              const randomPoint = randomLocation.randomCirclePoint(middleUSA, radius);
              record.Latitude = randomPoint.latitude;
              record.Longitude = randomPoint.longitude;
            }
            if (record.Latitude && record.Longitude)
              scus[record.Id] = record;
          });
          const assignmentNodes = targetNodeIds.map((id) => SPM.$store.nodeMap[id]);
          for (const assignmentNode of assignmentNodes) {
            const saql = SPM.Utils.Node.generateSaql({
              node: assignmentNode,
              assignmentObject: selectedObject,
              boundaryObjects: SPM.$store.boundaryObjects,
              nodeMap: SPM.$store.nodeMap,
              type: "cogroup",
              returnType: "records"
            });
            const { results } = await SPM.Utils.Rest.invoke("RunSaql", { query: saql.replace(/^ */gm, "") });
            const boundaryRollup = results.records.reduce((agg, rec) => {
              const boundaryFields = Object.keys(rec).filter((fieldName) => fieldName.startsWith(rootNodeId));
              boundaryFields.forEach((fieldName) => {
                let boundary = rec[fieldName] || "";
                if (agg.includes(boundary))
                  ;
                else if (agg.length === 0)
                  agg = boundary;
                else
                  agg = `${agg},${boundary}`;
              });
              return agg;
            }, "");
            const weightRollup = results.records.reduce((agg, rec) => {
              if (scus[rec.Id])
                return agg;
              return agg + (balanceField === "Unit" ? 1 : rec[balanceField] || 0);
            }, 0);
            scus[`${assignmentNode.id}-Rollup`] = {
              Id: `${assignmentNode.id}-Rollup`,
              Assignment: assignmentNode.id,
              Boundaries: boundaryRollup,
              Locked: true,
              Latitude: 39.8283,
              Longitude: 98.5795,
              Weight: weightRollup,
              Volume: weightRollup
            };
          }
          return { scus: [...Object.values(scus)], containerSetIds };
        },
        async buildBoundaryObjectScus({ balanceField, selectedObject, selectedBoundaries, node }) {
          var _a2, _b;
          const weightMap = {};
          const objectsWithGeoField = SPM.$store.assignmentObjects.filter((o) => {
            var _a3, _b2;
            return (_b2 = (_a3 = o.recordsDataset) == null ? void 0 : _a3.dimensions) == null ? void 0 : _b2.find((f) => f.id === selectedObject.name);
          });
          for (const assignmentObject of objectsWithGeoField) {
            let saql = "";
            saql += SPM.Utils.Node.generateSaql({
              node,
              assignmentObject,
              boundaryObjects: SPM.$store.boundaryObjects,
              nodeMap: SPM.$store.nodeMap,
              type: "cogroup",
              returnType: "records",
              prefix: "drilldown",
              skipLoad: !!saql
            });
            const rootStream = `drilldown_${node.id.replace("All Org", "all_possible")}`;
            const geoField = (_b = (_a2 = assignmentObject.recordsDataset) == null ? void 0 : _a2.dimensions) == null ? void 0 : _b.find((f) => f.id === selectedObject.name);
            const aggregateProjection = balanceField === "Unit" ? `count() as ${balanceField}` : `sum('${balanceField}') as '${balanceField}'`;
            saql += `
                    ------------------------------------------------------------------
                    -- Boundary Filter
                    ------------------------------------------------------------------
                    ${rootStream} = filter ${rootStream} by ${geoField.id} ${node.id === SPM.$store.rootNode.id ? "in" : "not in"} ${JSON.stringify(selectedBoundaries)};

                    ------------------------------------------------------------------
                    -- Boundary Aggregation
                    ------------------------------------------------------------------
                    boundaries = group ${rootStream} by ${`'${geoField.id}'`};
                    boundaries = foreach boundaries generate ${`'${geoField.id}' as '${geoField.id}'`}, ${aggregateProjection};
                `;
            const { query, results } = await SPM.Utils.Rest.invoke("RunSaql", { query: saql.replace(/^ */gm, "") }) || { query: "", records: [] };
            results.records.forEach((record) => {
              const boundaryName = record[geoField.id];
              if (!weightMap[boundaryName])
                weightMap[boundaryName] = 0;
              weightMap[boundaryName] += record[balanceField];
            });
          }
          const scus = {};
          const boundaryMap = SPM.$store.containerMap[selectedObject.containerSetId];
          if (node.id !== SPM.$store.rootNode.id) {
            let boundaryRollup = "";
            let weightRollup = 0;
            let totalLat = 0;
            let totalLng = 0;
            Object.entries(weightMap).forEach(([boundary, weight]) => {
              if (boundaryRollup.length === 0)
                boundaryRollup = boundary;
              else
                boundaryRollup += `, ${boundary}`;
              totalLat += boundaryMap[boundary].metadata.lat;
              totalLng += boundaryMap[boundary].metadata.lng;
              weightRollup += weight;
            });
            const nodeId2 = node.id === "All Org" ? SPM.$store.plan.Id : node.id;
            scus[`${nodeId2}-Rollup`] = {
              Id: `${nodeId2}-Rollup`,
              Locked: true,
              Assignment: node.id,
              Boundaries: boundaryRollup,
              Weight: weightRollup,
              Volume: weightRollup,
              Latitude: totalLat / Object.keys(weightMap).length,
              Longitude: totalLng / Object.keys(weightMap).length
            };
          } else {
            selectedBoundaries.forEach((boundary) => {
              const weight = weightMap[boundary] || 0;
              scus[boundary] = {
                Id: boundary,
                Locked: false,
                Boundaries: boundary,
                Weight: weight,
                Volume: weight,
                Latitude: boundaryMap[boundary].metadata.lat,
                Longitude: boundaryMap[boundary].metadata.lng
              };
            });
          }
          return Object.values(scus);
        }
      };
      const Browser = {
        clearSelection() {
          var _a2, _b, _c;
          (_a2 = window == null ? void 0 : window.getSelection()) == null ? void 0 : _a2.empty();
          (_b = window == null ? void 0 : window.getSelection()) == null ? void 0 : _b.removeAllRanges();
          (_c = document == null ? void 0 : document.selection) == null ? void 0 : _c.empty();
        },
        getCursorPosition(input, selectionPoint, { top: top2, left: left2 } = {}) {
          const { offsetLeft: inputX, offsetTop: inputY } = input;
          const div = document.createElement("div");
          const copyStyle = getComputedStyle(input);
          for (const prop of copyStyle)
            div.style[prop] = copyStyle[prop];
          const inputValue = input.tagName === "INPUT" ? input.value.replace(/ /g, ".") : input.value;
          div.textContent = inputValue.substr(0, selectionPoint);
          if (input.tagName === "TEXTAREA")
            div.style.height = "auto";
          if (input.tagName === "INPUT")
            div.style.width = "auto";
          const span = document.createElement("span");
          span.textContent = inputValue.substr(selectionPoint) || ".";
          div.appendChild(span);
          document.body.appendChild(div);
          div.style.position = "absolute";
          div.style.top = "0px";
          div.style.left = "-1000px";
          const { offsetLeft: spanX, offsetTop: spanY } = span;
          document.body.removeChild(div);
          return {
            x: inputX + spanX + (left2 || 0),
            y: inputY + spanY - input.scrollTop + (top2 || 0)
          };
        },
        // sets search params by replacing existing state (i.e. popstate event is not fired)
        setSearchParams(params = {}) {
          const url = new URL(window.location);
          for (const [key, value] of Object.entries(params)) {
            url.searchParams.set(key, value);
          }
          window.history.replaceState({}, "", url);
        }
      };
      const Str = {
        htmlEncode(str) {
          str = this.htmlDecode(str);
          return String(str).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        },
        htmlDecode(stringValue) {
          let returnText = stringValue;
          if (typeof stringValue === "string") {
            if (typeof document === "object") {
              const txt = document.createElement("textarea");
              txt.innerHTML = stringValue;
              returnText = txt.value;
            } else {
              returnText = String(stringValue).replace(/&amp;/g, "&").replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
            }
          }
          return returnText;
        },
        sanitizeHTML(str) {
          const temp = document.createElement("div");
          temp.textContent = str;
          return temp.innerHTML;
        },
        splitLines(str) {
          return str.split(/\r?\n|\r|\n/g).filter((line) => !!line).map((line) => line.trim());
        },
        truncate(str, { length = 80, ellipsis = true } = {}) {
          return ellipsis && str.length > length && length >= 3 ? `${str.slice(0, length - 3)}...` : str.slice(0, length);
        }
      };
      const Pendo = {
        track(event, payload) {
          if (pendo.visitorId)
            pendo.track(event, payload);
          else
            console.log("Pendo is unable to track this event");
        }
      };
      const Splunk = {
        showLogs(logName = "spm*") {
          const baseSplunkUrl = `https://splunk-web.log-analytics.monitoring.aws-esvc1-useast2.aws.sfdc.is/en-US/app/search/search?q=search `;
          const searchParams = encodeURIComponent(` index=${SPM.instanceName} organizationId=${SPM.orgId} logRecordType=jsLog logName=${logName}`);
          window.open(`${`${baseSplunkUrl}${searchParams}&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=-24h%40h&latest=now`}`);
        },
        sendLog({ txnId = SPM.$store.txnId || getGUID(), logName = "spmLog", logPayload = {} }) {
          if (logName === "spmEPT" && SPM.$store.eptCaptured)
            return;
          else if (logName === "spmEPT") {
            SPM.$store.eptCaptured = true;
            logPayload.ept = window.performance.now();
          }
          const logLines = [{
            logName,
            logLevel: "INFO",
            logAttrs: {
              txnId,
              ...logPayload
            }
          }];
          const iframe = document.createElement("iframe");
          iframe.style.display = "none";
          iframe.name = `jslogger_${Date.now()}`;
          document.body.appendChild(iframe);
          const logLinesInput = document.createElement("input");
          logLinesInput.style.display = "none";
          logLinesInput.name = "logLines";
          logLinesInput.value = JSON.stringify(logLines);
          const form = document.createElement("form");
          form.style.display = "none";
          form.method = "POST";
          form.action = `${SPM.orgDomainUrl}/_ui/common/request/servlet/JsLoggingServlet`;
          form.target = iframe.name;
          form.appendChild(logLinesInput);
          document.body.appendChild(form);
          form.submit();
          setTimeout(() => {
            form.remove();
            iframe.remove();
          }, 5e3);
        }
      };
      const Version244 = {
        /**
         * Waiting status metadata was introduced in version 244.4 to the SalesAsyncJob object on the Status field (picklist)
         * Picklist field values do not ship new or removed metadata values in managed package upgrades.
         * The new metadata values are only available on new installs. In this case 244.4 or higher
         * This check will run on every page load to see if the picklist value "Waiting" is available on the SalesAsyncJob object -> Status field
         */
        async checkAsyncJobWaitingStatus() {
          let toastMessage = "";
          try {
            const sObject = "sfsp__SalesAsyncJob__c";
            const statusField = "sfsp__Status__c";
            const sObjectDescribe = await SPM.Utils.Rest.invoke("SObject", { sObject });
            const field = sObjectDescribe.fields.find((f) => f.name === statusField);
            const waitingPicklistValue = field.picklistValues.find((f) => f.value === "Waiting");
            if (!waitingPicklistValue) {
              toastMessage = `Missing status "Waiting" on the ${statusField} field for the sobject ${sObject}`;
              const entityDefQuery = `SELECT DurableId, QualifiedApiName FROM EntityDefinition WHERE QualifiedApiName = '${sObject}'`;
              const entityRecords = await SPM.Utils.Rest.invoke("ToolingQuery", entityDefQuery);
              const entityRecord = entityRecords.records.length ? entityRecords.records[0] : null;
              if (entityRecord) {
                const sObjectToolingDescribe = await SPM.Utils.Rest.invoke("ToolingSObject", { sObject: "CustomField" });
                const toolingFieldsToQuery = sObjectToolingDescribe.fields.map((a) => a.name);
                const metadataCustomFieldQuery = `SELECT ${toolingFieldsToQuery.join(", ")} FROM CustomField WHERE DeveloperName = 'Status' AND EntityDefinitionId = '${entityRecord.DurableId}' AND NamespacePrefix = 'sfsp' LIMIT 1`;
                const customFieldRecords = await SPM.Utils.Rest.invoke("ToolingQuery", metadataCustomFieldQuery);
                if (!customFieldRecords.records.length) {
                  toastMessage = `Could not find ${statusField} field for the sobject ${sObject}`;
                  throw new Error(toastMessage);
                }
                const salesAsyncJobField = customFieldRecords.records.find((f) => f.FullName === `${sObject}.${statusField}`);
                if (!salesAsyncJobField.Metadata.valueSet.valueSetDefinition.value.find((f) => f.valueName === "Waiting")) {
                  salesAsyncJobField.Metadata.valueSet.valueSetDefinition.value.push({
                    color: null,
                    default: false,
                    description: null,
                    isActive: null,
                    label: "Waiting",
                    urls: null,
                    valueName: "Waiting"
                  });
                  salesAsyncJobField.Metadata.valueSet.valueSettings = [];
                  const metadata = { Metadata: salesAsyncJobField.Metadata, FullName: salesAsyncJobField.FullName };
                  const url = salesAsyncJobField.attributes.url;
                  try {
                    await SPM.Utils.Rest.invoke("ToolingSObjectPatch", { url, metadata });
                  } catch (ex) {
                    toastMessage = `Error updating ${statusField} field with picklist value "Waiting" for the sobject ${sObject}`;
                    throw new Error(ex);
                  }
                }
              } else {
                toastMessage = `Unable to find the sobject ${sObject}. Missing status "Waiting" on the ${statusField} field.`;
              }
              toastMessage = "";
            }
          } catch (e) {
            if (toastMessage !== "")
              SPM.$store.toast({ state: "error", message: `${toastMessage}.`, subMessage: "Please contact your admin to ensure Sales Planning is properly configured.", duration: null });
            console.log("checkAsyncJobWaitingStatus", e);
          }
        }
      };
      const Segment = SegClient({ Buffer: Buffer2, Papa: Papa2 });
      const Area = {
        getFieldValue(store, area, fieldId, percentFocusTarget) {
          const fieldType = fieldId.split(":")[0];
          let fieldValue = area.CalculatedMetadata[fieldId];
          if (fieldType === "Special") {
            const specialColumn = store.getters.getSpecialFields.find((sc) => sc.id === fieldId.replace(/^Special:/, ""));
            fieldValue = specialColumn.getAreaValue(area);
          } else if (fieldType === "Metadata") {
            fieldValue = area.metadata[fieldId.replace(/^Metadata:/, "")];
          } else if (fieldType === "Property") {
            fieldValue = area[fieldId.replace(/^Property:/, "")];
          }
          return percentFocusTarget ? fieldValue / percentFocusTarget : fieldValue;
        },
        getLabelValue(store, area, overlay, focusValues) {
          if (overlay.labelPriorityFieldId && overlay.screenLabels) {
            const screenValue = focusValues[overlay.labelPriorityFieldId] ? numeral(Area.getFieldValue(store, area, overlay.labelPriorityFieldId, focusValues[overlay.labelPriorityFieldId] / focusValues.FocusCount)).format("0.0%") : Area.getFieldValue(store, area, overlay.labelPriorityFieldId);
            if (overlay.screenValue > screenValue)
              return "";
          }
          let label = focusValues[overlay.labelFieldId] ? numeral(Area.getFieldValue(store, area, overlay.labelFieldId, focusValues[overlay.labelFieldId] / focusValues.FocusCount)).format("0.0%") : Area.getFieldValue(store, area, overlay.labelFieldId);
          if (overlay.altLabelFieldId) {
            label += overlay.altLabelSeparator;
            label += focusValues[overlay.altLabelFieldId] ? numeral(Area.getFieldValue(store, area, overlay.altLabelFieldId, focusValues[overlay.altLabelFieldId] / focusValues.FocusCount)).format("0.0%") : Area.getFieldValue(store, area, overlay.altLabelFieldId);
          }
          return label;
        }
      };
      const Container = {
        getFieldValue(store, containerUnit, fieldId, percentFocusTarget) {
          const fieldType = fieldId.split(":")[0];
          let fieldValue = containerUnit.CalculatedMetadata[fieldId];
          if (fieldType === "Special") {
            const specialColumn = store.getters.getSpecialFields.find((sc) => sc.id === fieldId.replace(/^Special:/, ""));
            fieldValue = specialColumn.getUnitValue(containerUnit);
          } else if (fieldType === "Metadata") {
            fieldValue = containerUnit.Metadata[fieldId.replace(/^Metadata:/, "")];
          } else if (fieldType === "ContainerMetadata") {
            fieldValue = store.state.containerSets.find((cs) => cs.id === containerUnit.ContainerSetId).containers[containerUnit.ContainerId].metadata[fieldId.replace(/^ContainerMetadata:/, "")];
          } else if (fieldType === "Property") {
            fieldValue = containerUnit[fieldId.replace(/^Property:/, "")];
          }
          return percentFocusTarget ? fieldValue / percentFocusTarget : fieldValue;
        },
        getLabelValue(store, containerUnit, overlay, focusValues) {
          if (overlay.labelPriorityFieldId && overlay.screenLabels) {
            const screenValue = focusValues[overlay.labelPriorityFieldId] ? numeral(Container.getFieldValue(store, containerUnit, overlay.labelPriorityFieldId, focusValues[overlay.labelPriorityFieldId] / focusValues.FocusCount)).format("0.0%") : Container.getFieldValue(store, containerUnit, overlay.labelPriorityFieldId);
            if (overlay.screenValue > screenValue)
              return "";
          }
          let label = focusValues[overlay.labelFieldId] ? numeral(Container.getFieldValue(store, containerUnit, overlay.labelFieldId, focusValues[overlay.labelFieldId] / focusValues.FocusCount)).format("0.0%") : Container.getFieldValue(store, containerUnit, overlay.labelFieldId);
          if (overlay.altLabelFieldId) {
            label += overlay.altLabelSeparator;
            label += focusValues[overlay.altLabelFieldId] ? numeral(Container.getFieldValue(store, containerUnit, overlay.altLabelFieldId, focusValues[overlay.altLabelFieldId] / focusValues.FocusCount)).format("0.0%") : Container.getFieldValue(store, containerUnit, overlay.altLabelFieldId);
          }
          return label;
        }
      };
      const Unit = {
        getFieldValue(store, unit, fieldId, percentFocusTarget) {
          const fieldType = fieldId.split(":")[0];
          let fieldValue = unit.CalculatedMetadata[fieldId];
          if (fieldType === "Special") {
            const specialColumn = store.getters.getSpecialFields.find((sc) => sc.id === fieldId.replace(/^Special:/, ""));
            fieldValue = specialColumn.getUnitValue(unit);
          } else if (fieldType === "Metadata") {
            fieldValue = unit.Metadata[fieldId.replace(/^Metadata:/, "")];
          } else if (fieldType === "Property") {
            fieldValue = unit[fieldId.replace(/^Property:/, "")];
          }
          return percentFocusTarget ? fieldValue / percentFocusTarget : fieldValue;
        },
        getLabelValue(store, unit, overlay, focusValues) {
          if (overlay.labelPriorityFieldId && overlay.screenLabels) {
            const screenValue = focusValues[overlay.labelPriorityFieldId] ? numeral(Unit.getFieldValue(store, unit, overlay.labelPriorityFieldId, focusValues[overlay.labelPriorityFieldId] / focusValues.FocusCount)).format("0.0%") : Unit.getFieldValue(store, unit, overlay.labelPriorityFieldId);
            if (overlay.screenValue > screenValue)
              return "";
          }
          let label = focusValues[overlay.labelFieldId] ? numeral(Unit.getFieldValue(store, unit, overlay.labelFieldId, focusValues[overlay.labelFieldId] / focusValues.FocusCount)).format("0.0%") : Unit.getFieldValue(store, unit, overlay.labelFieldId);
          if (overlay.altLabelFieldId) {
            label += overlay.altLabelSeparator;
            label += focusValues[overlay.altLabelFieldId] ? numeral(Unit.getFieldValue(store, unit, overlay.altLabelFieldId, focusValues[overlay.altLabelFieldId] / focusValues.FocusCount)).format("0.0%") : Unit.getFieldValue(store, unit, overlay.altLabelFieldId);
          }
          return label;
        },
        get18CharacterId(store, unit) {
          let id = unit.UnitId || "";
          if (id.length !== 15)
            return null;
          for (let i2 = 0; i2 < 3; i2++) {
            let flags = 0;
            for (let j = 0; j < 5; j++) {
              const c = id.charAt(i2 * 5 + j);
              if (c >= "A" && c <= "Z")
                flags += 1 << j;
            }
            id += "ABCDEFGHIJKLMNOPQRSTUVWXYZ012345".charAt(flags);
          }
          return id;
        }
      };
      const PkChunking = {
        encode(int, charset) {
          let byCode = charset.byCode;
          if (int === 0) {
            return byCode[0];
          }
          var res = "", max2 = charset.length;
          while (int > 0) {
            res = byCode[int % max2] + res;
            int = Math.floor(int / max2);
          }
          return res;
        },
        decode(str, charset) {
          var byChar = charset.byChar, res = 0, length = str.length, max2 = charset.length, i2, char;
          for (i2 = 0; i2 < length; i2++) {
            char = str[i2];
            res += byChar[char] * Math.pow(max2, length - i2 - 1);
          }
          return res;
        },
        // NB: does not validate input
        indexCharset(str) {
          var byCode = {}, byChar = {}, length = str.length, i2, char;
          for (i2 = 0; i2 < length; i2++) {
            char = str[i2];
            byCode[i2] = char;
            byChar[char] = i2;
          }
          return { byCode, byChar, length };
        },
        /* strip the 6 digit id prefix, and last 3 digits (CRC check) if any
        * then base62 decode to convert to long
        */
        convertSalesforceIdToLong(salesforceId) {
          const salesforceIdStripped = salesforceId.substring(6, 15);
          const baseDigits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
          const charset = this.indexCharset(baseDigits);
          return this.decode(salesforceIdStripped, charset);
        },
        // base62 encode them, and add the id prefix back in
        convertLongToSalesforceId(idPrefix, longId) {
          const baseDigits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
          const charset = this.indexCharset(baseDigits);
          const sfNumId = Number(longId);
          const idStringB62 = this.encode(sfNumId, charset).padStart(9, 0);
          return idPrefix + idStringB62;
        },
        /*
        * Take a 15 or 18 digit start and ending salesforce Id and break it into chunk ranges of specified size
        * Only works if all the IDs have the same pod identifier
        * Be careful of pod splits, sandbox / production data in a sandbox, etc.
        */
        chunkIdRange(startId, endId2, chunkSize) {
          const idPrefix = startId.substring(0, 6);
          const startNum = this.convertSalesforceIdToLong(startId);
          const endNum = this.convertSalesforceIdToLong(endId2);
          const numberChunkList = this.chunkRange(startNum, endNum, 9, chunkSize);
          return numberChunkList.map((chunk) => {
            const first = this.convertLongToSalesforceId(idPrefix, chunk.first);
            const last = this.convertLongToSalesforceId(idPrefix, chunk.last);
            return { first, last };
          });
        },
        /*
        * This method is used to chunk up a large range of Long Integers into a list of smaller ranges.
        * start number, end number, and size of the chunks is passed in
        */
        chunkRange(firstNum, lastNum, totalLength, chunkSize) {
          const range = lastNum - firstNum;
          const numChunkList = [];
          if (range < chunkSize) {
            numChunkList.push({ first: firstNum, last: lastNum });
          } else {
            const numChunks = Math.trunc(range / chunkSize);
            let firstNumChunk = firstNum;
            let lastNumChunk = firstNum + chunkSize - 1;
            numChunkList.push({ first: firstNumChunk, last: lastNumChunk });
            for (let i2 = 1; i2 < numChunks; i2++) {
              firstNumChunk = lastNumChunk + 1;
              lastNumChunk = firstNumChunk + chunkSize - 1;
              numChunkList.push({ first: firstNumChunk, last: lastNumChunk });
            }
            const lastlastNumChunk = numChunkList[numChunkList.length - 1].last;
            if (lastlastNumChunk < lastNum) {
              numChunkList.push({ first: lastlastNumChunk + 1, last: lastNum });
            }
          }
          const numChunkListZeroPadded = numChunkList.map((numChunk) => ({
            first: (numChunk.first || "").toString().padStart(totalLength, 0),
            last: (numChunk.last || "").toString().padStart(totalLength, 0)
          }));
          return numChunkListZeroPadded;
        },
        /*
        * Take a 15 or 18 digit start and ending salesforce Id and calculate the number of ids between the two
        * Use the unit count to calculate fragementation between the range we require and the actual ids present
        * Only works if all the IDs have the same pod identider
        * Be careful of pod splits, sandbox / production data in a sandbox, etc.
        */
        calculateFragmentation(startId, endId2, unitCount) {
          const startNum = this.convertSalesforceIdToLong(startId);
          const endNum = this.convertSalesforceIdToLong(endId2);
          const totalRange = endNum - startNum;
          return totalRange / unitCount;
        },
        // split the range into the number of chunks specified by splitCount
        splitIdChunk(startId, endId2, splitCount) {
          const startNum = this.convertSalesforceIdToLong(startId);
          const endNum = this.convertSalesforceIdToLong(endId2);
          const totalRange = endNum - startNum;
          const chunkSize = Math.ceil(totalRange / splitCount) + 1;
          return this.chunkIdRange(startId, endId2, chunkSize);
        },
        // Calculate the size of a chunk to split the input range into the number of splits specified
        // For example a range of 30002 with a split of 3 would result in a chunk size of 10001
        calculateChunkSizeToSplitRange(startId, endId2, splitCount) {
          const startNum = this.convertSalesforceIdToLong(startId);
          const endNum = this.convertSalesforceIdToLong(endId2);
          const totalRange = endNum - startNum;
          const chunkSize = Math.ceil(totalRange / splitCount) + 1;
          return chunkSize;
        }
      };
      return {
        Debug: false,
        Apex,
        Rest,
        Pendo,
        Splunk,
        HTTP,
        CRM,
        CRMA,
        ExternalData,
        Async,
        Store,
        Obj,
        Arr: Arr2,
        Tree: Tree2,
        Rule,
        Filter,
        DeferredPromise,
        AutoAssignment,
        Plan,
        AssignmentObject,
        BoundaryObject,
        Node: Node2,
        NodeMetric,
        Browser,
        Str,
        Map: MapUtil,
        Segment,
        Allocation,
        Area,
        Container,
        Unit,
        PkChunking,
        Version244
      };
    }
    const useStore = defineStore("main", {
      state: () => ({
        // splunk
        txnId: getGUID(),
        eptCaptured: false,
        // hierarchy
        rootNode: {},
        nodeMap: {},
        maxLevel: 0,
        scope: 0,
        // assignment/plan/asyncJobs/boundaries
        assignmentObjects: [],
        salesAsyncJobs: [],
        salesBoundaries: [],
        periods: [],
        plan: {},
        plans: [],
        // containers
        allContainerSetsLoaded: false,
        containerSets: {},
        activeContainerSets: {},
        containerMap: {},
        // sharing
        hasSalesPlanningTemplateApp: false,
        userAccessRecords: [],
        availableAdminIds: /* @__PURE__ */ new Set(),
        availableManagerIds: /* @__PURE__ */ new Set(),
        branch: { id: "All Org", name: "All Org", accessLevel: "Editor", descendantIds: [] },
        // toasts
        toasts: [],
        showOnLoadToasts: true,
        // preferences
        preferences: {
          AssignmentExplorer: {
            mode: "Grid"
          },
          RecordExplorer: {
            mode: "Aggregation",
            columns: {}
          },
          Map: {
            layers: [
              { type: "basemap", id: "labels", label: "Labels", icon: "text", styles: { visible: true } },
              { type: "basemap", id: "roads", label: "Roads", icon: "travel_and_places", styles: { visible: true } },
              { type: "basemap", id: "background", label: "Background", icon: "world", styles: { visible: true } }
            ]
          }
        }
      }),
      getters: {
        hasDataPipelinesAccess: (state) => SPM.hasDataPipelinesAccess,
        allNodes: (state) => Object.values(state.nodeMap),
        isAdmin: (state) => SPM.isAdmin,
        isManager: (state) => SPM.isManager,
        isEditor: (state) => SPM.isAdmin || SPM.isManager || state.branch.accessLevel === "Editor",
        boundaryObjects: (state) => SPM.Utils.Node.getBoundaryObjects({ node: state.rootNode, nodeMap: state.nodeMap, includeDescendants: true })
      },
      actions: {
        // hierarchy
        async loadScope({ rootNodeId, parentNodeIds = [] }) {
          return SPM.Utils.Node.loadScope({
            planId: this.plan.Id,
            nodeMap: this.nodeMap,
            metrics: this.plan.sfsp__SalesMetrics__r,
            loadRuleItems: true,
            loadAssignments: true,
            rootNodeId,
            parentNodeIds
          });
        },
        async loadAncestors({ nodeId: nodeId2 }) {
          return SPM.Utils.Node.loadAncestors({
            planId: this.plan.Id,
            nodeId: nodeId2,
            nodeMap: this.nodeMap,
            metrics: this.plan.sfsp__SalesMetrics__r,
            loadRuleItems: true,
            loadAssignments: true
          });
        },
        async loadLevel({ level, rootNode = this.rootNode, onProgress = () => {
        } }) {
          let currentLevel = rootNode.level;
          let currentNodes = rootNode.children || [rootNode];
          while (currentLevel++ < level) {
            const nodeIdsToLoad = currentNodes.map((node) => node.id);
            onProgress(`Loading L${currentLevel}...`);
            await this.loadScope({ parentNodeIds: nodeIdsToLoad });
            const nextNodes = [];
            currentNodes.forEach((node) => {
              const childNodes = this.nodeMap[node.id].children || [];
              nextNodes.push(...childNodes);
            });
            currentNodes = nextNodes;
          }
        },
        buildAssignmentObjects(assignment) {
          function constructObject(object) {
            const assignmentObject = {
              id: object.Id,
              name: object.Name,
              label: object.sfsp__Label__c,
              assignmentCount: "-",
              totalCount: "-",
              progress: null,
              assignmentsDataset: {
                dataflowStatus: ""
              },
              recordsDataset: {
                dataflowStatus: ""
              },
              asyncJob: {
                id: "",
                status: "loading",
                details: "",
                type: ""
              },
              icon: SPM.Utils.AssignmentObject.getIcon(object.Name),
              referenceFields: []
            };
            JSON.parse(object.sfsp__ReferenceFields__c).forEach((field) => {
              if (field.type === "Latitude") {
                assignmentObject.latitude = field;
              } else if (field.type === "Longitude") {
                assignmentObject.longitude = field;
              } else {
                assignmentObject.referenceFields.push({
                  ...field,
                  id: field.name
                });
              }
            });
            return assignmentObject;
          }
          if (assignment)
            return constructObject(assignment);
          this.assignmentObjects = this.plan.sfsp__SalesAssignmentObjects__r.map((obj) => constructObject(obj));
        },
        async savePreferences(targetUserId = SPM.currentUser.Id) {
          var _a2;
          const existingPref = ((_a2 = await SPM.Utils.Apex.invoke("Query", [`
                SELECT Id
                FROM sfsp__SalesUserPreference__c
                WHERE sfsp__SalesPlan__c = '${this.plan.Id}' AND sfsp__User__c = '${SPM.currentUser.Id}'
            `])) == null ? void 0 : _a2[0]) || {};
          SPM.Utils.CRM.upsert({
            records: [{
              sobjectType: "sfsp__SalesUserPreference__c",
              sfsp__SalesPlan__c: this.plan.Id,
              sfsp__User__c: targetUserId,
              ...existingPref,
              sfsp__Preferences__c: JSON.stringify(this.preferences, 0, 4)
            }]
          });
        },
        // container
        async loadContainerSets(containerSetIds = []) {
          if (containerSetIds.length === 0 || containerSetIds.some((csId) => !this.containerSets[csId])) {
            const nonCachedIds = containerSetIds.filter((csId) => !this.containerSets[csId]);
            const containerSetResponse = await SPM.Utils.Apex.invoke("GetContainerSets", [nonCachedIds]);
            if (containerSetResponse.success) {
              containerSetResponse.containerSets.forEach((cs) => {
                if (!this.containerSets[cs.id])
                  this.containerSets[cs.id] = Object.assign(cs, { label: `${cs.country} ${cs.boundary}` });
                if (!this.activeContainerSets[cs.id] && this.containerSets[cs.id].is_active)
                  this.activeContainerSets[cs.id] = this.containerSets[cs.id];
              });
            } else {
              this.toast({ message: "Unable to retrieve available container sets", state: "error", duration: 5e3 });
            }
          }
          return this.activeContainerSets;
        },
        async loadContainers({ containerSetId }) {
          let containerSet = this.containerSets[containerSetId];
          if (!containerSet) {
            const containerSetResponse = await SPM.Utils.Apex.invoke("GetContainerSets", [[containerSetId]]);
            containerSetResponse.containerSets.forEach((cs) => {
              this.containerSets[containerSetId] = Object.assign(cs, { label: `${cs.country} ${cs.boundary}`, is_active: true });
            });
            containerSet = this.containerSets[containerSetId];
          }
          if (!this.activeContainerSets[containerSet.id] && containerSet.is_active)
            this.activeContainerSets[containerSet.id] = containerSet;
          if (!containerSet.containers) {
            const containersResponse = await SPM.Utils.Apex.invoke("GetContainersUrl", [containerSetId, "url"]);
            const containerData = await SPM.Utils.HTTP.get({ url: containersResponse.url });
            containerSet.containers = {};
            containerSet.childContainers = {};
            containerData.data.forEach((c) => {
              if (!this.containerMap[containerSetId])
                this.containerMap[containerSetId] = {};
              this.containerMap[containerSetId][c.name] = c;
              containerSet.containers[c.name] = c;
              if (c.parent)
                containerSet.childContainers[c.name] = c;
            });
          }
          return containerSet.containers;
        },
        // toast
        toast(options) {
          if (!options.message) {
            throw new Error("Missing message argument.");
          }
          this.toasts.push({
            // defaults
            ...{
              duration: 5e3,
              position: "top-center",
              state: "success"
            },
            ...options
          });
        },
        trackPendoEvent(payload) {
          if (pendo.visitorId) {
            pendo.track(payload.actionType, payload.pendoPayload);
          } else {
            console.log("Pendo is unable to track this event");
          }
        }
      }
    });
    const fetch = (url) => new Promise((resolve2, reject) => {
      console.log(url);
      const request = new XMLHttpRequest();
      request.onload = () => {
        if (request.status >= 200 && request.status < 400) {
          resolve2(request.responseText);
        } else {
          reject(request);
        }
      };
      request.onerror = () => console.error("Could not load the SVG.");
      request.open("GET", url, true);
      request.send();
    });
    const Icon = {
      name: "Icon",
      props: {
        assistiveText: String,
        button: Boolean,
        category: {
          type: String,
          default: "standard",
          validator(category) {
            if (!["action", "custom", "doctype", "standard", "utility"].includes(category)) {
              console.error("Invalid category. Please see documentation for valid categories.");
              return false;
            }
            return true;
          }
        },
        iconClass: {
          type: [Array, String]
        },
        inheritFillFromParent: Boolean,
        name: {
          type: String,
          default: ""
        },
        size: {
          type: String,
          default: "",
          validator(size2) {
            if (size2 && !["xx-small", "x-small", "small", "large"].includes(size2)) {
              console.error("Invalid size. Please see documentation for valid sizes.");
              return false;
            }
            return true;
          }
        },
        src: String,
        svg: {
          type: [Object, String],
          validator(value) {
            const isString2 = typeof value === "string";
            const isESModule = typeof value === "object" && value.__esModule === true;
            return isString2 || isESModule;
          }
        },
        title: {
          type: String,
          default: ""
        },
        variant: {
          type: String,
          default: "default",
          validator(variant) {
            if (variant && !["inverse", "success", "warning", "error", "default", "none"].includes(variant)) {
              console.error("Invalid variant. Please see documentation for valid variants.");
              return false;
            }
            return true;
          }
        }
      },
      render() {
        const classes = [];
        if (!this.$props.button) {
          classes.push("slds-icon_container");
          if (this.hasFQIcon) {
            classes.push(`slds-icon-${this.$props.category}-${this.$props.name.replace(/_/g, "-")}`);
          }
        }
        const svgVNode = this.buildSVGVNode();
        const children = [svgVNode];
        if (this.$props.assistiveText) {
          children.push(
            h(
              "span",
              {
                class: "slds-assistive-text"
              },
              [this.$props.assistiveText]
            )
          );
        }
        if (this.$props.button) {
          return [children];
        }
        return h(
          "div",
          {
            class: classes,
            title: this.$props.title
          },
          [children]
        );
      },
      data() {
        return {
          processing: false,
          inlineData: null
        };
      },
      computed: {
        hasFQIcon() {
          return this.$props.category && this.$props.name;
        },
        computedFill() {
          return this.$props.button || this.hasFQIcon && this.$props.category === "utility" ? "inherit" : this.$props.fill;
        }
      },
      watch: {
        $props: {
          handler() {
            this.process();
          },
          deep: true,
          immediate: true
        }
      },
      inject: ["$__getIconSettings"],
      methods: {
        validateSources() {
          let numSources = 0;
          if (this.$props.src)
            numSources++;
          if (this.$props.svg)
            numSources++;
          if (this.hasFQIcon)
            numSources++;
          if (numSources === 0 || numSources > 1) {
            throw new Error("You must provide exactly one icon source.");
          }
        },
        async process() {
          if (this.processing)
            return;
          this.validateSources();
          try {
            this.processing = true;
            if (this.$props.src) {
              this.inlineData = await fetch(this.$props.src);
            } else if (this.$props.svg) {
              this.inlineData = this.$props.svg;
            }
          } finally {
            this.processing = false;
          }
        },
        buildSVGVNode() {
          const iconClasses = this.getIconClasses();
          const baseAttrs = {
            "aria-hidden": true,
            focusable: false,
            "data-key": this.$props.name
          };
          if (this.inlineData) {
            const fragment = document.createRange().createContextualFragment(this.inlineData);
            const svg = Array.from(fragment.childNodes).find((child) => child.nodeName === "svg");
            svg.classList.add(...iconClasses);
            if (this.$props.inheritFillFromParent) {
              svg.querySelectorAll("g, path").forEach((el) => {
                el.style.fill = "inherit";
              });
            }
            const attrs = Object.values(svg.attributes).reduce((result, attr) => {
              result[attr.name] = attr.value;
              return result;
            }, baseAttrs);
            return h(
              "svg",
              {
                ...attrs,
                class: iconClasses,
                innerHTML: svg.innerHTML
              }
            );
          }
          return h(
            "svg",
            {
              ...baseAttrs,
              class: iconClasses
            },
            [
              h(
                "use",
                {
                  href: this.getAssetURL()
                }
              )
            ]
          );
        },
        getAssetURL() {
          const {
            iconPath,
            actionSpritePath,
            customSpritePath,
            doctypeSpritePath,
            standardSpritePath,
            utilitySpritePath
          } = this.$__getIconSettings();
          if (iconPath) {
            return `${iconPath}/${this.$props.category}-sprite/svg/symbols.svg#${this.$props.name}`;
          }
          switch (this.$props.category) {
            case "action":
              return `${actionSpritePath}/symbols.svg#${this.$props.name}`;
            case "custom":
              return `${customSpritePath}/symbols.svg#${this.$props.name}`;
            case "doctype":
              return `${doctypeSpritePath}/symbols.svg#${this.$props.name}`;
            case "standard":
              return `${standardSpritePath}/symbols.svg#${this.$props.name}`;
            case "utility":
              return `${utilitySpritePath}/symbols.svg#${this.$props.name}`;
            default:
              throw new Error("Invalid path");
          }
        },
        getIconClasses() {
          const iconClasses = [];
          if (this.$props.category === "utility" && this.$props.variant !== "none") {
            iconClasses.push(`slds-icon-text-${this.$props.variant}`);
          }
          if (Array.isArray(this.iconClass)) {
            this.iconClass.forEach((cssClass) => iconClasses.push(cssClass));
          } else if (this.iconClass) {
            iconClasses.push(this.iconClass);
          }
          if (!this.$props.button && this.hasFQIcon) {
            iconClasses.push("slds-icon");
            if (this.$props.size) {
              iconClasses.push(`slds-icon_${this.$props.size}`);
            }
          }
          return iconClasses;
        }
      }
    };
    const ButtonIcon = {
      name: "Button",
      components: { Icon },
      props: {
        assistiveText: {
          type: String,
          required: true
        },
        /**
         * Disables the button and adds disabled styling.
         */
        disabled: Boolean,
        /**
         * Icon category.
         */
        iconCategory: {
          type: String,
          default: null
        },
        iconClass: {
          type: [Array, String],
          default: () => []
        },
        /**
         * Icon name.
         */
        iconName: {
          type: String,
          default: null
        },
        /**
         * Icon size.
         */
        iconSize: {
          type: String,
          default: "",
          validator: (value) => {
            const sizes = [
              "large",
              "small",
              "x-small",
              "xx-small"
            ];
            const isValid2 = !value || sizes.includes(value);
            if (!isValid2)
              console.error(`Valid iconSize prop values are ${sizes.join(", ")}`);
            return isValid2;
          }
        },
        more: Boolean,
        /**
         * Contained variants can be displayed in three smaller sizes—small, x-small, xx-small—by adding a sizing class on the <button>.
         */
        size: {
          type: String,
          default: "",
          validator: (value) => {
            const sizes = [
              "large",
              "small",
              "x-small",
              "xx-small"
            ];
            const isValid2 = !value || sizes.includes(value);
            if (!isValid2)
              console.error(`Valid button icon prop values are ${sizes.join(", ")}`);
            return isValid2;
          }
        },
        /**
         * Stretches the button to full width.
         */
        stretched: Boolean,
        /**
         * The variant changes the appearance of the button. Accepted variants include base, container,
         * brand, border, border-filled, base-inverse, border-inverse.
         */
        variant: {
          type: String,
          default: "bare",
          validator: (value) => {
            const variants = [
              "bare",
              "container",
              "brand",
              "border",
              "border-filled",
              "bare-inverse",
              "inverse",
              "border-inverse"
            ];
            const isValid2 = !value || variants.includes(value);
            if (!isValid2)
              console.error(`Valid variant prop values are ${variants.join(", ")}`);
            return isValid2;
          }
        },
        /**
         * Displays browser-based tooltip text when the mouse moves over the element.
         */
        title: {
          type: String,
          required: true
        }
      },
      computed: {
        hasFQIcon() {
          return this.$props.iconCategory && this.$props.iconName;
        }
      },
      render() {
        let iconVNode;
        if (this.hasFQIcon) {
          const iconClass = Array.isArray(this.$props.iconClass) ? this.$props.iconClass : [this.$props.iconClass];
          iconClass.push("slds-button__icon");
          const props = {
            assistiveText: this.$props.assistiveText,
            category: this.$props.iconCategory,
            name: this.$props.iconName,
            iconClass,
            variant: "none",
            button: true
          };
          if (this.$props.iconSize) {
            iconClass.push(`slds-button__icon_${this.$props.iconSize}`);
            props.size = this.$props.iconSize;
          }
          iconVNode = h(Icon, props);
        }
        const _default = this.$slots.default ? this.$slots.default() : null;
        const children = [_default || iconVNode];
        if (this.$props.more) {
          const moreIconVNode = h(
            Icon,
            {
              assistiveText: iconVNode ? null : this.$props.assistiveText,
              category: "utility",
              name: "down",
              iconClass: ["slds-button__icon", "slds-button__icon_x-small"],
              variant: "none",
              button: true
            }
          );
          children.push(moreIconVNode);
        }
        const classes = ["slds-button", "slds-button_icon"];
        if (this.$props.more) {
          if (this.$props.variant === "border-filled") {
            classes.push("slds-button_icon-more");
          } else {
            classes.push("slds-button_icon-container-more");
          }
        }
        classes.push(`slds-button_icon-${this.$props.variant}`);
        if (this.$props.size)
          classes.push(`slds-button_icon-${this.$props.size}`);
        if (this.$props.stretched) {
          classes.push("slds-button_stretch");
        }
        return h(
          "button",
          {
            class: classes,
            title: this.$props.title,
            disabled: this.$props.disabled
          },
          children
        );
      },
      methods: {
        focus() {
          this.$el.focus();
        }
      }
    };
    const callbackMap = /* @__PURE__ */ new Map();
    function bind(el, handler, instance) {
      const callback = function(e) {
        if (instance.$.isUnmounted) {
          document.removeEventListener("click", callback);
          return;
        }
        if (!el.contains(e.target) && el !== e.target) {
          handler(e);
        }
      };
      callbackMap.set(el, callback);
      setTimeout(() => document.addEventListener("click", callback), 0);
    }
    function unbind(el) {
      const callback = callbackMap.get(el);
      document.removeEventListener("click", callback);
      callbackMap.delete(el);
    }
    const clickOutside = {
      created(el, { arg: { active, handler }, instance }) {
        if (typeof handler !== "function") {
          throw new Error("v-click-outside: missing required handler argument.");
        }
        if (active === true) {
          bind(el, handler, instance);
        }
      },
      updated(el, { arg: { active, handler } }, vNode) {
        if (active && !callbackMap.has(el)) {
          bind(el, handler, vNode);
        } else if (!active && callbackMap.has(el)) {
          unbind(el);
        }
      },
      unmounted(el) {
        unbind(el);
      }
    };
    const containers = /* @__PURE__ */ new Map();
    const createContainer = (el, context) => {
      const container = document.createElement("div");
      container.className = "slds-scope";
      container.appendChild(el);
      document.body.appendChild(container);
      context.$emit("detached", container);
      return container;
    };
    const alignToAnchor = (el, vnode, {
      anchorRef,
      resizeToAnchor,
      resizeToFitContent,
      alignment
    }) => {
      el.style.position = "fixed";
      const anchorRect = anchorRef.getBoundingClientRect();
      el.style.top = `${anchorRect.top + anchorRef.offsetHeight}px`;
      if (alignment === "left" || resizeToAnchor) {
        el.style.right = "auto";
        el.style.left = `${anchorRect.left}px`;
      } else if (alignment === "right") {
        el.style.left = "auto";
        el.style.right = `${document.documentElement.clientWidth - anchorRect.right}px`;
      }
      const anchorOffsetWidth = anchorRef.offsetWidth;
      if (resizeToAnchor) {
        el.style.width = `${anchorOffsetWidth}px`;
      } else if (resizeToFitContent) {
        el.style.minWidth = `${anchorOffsetWidth}px`;
        el.style.width = "auto";
      }
    };
    const getScrollbarWidth = () => {
      const scrollDiv = document.createElement("div");
      scrollDiv.style.width = "100px";
      scrollDiv.style.height = "100px";
      scrollDiv.style.overflow = "scroll";
      scrollDiv.style.position = "absolute";
      scrollDiv.style.top = "-9999px";
      document.body.appendChild(scrollDiv);
      const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      scrollDiv.remove();
      return scrollbarWidth;
    };
    const adjustForViewPortOverflow = (el, options) => {
      const dropdownRect = el.getBoundingClientRect();
      const documentClientHeight = document.documentElement.clientHeight;
      const documentClientWidth = document.documentElement.clientWidth;
      const windowDocumentVerticalDiff = documentClientHeight - window.innerHeight;
      let viewportHeight;
      if (windowDocumentVerticalDiff <= 0) {
        viewportHeight = documentClientHeight;
      } else {
        viewportHeight = window.innerHeight - getScrollbarWidth();
      }
      if (dropdownRect.x < 0) {
        if (options.anchorRef && options.anchorRef instanceof HTMLElement) {
          alignToAnchor(
            el,
            null,
            {
              ...options,
              ...{
                alignment: "left"
              }
            }
          );
        } else {
          el.style.left = `${el.offsetLeft + Math.abs(dropdownRect.x)}px`;
        }
      } else if (dropdownRect.left + dropdownRect.width > documentClientWidth) {
        if (options.anchorRef && options.anchorRef instanceof HTMLElement) {
          alignToAnchor(
            el,
            null,
            {
              ...options,
              ...{
                alignment: "right"
              }
            }
          );
        } else {
          const overflowXDiff = dropdownRect.left + dropdownRect.width - documentClientWidth - window.pageXOffset;
          el.style.left = `${dropdownRect.left - overflowXDiff}px`;
        }
      }
      let dropdownHeight = el.offsetHeight;
      let adjustedVerticalPosition;
      if (options.anchorRef && options.anchorTopOnVerticalOverflow) {
        const anchor = options.anchorRef.getBoundingClientRect();
        let anchorY = anchor.bottom;
        const boxShadow = window.getComputedStyle(el)["box-shadow"];
        if (boxShadow && boxShadow !== "none") {
          dropdownHeight += parseInt(/(?:\dpx ){2}(\d)/.exec(boxShadow)[1], 10);
        }
        if (anchorY + dropdownHeight > viewportHeight) {
          anchorY = anchor.top - dropdownHeight;
        }
        adjustedVerticalPosition = anchorY;
      } else if (dropdownRect.top + dropdownHeight > viewportHeight) {
        adjustedVerticalPosition = dropdownRect.top - (dropdownRect.top + dropdownHeight - viewportHeight);
      }
      if (adjustedVerticalPosition) {
        el.style.top = `${adjustedVerticalPosition}px`;
      }
    };
    const removeContainer = (el) => {
      let container = containers.get(el);
      if (!container)
        return;
      container.remove();
      container = null;
      containers.delete(el);
    };
    let scrollHandlerFn;
    const scrollHandler = (el, _scrollHandler, e) => {
      if (e && e.type === "scroll" && el && el.contains(e.target))
        return;
      if (typeof _scrollHandler === "function") {
        _scrollHandler(el, e);
      } else {
        removeContainer(el);
        window.removeEventListener("scroll", scrollHandlerFn, true);
        scrollHandlerFn = null;
      }
    };
    const detach = {
      created(el, binding, vnode) {
        if (binding.value.disabled)
          return;
        binding.instance.$nextTick(() => {
          const options = binding.value;
          const container = createContainer(el, binding.instance);
          vnode.container = container;
          containers.set(el, container);
          if (typeof options.customDisplayMethod === "function") {
            options.customDisplayMethod();
          }
          if (options.anchorRef && options.anchorRef instanceof HTMLElement) {
            alignToAnchor(el, vnode, options);
          }
          if (options.viewPortOverflow) {
            binding.instance.$nextTick(() => {
              if (typeof options.onRender === "function") {
                options.onRender();
                binding.instance.$nextTick(adjustForViewPortOverflow.bind(this, el, options));
              } else {
                adjustForViewPortOverflow(el, options);
              }
            });
          }
          scrollHandlerFn = scrollHandler.bind(null, el, options.scrollHandler);
          window.addEventListener("scroll", scrollHandlerFn, true);
        });
      },
      updated(el, { value: options, instance }, vnode) {
        if (options.disabled)
          return;
        if (options.anchorRef && options.anchorRef instanceof HTMLElement) {
          alignToAnchor(el, vnode, options);
        }
        if (options.viewPortOverflow) {
          instance.$nextTick(() => {
            if (typeof options.onUpdate === "function") {
              options.onUpdate();
            }
            adjustForViewPortOverflow(el, options);
          });
        }
      },
      unmounted(el) {
        removeContainer(el);
        window.removeEventListener("scroll", scrollHandlerFn, true);
        scrollHandlerFn = null;
      }
    };
    const ActionMenu_vue_vue_type_style_index_0_scoped_413e8c13_lang = "";
    const _export_sfc = (sfc, props) => {
      const target = sfc.__vccOpts || sfc;
      for (const [key, val] of props) {
        target[key] = val;
      }
      return target;
    };
    const _sfc_main$1J = {
      name: "ActionMenu",
      components: { ButtonIcon },
      directives: {
        "click-outside": clickOutside,
        "detach-element": detach
      },
      props: {
        /**
         * Determines which side of the anchor the dropdown should align to
         */
        alignment: {
          type: String,
          default: "left",
          validator(alignment) {
            if (!["left", "right"].includes(alignment)) {
              console.error("Invalid alignment. Please see documentation for valid alignments.");
              return false;
            }
            return true;
          }
        },
        // TODO - Setup a watcher on bindTo. If changed, remove existing event listener and register a new one.
        /**
         * Bind to an HTML Element. Should be focusable.
         */
        bindTo: {
          type: HTMLElement,
          default: null
        },
        /**
         * Bind to custom coordinates.
         * An object in the following format:
         * `{
                x: 50,
                y: 50
            }`
         */
        bindToCoords: {
          type: Object,
          default: null,
          validator: (value) => value.x && value.y
        },
        /**
         * Bind to current mouse position.
         */
        bindToMousePosition: {
          type: Boolean,
          default: false
        },
        buttonIconSize: {
          type: String,
          default: ""
        },
        /**
         * Disables entire action menu.
         */
        disabled: Boolean,
        /**
         * The sync-supported visibility state prop.
         */
        doShowSync: Boolean,
        /**
         * Hide on mouse leave.
         */
        hideOnMouseout: Boolean,
        /**
         * Name of the icon category.
         */
        iconCategory: {
          type: String,
          default: "utility"
        },
        /**
         * Name of the icon.
         */
        iconName: {
          type: String,
          default: "down"
        },
        /**
         * Determines the size of the icon.
         */
        iconSize: {
          type: String,
          default: ""
        },
        /**
         * Title property for the button icon
         */
        iconTitle: {
          type: String,
          default: ""
        },
        /**
         * Action menu variant. Shows menu items with link styling.
         */
        isActionMenu: {
          type: Boolean,
          default: true
        },
        /**
         * If defined, this will get called before toggling the action menu and be passed the following:
         * 1. JS click event
         * 2. Current visibility state of the action menu
         *
         * If the function returns a boolean value of true then the action menu will be toggled, otherwise, nothing will occur
         */
        onToggleRequest: {
          type: Function,
          default: null
        },
        /**
         * Adjust menu width to be equal to the anchor's width
         */
        resizeToAnchor: Boolean,
        /**
         * Label for button title and icon assistive text.
         */
        showMoreLabel: {
          type: String,
          default: "Show More"
        }
      },
      data() {
        return {
          doShow: this.doShowSync,
          isDirty: false,
          adjustedAlignment: null,
          container: null,
          focusedMenuItemIndex: null,
          focusableMenuItems: []
        };
      },
      computed: {
        doShowAnchor() {
          return !(this.bindTo || this.bindToMousePosition || this.bindToCoords);
        },
        clickOutsideOptions() {
          return {
            active: this.doShow,
            handler: this.doHide
          };
        },
        computedShowMoreIconTitle() {
          return this.$props.iconTitle || this.$props.showMoreLabel;
        },
        dropdownClasses() {
          const classes = ["slds-dropdown"];
          if (this.$props.isActionMenu)
            classes.push("slds-dropdown_actions");
          return classes;
        }
      },
      watch: {
        "$props.alignment": {
          handler(value) {
            if (!["left", "right"].includes(value)) {
              console.error("Invalid alignment. Please see documentation for valid alignments.");
              return;
            }
            this.adjustedAlignment = value;
          },
          immediate: true
        },
        doShow(value) {
          this.$emit("update:doShowSync", value);
        },
        doShowSync(value) {
          if (value === this.doShow)
            return;
          this.toggleMenu();
        }
      },
      created() {
        if (this.bindTo)
          this.bindTo.addEventListener("click", this.toggleMenu);
      },
      beforeUnmount() {
        if (this.bindTo)
          this.bindTo.removeEventListener("click", this.toggleMenu);
        this.destroy();
      },
      methods: {
        toggleMenu(e) {
          if (this.disabled || e && this.onToggleRequest && !this.onToggleRequest(e, this.doShow) || e && this.$refs.menu && (this.$refs.menu === e.target || this.$refs.menu.contains(e.target)))
            return;
          this.doShow = !this.doShow;
          if (this.doShow && !this.isKeyboardCallback) {
            window.addEventListener("scroll", this.doHide, true);
            window.addEventListener("resize", this.doHide);
            this.$nextTick(this.showMenu.bind(this, e));
            this.$emit("bindToClick", e);
          } else {
            this.destroy();
          }
        },
        showMenu() {
          this.$nextTick(() => {
            this.getFocusableMenuItems();
            if (this.focusableMenuItems.length) {
              this.focusedMenuItemIndex = 0;
              this.setMenuItemFocus();
            }
          });
        },
        onDetachRender() {
          this.$emit("detached", this.$refs.menu);
        },
        adjustAlignment(position) {
          this.adjustedAlignment = position;
        },
        destroy() {
          this.focusableMenuItems = [];
          this.doShow = false;
          window.removeEventListener("scroll", this.doHide, true);
          window.removeEventListener("resize", this.doHide);
          if (this.container) {
            this.container.remove();
            this.container = null;
          }
          if (this.doShowAnchor)
            this.$refs.anchor.firstElementChild.focus();
          this.$emit("hide");
        },
        doHide() {
          this.destroy();
        },
        mouseover(e) {
          this.$emit("mouseover", e);
        },
        mouseout(e) {
          if (this.hideOnMouseout && e.type === "mouseout" && !this.$refs.menu.contains(e.toElement || e.relatedTarget)) {
            this.destroy();
            return;
          }
          this.$emit("mouseout", e);
        },
        getFocusableMenuItems() {
          this.focusableMenuItems = [];
          this.$refs.menu.querySelectorAll(".slds-dropdown__item").forEach((item) => {
            this.focusableMenuItems.push(item.querySelector("a"));
          });
        },
        down() {
          if (!this.doShow) {
            this.toggleMenu();
          } else {
            this.focusableMenuItems[this.focusedMenuItemIndex].tabIndex = -1;
            if (this.focusedMenuItemIndex < this.focusableMenuItems.length - 1) {
              this.focusedMenuItemIndex++;
            } else {
              this.focusedMenuItemIndex = 0;
            }
            this.setMenuItemFocus();
          }
        },
        up() {
          if (!this.doShow) {
            this.toggleMenu();
          } else {
            this.focusableMenuItems[this.focusedMenuItemIndex].tabIndex = -1;
            if (this.focusedMenuItemIndex > 0) {
              this.focusedMenuItemIndex--;
            } else {
              this.focusedMenuItemIndex = this.focusableMenuItems.length - 1;
            }
            this.setMenuItemFocus();
          }
        },
        setMenuItemFocus() {
          this.focusableMenuItems[this.focusedMenuItemIndex].tabIndex = 0;
          this.focusableMenuItems[this.focusedMenuItemIndex].focus();
        }
      }
    };
    const _hoisted_1$1y = {
      key: 0,
      ref: "anchor"
    };
    const _hoisted_2$1w = ["aria-label"];
    function _sfc_render$1I(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _directive_click_outside = resolveDirective("click-outside");
      const _directive_detach_element = resolveDirective("detach-element");
      return openBlock(), createElementBlock("div", {
        class: "slds-dropdown-trigger slds-dropdown-trigger_click slds-is-open slds-show",
        onClick: _cache[6] || (_cache[6] = (...args) => $options.toggleMenu && $options.toggleMenu(...args)),
        onKeydown: [
          _cache[7] || (_cache[7] = withKeys((...args) => $options.toggleMenu && $options.toggleMenu(...args), ["enter"])),
          _cache[8] || (_cache[8] = withKeys(withModifiers((...args) => $options.up && $options.up(...args), ["prevent"]), ["up"])),
          _cache[9] || (_cache[9] = withKeys(withModifiers((...args) => $options.down && $options.down(...args), ["prevent"]), ["down"])),
          _cache[10] || (_cache[10] = withKeys(withModifiers((...args) => $options.destroy && $options.destroy(...args), ["stop"]), ["esc"]))
        ]
      }, [
        $options.doShowAnchor ? (openBlock(), createElementBlock("div", _hoisted_1$1y, [
          renderSlot(_ctx.$slots, "button", {}, () => [
            createVNode(_component_ButtonIcon, {
              "aria-haspopup": "",
              variant: "border-filled",
              disabled: _ctx.$props.disabled,
              iconSize: _ctx.$props.iconSize,
              iconCategory: _ctx.$props.iconCategory,
              iconName: _ctx.$props.iconName,
              title: $options.computedShowMoreIconTitle,
              assistiveText: $props.showMoreLabel,
              "aria-expanded": $data.doShow,
              size: _ctx.$props.buttonIconSize
            }, null, 8, ["disabled", "iconSize", "iconCategory", "iconName", "title", "assistiveText", "aria-expanded", "size"])
          ], true)
        ], 512)) : createCommentVNode("", true),
        $data.doShow ? withDirectives((openBlock(), createElementBlock("div", {
          key: 1,
          ref: "menu",
          class: normalizeClass([$options.dropdownClasses, "translateX"]),
          onMouseover: _cache[0] || (_cache[0] = (...args) => $options.mouseover && $options.mouseover(...args)),
          onMouseout: _cache[1] || (_cache[1] = (...args) => $options.mouseout && $options.mouseout(...args)),
          onKeydown: [
            _cache[2] || (_cache[2] = withKeys(withModifiers((...args) => $options.down && $options.down(...args), ["stop"]), ["down"])),
            _cache[3] || (_cache[3] = withKeys(withModifiers((...args) => $options.up && $options.up(...args), ["stop"]), ["up"])),
            _cache[4] || (_cache[4] = withKeys(withModifiers((...args) => $options.destroy && $options.destroy(...args), ["stop"]), ["esc"])),
            _cache[5] || (_cache[5] = withKeys((...args) => $options.destroy && $options.destroy(...args), ["tab"]))
          ]
        }, [
          createBaseVNode("ul", {
            class: "slds-dropdown__list",
            role: "menu",
            "aria-label": $props.showMoreLabel
          }, [
            renderSlot(_ctx.$slots, "default", {}, () => [
              createTextVNode("--- menu items go here ---")
            ], true)
          ], 8, _hoisted_2$1w)
        ], 34)), [
          [_directive_click_outside, void 0, $options.clickOutsideOptions],
          [_directive_detach_element, {
            anchorRef: _ctx.$refs.anchor,
            viewPortOverflow: true,
            anchorTopOnVerticalOverflow: true,
            onRender: $options.onDetachRender,
            onOverflowAdjustment: $options.adjustAlignment,
            resizeToAnchor: _ctx.$props.resizeToAnchor,
            scrollHandler: $options.doHide,
            alignment: _ctx.$props.alignment
          }]
        ]) : createCommentVNode("", true)
      ], 32);
    }
    const ActionMenu = /* @__PURE__ */ _export_sfc(_sfc_main$1J, [["render", _sfc_render$1I], ["__scopeId", "data-v-413e8c13"]]);
    const decodeHtml = {
      methods: {
        decodeHtml(html) {
          const txt = document.createElement("textarea");
          txt.innerHTML = html;
          return txt.value;
        }
      }
    };
    const Item_vue_vue_type_style_index_0_scoped_ffe335c1_lang = "";
    const _sfc_main$1I = {
      name: "ActionMenuItem",
      components: {
        Icon
      },
      mixins: [decodeHtml],
      props: {
        /**
         * Label for the menu item.
         */
        label: {
          type: String,
          required: true
        },
        /**
         * Disable action menu item.
         */
        disabled: Boolean,
        /**
         * Determines if this item is a read-only header.
         */
        header: Boolean,
        /**
         * Icon category.
         */
        iconCategory: {
          type: String,
          default: null
        },
        /**
         * Icon name.
         */
        iconName: {
          type: String,
          default: null
        },
        /**
         * Role for menu item. Selectable items need the role "menuitemcheckbox" or "menuitemradio"
         * Options: `menuitem` | `menuitemcheckbox` | `menuitemradio`
         */
        role: {
          type: String,
          default: "menuitem",
          validator: (value) => {
            const validRoles = [
              "menuitem",
              "menuitemcheckbox",
              "menuitemradio"
            ];
            const isValid2 = !value || validRoles.includes(value);
            if (!isValid2)
              console.error(`Valid role values are ${validRoles.join(", ")}`);
            return isValid2;
          }
        },
        /**
         * If true we add aria-checked="true" to the anchor tag
         */
        selected: Boolean
      },
      computed: {
        hasFQIcon() {
          return this.$props.iconCategory && this.$props.iconName;
        }
      },
      methods: {
        onEnter(e) {
          this.$attrs.onClick(e);
          if (!this.$props.disabled) {
            this.$parent.destroy();
          }
        },
        onClick() {
          if (!this.$props.disabled) {
            this.$parent.destroy();
          }
        }
      }
    };
    const _hoisted_1$1x = {
      key: 0,
      role: "presentation",
      class: "slds-dropdown__header slds-text-heading--label"
    };
    const _hoisted_2$1v = { role: "presentation" };
    const _hoisted_3$1f = ["aria-disabled"];
    const _hoisted_4$16 = ["role", "aria-checked"];
    const _hoisted_5$$ = ["title"];
    function _sfc_render$1H(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      return _ctx.$props.header ? (openBlock(), createElementBlock("li", _hoisted_1$1x, [
        createBaseVNode("div", _hoisted_2$1v, toDisplayString(_ctx.$props.label), 1)
      ])) : (openBlock(), createElementBlock("li", mergeProps({
        key: 1,
        class: ["slds-dropdown__item", { "slds-is-selected": _ctx.$props.selected }],
        "aria-disabled": $props.disabled,
        role: "presentation"
      }, toHandlers(_ctx.$attrs, true), {
        onClick: _cache[0] || (_cache[0] = withModifiers((...args) => $options.onClick && $options.onClick(...args), ["stop", "prevent"])),
        onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => $options.onEnter && $options.onEnter(...args), ["stop", "prevent"]), ["enter"]))
      }), [
        createBaseVNode("a", {
          role: $props.role,
          tabindex: "-1",
          "aria-checked": _ctx.$props.selected,
          class: normalizeClass({ "disabled": $props.disabled })
        }, [
          createBaseVNode("span", {
            title: $props.label,
            class: normalizeClass([{ "slds-text-color_inverse-weak": $props.disabled, "disabled": $props.disabled }, "slds-truncate"])
          }, [
            $options.hasFQIcon ? (openBlock(), createBlock(_component_Icon, {
              key: 0,
              category: _ctx.$props.iconCategory,
              name: _ctx.$props.iconName,
              size: "x-small",
              class: "slds-m-right_x-small"
            }, null, 8, ["category", "name"])) : createCommentVNode("", true),
            !_ctx.$parent.$props.isActionMenu ? (openBlock(), createBlock(_component_Icon, {
              key: 1,
              category: "utility",
              name: "check",
              size: "x-small",
              class: "slds-m-right_x-small",
              iconClass: "slds-icon_selected"
            })) : createCommentVNode("", true),
            renderSlot(_ctx.$slots, "default", {}, () => [
              createTextVNode(toDisplayString(_ctx.decodeHtml($props.label)), 1)
            ], true)
          ], 10, _hoisted_5$$)
        ], 10, _hoisted_4$16)
      ], 16, _hoisted_3$1f));
    }
    const ActionMenuItem = /* @__PURE__ */ _export_sfc(_sfc_main$1I, [["render", _sfc_render$1H], ["__scopeId", "data-v-ffe335c1"]]);
    const ActivityTimelineItem_vue_vue_type_style_index_0_scoped_2974715e_lang = "";
    const _sfc_main$1H = {
      name: "Badge",
      props: {
        /**
         * Content to be placed inside the badge component.
         */
        content: {
          type: [String, Number],
          default: ""
        },
        /**
         * Icon alignment for the badge component.
         */
        iconAlignment: {
          type: String,
          default: "left"
        },
        /**
         * Color variant for the badge component
         */
        theme: {
          type: String,
          default: "base",
          validator: (value) => {
            const validThemes = [
              "base",
              "inverse",
              "lightest",
              "success",
              "warning",
              "error"
            ];
            const isValid2 = !value || validThemes.includes(value);
            if (!isValid2)
              console.error(`Valid theme prop values are ${validThemes.join(", ")}`);
            return isValid2;
          }
        }
      },
      computed: {
        iconOnly() {
          return this.$slots.icon && !this.content;
        },
        themeClasses() {
          const contrastClasses = ["inverse", "lightest"];
          const themeClasses = ["success", "warning", "error"];
          let themeClass = "";
          if (contrastClasses.includes(this.theme))
            themeClass = `slds-badge_${this.theme}`;
          if (themeClasses.includes(this.theme))
            themeClass = `slds-theme_${this.theme}`;
          return themeClass;
        },
        badgeIconClasses() {
          const classes = ["slds-badge__icon"];
          if (this.theme === "inverse")
            classes.push("slds-badge__icon_inverse");
          if (this.iconAlignment && !this.iconOnly)
            classes.push(`slds-badge__icon_${this.iconAlignment}`);
          return classes;
        }
      }
    };
    function _sfc_render$1G(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(["slds-badge", $options.themeClasses])
      }, [
        _ctx.$slots["icon"] && $props.iconAlignment === "left" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createBaseVNode("span", {
            class: normalizeClass($options.badgeIconClasses)
          }, [
            renderSlot(_ctx.$slots, "icon")
          ], 2),
          createTextVNode(" " + toDisplayString($props.content), 1)
        ], 64)) : _ctx.$slots["icon"] && $props.iconAlignment === "right" ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createTextVNode(toDisplayString($props.content) + " ", 1),
          createBaseVNode("span", {
            class: normalizeClass($options.badgeIconClasses)
          }, [
            renderSlot(_ctx.$slots, "icon")
          ], 2)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
          createTextVNode(toDisplayString($props.content), 1)
        ], 64))
      ], 2);
    }
    const Badge = /* @__PURE__ */ _export_sfc(_sfc_main$1H, [["render", _sfc_render$1G]]);
    const SLDSButton = {
      name: "Button",
      components: { Icon },
      props: {
        /**
         * Disables the button and adds disabled styling.
         */
        disabled: Boolean,
        /**
         * Icon category.
         */
        iconCategory: {
          type: String,
          default: null
        },
        /**
         * Icon class(es)
         */
        iconClass: {
          type: [Array, String]
        },
        /**
         * Icon name.
         */
        iconName: {
          type: String,
          default: null
        },
        /**
         * Describes the position of the icon with respect to body. Options include left and right.
         * This value defaults to left.
         */
        iconPosition: {
          type: String,
          default: "left"
        },
        iconVariant: {
          type: String,
          default: "none"
        },
        /**
         * The text to be displayed inside the button.
         */
        label: {
          type: String,
          default: "Button"
        },
        /**
         * Stretches the button to full width.
         */
        stretched: Boolean,
        /**
         * The variant changes the appearance of the button. Accepted variants include base, neutral,
         * brand, outline-brand, destructive, text-destructive, inverse, and success. This value defaults to neutral.
         */
        variant: {
          type: String,
          default: "neutral",
          validator: (value) => {
            const variants = [
              "base",
              "neutral",
              "brand",
              "inverse",
              "destructive",
              "success",
              "outline-brand",
              "text-destructive"
            ];
            const isValid2 = !value || variants.includes(value);
            if (!isValid2)
              console.error(`Valid variant prop values are ${variants.join(", ")}`);
            return isValid2;
          }
        }
      },
      computed: {
        hasFQIcon() {
          return this.$props.iconCategory && this.$props.iconName;
        }
      },
      render() {
        let iconVNode;
        if (this.hasFQIcon) {
          const iconClass = ["slds-button__icon"];
          if (this.$props.iconPosition) {
            iconClass.push(`slds-button__icon_${this.$props.iconPosition}`);
          }
          if (this.$props.iconClass) {
            if (Array.isArray(this.$props.iconClass)) {
              iconClass.push(...this.$props.iconClass);
            } else {
              iconClass.push(this.$props.iconClass);
            }
          }
          iconVNode = h(
            Icon,
            {
              button: true,
              category: this.$props.iconCategory,
              iconClass,
              name: this.$props.iconName,
              variant: this.$props.iconVariant
            }
          );
        }
        const _default = this.$slots.default ? this.$slots.default() : null;
        const children = [_default || this.$props.label];
        if (iconVNode) {
          if (this.$props.iconPosition === "right") {
            children.push(iconVNode);
          } else {
            children.unshift(iconVNode);
          }
        }
        const classes = ["slds-button"];
        if (this.$props.stretched) {
          classes.push("slds-button_stretch");
        }
        if (this.$props.variant !== "base") {
          classes.push(`slds-button_${this.variant}`);
        }
        return h(
          "button",
          {
            // on: this.$listeners,
            class: classes,
            disabled: this.$props.disabled
          },
          children
        );
      },
      methods: {
        focus() {
          this.$el.focus();
        }
      }
    };
    const _sfc_main$1G = {
      name: "Card",
      props: {
        /**
         * Sets the title for the card.
         */
        title: {
          type: String,
          default: ""
        },
        /**
         * Add padding to the body of the card.
         */
        padBody: Boolean
      },
      computed: {
        showHeader() {
          return this.title || this.$slots.icon || this.$slots["header-content"] || this.$slots["title"];
        }
      }
    };
    const _hoisted_1$1w = { class: "slds-card" };
    const _hoisted_2$1u = {
      key: 0,
      class: "slds-card__header slds-grid"
    };
    const _hoisted_3$1e = { class: "slds-media slds-media_center slds-has-flexi-truncate" };
    const _hoisted_4$15 = {
      key: 0,
      class: "slds-media__figure"
    };
    const _hoisted_5$_ = { class: "slds-media__body" };
    const _hoisted_6$P = { class: "slds-card__header-title" };
    const _hoisted_7$I = ["title"];
    const _hoisted_8$E = { key: 0 };
    const _hoisted_9$D = {
      key: 1,
      class: "slds-card__footer"
    };
    function _sfc_render$1F(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("article", _hoisted_1$1w, [
        $options.showHeader ? (openBlock(), createElementBlock("div", _hoisted_2$1u, [
          createBaseVNode("div", _hoisted_3$1e, [
            _ctx.$slots["icon"] ? (openBlock(), createElementBlock("div", _hoisted_4$15, [
              renderSlot(_ctx.$slots, "icon")
            ])) : createCommentVNode("", true),
            createBaseVNode("div", _hoisted_5$_, [
              renderSlot(_ctx.$slots, "title", {}, () => [
                createBaseVNode("h2", _hoisted_6$P, [
                  createBaseVNode("span", {
                    title: $props.title,
                    class: "slds-truncate"
                  }, [
                    createBaseVNode("span", null, toDisplayString($props.title), 1)
                  ], 8, _hoisted_7$I)
                ])
              ])
            ])
          ]),
          _ctx.$slots["header-content"] ? (openBlock(), createElementBlock("div", _hoisted_8$E, [
            renderSlot(_ctx.$slots, "header-content")
          ])) : createCommentVNode("", true)
        ])) : createCommentVNode("", true),
        createBaseVNode("div", {
          class: normalizeClass([{ "slds-card__body_inner": $props.padBody }, "slds-card__body"])
        }, [
          renderSlot(_ctx.$slots, "body", {}, () => [
            createTextVNode("Card Body")
          ])
        ], 2),
        _ctx.$slots["footer"] ? (openBlock(), createElementBlock("footer", _hoisted_9$D, [
          renderSlot(_ctx.$slots, "footer")
        ])) : createCommentVNode("", true)
      ]);
    }
    const Card = /* @__PURE__ */ _export_sfc(_sfc_main$1G, [["render", _sfc_render$1F]]);
    var top = "top";
    var bottom = "bottom";
    var right = "right";
    var left = "left";
    var auto = "auto";
    var basePlacements = [top, bottom, right, left];
    var start = "start";
    var end = "end";
    var clippingParents = "clippingParents";
    var viewport = "viewport";
    var popper = "popper";
    var reference = "reference";
    var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []);
    var beforeRead = "beforeRead";
    var read = "read";
    var afterRead = "afterRead";
    var beforeMain = "beforeMain";
    var main = "main";
    var afterMain = "afterMain";
    var beforeWrite = "beforeWrite";
    var write = "write";
    var afterWrite = "afterWrite";
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
    function getNodeName(element) {
      return element ? (element.nodeName || "").toLowerCase() : null;
    }
    function getWindow(node) {
      if (node == null) {
        return window;
      }
      if (node.toString() !== "[object Window]") {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }
      return node;
    }
    function isElement(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }
    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }
    function isShadowRoot(node) {
      if (typeof ShadowRoot === "undefined") {
        return false;
      }
      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }
    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function(name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name];
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name2) {
          var value = attributes[name2];
          if (value === false) {
            element.removeAttribute(name2);
          } else {
            element.setAttribute(name2, value === true ? "" : value);
          }
        });
      });
    }
    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: "0",
          top: "0",
          margin: "0"
        },
        arrow: {
          position: "absolute"
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;
      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }
      return function() {
        Object.keys(state.elements).forEach(function(name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
          var style = styleProperties.reduce(function(style2, property) {
            style2[property] = "";
            return style2;
          }, {});
          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }
          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function(attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    }
    const applyStyles$1 = {
      name: "applyStyles",
      enabled: true,
      phase: "write",
      fn: applyStyles,
      effect: effect$2,
      requires: ["computeStyles"]
    };
    function getBasePlacement(placement) {
      return placement.split("-")[0];
    }
    var max$1 = Math.max;
    var min$1 = Math.min;
    var round$1 = Math.round;
    function getUAString() {
      var uaData = navigator.userAgentData;
      if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
        return uaData.brands.map(function(item) {
          return item.brand + "/" + item.version;
        }).join(" ");
      }
      return navigator.userAgent;
    }
    function isLayoutViewport() {
      return !/^((?!chrome|android).)*safari/i.test(getUAString());
    }
    function getBoundingClientRect(element, includeScale, isFixedStrategy) {
      if (includeScale === void 0) {
        includeScale = false;
      }
      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }
      var clientRect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;
      if (includeScale && isHTMLElement(element)) {
        scaleX = element.offsetWidth > 0 ? round$1(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round$1(clientRect.height) / element.offsetHeight || 1 : 1;
      }
      var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
      var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
      var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
      var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
      var width = clientRect.width / scaleX;
      var height = clientRect.height / scaleY;
      return {
        width,
        height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x,
        y
      };
    }
    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element);
      var width = element.offsetWidth;
      var height = element.offsetHeight;
      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }
      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }
      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width,
        height
      };
    }
    function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode();
      if (parent.contains(child)) {
        return true;
      } else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;
        do {
          if (next && parent.isSameNode(next)) {
            return true;
          }
          next = next.parentNode || next.host;
        } while (next);
      }
      return false;
    }
    function getComputedStyle$2(element) {
      return getWindow(element).getComputedStyle(element);
    }
    function isTableElement(element) {
      return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
    }
    function getDocumentElement(element) {
      return ((isElement(element) ? element.ownerDocument : (
        // $FlowFixMe[prop-missing]
        element.document
      )) || window.document).documentElement;
    }
    function getParentNode(element) {
      if (getNodeName(element) === "html") {
        return element;
      }
      return (
        // this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || // DOM Element detected
        (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element)
      );
    }
    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle$2(element).position === "fixed") {
        return null;
      }
      return element.offsetParent;
    }
    function getContainingBlock(element) {
      var isFirefox = /firefox/i.test(getUAString());
      var isIE = /Trident/i.test(getUAString());
      if (isIE && isHTMLElement(element)) {
        var elementCss = getComputedStyle$2(element);
        if (elementCss.position === "fixed") {
          return null;
        }
      }
      var currentNode = getParentNode(element);
      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }
      while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle$2(currentNode);
        if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }
      return null;
    }
    function getOffsetParent(element) {
      var window2 = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);
      while (offsetParent && isTableElement(offsetParent) && getComputedStyle$2(offsetParent).position === "static") {
        offsetParent = getTrueOffsetParent(offsetParent);
      }
      if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$2(offsetParent).position === "static")) {
        return window2;
      }
      return offsetParent || getContainingBlock(element) || window2;
    }
    function getMainAxisFromPlacement(placement) {
      return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
    }
    function within(min2, value, max2) {
      return max$1(min2, min$1(value, max2));
    }
    function withinMaxClamp(min2, value, max2) {
      var v = within(min2, value, max2);
      return v > max2 ? max2 : v;
    }
    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }
    function expandToHashMap(value, keys2) {
      return keys2.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }
    var toPaddingObject = function toPaddingObject2(padding, state) {
      padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    };
    function arrow(_ref) {
      var _state$modifiersData$;
      var state = _ref.state, name = _ref.name, options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets2 = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len2 = isVertical ? "height" : "width";
      if (!arrowElement || !popperOffsets2) {
        return;
      }
      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === "y" ? top : left;
      var maxProp = axis === "y" ? bottom : right;
      var endDiff = state.rects.reference[len2] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len2];
      var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2;
      var min2 = paddingObject[minProp];
      var max2 = clientSize - arrowRect[len2] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len2] / 2 + centerToReference;
      var offset2 = within(min2, center, max2);
      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
    }
    function effect$1(_ref2) {
      var state = _ref2.state, options = _ref2.options;
      var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
      if (arrowElement == null) {
        return;
      }
      if (typeof arrowElement === "string") {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) {
          return;
        }
      }
      if (!contains(state.elements.popper, arrowElement)) {
        return;
      }
      state.elements.arrow = arrowElement;
    }
    const arrow$1 = {
      name: "arrow",
      enabled: true,
      phase: "main",
      fn: arrow,
      effect: effect$1,
      requires: ["popperOffsets"],
      requiresIfExists: ["preventOverflow"]
    };
    function getVariation(placement) {
      return placement.split("-")[1];
    }
    var unsetSides = {
      top: "auto",
      right: "auto",
      bottom: "auto",
      left: "auto"
    };
    function roundOffsetsByDPR(_ref, win) {
      var x = _ref.x, y = _ref.y;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round$1(x * dpr) / dpr || 0,
        y: round$1(y * dpr) / dpr || 0
      };
    }
    function mapToStyles(_ref2) {
      var _Object$assign2;
      var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
      var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
        x,
        y
      }) : {
        x,
        y
      };
      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty("x");
      var hasY = offsets.hasOwnProperty("y");
      var sideX = left;
      var sideY = top;
      var win = window;
      if (adaptive) {
        var offsetParent = getOffsetParent(popper2);
        var heightProp = "clientHeight";
        var widthProp = "clientWidth";
        if (offsetParent === getWindow(popper2)) {
          offsetParent = getDocumentElement(popper2);
          if (getComputedStyle$2(offsetParent).position !== "static" && position === "absolute") {
            heightProp = "scrollHeight";
            widthProp = "scrollWidth";
          }
        }
        offsetParent = offsetParent;
        if (placement === top || (placement === left || placement === right) && variation === end) {
          sideY = bottom;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
            // $FlowFixMe[prop-missing]
            offsetParent[heightProp]
          );
          y -= offsetY - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === left || (placement === top || placement === bottom) && variation === end) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
            // $FlowFixMe[prop-missing]
            offsetParent[widthProp]
          );
          x -= offsetX - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }
      var commonStyles = Object.assign({
        position
      }, adaptive && unsetSides);
      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x,
        y
      }, getWindow(popper2)) : {
        x,
        y
      };
      x = _ref4.x;
      y = _ref4.y;
      if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }
      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
    }
    function computeStyles(_ref5) {
      var state = _ref5.state, options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration,
        isFixed: state.options.strategy === "fixed"
      };
      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive,
          roundOffsets
        })));
      }
      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: "absolute",
          adaptive: false,
          roundOffsets
        })));
      }
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-placement": state.placement
      });
    }
    const computeStyles$1 = {
      name: "computeStyles",
      enabled: true,
      phase: "beforeWrite",
      fn: computeStyles,
      data: {}
    };
    var passive = {
      passive: true
    };
    function effect(_ref) {
      var state = _ref.state, instance = _ref.instance, options = _ref.options;
      var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
      var window2 = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.addEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.addEventListener("resize", instance.update, passive);
      }
      return function() {
        if (scroll) {
          scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener("scroll", instance.update, passive);
          });
        }
        if (resize) {
          window2.removeEventListener("resize", instance.update, passive);
        }
      };
    }
    const eventListeners = {
      name: "eventListeners",
      enabled: true,
      phase: "write",
      fn: function fn() {
      },
      effect,
      data: {}
    };
    var hash$1 = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash$1[matched];
      });
    }
    var hash = {
      start: "end",
      end: "start"
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
      });
    }
    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft,
        scrollTop
      };
    }
    function getWindowScrollBarX(element) {
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }
    function getViewportRect(element, strategy) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0;
      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = isLayoutViewport();
        if (layoutViewport || !layoutViewport && strategy === "fixed") {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }
      return {
        width,
        height,
        x: x + getWindowScrollBarX(element),
        y
      };
    }
    function getDocumentRect(element) {
      var _element$ownerDocumen;
      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max$1(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max$1(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;
      if (getComputedStyle$2(body || html).direction === "rtl") {
        x += max$1(html.clientWidth, body ? body.clientWidth : 0) - width;
      }
      return {
        width,
        height,
        x,
        y
      };
    }
    function isScrollParent(element) {
      var _getComputedStyle = getComputedStyle$2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }
    function getScrollParent(node) {
      if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
        return node.ownerDocument.body;
      }
      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }
      return getScrollParent(getParentNode(node));
    }
    function listScrollParents(element, list) {
      var _element$ownerDocumen;
      if (list === void 0) {
        list = [];
      }
      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : (
        // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
        updatedList.concat(listScrollParents(getParentNode(target)))
      );
    }
    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }
    function getInnerBoundingClientRect(element, strategy) {
      var rect = getBoundingClientRect(element, false, strategy === "fixed");
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }
    function getClientRectFromMixedType(element, clippingParent, strategy) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    }
    function getClippingParents(element) {
      var clippingParents2 = listScrollParents(getParentNode(element));
      var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle$2(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
      if (!isElement(clipperElement)) {
        return [];
      }
      return clippingParents2.filter(function(clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
      });
    }
    function getClippingRect(element, boundary, rootBoundary, strategy) {
      var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
      var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents2[0];
      var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = max$1(rect.top, accRect.top);
        accRect.right = min$1(rect.right, accRect.right);
        accRect.bottom = min$1(rect.bottom, accRect.bottom);
        accRect.left = max$1(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent, strategy));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }
    function computeOffsets(_ref) {
      var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference2.x + reference2.width / 2 - element.width / 2;
      var commonY = reference2.y + reference2.height / 2 - element.height / 2;
      var offsets;
      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference2.y - element.height
          };
          break;
        case bottom:
          offsets = {
            x: commonX,
            y: reference2.y + reference2.height
          };
          break;
        case right:
          offsets = {
            x: reference2.x + reference2.width,
            y: commonY
          };
          break;
        case left:
          offsets = {
            x: reference2.x - element.width,
            y: commonY
          };
          break;
        default:
          offsets = {
            x: reference2.x,
            y: reference2.y
          };
      }
      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
      if (mainAxis != null) {
        var len2 = mainAxis === "y" ? "height" : "width";
        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference2[len2] / 2 - element[len2] / 2);
            break;
          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference2[len2] / 2 - element[len2] / 2);
            break;
        }
      }
      return offsets;
    }
    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets2 = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: "absolute",
        placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset;
      if (elementContext === popper && offsetData) {
        var offset2 = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
          overflowOffsets[key] += offset2[axis] * multiply;
        });
      }
      return overflowOffsets;
    }
    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
        return getVariation(placement2) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function(placement2) {
        return allowedAutoPlacements.indexOf(placement2) >= 0;
      });
      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
      }
      var overflows = allowedPlacements.reduce(function(acc, placement2) {
        acc[placement2] = detectOverflow(state, {
          placement: placement2,
          boundary,
          rootBoundary,
          padding
        })[getBasePlacement(placement2)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
      });
    }
    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }
      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }
    function flip(_ref) {
      var state = _ref.state, options = _ref.options, name = _ref.name;
      if (state.modifiersData[name]._skip) {
        return;
      }
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
        return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
          placement: placement2,
          boundary,
          rootBoundary,
          padding,
          flipVariations,
          allowedAutoPlacements
        }) : placement2);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = /* @__PURE__ */ new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements2[0];
      for (var i2 = 0; i2 < placements2.length; i2++) {
        var placement = placements2[i2];
        var _basePlacement = getBasePlacement(placement);
        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len2 = isVertical ? "width" : "height";
        var overflow = detectOverflow(state, {
          placement,
          boundary,
          rootBoundary,
          altBoundary,
          padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
        if (referenceRect[len2] > popperRect[len2]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }
        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];
        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }
        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }
        if (checks.every(function(check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }
        checksMap.set(placement, checks);
      }
      if (makeFallbackChecks) {
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop2(_i2) {
          var fittingPlacement = placements2.find(function(placement2) {
            var checks2 = checksMap.get(placement2);
            if (checks2) {
              return checks2.slice(0, _i2).every(function(check) {
                return check;
              });
            }
          });
          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };
        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);
          if (_ret === "break")
            break;
        }
      }
      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    }
    const flip$1 = {
      name: "flip",
      enabled: true,
      phase: "main",
      fn: flip,
      requiresIfExists: ["offset"],
      data: {
        _skip: false
      }
    };
    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }
      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }
    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function(side) {
        return overflow[side] >= 0;
      });
    }
    function hide(_ref) {
      var state = _ref.state, name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: "reference"
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets,
        popperEscapeOffsets,
        isReferenceHidden,
        hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-reference-hidden": isReferenceHidden,
        "data-popper-escaped": hasPopperEscaped
      });
    }
    const hide$1 = {
      name: "hide",
      enabled: true,
      phase: "main",
      requiresIfExists: ["preventOverflow"],
      fn: hide
    };
    function distanceAndSkiddingToXY(placement, rects, offset2) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
      var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
        placement
      })) : offset2, skidding = _ref[0], distance = _ref[1];
      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }
    function offset$1(_ref2) {
      var state = _ref2.state, options = _ref2.options, name = _ref2.name;
      var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }
      state.modifiersData[name] = data;
    }
    const offset$2 = {
      name: "offset",
      enabled: true,
      phase: "main",
      requires: ["popperOffsets"],
      fn: offset$1
    };
    function popperOffsets(_ref) {
      var state = _ref.state, name = _ref.name;
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: "absolute",
        placement: state.placement
      });
    }
    const popperOffsets$1 = {
      name: "popperOffsets",
      enabled: true,
      phase: "read",
      fn: popperOffsets,
      data: {}
    };
    function getAltAxis(axis) {
      return axis === "x" ? "y" : "x";
    }
    function preventOverflow(_ref) {
      var state = _ref.state, options = _ref.options, name = _ref.name;
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary,
        rootBoundary,
        padding,
        altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets2 = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };
      if (!popperOffsets2) {
        return;
      }
      if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === "y" ? top : left;
        var altSide = mainAxis === "y" ? bottom : right;
        var len2 = mainAxis === "y" ? "height" : "width";
        var offset2 = popperOffsets2[mainAxis];
        var min2 = offset2 + overflow[mainSide];
        var max2 = offset2 - overflow[altSide];
        var additive = tether ? -popperRect[len2] / 2 : 0;
        var minLen = variation === start ? referenceRect[len2] : popperRect[len2];
        var maxLen = variation === start ? -popperRect[len2] : -referenceRect[len2];
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide];
        var arrowLen = within(0, referenceRect[len2], arrowRect[len2]);
        var minOffset = isBasePlacement ? referenceRect[len2] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len2] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset2 + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min$1(min2, tetherMin) : min2, offset2, tether ? max$1(max2, tetherMax) : max2);
        popperOffsets2[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset2;
      }
      if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === "x" ? top : left;
        var _altSide = mainAxis === "x" ? bottom : right;
        var _offset = popperOffsets2[altAxis];
        var _len = altAxis === "y" ? "height" : "width";
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets2[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }
      state.modifiersData[name] = data;
    }
    const preventOverflow$1 = {
      name: "preventOverflow",
      enabled: true,
      phase: "main",
      fn: preventOverflow,
      requiresIfExists: ["offset"]
    };
    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }
    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round$1(rect.width) / element.offsetWidth || 1;
      var scaleY = round$1(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    }
    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }
      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }
      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }
    function order(modifiers) {
      var map2 = /* @__PURE__ */ new Map();
      var visited = /* @__PURE__ */ new Set();
      var result = [];
      modifiers.forEach(function(modifier) {
        map2.set(modifier.name, modifier);
      });
      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
          if (!visited.has(dep)) {
            var depModifier = map2.get(dep);
            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }
      modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) {
          sort(modifier);
        }
      });
      return result;
    }
    function orderModifiers(modifiers) {
      var orderedModifiers = order(modifiers);
      return modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }
    function debounce$1(fn) {
      var pending;
      return function() {
        if (!pending) {
          pending = new Promise(function(resolve2) {
            Promise.resolve().then(function() {
              pending = void 0;
              resolve2(fn());
            });
          });
        }
        return pending;
      };
    }
    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function(merged2, current) {
        var existing = merged2[current.name];
        merged2[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged2;
      }, {});
      return Object.keys(merged).map(function(key) {
        return merged[key];
      });
    }
    var DEFAULT_OPTIONS = {
      placement: "bottom",
      modifiers: [],
      strategy: "absolute"
    };
    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === "function");
      });
    }
    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }
      var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper2(reference2, popper2, options) {
        if (options === void 0) {
          options = defaultOptions;
        }
        var state = {
          placement: "bottom",
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference2,
            popper: popper2
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state,
          setOptions: function setOptions(setOptionsAction) {
            var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options2);
            state.scrollParents = {
              reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
              popper: listScrollParents(popper2)
            };
            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
            state.orderedModifiers = orderedModifiers.filter(function(m) {
              return m.enabled;
            });
            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }
            var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
            if (!areValidElements(reference3, popper3)) {
              return;
            }
            state.rects = {
              reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
              popper: getLayoutRect(popper3)
            };
            state.reset = false;
            state.placement = state.options.placement;
            state.orderedModifiers.forEach(function(modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            for (var index = 0; index < state.orderedModifiers.length; index++) {
              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }
              var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
              if (typeof fn === "function") {
                state = fn({
                  state,
                  options: _options,
                  name,
                  instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce$1(function() {
            return new Promise(function(resolve2) {
              instance.forceUpdate();
              resolve2(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };
        if (!areValidElements(reference2, popper2)) {
          return instance;
        }
        instance.setOptions(options).then(function(state2) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state2);
          }
        });
        function runModifierEffects() {
          state.orderedModifiers.forEach(function(_ref) {
            var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect2 = _ref.effect;
            if (typeof effect2 === "function") {
              var cleanupFn = effect2({
                state,
                name,
                instance,
                options: options2
              });
              var noopFn = function noopFn2() {
              };
              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }
        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function(fn) {
            return fn();
          });
          effectCleanupFns = [];
        }
        return instance;
      };
    }
    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$2, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /* @__PURE__ */ popperGenerator({
      defaultModifiers
    });
    const Tooltip_vue_vue_type_style_index_0_scoped_0233e977_lang = "";
    const alignmentPositions$1 = {
      top: "top",
      "top left": "top-end",
      "top right": "top-start",
      right: "right",
      "right top": "right-end",
      "right bottom": "right-start",
      bottom: "bottom",
      "bottom left": "bottom-end",
      "bottom right": "bottom-start",
      left: "left",
      "left top": "left-end",
      "left bottom": "left-start"
    };
    const isAlignmentValid$1 = (alignment) => Object.keys(alignmentPositions$1).find((value) => value === alignment);
    const _sfc_main$1F = {
      name: "Tooltip",
      components: { ButtonIcon },
      mixins: [decodeHtml],
      props: {
        /**
         * Alignment of the Tooltip relative to the element that triggers it.
         */
        alignment: {
          type: String,
          default: "top",
          validator(alignment) {
            return isAlignmentValid$1(alignment);
          }
        },
        /**
         * Assistive text for accessibility.
         */
        assistiveText: {
          type: String,
          default: "Help"
        },
        /**
         * Title prop for button icon
         */
        iconTitle: {
          type: String,
          default: ""
        },
        /**
         * Amount of padding in px from edge of viewport if overflow is detected.
         */
        overflowPadding: {
          type: Number,
          default: 5
        },
        /**
         * Position attribute for popover body.
         */
        position: {
          type: String,
          default: "fixed",
          validator(position) {
            return ["absolute", "fixed"].find((value) => value === position);
          }
        },
        /**
         * Trigger element or function. If provided, the source slot will not be rendered.
         */
        source: {
          type: [HTMLElement, Function],
          default: null
        },
        /**
         * Content inside Tooltip.
         */
        text: {
          type: String,
          default: ""
        }
      },
      data() {
        return {
          localSource: null,
          isOpen: false,
          tooltipId: getGUID(),
          popperInstance: null
        };
      },
      computed: {
        computedText() {
          return this.$props.text.replaceAll(/(<br>|<br \/>)/gm, "\n").replaceAll("<br />", "\n").replaceAll("&lt;br /&gt;", "\n").replaceAll(/(\\r\\n|\\n|\\r)/gm, "\n");
        },
        computedIconTitle() {
          return this.$props.iconTitle || this.$props.assistiveText;
        }
      },
      watch: {
        "$props.source": {
          handler() {
            if (!this.$props.source)
              return;
            if (this.$slots.source) {
              throw new Error("Cannot set source prop and provide a default source");
            }
            this.processSource(this.$props.source);
          },
          immediate: true
        },
        alignment() {
          if (isAlignmentValid$1(this.$props.alignment)) {
            this.popperInstance.setOptions({
              placement: alignmentPositions$1[this.$props.alignment]
            });
          }
        }
      },
      mounted() {
        if (this.$props.source)
          return;
        let source;
        if (this.$slots.source) {
          source = this.$refs.source;
        } else {
          source = this.$refs.defaultSource.$el;
        }
        this.processSource(source);
      },
      beforeUnmount() {
        this.removeListeners();
      },
      methods: {
        async processSource(source) {
          this.removeListeners();
          this.localSource = typeof source === "function" ? await source() : source;
          this.localSource.setAttribute("aria-describedby", this.tooltipId);
          this.addListeners();
          if (this.popperInstance) {
            this.popperInstance.state.elements.reference = this.localSource;
          } else {
            this.$nextTick(this.setPopperInstance);
          }
        },
        setPopperInstance() {
          this.popperInstance = createPopper(this.localSource, this.$refs.tooltip, {
            strategy: this.$props.position,
            placement: alignmentPositions$1[this.$props.alignment],
            modifiers: [
              {
                name: "offset",
                options: {
                  offset: ({ placement }) => {
                    if (placement.includes("end")) {
                      return [16, 14];
                    }
                    if (placement.includes("start")) {
                      return [-16, 14];
                    }
                    return [0, 14];
                  }
                }
              },
              {
                name: "preventOverflow",
                options: {
                  padding: this.$props.overflowPadding
                }
              }
            ]
          });
          this.$nextTick(() => {
            if (document.activeElement === this.localSource)
              this.enter();
          });
        },
        addListeners() {
          const showEvents = ["mouseenter", "focus"];
          const hideEvents = ["mouseleave", "blur"];
          showEvents.forEach((event) => {
            this.localSource.addEventListener(event, this.enter);
          });
          hideEvents.forEach((event) => {
            this.localSource.addEventListener(event, this.leave);
          });
        },
        removeListeners() {
          if (!this.localSource)
            return;
          this.localSource.removeEventListener("focus", this.enter);
          this.localSource.removeEventListener("mouseenter", this.enter);
          this.localSource.removeEventListener("blur", this.leave);
          this.localSource.removeEventListener("mouseleave", this.leave);
        },
        enter() {
          this.isOpen = true;
          this.popperInstance.update();
        },
        leave() {
          if (document.activeElement === this.localSource)
            return;
          this.isOpen = false;
        }
      }
    };
    const _withScopeId$v = (n) => (pushScopeId("data-v-0233e977"), n = n(), popScopeId(), n);
    const _hoisted_1$1v = {
      key: 0,
      ref: "source"
    };
    const _hoisted_2$1t = ["id"];
    const _hoisted_3$1d = { class: "slds-popover__body" };
    const _hoisted_4$14 = /* @__PURE__ */ _withScopeId$v(() => /* @__PURE__ */ createBaseVNode("div", {
      id: "arrow",
      "data-popper-arrow": ""
    }, null, -1));
    function _sfc_render$1E(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      return openBlock(), createElementBlock("div", null, [
        !_ctx.$props.source ? (openBlock(), createElementBlock("span", _hoisted_1$1v, [
          renderSlot(_ctx.$slots, "source", {}, () => [
            createVNode(_component_ButtonIcon, {
              ref: "defaultSource",
              "aria-describedby": $data.tooltipId,
              "aria-disabled": "true",
              iconCategory: "utility",
              iconName: "info",
              iconSize: "xx-small",
              assistiveText: _ctx.$props.assistiveText,
              title: $options.computedIconTitle
            }, null, 8, ["aria-describedby", "assistiveText", "title"])
          ], true)
        ], 512)) : createCommentVNode("", true),
        withDirectives(createBaseVNode("div", {
          id: $data.tooltipId,
          ref: "tooltip",
          class: "slds-popover slds-popover_tooltip",
          role: "tooltip"
        }, [
          createBaseVNode("div", _hoisted_3$1d, [
            renderSlot(_ctx.$slots, "default", {}, () => [
              createTextVNode(toDisplayString(_ctx.decodeHtml($options.computedText)), 1)
            ], true)
          ]),
          _hoisted_4$14
        ], 8, _hoisted_2$1t), [
          [vShow, $data.isOpen]
        ])
      ]);
    }
    const Tooltip = /* @__PURE__ */ _export_sfc(_sfc_main$1F, [["render", _sfc_render$1E], ["__scopeId", "data-v-0233e977"]]);
    const Checkbox_vue_vue_type_style_index_0_scoped_6891711e_lang = "";
    const defaultLabels$5 = () => ({
      name: "Default Label",
      stateOn: "Enabled",
      stateOff: "Disabled",
      required: "required"
    });
    const _sfc_main$1E = {
      name: "Checkbox",
      components: {
        Icon,
        Tooltip
      },
      mixins: [decodeHtml],
      props: {
        /**
         * The aria-labelledby attribute establishes relationships between objects and their label(s), and its value should be one or more element IDs, which refer to elements that have the text needed for labeling. List multiple element IDs in a space delimited fashion.
         */
        ariaLabeledBy: {
          type: String,
          default: ""
        },
        /**
         * Disables the Checkbox and prevents clicking it.
         */
        disabled: Boolean,
        /**
         * An array of errors used for checkbox validation.
         */
        errors: {
          type: Array,
          default: () => []
        },
        /**
         * Content for Tooltip component that is displayed next to the label. Only for use with form element variant.
         */
        helpText: {
          type: String,
          default: ""
        },
        /**
         * Adds assistive text class to visually hide checkbox label.
         */
        hideLabel: Boolean,
        /**
         * Adds a tertiary state to no-slide checkboxes.
         */
        indeterminate: Boolean,
        /**
         * Shows label as a block element.
         */
        isFormElement: Boolean,
        /**
         * Labels object for the checkbox
         */
        labels: {
          type: Object,
          default: () => {
          },
          validator: (value) => {
            if (!value || !value.name) {
              console.error('You must provide a "name" label, because it is the minimum requirement for accessibility. If you do not want to render the label than set hideLabel to true and the "name" label will be used as assistive text.');
              return false;
            }
            return true;
          }
        },
        /**
         * v-model binding.
         */
        modelValue: Boolean,
        /**
         * Displays the value of the input, but does not allow changes.
         */
        readonly: Boolean,
        /**
         * Highlights the Checkbox as a required field (does not perform any validation).
         */
        required: Boolean,
        /**
         * Shows state labels for toggle variant.
         */
        showStateLabels: Boolean,
        /**
         * Checkbox Toggle variant.
         */
        slide: Boolean,
        // TODO - Change to 'toggle' in next major release to align with SLDS terminology
        toggleBuffer: {
          type: Number,
          default: 0
        }
      },
      data() {
        return {
          checkboxId: getGUID(),
          errorId: getGUID(),
          labelId: getGUID()
        };
      },
      computed: {
        computedLabels() {
          const globals = Object.hasOwn(this, "$__getGlobalLabels") ? this.$__getGlobalLabels().checkbox || {} : {};
          return {
            ...defaultLabels$5(),
            ...globals,
            ...this.$props.labels
          };
        },
        hasErrors() {
          return this.$props.errors.length && !this.$props.slide;
        },
        checkboxClass() {
          return !this.slide ? "slds-form-element__control" : "slds-checkbox_toggle slds-grid";
        }
      },
      watch: {
        modelValue(checked) {
          if (this.$refs.checkbox) {
            this.$refs.checkbox.checked = checked;
          }
          if (checked) {
            this.$emit("update:indeterminate", false);
          }
        },
        indeterminate: {
          handler(state) {
            if (!this.$props.slide) {
              this.$nextTick(() => {
                this.$refs.checkbox.indeterminate = state;
                if (state) {
                  this.$emit("update:modelValue", false);
                }
              });
            }
          },
          immediate: true
        }
      },
      mounted() {
        if (this.$refs.checkbox) {
          this.$refs.checkbox.checked = this.$props.modelValue;
        }
      },
      methods: {
        onClick(e) {
          if (!e.clientX && !e.clientY)
            return;
          if (e.currentTarget.checked && this.toggleBuffer) {
            this.$refs.checkbox.disabled = true;
            setTimeout(() => {
              this.$refs.checkbox.disabled = false;
            }, this.toggleBuffer);
          }
        },
        onInput(e) {
          this.$emit("update:modelValue", e.target.checked);
        }
      }
    };
    const _withScopeId$u = (n) => (pushScopeId("data-v-6891711e"), n = n(), popScopeId(), n);
    const _hoisted_1$1u = ["title"];
    const _hoisted_2$1s = ["checked", "disabled", "aria-describedby"];
    const _hoisted_3$1c = ["id"];
    const _hoisted_4$13 = /* @__PURE__ */ _withScopeId$u(() => /* @__PURE__ */ createBaseVNode("span", { class: "slds-checkbox_faux" }, null, -1));
    const _hoisted_5$Z = {
      key: 0,
      class: "slds-checkbox_on"
    };
    const _hoisted_6$O = {
      key: 1,
      class: "slds-checkbox_off"
    };
    const _hoisted_7$H = ["for"];
    const _hoisted_8$D = ["title"];
    const _hoisted_9$C = { class: "slds-form-element__control" };
    const _hoisted_10$u = {
      key: 0,
      class: "slds-checkbox slds-checkbox_standalone"
    };
    const _hoisted_11$q = ["id", "aria-describedby", "checked", "disabled"];
    const _hoisted_12$m = /* @__PURE__ */ _withScopeId$u(() => /* @__PURE__ */ createBaseVNode("span", { class: "slds-checkbox_faux" }, null, -1));
    const _hoisted_13$m = {
      key: 2,
      class: "slds-form-element__control"
    };
    const _hoisted_14$j = {
      key: 0,
      class: "slds-checkbox"
    };
    const _hoisted_15$h = ["title"];
    const _hoisted_16$f = ["id", "checked", "disabled", "aria-describedby", "aria-labelledby"];
    const _hoisted_17$d = ["id", "for"];
    const _hoisted_18$d = /* @__PURE__ */ _withScopeId$u(() => /* @__PURE__ */ createBaseVNode("span", { class: "slds-checkbox_faux" }, null, -1));
    const _hoisted_19$d = { class: "slds-form-element__label slds-m-left_x-small" };
    const _hoisted_20$d = ["id"];
    function _sfc_render$1D(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_Tooltip = resolveComponent("Tooltip");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([{ "slds-has-error": $options.hasErrors }, "slds-form-element"])
      }, [
        $props.slide ? (openBlock(), createElementBlock("label", {
          key: 0,
          class: normalizeClass($options.checkboxClass)
        }, [
          !$props.readonly ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            $props.required ? (openBlock(), createElementBlock("abbr", {
              key: 0,
              class: "slds-required",
              title: $options.computedLabels.required
            }, "*", 8, _hoisted_1$1u)) : createCommentVNode("", true),
            createBaseVNode("span", {
              class: normalizeClass(["slds-form-element__label slds-m-bottom_none", { "slds-assistive-text": _ctx.$props.hideLabel }])
            }, [
              createBaseVNode("span", null, toDisplayString(_ctx.decodeHtml($options.computedLabels.name)), 1)
            ], 2),
            createBaseVNode("input", mergeProps({
              ref: "checkbox",
              checked: _ctx.$props.modelValue || false,
              disabled: $props.disabled,
              "aria-describedby": $data.labelId,
              type: "checkbox",
              onClick: _cache[0] || (_cache[0] = (...args) => $options.onClick && $options.onClick(...args)),
              onInput: _cache[1] || (_cache[1] = (...args) => $options.onInput && $options.onInput(...args))
            }, toHandlers(_ctx.$attrs, true)), null, 16, _hoisted_2$1s),
            createBaseVNode("span", {
              id: $data.labelId,
              class: "slds-checkbox_faux_container",
              "aria-live": "assertive"
            }, [
              _hoisted_4$13,
              $props.showStateLabels ? (openBlock(), createElementBlock("span", _hoisted_5$Z, toDisplayString(_ctx.decodeHtml($options.computedLabels.stateOn)), 1)) : createCommentVNode("", true),
              $props.showStateLabels ? (openBlock(), createElementBlock("span", _hoisted_6$O, toDisplayString(_ctx.decodeHtml($options.computedLabels.stateOff)), 1)) : createCommentVNode("", true)
            ], 8, _hoisted_3$1c)
          ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            withDirectives(createVNode(_component_Icon, {
              category: "utility",
              name: "check",
              size: "x-small",
              class: "slds-current-color"
            }, null, 512), [
              [vShow, _ctx.$props.modelValue]
            ]),
            withDirectives(createVNode(_component_Icon, {
              category: "utility",
              name: "steps",
              size: "x-small",
              class: "slds-current-color"
            }, null, 512), [
              [vShow, !_ctx.$props.modelValue]
            ])
          ], 64))
        ], 2)) : $props.isFormElement ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createBaseVNode("label", {
            class: "slds-form-element__label",
            for: $data.checkboxId
          }, [
            $props.required ? (openBlock(), createElementBlock("abbr", {
              key: 0,
              class: "slds-required",
              title: $options.computedLabels.required
            }, "*", 8, _hoisted_8$D)) : createCommentVNode("", true),
            createTextVNode(" " + toDisplayString(_ctx.decodeHtml($options.computedLabels.name)), 1)
          ], 8, _hoisted_7$H),
          _ctx.$props.helpText ? (openBlock(), createBlock(_component_Tooltip, {
            key: 0,
            class: "slds-form-element__icon",
            alignment: "top right",
            text: _ctx.$props.helpText
          }, null, 8, ["text"])) : createCommentVNode("", true),
          createBaseVNode("div", _hoisted_9$C, [
            !$props.readonly ? (openBlock(), createElementBlock("span", _hoisted_10$u, [
              createBaseVNode("input", mergeProps({
                id: $data.checkboxId,
                ref: "checkbox",
                "aria-describedby": _ctx.$props.errors.length ? $data.errorId : null,
                checked: _ctx.$props.modelValue || false,
                disabled: $props.disabled,
                type: "checkbox",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.onClick && $options.onClick(...args)),
                onInput: _cache[3] || (_cache[3] = (...args) => $options.onInput && $options.onInput(...args))
              }, toHandlers(_ctx.$attrs, true)), null, 16, _hoisted_11$q),
              _hoisted_12$m
            ])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              withDirectives(createVNode(_component_Icon, {
                category: "utility",
                name: "check",
                size: "x-small",
                class: "slds-current-color"
              }, null, 512), [
                [vShow, _ctx.$props.modelValue]
              ]),
              withDirectives(createVNode(_component_Icon, {
                category: "utility",
                name: "steps",
                size: "x-small",
                class: "slds-current-color"
              }, null, 512), [
                [vShow, !_ctx.$props.modelValue]
              ])
            ], 64))
          ])
        ], 64)) : (openBlock(), createElementBlock("div", _hoisted_13$m, [
          !$props.readonly ? (openBlock(), createElementBlock("div", _hoisted_14$j, [
            $props.required ? (openBlock(), createElementBlock("abbr", {
              key: 0,
              class: "slds-required",
              title: $options.computedLabels.required
            }, "*", 8, _hoisted_15$h)) : createCommentVNode("", true),
            createBaseVNode("input", mergeProps({
              id: $data.checkboxId,
              ref: "checkbox",
              checked: _ctx.$props.modelValue || false,
              disabled: $props.disabled,
              "aria-describedby": _ctx.$props.errors.length ? $data.errorId : null,
              "aria-labelledby": `${$data.labelId} ${_ctx.$props.ariaLabeledBy}`,
              type: "checkbox",
              onClick: _cache[4] || (_cache[4] = (...args) => $options.onClick && $options.onClick(...args)),
              onInput: _cache[5] || (_cache[5] = (...args) => $options.onInput && $options.onInput(...args))
            }, toHandlers(_ctx.$attrs, true)), null, 16, _hoisted_16$f),
            createBaseVNode("label", {
              id: $data.labelId,
              for: $data.checkboxId,
              class: "slds-checkbox__label"
            }, [
              _hoisted_18$d,
              createBaseVNode("span", {
                class: normalizeClass(["slds-form-element__label", { "slds-assistive-text": _ctx.$props.hideLabel }])
              }, toDisplayString(_ctx.decodeHtml($options.computedLabels.name)), 3)
            ], 8, _hoisted_17$d)
          ])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            withDirectives(createVNode(_component_Icon, {
              category: "utility",
              name: "check",
              size: "x-small",
              class: "slds-current-color"
            }, null, 512), [
              [vShow, _ctx.$props.modelValue]
            ]),
            withDirectives(createVNode(_component_Icon, {
              category: "utility",
              name: "steps",
              size: "x-small",
              class: "slds-current-color"
            }, null, 512), [
              [vShow, !_ctx.$props.modelValue]
            ]),
            createBaseVNode("span", _hoisted_19$d, toDisplayString(_ctx.decodeHtml($options.computedLabels.name)), 1)
          ], 64))
        ])),
        _ctx.$props.errors.length ? (openBlock(), createElementBlock("div", {
          key: 3,
          id: $data.errorId,
          class: "slds-form-element__help"
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.errors, (error, index) => {
            return openBlock(), createElementBlock("p", { key: index }, toDisplayString(_ctx.decodeHtml(error)), 1);
          }), 128))
        ], 8, _hoisted_20$d)) : createCommentVNode("", true)
      ], 2);
    }
    const Checkbox = /* @__PURE__ */ _export_sfc(_sfc_main$1E, [["render", _sfc_render$1D], ["__scopeId", "data-v-6891711e"]]);
    var colorName = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
    const cssKeywords = colorName;
    const reverseKeywords = {};
    for (const key of Object.keys(cssKeywords)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
    const convert$1 = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    var conversions$2 = convert$1;
    for (const model of Object.keys(convert$1)) {
      if (!("channels" in convert$1[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert$1[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert$1[model].labels.length !== convert$1[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      const { channels, labels } = convert$1[model];
      delete convert$1[model].channels;
      delete convert$1[model].labels;
      Object.defineProperty(convert$1[model], "channels", { value: channels });
      Object.defineProperty(convert$1[model], "labels", { value: labels });
    }
    convert$1.rgb.hsl = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const min2 = Math.min(r, g, b);
      const max2 = Math.max(r, g, b);
      const delta = max2 - min2;
      let h2;
      let s;
      if (max2 === min2) {
        h2 = 0;
      } else if (r === max2) {
        h2 = (g - b) / delta;
      } else if (g === max2) {
        h2 = 2 + (b - r) / delta;
      } else if (b === max2) {
        h2 = 4 + (r - g) / delta;
      }
      h2 = Math.min(h2 * 60, 360);
      if (h2 < 0) {
        h2 += 360;
      }
      const l = (min2 + max2) / 2;
      if (max2 === min2) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max2 + min2);
      } else {
        s = delta / (2 - max2 - min2);
      }
      return [h2, s * 100, l * 100];
    };
    convert$1.rgb.hsv = function(rgb) {
      let rdif;
      let gdif;
      let bdif;
      let h2;
      let s;
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const v = Math.max(r, g, b);
      const diff2 = v - Math.min(r, g, b);
      const diffc = function(c) {
        return (v - c) / 6 / diff2 + 1 / 2;
      };
      if (diff2 === 0) {
        h2 = 0;
        s = 0;
      } else {
        s = diff2 / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h2 = bdif - gdif;
        } else if (g === v) {
          h2 = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h2 = 2 / 3 + gdif - rdif;
        }
        if (h2 < 0) {
          h2 += 1;
        } else if (h2 > 1) {
          h2 -= 1;
        }
      }
      return [
        h2 * 360,
        s * 100,
        v * 100
      ];
    };
    convert$1.rgb.hwb = function(rgb) {
      const r = rgb[0];
      const g = rgb[1];
      let b = rgb[2];
      const h2 = convert$1.rgb.hsl(rgb)[0];
      const w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h2, w * 100, b * 100];
    };
    convert$1.rgb.cmyk = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const k = Math.min(1 - r, 1 - g, 1 - b);
      const c = (1 - r - k) / (1 - k) || 0;
      const m = (1 - g - k) / (1 - k) || 0;
      const y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    function comparativeDistance(x, y) {
      return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
    }
    convert$1.rgb.keyword = function(rgb) {
      const reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      let currentClosestDistance = Infinity;
      let currentClosestKeyword;
      for (const keyword of Object.keys(cssKeywords)) {
        const value = cssKeywords[keyword];
        const distance = comparativeDistance(rgb, value);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
      return currentClosestKeyword;
    };
    convert$1.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert$1.rgb.xyz = function(rgb) {
      let r = rgb[0] / 255;
      let g = rgb[1] / 255;
      let b = rgb[2] / 255;
      r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
      g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
      b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
      const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };
    convert$1.rgb.lab = function(rgb) {
      const xyz = convert$1.rgb.xyz(rgb);
      let x = xyz[0];
      let y = xyz[1];
      let z = xyz[2];
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
      const l = 116 * y - 16;
      const a = 500 * (x - y);
      const b = 200 * (y - z);
      return [l, a, b];
    };
    convert$1.hsl.rgb = function(hsl) {
      const h2 = hsl[0] / 360;
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      let t2;
      let t3;
      let val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      const t1 = 2 * l - t2;
      const rgb = [0, 0, 0];
      for (let i2 = 0; i2 < 3; i2++) {
        t3 = h2 + 1 / 3 * -(i2 - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i2] = val * 255;
      }
      return rgb;
    };
    convert$1.hsl.hsv = function(hsl) {
      const h2 = hsl[0];
      let s = hsl[1] / 100;
      let l = hsl[2] / 100;
      let smin = s;
      const lmin = Math.max(l, 0.01);
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      const v = (l + s) / 2;
      const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h2, sv * 100, v * 100];
    };
    convert$1.hsv.rgb = function(hsv) {
      const h2 = hsv[0] / 60;
      const s = hsv[1] / 100;
      let v = hsv[2] / 100;
      const hi = Math.floor(h2) % 6;
      const f = h2 - Math.floor(h2);
      const p2 = 255 * v * (1 - s);
      const q = 255 * v * (1 - s * f);
      const t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p2];
        case 1:
          return [q, v, p2];
        case 2:
          return [p2, v, t];
        case 3:
          return [p2, q, v];
        case 4:
          return [t, p2, v];
        case 5:
          return [v, p2, q];
      }
    };
    convert$1.hsv.hsl = function(hsv) {
      const h2 = hsv[0];
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const vmin = Math.max(v, 0.01);
      let sl;
      let l;
      l = (2 - s) * v;
      const lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h2, sl * 100, l * 100];
    };
    convert$1.hwb.rgb = function(hwb) {
      const h2 = hwb[0] / 360;
      let wh = hwb[1] / 100;
      let bl = hwb[2] / 100;
      const ratio = wh + bl;
      let f;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      const i2 = Math.floor(6 * h2);
      const v = 1 - bl;
      f = 6 * h2 - i2;
      if ((i2 & 1) !== 0) {
        f = 1 - f;
      }
      const n = wh + f * (v - wh);
      let r;
      let g;
      let b;
      switch (i2) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert$1.cmyk.rgb = function(cmyk) {
      const c = cmyk[0] / 100;
      const m = cmyk[1] / 100;
      const y = cmyk[2] / 100;
      const k = cmyk[3] / 100;
      const r = 1 - Math.min(1, c * (1 - k) + k);
      const g = 1 - Math.min(1, m * (1 - k) + k);
      const b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert$1.xyz.rgb = function(xyz) {
      const x = xyz[0] / 100;
      const y = xyz[1] / 100;
      const z = xyz[2] / 100;
      let r;
      let g;
      let b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert$1.xyz.lab = function(xyz) {
      let x = xyz[0];
      let y = xyz[1];
      let z = xyz[2];
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
      const l = 116 * y - 16;
      const a = 500 * (x - y);
      const b = 200 * (y - z);
      return [l, a, b];
    };
    convert$1.lab.xyz = function(lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let x;
      let y;
      let z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      const y2 = y ** 3;
      const x2 = x ** 3;
      const z2 = z ** 3;
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };
    convert$1.lab.lch = function(lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let h2;
      const hr = Math.atan2(b, a);
      h2 = hr * 360 / 2 / Math.PI;
      if (h2 < 0) {
        h2 += 360;
      }
      const c = Math.sqrt(a * a + b * b);
      return [l, c, h2];
    };
    convert$1.lch.lab = function(lch) {
      const l = lch[0];
      const c = lch[1];
      const h2 = lch[2];
      const hr = h2 / 360 * 2 * Math.PI;
      const a = c * Math.cos(hr);
      const b = c * Math.sin(hr);
      return [l, a, b];
    };
    convert$1.rgb.ansi16 = function(args, saturation = null) {
      const [r, g, b] = args;
      let value = saturation === null ? convert$1.rgb.hsv(args)[2] : saturation;
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert$1.hsv.ansi16 = function(args) {
      return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);
    };
    convert$1.rgb.ansi256 = function(args) {
      const r = args[0];
      const g = args[1];
      const b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert$1.ansi16.rgb = function(args) {
      let color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      const mult = (~~(args > 50) + 1) * 0.5;
      const r = (color & 1) * mult * 255;
      const g = (color >> 1 & 1) * mult * 255;
      const b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert$1.ansi256.rgb = function(args) {
      if (args >= 232) {
        const c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      let rem;
      const r = Math.floor(args / 36) / 5 * 255;
      const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      const b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert$1.rgb.hex = function(args) {
      const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert$1.hex.rgb = function(args) {
      const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      let colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map((char) => {
          return char + char;
        }).join("");
      }
      const integer = parseInt(colorString, 16);
      const r = integer >> 16 & 255;
      const g = integer >> 8 & 255;
      const b = integer & 255;
      return [r, g, b];
    };
    convert$1.rgb.hcg = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const max2 = Math.max(Math.max(r, g), b);
      const min2 = Math.min(Math.min(r, g), b);
      const chroma = max2 - min2;
      let grayscale;
      let hue;
      if (chroma < 1) {
        grayscale = min2 / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max2 === r) {
        hue = (g - b) / chroma % 6;
      } else if (max2 === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert$1.hsl.hcg = function(hsl) {
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
      let f = 0;
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert$1.hsv.hcg = function(hsv) {
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const c = s * v;
      let f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert$1.hcg.rgb = function(hcg) {
      const h2 = hcg[0] / 360;
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      const pure = [0, 0, 0];
      const hi = h2 % 1 * 6;
      const v = hi % 1;
      const w = 1 - v;
      let mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert$1.hcg.hsv = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1 - c);
      let f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert$1.hcg.hsl = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const l = g * (1 - c) + 0.5 * c;
      let s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert$1.hcg.hwb = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert$1.hwb.hcg = function(hwb) {
      const w = hwb[1] / 100;
      const b = hwb[2] / 100;
      const v = 1 - b;
      const c = v - w;
      let g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert$1.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert$1.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert$1.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert$1.gray.hsl = function(args) {
      return [0, 0, args[0]];
    };
    convert$1.gray.hsv = convert$1.gray.hsl;
    convert$1.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert$1.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert$1.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert$1.gray.hex = function(gray) {
      const val = Math.round(gray[0] / 100 * 255) & 255;
      const integer = (val << 16) + (val << 8) + val;
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert$1.rgb.gray = function(rgb) {
      const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
    const conversions$1 = conversions$2;
    function buildGraph() {
      const graph = {};
      const models2 = Object.keys(conversions$1);
      for (let len2 = models2.length, i2 = 0; i2 < len2; i2++) {
        graph[models2[i2]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      const graph = buildGraph();
      const queue2 = [fromModel];
      graph[fromModel].distance = 0;
      while (queue2.length) {
        const current = queue2.pop();
        const adjacents = Object.keys(conversions$1[current]);
        for (let len2 = adjacents.length, i2 = 0; i2 < len2; i2++) {
          const adjacent = adjacents[i2];
          const node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue2.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from2, to2) {
      return function(args) {
        return to2(from2(args));
      };
    }
    function wrapConversion(toModel, graph) {
      const path = [graph[toModel].parent, toModel];
      let fn = conversions$1[graph[toModel].parent][toModel];
      let cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions$1[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path;
      return fn;
    }
    var route$1 = function(fromModel) {
      const graph = deriveBFS(fromModel);
      const conversion = {};
      const models2 = Object.keys(graph);
      for (let len2 = models2.length, i2 = 0; i2 < len2; i2++) {
        const toModel = models2[i2];
        const node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
    const conversions = conversions$2;
    const route = route$1;
    const convert = {};
    const models = Object.keys(conversions);
    function wrapRaw(fn) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        const result = fn(args);
        if (typeof result === "object") {
          for (let len2 = result.length, i2 = 0; i2 < len2; i2++) {
            result[i2] = Math.round(result[i2]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach((fromModel) => {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      const routes = route(fromModel);
      const routeModels = Object.keys(routes);
      routeModels.forEach((toModel) => {
        const fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    const Tabs_vue_vue_type_style_index_0_scoped_87fbdef9_lang = "";
    const ColorPicker_vue_vue_type_style_index_0_scoped_ca67f48e_lang = "";
    const ConditionalWrapper$1 = {
      name: "ConditionalWrapper",
      functional: true,
      inheritAttrs: false,
      props: {
        element: {
          type: String,
          required: true
        },
        active: Boolean
      },
      render() {
        const _default = this.$slots.default ? this.$slots.default() : null;
        if (this.$props.active) {
          return h(
            this.$props.element,
            {
              ...this.$attrs
            },
            _default
          );
        }
        return _default;
      }
    };
    function debounce(func, wait, immediate) {
      var timeout, args, context, timestamp, result;
      if (null == wait)
        wait = 100;
      function later() {
        var last = Date.now() - timestamp;
        if (last < wait && last >= 0) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            result = func.apply(context, args);
            context = args = null;
          }
        }
      }
      var debounced = function() {
        context = this;
        args = arguments;
        timestamp = Date.now();
        var callNow = immediate && !timeout;
        if (!timeout)
          timeout = setTimeout(later, wait);
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }
        return result;
      };
      debounced.clear = function() {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
      };
      debounced.flush = function() {
        if (timeout) {
          result = func.apply(context, args);
          context = args = null;
          clearTimeout(timeout);
          timeout = null;
        }
      };
      return debounced;
    }
    debounce.debounce = debounce;
    var debounce_1 = debounce;
    const _debounce = /* @__PURE__ */ getDefaultExportFromCjs(debounce_1);
    var vClickOutside_umd = { exports: {} };
    (function(module2, exports2) {
      !function(e, n) {
        module2.exports = n();
      }(commonjsGlobal, function() {
        var e = "__v-click-outside", n = "undefined" != typeof window, t = "undefined" != typeof navigator, r = n && ("ontouchstart" in window || t && navigator.msMaxTouchPoints > 0) ? ["touchstart"] : ["click"], i2 = function(e2) {
          var n2 = e2.event, t2 = e2.handler;
          (0, e2.middleware)(n2) && t2(n2);
        }, a = function(n2, t2) {
          var a2 = function(e2) {
            var n3 = "function" == typeof e2;
            if (!n3 && "object" != typeof e2)
              throw new Error("v-click-outside: Binding value must be a function or an object");
            return { handler: n3 ? e2 : e2.handler, middleware: e2.middleware || function(e3) {
              return e3;
            }, events: e2.events || r, isActive: !(false === e2.isActive), detectIframe: !(false === e2.detectIframe), capture: Boolean(e2.capture) };
          }(t2.value), o2 = a2.handler, d2 = a2.middleware, c = a2.detectIframe, u = a2.capture;
          if (a2.isActive) {
            if (n2[e] = a2.events.map(function(e2) {
              return { event: e2, srcTarget: document.documentElement, handler: function(e3) {
                return function(e4) {
                  var n3 = e4.el, t3 = e4.event, r2 = e4.handler, a3 = e4.middleware, o3 = t3.path || t3.composedPath && t3.composedPath();
                  (o3 ? o3.indexOf(n3) < 0 : !n3.contains(t3.target)) && i2({ event: t3, handler: r2, middleware: a3 });
                }({ el: n2, event: e3, handler: o2, middleware: d2 });
              }, capture: u };
            }), c) {
              var l = { event: "blur", srcTarget: window, handler: function(e2) {
                return function(e3) {
                  var n3 = e3.el, t3 = e3.event, r2 = e3.handler, a3 = e3.middleware;
                  setTimeout(function() {
                    var e4 = document.activeElement;
                    e4 && "IFRAME" === e4.tagName && !n3.contains(e4) && i2({ event: t3, handler: r2, middleware: a3 });
                  }, 0);
                }({ el: n2, event: e2, handler: o2, middleware: d2 });
              }, capture: u };
              n2[e] = [].concat(n2[e], [l]);
            }
            n2[e].forEach(function(t3) {
              var r2 = t3.event, i3 = t3.srcTarget, a3 = t3.handler;
              return setTimeout(function() {
                n2[e] && i3.addEventListener(r2, a3, u);
              }, 0);
            });
          }
        }, o = function(n2) {
          (n2[e] || []).forEach(function(e2) {
            return e2.srcTarget.removeEventListener(e2.event, e2.handler, e2.capture);
          }), delete n2[e];
        }, d = n ? { beforeMount: a, updated: function(e2, n2) {
          var t2 = n2.value, r2 = n2.oldValue;
          JSON.stringify(t2) !== JSON.stringify(r2) && (o(e2), a(e2, { value: t2 }));
        }, unmounted: o } : {};
        return { install: function(e2) {
          e2.directive("click-outside", d);
        }, directive: d };
      });
    })(vClickOutside_umd);
    var vClickOutside_umdExports = vClickOutside_umd.exports;
    const vClickOutside = /* @__PURE__ */ getDefaultExportFromCjs(vClickOutside_umdExports);
    function groupBuilder() {
      const groups = {
        0: {
          options: [],
          filtered: []
        }
      };
      let numAsyncGroups = 0;
      let hasStaticOptions = false;
      let groupIndex = 1;
      const optionsLength = this.options.length;
      for (let i2 = 0; i2 < optionsLength; i2++) {
        const option = this.options[i2];
        const isGroup = option.options;
        if (isGroup) {
          const isTitledGroup = option.title;
          if (Array.isArray(option.options)) {
            const { title, options } = option;
            if (isTitledGroup) {
              groups[groupIndex++] = {
                title,
                options,
                // static data
                filtered: [],
                static: true
              };
            } else {
              groups[0].options = groups[0].options.concat(options);
            }
            hasStaticOptions = true;
          } else if (typeof option.options === "function") {
            const groupId = isTitledGroup ? groupIndex++ : 0;
            const optionsFunction = (term) => this.invokeOptionsFunction(option.options, groupId, term);
            const debounce2 = _debounce(optionsFunction, this.asyncDelay, option.lazy);
            const asyncOptions = {
              searchIndex: 0,
              cached: false,
              options: [],
              doCancelAsync: false,
              loading: false,
              async: true,
              lazy: option.lazy,
              optionsFunction,
              debounce: debounce2
            };
            if (isTitledGroup) {
              groups[groupId] = {
                title: option.title,
                filtered: [],
                ...asyncOptions
              };
            } else {
              groups[0] = {
                ...groups[0],
                ...asyncOptions
              };
            }
            numAsyncGroups++;
          }
        } else {
          groups[0].static = true;
          hasStaticOptions = true;
          if (typeof option === "object") {
            groups[0].options.push({ $__guid: getGUID(), ...option });
          } else if (["string", "number", "symbol"].includes(typeof option)) {
            const title = typeof option === "symbol" ? option.description : option.toString();
            groups[0].options.push({
              $__guid: getGUID(),
              [this.idKey]: option,
              [this.titleKey]: title
            });
          }
        }
      }
      return { groups, numAsyncGroups, hasStaticOptions };
    }
    const Spinner_vue_vue_type_style_index_0_scoped_21b087de_lang = "";
    const _sfc_main$1D = {
      name: "Spinner",
      props: {
        /**
         * This centers the spinner indicator within the viewport. This is used for when the spinner's container overflows the viewport and the indicator may be hidden.
         */
        adjustForOverflow: Boolean,
        /**
         * Adds delay of 300ms to the spinner.
         */
        delayed: Boolean,
        /**
         * Sets the spinner container position attribute to `fixed`.
         */
        fixed: Boolean,
        /**
         * Starts animation immediately.
         */
        immediate: Boolean,
        /**
         * Add styling to support an inline spinner inside of the document flow.
         */
        inline: Boolean,
        /**
         * Assistive text label for the spinner.
         */
        loadingLabel: {
          type: String,
          default: "Loading"
        },
        /**
         * Determines the size of the spinner.
         */
        size: {
          type: String,
          default: "medium",
          validator: (value) => {
            const validSizes = ["xx-small", "x-small", "small", "medium", "large"];
            const isValid2 = validSizes.includes(value);
            if (!isValid2)
              console.error(`Valid size prop values are ${validSizes.join(", ")}`);
            return isValid2;
          }
        },
        /**
         * Determines the color of the spinner: `base` is gray, `brand` is blue, and `inverse` is white.
         */
        theme: {
          type: String,
          default: "base",
          validator: (value) => {
            const validThemes = ["base", "brand", "inverse"];
            const isValid2 = validThemes.includes(value);
            if (!isValid2)
              console.error(`Valid theme prop values are ${validThemes.join(", ")}`);
            return isValid2;
          }
        },
        /**
         * Render the spinner without a container.
         */
        withoutContainer: Boolean
      },
      data() {
        return {
          observer: null
        };
      },
      computed: {
        spinnerClasses() {
          const classes = [];
          if (this.$props.immediate)
            classes.push("spm-spinner_immediate");
          if (this.$props.theme)
            classes.push(`slds-spinner_${this.$props.theme}`);
          if (this.$props.delayed)
            classes.push("slds-spinner_delayed");
          if (this.$props.size)
            classes.push(`slds-spinner_${this.$props.size}`);
          if (this.$props.inline)
            classes.push("slds-spinner_inline");
          return classes;
        },
        containerClasses() {
          const classes = [];
          if (!this.$props.withoutContainer || this.$slots.description)
            classes.push("slds-spinner_container");
          if (this.$props.fixed)
            classes.push("slds-is-fixed");
          return classes;
        }
      },
      created() {
        if (this.$props.adjustForOverflow) {
          window.addEventListener("scroll", this.updateContainerSize);
        }
      },
      mounted() {
        if (this.$props.adjustForOverflow) {
          this.updateContainerSize();
          this.observer = new MutationObserver(this.updateContainerSize);
          this.observer.observe(this.$refs.container, { attributes: true });
        }
      },
      beforeUnmount() {
        if (this.$props.adjustForOverflow) {
          window.removeEventListener("scroll", this.updateContainerSize);
          this.observer.disconnect();
          this.observer = null;
        }
      },
      methods: {
        updateContainerSize() {
          const spinnerContainer = this.$refs.container;
          const { parentNode } = spinnerContainer.parentNode;
          const parentRect = parentNode.getBoundingClientRect();
          const windowHeight = window.innerHeight;
          if (parentRect.height < windowHeight)
            return;
          if (parentRect.top < 0) {
            spinnerContainer.style.top = `${Math.abs(parentRect.top)}px`;
          } else {
            spinnerContainer.style.top = 0;
          }
          if (parentRect.bottom > windowHeight) {
            spinnerContainer.style.bottom = `${parentRect.bottom - windowHeight}px`;
          } else {
            spinnerContainer.style.bottom = 0;
          }
        }
      }
    };
    const _withScopeId$t = (n) => (pushScopeId("data-v-21b087de"), n = n(), popScopeId(), n);
    const _hoisted_1$1t = { class: "slds-assistive-text" };
    const _hoisted_2$1r = /* @__PURE__ */ _withScopeId$t(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-spinner__dot-a" }, null, -1));
    const _hoisted_3$1b = /* @__PURE__ */ _withScopeId$t(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-spinner__dot-b" }, null, -1));
    const _hoisted_4$12 = {
      key: 0,
      class: "description"
    };
    const _hoisted_5$Y = {
      "aria-live": "assertive",
      class: "slds-grid slds-grid_vertical slds-p-top_xx-large slds-text-align_center"
    };
    function _sfc_render$1C(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", {
        ref: "container",
        class: normalizeClass($options.containerClasses)
      }, [
        createBaseVNode("div", {
          class: normalizeClass([$options.spinnerClasses, "slds-spinner"]),
          "aria-hidden": "false",
          role: "status"
        }, [
          createBaseVNode("span", _hoisted_1$1t, toDisplayString(_ctx.$props.loadingLabel), 1),
          _hoisted_2$1r,
          _hoisted_3$1b
        ], 2),
        _ctx.$slots["description"] ? (openBlock(), createElementBlock("div", _hoisted_4$12, [
          createBaseVNode("div", _hoisted_5$Y, [
            renderSlot(_ctx.$slots, "description", {}, void 0, true)
          ])
        ])) : createCommentVNode("", true)
      ], 2);
    }
    const Spinner = /* @__PURE__ */ _export_sfc(_sfc_main$1D, [["render", _sfc_render$1C], ["__scopeId", "data-v-21b087de"]]);
    const Dropdown_vue_vue_type_style_index_0_scoped_4e43a862_lang = "";
    const {
      parseInt: parseInt$1,
      getComputedStyle: getComputedStyle$1
    } = window;
    const _sfc_main$1C = {
      name: "PicklistDropdown",
      components: {
        Icon,
        Spinner
      },
      mixins: [decodeHtml],
      data() {
        return {
          focusedOption: null,
          paddingBuffer: 0,
          currentOptionsLength: this.getDefaultOptionsLength()
        };
      },
      computed: {
        focusedOptionId() {
          let result = null;
          if (this.focusedOption) {
            result = this.focusedOption.dataset.id;
            if (this.focusedOption.dataset.type === "number") {
              result = parseInt$1(result);
            }
            if (this.focusedOption.dataset.type === "symbol") {
              result = Symbol.for(result);
            }
          }
          return result;
        },
        computedOptionGroups() {
          const result = {};
          let remaining = this.currentOptionsLength;
          Object.entries(this.$parent.groupData.groups).forEach(([key, group]) => {
            if (group.async || group.filtered.length) {
              if (remaining === 0)
                return;
              let renderLength;
              if (group.filtered.length >= remaining) {
                renderLength = remaining;
                remaining = 0;
              } else {
                renderLength = group.filtered.length;
                remaining -= group.filtered.length;
              }
              result[key] = {
                renderLength,
                ...group
              };
            }
          });
          return result;
        },
        doRenderGlobalNoSearchResults() {
          return this.$parent.groupData.hasStaticOptions && !Object.values(this.$parent.groupData.groups).some((group) => group.async || group.filtered.length);
        }
      },
      watch: {
        focusedOption() {
          this.$parent.focusedOptionId = this.focusedOptionId;
        },
        "$parent.groupData.groups": {
          handler() {
            if (this.$parent.computedDoRenderDropdown) {
              this.currentOptionsLength = this.getDefaultOptionsLength();
              this.$nextTick(this.setDropdownHeight);
            }
          },
          deep: true,
          immediate: true
        },
        "$parent.comboboxInputOption": {
          handler(value) {
            this.$nextTick(() => {
              this.focusedOption = value ? this.$refs.comboboxInputOption : this.getFirstAvailableOptionEl();
              this.$el.scrollTop = 0;
            });
          }
        }
      },
      mounted() {
        this.$nextTick(() => {
          this.paddingBuffer = parseInt$1(getComputedStyle$1(this.$el).paddingTop || 0);
        });
      },
      methods: {
        getDefaultOptionsLength() {
          if (this.$parent.$props.pageSize <= 0) {
            return Infinity;
          }
          return Math.max(this.$parent.$props.pageSize, this.$parent.$props.heightInNumOptions + 1);
        },
        getListRole(groupId) {
          return !groupId ? "presentation" : "group";
        },
        setDropdownHeight() {
          var _a2, _b, _c;
          const dropdown = this.$el;
          let dropdownHeight = 0;
          let numResultNodes = 0;
          let numTitleNodes = 0;
          const options = Array.from(this.$el.querySelectorAll("li.slds-listbox__item"));
          for (let i2 = 0; i2 < options.length; i2++) {
            const option = options[i2];
            dropdownHeight += option.clientHeight;
            if (Object.prototype.hasOwnProperty.call(option.dataset, "header")) {
              numTitleNodes++;
            } else {
              numResultNodes++;
            }
            if (numResultNodes === this.$parent.$props.heightInNumOptions)
              break;
          }
          if (options.length <= numResultNodes + numTitleNodes) {
            dropdown.style.height = "auto";
          } else {
            const { borderTopWidth, paddingTop } = getComputedStyle$1(dropdown);
            const dropdownHeightAdjustment = (parseInt$1(borderTopWidth, 10) + parseInt$1(paddingTop, 10)) * 2;
            let dropdownHeaderHeightAdjustment = (_a2 = this.$refs.dropdownHeader) == null ? void 0 : _a2.clientHeight;
            if (dropdownHeaderHeightAdjustment) {
              const { marginTop, marginBottom } = getComputedStyle$1((_c = (_b = this.$refs.dropdownHeader) == null ? void 0 : _b.children) == null ? void 0 : _c[0]);
              dropdownHeaderHeightAdjustment += parseInt$1(marginTop, 10);
              dropdownHeaderHeightAdjustment += parseInt$1(marginBottom, 10);
            }
            dropdown.style.height = `${dropdownHeight + dropdownHeightAdjustment + dropdownHeaderHeightAdjustment}px`;
          }
          this.focusOption();
        },
        focusOption() {
          if (Array.isArray(this.$parent.modelValue)) {
            if (this.$parent.modelValue.length) {
              const [firstId] = this.$parent.modelValue;
              this.focusedOption = this.$el.querySelector(`li[data-id="${this.$parent.getIdAsString(firstId)}"][data-type="${typeof firstId}"]`) || this.getFirstAvailableOptionEl();
              this.scrollToFocusedOption();
            } else {
              this.focusedOption = this.getFirstAvailableOptionEl();
            }
          } else if (this.$parent.modelValue !== null && this.$parent.modelValue !== "" && this.$parent.comboboxInputOption === null) {
            this.focusedOption = this.$el.querySelector(`li[data-id="${this.$parent.getIdAsString(this.$parent.modelValue)}"][data-type="${typeof this.$parent.modelValue}"]`) || this.getFirstAvailableOptionEl();
            this.scrollToFocusedOption();
          } else {
            this.focusedOption = this.getFirstAvailableOptionEl();
          }
        },
        getFirstAvailableOptionEl() {
          return this.$el.querySelector("li[data-option]");
        },
        scrollToFocusedOption() {
          const focusedOptionAbsoluteOffsetTop = this.focusedOption.offsetTop + this.paddingBuffer;
          const dropdownHeight = this.$el.clientHeight;
          if (focusedOptionAbsoluteOffsetTop >= this.$el.scrollTop + dropdownHeight - this.paddingBuffer) {
            this.$el.scrollTop = focusedOptionAbsoluteOffsetTop + this.focusedOption.clientHeight - dropdownHeight;
          }
        },
        enter(e) {
          if (this.focusedOption === this.$refs.comboboxInputOption) {
            this.$parent.select(this.$parent.comboboxInputOption, e);
          } else {
            const option = this.$parent.getOptionById(this.focusedOptionId);
            this.$parent.select(option, e);
          }
        },
        down() {
          if (!this.focusedOption)
            return;
          const {
            nextElementSibling,
            parentElement: {
              nextElementSibling: parentsNextElementSibling
            }
          } = this.focusedOption;
          if (nextElementSibling) {
            this.focusedOption = nextElementSibling;
          } else if (parentsNextElementSibling) {
            const getNextDataOption = function getNextDataOption2(_parentsNextElementSibling) {
              if (_parentsNextElementSibling === null)
                return null;
              return _parentsNextElementSibling.querySelector("li[data-option]") || getNextDataOption2(parentsNextElementSibling.nextElementSibling);
            };
            const li = getNextDataOption(parentsNextElementSibling);
            if (li) {
              this.focusedOption = li;
            }
          }
          if (this.focusedOption) {
            this.scrollToFocusedOption();
          }
          this.onScroll();
        },
        up() {
          if (!this.focusedOption)
            return;
          const {
            previousElementSibling,
            parentElement: {
              previousElementSibling: parentsPreviousElementSibling
            }
          } = this.focusedOption;
          const hasPreviousDataOptionSibling = previousElementSibling && Object.hasOwnProperty.call(previousElementSibling.dataset, "option");
          if (hasPreviousDataOptionSibling) {
            this.focusedOption = previousElementSibling;
          } else if (parentsPreviousElementSibling) {
            const getPreviousDataOption = function getPreviousDataOption2(_parentsPreviousElementSibling) {
              if (_parentsPreviousElementSibling === null)
                return null;
              return _parentsPreviousElementSibling.querySelector("li[data-option]:last-child") || getPreviousDataOption2(parentsPreviousElementSibling.previousElementSibling);
            };
            const li = getPreviousDataOption(parentsPreviousElementSibling);
            if (li) {
              this.focusedOption = li;
            }
          }
          if (this.focusedOption.offsetTop <= this.$el.scrollTop) {
            this.$el.scrollTop = this.focusedOption.offsetTop - this.paddingBuffer;
          }
        },
        onScroll({ target = this.$el } = {}) {
          const { scrollTop, scrollHeight, clientHeight } = target || this.$el;
          if (this.lastScrollTop > scrollTop)
            return;
          if (scrollTop + clientHeight >= scrollHeight - 5) {
            this.currentOptionsLength += this.$parent.$props.pageSize;
            target.scrollTop = scrollTop;
            this.lastScrollTop = scrollTop;
          }
        }
      }
    };
    const _hoisted_1$1s = ["id"];
    const _hoisted_2$1q = { ref: "dropdownHeader" };
    const _hoisted_3$1a = {
      key: 0,
      class: "slds-listbox slds-listbox_vertical",
      role: "presentation"
    };
    const _hoisted_4$11 = ["data-id"];
    const _hoisted_5$X = ["aria-selected"];
    const _hoisted_6$N = { class: "slds-media__figure slds-listbox__option-icon" };
    const _hoisted_7$G = { class: "slds-media__body" };
    const _hoisted_8$C = { class: "slds-listbox__option-text slds-listbox__option-text_entity" };
    const _hoisted_9$B = { key: 1 };
    const _hoisted_10$t = {
      class: "slds-listbox__item slds-listbox__status slds-p-vertical_x-small",
      role: "status",
      "aria-live": "polite"
    };
    const _hoisted_11$p = ["title"];
    const _hoisted_12$l = ["role"];
    const _hoisted_13$l = {
      key: 0,
      role: "presentation",
      class: "slds-listbox__item",
      "data-header": ""
    };
    const _hoisted_14$i = {
      class: "slds-media slds-listbox__option slds-listbox__option_plain slds-media_small",
      role: "presentation"
    };
    const _hoisted_15$g = {
      class: "slds-listbox__option-header",
      role: "presentation"
    };
    const _hoisted_16$e = {
      key: 1,
      class: "slds-listbox__item slds-listbox__status slds-p-vertical_x-small",
      role: "status",
      "aria-live": "polite"
    };
    const _hoisted_17$c = ["title"];
    const _hoisted_18$c = ["data-id", "data-type", "onMousedown"];
    const _hoisted_19$c = ["aria-selected"];
    const _hoisted_20$c = { class: "slds-media__figure slds-listbox__option-icon" };
    const _hoisted_21$9 = { class: "slds-media__body" };
    const _hoisted_22$8 = ["title"];
    const _hoisted_23$8 = { key: 2 };
    const _hoisted_24$8 = { class: "slds-align_absolute-center slds-p-top_medium" };
    function _sfc_render$1B(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_Spinner = resolveComponent("Spinner");
      return openBlock(), createElementBlock("div", mergeProps({
        id: _ctx.$parent.dropdownId,
        class: "slds-dropdown slds-dropdown_fluid",
        role: "listbox"
      }, toHandlers(_ctx.$parent.$props.pageSize > 0 ? { scroll: $options.onScroll } : {}, true)), [
        createBaseVNode("div", _hoisted_2$1q, [
          renderSlot(_ctx.$slots, "dropdownHeader", {}, void 0, true)
        ], 512),
        _ctx.$parent.comboboxInputOption ? (openBlock(), createElementBlock("ul", _hoisted_3$1a, [
          createBaseVNode("li", {
            ref: "comboboxInputOption",
            role: "presentation",
            class: "slds-listbox__item",
            "data-id": _ctx.$parent.getIdAsString(_ctx.$parent.getId(_ctx.$parent.comboboxInputOption)),
            "data-option": "",
            onMousedown: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.$parent.select(_ctx.$parent.comboboxInputOption, $event), ["prevent"]))
          }, [
            createBaseVNode("div", {
              "aria-selected": $data.focusedOption === _ctx.$refs.comboboxInputOption,
              class: normalizeClass(["slds-media slds-listbox__option slds-listbox__option_entity slds-listbox__option_term", { "slds-has-focus": $data.focusedOption === _ctx.$refs.comboboxInputOption }]),
              role: "option"
            }, [
              createBaseVNode("span", _hoisted_6$N, [
                createVNode(_component_Icon, {
                  assistiveText: _ctx.$parent.computedLabels.comboboxAdd,
                  title: _ctx.$parent.computedLabels.comboboxAdd,
                  category: "utility",
                  name: "add",
                  size: "x-small"
                }, null, 8, ["assistiveText", "title"])
              ]),
              createBaseVNode("span", _hoisted_7$G, [
                createBaseVNode("span", _hoisted_8$C, toDisplayString(_ctx.$parent.comboboxInputOption[_ctx.$parent.$props.titleKey]), 1)
              ])
            ], 10, _hoisted_5$X)
          ], 40, _hoisted_4$11)
        ])) : createCommentVNode("", true),
        $options.doRenderGlobalNoSearchResults ? (openBlock(), createElementBlock("ul", _hoisted_9$B, [
          createBaseVNode("li", _hoisted_10$t, [
            createBaseVNode("span", {
              class: "slds-m-left_x-large",
              title: _ctx.$parent.computedLabels.noSearchResults
            }, toDisplayString(_ctx.decodeHtml(_ctx.$parent.computedLabels.noSearchResults)), 9, _hoisted_11$p)
          ])
        ])) : createCommentVNode("", true),
        (openBlock(true), createElementBlock(Fragment, null, renderList($options.computedOptionGroups, (group, name, index) => {
          return openBlock(), createElementBlock("ul", {
            key: index,
            class: "slds-listbox slds-listbox_vertical",
            role: $options.getListRole(group)
          }, [
            group.title != null && (group.filtered.length || group.async) ? (openBlock(), createElementBlock("li", _hoisted_13$l, [
              createBaseVNode("div", _hoisted_14$i, [
                createBaseVNode("h3", _hoisted_15$g, toDisplayString(_ctx.decodeHtml(group.title)), 1)
              ])
            ])) : createCommentVNode("", true),
            group.async && !group.filtered.length && !group.loading ? (openBlock(), createElementBlock("li", _hoisted_16$e, [
              createBaseVNode("span", {
                class: "slds-m-left_x-large",
                title: _ctx.$parent.computedLabels.noSearchResults
              }, toDisplayString(_ctx.decodeHtml(_ctx.$parent.computedLabels.noSearchResults)), 9, _hoisted_17$c)
            ])) : createCommentVNode("", true),
            (openBlock(true), createElementBlock(Fragment, null, renderList(group.renderLength, (n) => {
              return openBlock(), createElementBlock("li", {
                key: group.filtered[n - 1].$__guid,
                "data-id": _ctx.$parent.getIdAsString(_ctx.$parent.getId(group.filtered[n - 1])),
                "data-type": _ctx.$parent.getIdType(group.filtered[n - 1]),
                "data-option": "",
                role: "presentation",
                class: "slds-listbox__item",
                onMousedown: withModifiers(($event) => _ctx.$parent.select(group.filtered[n - 1], $event), ["prevent"])
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(["slds-media slds-listbox__option slds-listbox__option_plain slds-media_small", { "slds-has-focus": _ctx.$parent.getId(group.filtered[n - 1]) === $options.focusedOptionId, "slds-is-selected": _ctx.$parent.isOptionSelected(group.filtered[n - 1]) }]),
                  "aria-selected": _ctx.$parent.getId(group.filtered[n - 1]) === $options.focusedOptionId,
                  role: "option"
                }, [
                  renderSlot(_ctx.$slots, "option", {
                    option: group.filtered[n - 1],
                    index: n
                  }, () => [
                    createBaseVNode("span", _hoisted_20$c, [
                      _ctx.$parent.isOptionSelected(group.filtered[n - 1]) ? (openBlock(), createBlock(_component_Icon, {
                        key: 0,
                        class: "slds-current-color",
                        category: "utility",
                        name: "check",
                        size: "x-small"
                      })) : createCommentVNode("", true)
                    ]),
                    createBaseVNode("span", _hoisted_21$9, [
                      createBaseVNode("span", {
                        class: "slds-truncate",
                        title: _ctx.$parent.getTitle(group.filtered[n - 1])
                      }, toDisplayString(_ctx.decodeHtml(_ctx.$parent.getTitle(group.filtered[n - 1]))), 9, _hoisted_22$8)
                    ])
                  ], true)
                ], 10, _hoisted_19$c)
              ], 40, _hoisted_18$c);
            }), 128)),
            group.loading ? (openBlock(), createElementBlock("li", _hoisted_23$8, [
              createBaseVNode("div", _hoisted_24$8, [
                createVNode(_component_Spinner, {
                  class: "slds-input__icon",
                  size: "x-small",
                  withoutContainer: "",
                  isInline: ""
                })
              ])
            ])) : createCommentVNode("", true)
          ], 8, _hoisted_12$l);
        }), 128))
      ], 16, _hoisted_1$1s);
    }
    const Dropdown = /* @__PURE__ */ _export_sfc(_sfc_main$1C, [["render", _sfc_render$1B], ["__scopeId", "data-v-4e43a862"]]);
    const MultiselectDialog_vue_vue_type_style_index_0_scoped_0a28cef2_lang = "";
    const _sfc_main$1B = {
      components: { Checkbox },
      mixins: [decodeHtml],
      data() {
        return {
          dialogId: getGUID(),
          focusableElements: []
        };
      },
      watch: {
        "$parent.groupData": {
          handler(groupData) {
            Object.values(groupData.groups).forEach((group) => {
              group.filtered = group.filtered.map((option) => ({
                ...option,
                isSelected: this.$parent.isOptionSelected(option),
                original: option
              }));
            });
          },
          immediate: true
        }
      },
      mounted() {
        this.$nextTick(() => {
          this.focusableElements = this.$el.querySelectorAll("input:not([disabled])");
          this.focusableElements[0].focus();
        });
      },
      methods: {
        save(e) {
          const valueArray = [];
          Object.values(this.$parent.groupData.groups).forEach((group) => {
            group.filtered.forEach((option) => {
              if (option.isSelected) {
                const id = this.$parent.getId(option);
                valueArray.push(id);
              }
            });
          });
          this.$parent.$emit("update:modelValue", valueArray);
          this.reset(e);
        },
        select(option, e) {
          this.$parent.$emit("selected-option", option.original, e);
        },
        reset(e) {
          this.$parent.reset(e);
          this.$parent.focus();
        },
        focusFirstElement(e) {
          e.stopPropagation();
          e.preventDefault();
          this.focusableElements[0].focus();
        },
        shiftTab(e) {
          if (document.activeElement === this.focusableElements[0]) {
            e.stopPropagation();
            e.preventDefault();
            this.$refs.savebutton.focus();
          }
        }
      }
    };
    const _hoisted_1$1r = ["aria-describedby", "aria-label"];
    const _hoisted_2$1p = ["id"];
    const _hoisted_3$19 = {
      key: 0,
      class: "slds-form-element__legend slds-form-element__label"
    };
    const _hoisted_4$10 = { class: "slds-form-element__control" };
    const _hoisted_5$W = { class: "slds-popover__footer slds-popover__footer_form" };
    function _sfc_render$1A(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Checkbox = resolveComponent("Checkbox");
      return openBlock(), createElementBlock("section", {
        "aria-describedby": $data.dialogId,
        "aria-label": _ctx.$parent.$props.labels.name,
        class: "slds-popover slds-popover_full-width custom-z-index",
        role: "dialog",
        onKeydown: [
          _cache[3] || (_cache[3] = withKeys(withModifiers((...args) => $options.reset && $options.reset(...args), ["stop"]), ["esc"])),
          _cache[4] || (_cache[4] = withKeys(withModifiers((...args) => $options.shiftTab && $options.shiftTab(...args), ["exact", "shift"]), ["tab"]))
        ]
      }, [
        createBaseVNode("div", {
          id: $data.dialogId,
          ref: "multiselectdialog",
          class: "slds-popover__body slds-popover__body_small"
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$parent.groupData.groups, (group, name, index) => {
            return openBlock(), createElementBlock("fieldset", {
              key: index,
              class: "slds-form-element"
            }, [
              group.title != null ? (openBlock(), createElementBlock("legend", _hoisted_3$19, toDisplayString(_ctx.decodeHtml(group.title)), 1)) : createCommentVNode("", true),
              createBaseVNode("div", _hoisted_4$10, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(group.filtered, (option) => {
                  return openBlock(), createBlock(_component_Checkbox, {
                    key: option.$__guid,
                    modelValue: option.isSelected,
                    "onUpdate:modelValue": ($event) => option.isSelected = $event,
                    labels: { name: _ctx.$parent.getTitle(option) },
                    onClick: ($event) => $options.select(option, $event)
                  }, null, 8, ["modelValue", "onUpdate:modelValue", "labels", "onClick"]);
                }), 128))
              ])
            ]);
          }), 128))
        ], 8, _hoisted_2$1p),
        createBaseVNode("footer", _hoisted_5$W, [
          createBaseVNode("button", {
            class: "slds-button slds-button_neutral",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.reset && $options.reset(...args))
          }, toDisplayString(_ctx.decodeHtml(_ctx.$parent.computedLabels.cancel)), 1),
          createBaseVNode("button", {
            ref: "savebutton",
            class: "slds-button slds-button_brand",
            onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => $options.focusFirstElement && $options.focusFirstElement(...args), ["stop", "exact"]), ["tab"])),
            onClick: _cache[2] || (_cache[2] = (...args) => $options.save && $options.save(...args))
          }, toDisplayString(_ctx.decodeHtml(_ctx.$parent.computedLabels.save)), 545)
        ])
      ], 40, _hoisted_1$1r);
    }
    const MultiselectDialog = /* @__PURE__ */ _export_sfc(_sfc_main$1B, [["render", _sfc_render$1A], ["__scopeId", "data-v-0a28cef2"]]);
    const PillList_vue_vue_type_style_index_0_scoped_e31e462f_lang = "";
    const _sfc_main$1A = {
      name: "PillList",
      components: { Icon },
      mixins: [decodeHtml],
      props: {
        /**
         * Assistive text for accessibility.
         */
        assistiveText: {
          type: Object,
          default: () => ({
            remove: "Press delete or backspace to remove.",
            listboxLabel: "Selected Options:",
            error: "Warning"
          })
        },
        /**
         * Adds border to pill list container.
         */
        containerBorder: Boolean,
        /**
         * Labels object for the pill list
         */
        labels: {
          type: Object,
          default: () => ({
            removeTitle: "Remove",
            error: "Error"
          })
        },
        /**
         * Options array for the pill list. `label` and `title` props are required.
         */
        options: {
          type: Array,
          default: () => [],
          validator(value) {
            return value.every((item) => {
              const requiredProps = ["label", "title"];
              const missing = getMissingProps(item, requiredProps);
              if (missing.length) {
                console.error(`Options object is missing required properties: ${missing.toString()}`);
                return false;
              }
              return true;
            });
          }
        },
        /**
         * Border for individual pill items.
         */
        pillBorder: {
          type: Boolean,
          default: true
        },
        /**
         * Sets pills to readonly and disables deletion.
         */
        readonly: Boolean
      },
      data() {
        return {
          mutableOptionsArray: [],
          lastFocusedOptionIndex: 0
        };
      },
      watch: {
        options: {
          handler(value) {
            this.mutableOptionsArray = value.map((item) => ({
              $__guid: getGUID(),
              ...item
            }));
          },
          deep: true,
          immediate: true
        }
      },
      methods: {
        focusLastFocusedOption() {
          const option = this.$refs[`option-${this.lastFocusedOptionIndex}`][0];
          if (option)
            option.focus();
        },
        remove(optionIndex, e) {
          if (this.readonly)
            return;
          const removedOption = this.mutableOptionsArray.splice(optionIndex, 1)[0];
          delete removedOption.$__guid;
          this.$emit("update:options", this.mutableOptionsArray);
          this.$emit("remove", removedOption, e);
          if (!this.mutableOptionsArray.length) {
            this.$nextTick(this.$refs.listbox.focus.bind(this.$refs.listbox));
            return;
          }
          if (this.lastFocusedOptionIndex > this.mutableOptionsArray.length - 1) {
            this.lastFocusedOptionIndex--;
          }
          this.$nextTick(this.focusLastFocusedOption.bind(this));
        },
        left() {
          if (this.lastFocusedOptionIndex > 0) {
            this.lastFocusedOptionIndex--;
          } else {
            this.lastFocusedOptionIndex = this.mutableOptionsArray.length - 1;
          }
          this.focusLastFocusedOption();
        },
        right() {
          if (this.lastFocusedOptionIndex < this.mutableOptionsArray.length - 1) {
            this.lastFocusedOptionIndex++;
          } else {
            this.lastFocusedOptionIndex = 0;
          }
          this.focusLastFocusedOption();
        }
      }
    };
    const _hoisted_1$1q = ["aria-label"];
    const _hoisted_2$1o = ["tabindex", "onFocus"];
    const _hoisted_3$18 = ["title"];
    function _sfc_render$1z(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass({ "slds-pill_container": _ctx.$props.containerBorder, "slds-listbox_selection-group": !_ctx.$props.containerBorder })
      }, [
        createBaseVNode("ul", {
          ref: "listbox",
          class: "slds-listbox slds-listbox_horizontal",
          role: "listbox",
          "aria-label": $props.assistiveText.listboxLabel,
          "aria-orientation": "horizontal",
          onKeydown: [
            _cache[0] || (_cache[0] = withKeys((...args) => $options.left && $options.left(...args), ["left"])),
            _cache[1] || (_cache[1] = withKeys((...args) => $options.right && $options.right(...args), ["right"])),
            _cache[2] || (_cache[2] = withKeys(($event) => $options.remove($data.lastFocusedOptionIndex, $event), ["delete"]))
          ]
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList($data.mutableOptionsArray, (option, index) => {
            return openBlock(), createElementBlock("li", {
              key: option.$__guid,
              class: "slds-listbox-item",
              role: "presentation"
            }, [
              createBaseVNode("span", {
                ref_for: true,
                ref: `option-${index}`,
                class: normalizeClass(["slds-pill", { "slds-pill_bare": !$props.pillBorder, "slds-has-error": option.hasError }]),
                role: "option",
                tabindex: $data.lastFocusedOptionIndex === index ? 0 : -1,
                "aria-selected": "true",
                onFocus: ($event) => $data.lastFocusedOptionIndex = index
              }, [
                option.hasError ? (openBlock(), createBlock(_component_Icon, {
                  key: 0,
                  class: "slds-pill__icon_container",
                  category: "utility",
                  name: "error",
                  variant: "error",
                  assistiveText: $props.assistiveText.error,
                  title: $props.labels.error
                }, null, 8, ["assistiveText", "title"])) : createCommentVNode("", true),
                createBaseVNode("span", {
                  class: "slds-pill__label",
                  title: option.title
                }, toDisplayString(_ctx.decodeHtml(option.label)), 9, _hoisted_3$18),
                !$props.readonly ? (openBlock(), createBlock(_component_Icon, {
                  key: 1,
                  class: "slds-pill__remove cursor-pointer",
                  category: "utility",
                  name: "close",
                  size: "x-small",
                  assistiveText: $props.assistiveText.remove,
                  onMousedown: withModifiers(($event) => $options.remove(index, $event), ["prevent"])
                }, null, 8, ["assistiveText", "onMousedown"])) : createCommentVNode("", true)
              ], 42, _hoisted_2$1o)
            ]);
          }), 128))
        ], 40, _hoisted_1$1q)
      ], 2);
    }
    const PillList = /* @__PURE__ */ _export_sfc(_sfc_main$1A, [["render", _sfc_render$1z], ["__scopeId", "data-v-e31e462f"]]);
    const Picklist_vue_vue_type_style_index_0_scoped_3db3f0d2_lang = "";
    const valuePropUpdater = function valuePropUpdater2(value) {
      if (value) {
        if (Array.isArray(this.$props.modelValue)) {
          this.mutableValueArray = [].concat(...this.$props.modelValue);
        } else {
          this.mutableValueArray = this.$props.modelValue ? [this.$props.modelValue] : [];
          this.$emit("update:modelValue", this.mutableValueArray);
        }
      } else {
        this.$emit("update:modelValue", this.mutableValueArray.length === 1 ? this.mutableValueArray[0] : "");
      }
    };
    const defaultLabels$4 = () => ({
      name: null,
      search: "Search...",
      noSearchResults: "No search results.",
      clearTitle: "Clear the text input",
      clearAssistiveText: "Clear the text input",
      removeTitle: "Remove",
      removeAssistiveText: "Remove",
      comboboxAdd: "Add",
      comboboxSearchAssistiveText: "Search for term",
      save: "Save",
      required: "Required",
      loading: "Loading",
      cancel: "Cancel",
      placeholder: "Select an Option"
    });
    const _sfc_main$1z = {
      name: "Picklist",
      components: {
        ButtonIcon,
        Dropdown,
        Icon,
        MultiselectDialog,
        PillList,
        Spinner,
        Tooltip
      },
      directives: {
        "click-outside": vClickOutside.directive,
        "detach-element": detach
      },
      mixins: [decodeHtml],
      props: {
        /**
         * Provides debounce function with delay value.
         */
        asyncDelay: {
          type: Number,
          default: 500
        },
        /**
         * When selected, allows combobox functionality.
         */
        combobox: Boolean,
        /**
         * Allows for Picklist dropdown to be removed from DOM flow
         */
        detach: {
          type: Boolean,
          default: true
        },
        /**
         * Disables the input and prevents editing the contents.
         */
        disabled: Boolean,
        /**
         * List of picklist errors.
         */
        errors: {
          type: Array,
          default: () => []
        },
        /**
         * Allows for filterable options.
         */
        filterable: Boolean,
        /**
         * Sets height of dropdown in number of options.
         */
        heightInNumOptions: {
          type: [Number, Infinity],
          default: 5
        },
        /**
         * A Tooltip component that is displayed next to the label.
         */
        helpText: {
          type: String,
          default: ""
        },
        /**
         * Value of the id key.
         */
        idKey: {
          type: String,
          default: "id"
        },
        /**
         * If using a label that is not part of this component, use this prop
         * since there is a label being used in the app that is located outside
         * of this component.
         */
        labelForId: {
          type: String,
          default: ""
        },
        /**
         * Picklist labels object.
         */
        labels: {
          type: Object,
          default: () => {
          }
        },
        /**
         * Minimum search length before search func is initiated.
         */
        minSearchLength: {
          type: Number,
          default: 2
        },
        /**
         * Currently selected picklist value(s).
         */
        modelValue: {
          type: [Number, String, Array, Symbol],
          default: ""
        },
        /**
         * Allows for multiselectable options.
         */
        multiselect: Boolean,
        /**
         * Multiselect Dialog options dropdown.
         */
        multiselectDialog: Boolean,
        /**
         * Callback function invoked by the component when a user selects an option.
         */
        onRequestSelectOption: {
          type: Function,
          default: null
        },
        /**
         * Array of item objects in the dropdown menu or asynchronous search function.
         */
        options: {
          type: Array,
          required: true,
          validator(options) {
            let hasUntitledGroup = false;
            for (let i2 = 0; i2 < options.length; i2++) {
              const option = options[i2];
              if (Object.hasOwnProperty.call(option, "options") && !Object.hasOwnProperty.call(option, "title")) {
                if (hasUntitledGroup) {
                  console.error("Cannot have more than one group without a title.");
                  return false;
                }
                hasUntitledGroup = true;
              }
            }
            return true;
          }
        },
        /**
         * When applicable, this value is used to lazily render options. To disable, set to a value of 0.
         */
        pageSize: {
          type: Number,
          default: 50
        },
        /**
         * Readonly version of the picklist.
         */
        readonly: Boolean,
        /**
         * Allows dropdown to remain open on selection of option
         */
        remainOpenOnSelect: Boolean,
        /**
         * Applies label styling for a required form element.
         */
        required: Boolean,
        /**
         * By default the dropdown list will resize itself to the width of the input element (anchor). If resizeToFitContent
         * is toggled on the dropdown width resizes to fit the content with the minimum width set to the width of the anchor.
         */
        resizeToFitContent: Boolean,
        /**
         * Value of the title key.
         */
        titleKey: {
          type: String,
          default: "title"
        }
      },
      emits: [
        "clear",
        "detached",
        "reset",
        "selected-option",
        "update:modelValue"
      ],
      data() {
        return {
          isActive: false,
          doRenderDropdown: false,
          dropdownId: getGUID(),
          errorId: getGUID(),
          focusedOptionId: null,
          input: "",
          cachedInput: "",
          labelId: getGUID(),
          inputId: getGUID(),
          mutableValueArray: [],
          comboboxInputOption: null,
          multiselectOptions: [],
          groupData: {
            groups: {},
            numAsyncGroups: 0,
            hasStaticOptions: false
          }
        };
      },
      computed: {
        computedLabels() {
          const globals = Object.hasOwn(this, "$__getGlobalLabels") ? this.$__getGlobalLabels().picklist || {} : {};
          return {
            ...defaultLabels$4(),
            ...globals,
            ...this.$props.labels
          };
        },
        clickOutsideOptions() {
          return {
            isActive: this.doRenderDropdown,
            handler: this.clickedOutside
          };
        },
        showSearchIcon() {
          return this.$props.filterable && (this.$props.multiselect || !this.hasValue);
        },
        hasAutocompletedValue() {
          return this.hasValue && this.singleSelect && this.$props.filterable;
        },
        showDownIcon() {
          return !this.$props.filterable;
        },
        isReadOnly() {
          return this.hasAutocompletedValue || !this.$props.filterable && !this.$props.combobox;
        },
        readonlyValue() {
          if (this.singleSelect) {
            const option = this.getOptionById(this.$props.modelValue);
            return !option ? null : this.getTitle(option);
          }
          return null;
        },
        singleSelect() {
          return !this.$props.multiselect;
        },
        hasValue() {
          return this.$props.multiselect ? (this.$props.modelValue || []).length > 0 : !!this.$props.modelValue;
        },
        hasErrors() {
          return this.$props.errors.length;
        },
        computedPlaceholder() {
          if (this.isLoading) {
            return this.computedLabels.loading;
          }
          return this.isReadOnly || this.$props.combobox && !this.$props.filterable ? this.computedLabels.placeholder : this.computedLabels.search;
        },
        doRenderPillList() {
          return this.$props.readonly && this.multiselectOptions.length || this.$props.multiselect && !this.$props.multiselectDialog && (this.multiselectOptions.length > 1 || (this.$props.filterable || this.$props.combobox) && this.multiselectOptions.length);
        },
        isLoading() {
          return Object.values(this.groupData.groups).some((group) => group.loading);
        },
        computedDoRenderDropdown() {
          return !this.$props.multiselectDialog && this.doRenderDropdown || this.groupData.numAsyncGroups > 1 && this.isLoading;
        }
      },
      watch: {
        modelValue: {
          handler(value) {
            if (value === null || Array.isArray(value)) {
              this.mutableValueArray = [].concat(...value || []);
            }
            this.setMultiselectOptions();
            this.setInput();
          },
          immediate: true
        },
        multiselect: valuePropUpdater,
        multiselectDialog: valuePropUpdater,
        $props: {
          handler() {
            if (this.$props.multiselectDialog) {
              if (this.$props.filterable || this.$props.combobox || this.$props.multiselect) {
                throw new Error("Cannot combine multiselectDialog with other features.");
              }
            }
            if (this.$props.labels && (!this.$props.labels.name || !this.$props.labels.name.length) && (!this.$props.labelForId || !this.$props.labelForId.length)) {
              console.error("Must provide label for name or pass value to labelForId prop");
            }
            if (this.$props.remainOpenOnSelect && !this.$props.multiselect) {
              console.error("Must enable multiselect to use remainOpenOnSelect prop");
            }
          },
          deep: true,
          immediate: true
        },
        focusedOptionId(value) {
          if (value && !this.$props.filterable && !this.$props.combobox && this.singleSelect) {
            this.input = this.getTitleById(value);
          }
        },
        options: {
          handler() {
            this.groupData = groupBuilder.call(this);
            this.reconcileOptions();
          },
          deep: true
        },
        asyncDelay(value) {
          Object.values(this.groupData.groups).forEach((group) => {
            if (group.async) {
              group.debounce = _debounce(group.optionsFunction, value);
            }
          });
        }
      },
      created() {
        this.validateValueBindingType();
        this.groupData = groupBuilder.call(this);
      },
      methods: {
        focus() {
          this.$refs.input.focus();
        },
        reconcileOptions() {
          if (this.$props.combobox || !this.hasValue)
            return;
          if (this.$props.multiselect || this.$props.multiselectDialog) {
            const originalLength = this.mutableValueArray.length;
            this.mutableValueArray = this.mutableValueArray.filter((value) => this.getOptionById(value));
            if (originalLength !== this.mutableValueArray.length) {
              this.$emit("update:modelValue", this.mutableValueArray);
            }
          } else if (this.getOptionById(this.$props.modelValue)) {
            this.setInput();
          } else {
            this.$emit("update:modelValue", "");
          }
        },
        clear() {
          this.input = "";
          this.$emit("update:modelValue", this.input);
          this.$emit("clear");
          this.$nextTick(this.activationHandler);
          this.$nextTick(() => {
            this.$refs.input.focus();
          });
        },
        setMultiselectOptions() {
          this.multiselectOptions = this.mutableValueArray.map((id) => {
            const option = this.getOptionById(id);
            const title = option ? this.getTitle(option) : id;
            return {
              [this.$props.idKey]: id,
              label: title,
              title
            };
          });
        },
        setInput() {
          if ((this.$props.multiselect || this.$props.multiselectDialog) && !this.$props.filterable) {
            if (this.$props.combobox) {
              this.input = null;
              return;
            }
            if (this.mutableValueArray.length > 1) {
              this.input = `${this.mutableValueArray.length} options selected`;
            } else {
              this.input = this.getTitleById(this.mutableValueArray[0]);
            }
          } else if (this.$props.modelValue) {
            this.input = this.getTitleById(this.$props.modelValue);
          } else {
            this.input = null;
          }
          this.cachedInput = this.input;
        },
        validateValueBindingType() {
          if (this.$props.modelValue === null)
            return;
          if (this.$props.multiselect || this.$props.multiselectDialog) {
            if (!Array.isArray(this.$props.modelValue)) {
              throw new Error("Value binding type must be in array in multi-select mode.");
            }
          } else if (!["string", "number", "symbol"].includes(typeof this.$props.modelValue)) {
            throw new Error("Value binding type must be a Number, String, or Symbol in single-select mode.");
          }
        },
        onBlur(e) {
          if (e.relatedTarget && this.doRenderDropdown && !this.$props.multiselectDialog) {
            this.reset(e);
            this.$emit("reset");
          }
        },
        onClick() {
          if (!this.doRenderDropdown) {
            this.activationHandler();
          }
        },
        onDetachRender() {
          if (!this.$props.multiselectDialog) {
            this.$refs.dropdown.setDropdownHeight();
          }
        },
        enter(e) {
          if (e.isComposing || e.keyCode === 229) {
            return;
          }
          if (this.$props.multiselectDialog && this.doRenderDropdown)
            return;
          if (this.doRenderDropdown) {
            this.$refs.dropdown.enter(e);
          } else {
            this.activationHandler();
          }
        },
        up() {
          if (!this.$props.multiselectDialog && this.doRenderDropdown) {
            this.$refs.dropdown.up();
          }
        },
        down() {
          if (this.$props.multiselectDialog && this.doRenderDropdown)
            return;
          if (this.doRenderDropdown) {
            this.$refs.dropdown.down();
          } else {
            this.activationHandler();
          }
        },
        activationHandler() {
          if (this.hasAutocompletedValue || this.isLoading)
            return;
          if (this.groupData.hasStaticOptions) {
            this.doRenderDropdown = true;
          } else if (this.$props.combobox && this.input) {
            this.doRenderDropdown = true;
            this.updateComboboxInputOption();
          } else {
            this.doRenderDropdown = false;
          }
          this.search();
        },
        clickedOutside(e) {
          if (e && e.type === "click" && e.target === this.$refs.input)
            return;
          this.reset(e);
          this.$emit("reset");
        },
        escape(e) {
          this.reset(e);
          this.$emit("reset");
        },
        reset(e) {
          if (e && e.type === "click" && e.target === this.$refs.input)
            return;
          this.input = this.cachedInput;
          Object.values(this.groupData.groups).forEach((group) => {
            group.filtered = [];
            group.searchIndex++;
            group.loading = false;
          });
          this.comboboxInputOption = null;
          this.focusedOptionId = null;
          this.doRenderDropdown = false;
        },
        getIdType(option) {
          return typeof this.getId(option);
        },
        getId(option) {
          if (!option || ["string", "number", "symbol"].includes(typeof option))
            return option;
          return option[this.$props.idKey];
        },
        getIdAsString(id) {
          return typeof id === "symbol" ? id.description : id;
        },
        getTitle(option) {
          if (["string", "number"].includes(typeof option))
            return option.toString();
          if (typeof option === "symbol")
            return option.description;
          return option[this.$props.titleKey];
        },
        getTitleById(id) {
          return this.getTitle(this.getOptionById(id) || id || "");
        },
        getOptionById(id) {
          if (!id)
            return null;
          for (let i2 = 0; i2 < this.$props.options.length; i2++) {
            const item = this.$props.options[i2];
            if (Array.isArray(item.options)) {
              const result = item.options.find((subOption) => this.getId(subOption) === id);
              if (result)
                return result;
            }
            if (typeof item === "object" && this.getId(item) === id)
              return item;
            if (["string", "number", "symbol"].includes(typeof item) && item === id)
              return item;
          }
          const groups = Object.values(this.groupData.groups);
          for (let i2 = 0; i2 < groups.length; i2++) {
            const option = groups[i2].filtered.find((_option) => this.getId(_option) === id);
            if (option)
              return option;
          }
          return null;
        },
        search() {
          if (this.hasAutocompletedValue)
            return;
          const sanitizedValue = (this.input || "").replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
          const regex2 = new RegExp(sanitizedValue, "i");
          const returnAllOptions = !sanitizedValue || (!this.$props.filterable || !this.$props.filterable && this.$props.combobox);
          Object.entries(this.groupData.groups).forEach(([, group]) => {
            group.filtered = [];
            if (group.static) {
              if (returnAllOptions || this.groupData.numAsyncGroups) {
                group.filtered = group.options;
              } else {
                group.options.forEach((option) => {
                  if (regex2.test(this.getTitle(option))) {
                    group.filtered.push(option);
                  }
                });
              }
            } else if (group.async) {
              if (!this.$props.filterable) {
                group.optionsFunction(sanitizedValue);
              } else if (group.lazy || sanitizedValue.length >= this.$props.minSearchLength) {
                group.debounce(sanitizedValue);
              }
            }
          });
        },
        invokeOptionsFunction(fn, groupId, term) {
          const group = this.groupData.groups[groupId];
          group.loading = true;
          const searchIndex = ++group.searchIndex;
          fn.call(fn, term).then((options = []) => {
            if (searchIndex < group.searchIndex)
              return;
            const filtered = [];
            options.forEach((option) => {
              if (typeof option === "object") {
                filtered.push({ $__guid: getGUID(), ...option });
              } else if (["string", "number"].includes(typeof option)) {
                filtered.push({
                  $__guid: getGUID(),
                  [this.idKey]: option,
                  [this.titleKey]: option.toString()
                });
              }
            });
            group.filtered = group.filtered.concat(filtered);
            if (group.lazy || !this.$props.filterable) {
              group.options = group.filtered;
              group.static = true;
              group.async = false;
              this.groupData.hasStaticOptions = true;
              this.groupData.numAsyncGroups--;
            }
            this.doRenderDropdown = true;
            if (!this.multiselectDialog) {
              this.$nextTick(() => {
                group.loading = false;
              });
            }
          }).catch((error) => {
            throw new Error(error);
          });
        },
        isOptionSelected(option) {
          const id = this.getId(option);
          return this.$props.modelValue === id || (this.$props.multiselect || this.$props.multiselectDialog) && this.mutableValueArray.includes(id);
        },
        onInput() {
          this.activationHandler();
          this.updateComboboxInputOption();
        },
        updateComboboxInputOption() {
          if (!this.combobox)
            return;
          if (this.input) {
            this.comboboxInputOption = {
              [this.$props.idKey]: this.input,
              [this.$props.titleKey]: this.input
            };
          } else {
            this.comboboxInputOption = null;
          }
        },
        select(option, e) {
          if (this.onRequestSelectOption && typeof this.onRequestSelectOption === "function" && !this.onRequestSelectOption(option, e)) {
            return;
          }
          const id = this.getId(option);
          if (this.singleSelect) {
            this.$emit("update:modelValue", id);
          } else if (this.isOptionSelected(option)) {
            this.$emit("update:modelValue", this.mutableValueArray.filter((item) => this.getId(item) !== id));
          } else {
            this.mutableValueArray.push(id);
            this.$emit("update:modelValue", this.mutableValueArray);
          }
          const optionToEmit = { ...option };
          delete optionToEmit.$__guid;
          this.$emit("selected-option", optionToEmit, e);
          if (!this.$props.multiselectDialog && !this.$props.remainOpenOnSelect) {
            this.$nextTick(() => {
              this.reset();
              this.$nextTick(() => {
                this.$refs.input.focus();
              });
            });
          }
        },
        removePillListOptionHandler(option, e) {
          this.select(option, e);
        }
      }
    };
    const _hoisted_1$1p = ["id", "for"];
    const _hoisted_2$1n = ["title"];
    const _hoisted_3$17 = { class: "slds-form-element__control" };
    const _hoisted_4$$ = ["aria-expanded"];
    const _hoisted_5$V = {
      class: "slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right",
      role: "none"
    };
    const _hoisted_6$M = ["id", "disabled", "aria-labelledby", "aria-controls"];
    const _hoisted_7$F = { class: "slds-truncate" };
    const _hoisted_8$B = ["id", "aria-controls", "aria-activedescendant", "aria-invalid", "aria-describedby", "placeholder", "readonly", "disabled"];
    const _hoisted_9$A = {
      key: 1,
      class: "readonly-select-label"
    };
    const _hoisted_10$s = ["id"];
    function _sfc_render$1y(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Tooltip = resolveComponent("Tooltip");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Icon = resolveComponent("Icon");
      const _component_Dropdown = resolveComponent("Dropdown");
      const _component_MultiselectDialog = resolveComponent("MultiselectDialog");
      const _component_PillList = resolveComponent("PillList");
      const _directive_click_outside = resolveDirective("click-outside");
      const _directive_detach_element = resolveDirective("detach-element");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["slds-form-element", { "slds-has-error": $options.hasErrors }])
      }, [
        $options.computedLabels.name ? (openBlock(), createElementBlock("label", {
          key: 0,
          id: $data.labelId,
          class: "slds-form-element__label",
          for: $data.inputId
        }, [
          $props.required ? (openBlock(), createElementBlock("abbr", {
            key: 0,
            class: "slds-required",
            title: $options.computedLabels.required
          }, "* ", 8, _hoisted_2$1n)) : createCommentVNode("", true),
          createTextVNode(toDisplayString(_ctx.decodeHtml($options.computedLabels.name)), 1)
        ], 8, _hoisted_1$1p)) : createCommentVNode("", true),
        _ctx.$props.helpText ? (openBlock(), createBlock(_component_Tooltip, {
          key: 1,
          alignment: "top right",
          class: "slds-form-element__icon",
          text: _ctx.$props.helpText
        }, null, 8, ["text"])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_3$17, [
          createBaseVNode("div", {
            class: normalizeClass(["slds-combobox_container", { "slds-has-selection": $options.hasAutocompletedValue }])
          }, [
            createBaseVNode("div", {
              class: normalizeClass(["slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click", { "slds-is-open": $options.computedDoRenderDropdown }]),
              "aria-expanded": `${$options.computedDoRenderDropdown}`,
              "aria-haspopup": "listbox",
              role: "combobox"
            }, [
              createBaseVNode("div", _hoisted_5$V, [
                !_ctx.$props.readonly ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  $options.hasAutocompletedValue ? (openBlock(), createElementBlock("button", {
                    key: 0,
                    id: $data.inputId,
                    ref: "input",
                    disabled: _ctx.$props.disabled,
                    type: "button",
                    class: "slds-input_faux slds-combobox__input slds-combobox__input-value",
                    "aria-labelledby": [$data.labelId, $data.inputId].join(" "),
                    "aria-controls": $data.dropdownId,
                    "aria-expanded": "false",
                    "aria-haspopup": "listbox"
                  }, [
                    createBaseVNode("span", _hoisted_7$F, toDisplayString($data.input), 1)
                  ], 8, _hoisted_6$M)) : withDirectives((openBlock(), createElementBlock("input", mergeProps({
                    key: 1,
                    id: $options.computedLabels.name ? $data.inputId : $props.labelForId,
                    ref: "input",
                    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.input = $event),
                    type: "text",
                    class: ["slds-input slds-combobox__input", { "slds-combobox__input-value": $options.hasAutocompletedValue }],
                    "aria-autocomplete": "list",
                    autoComplete: "off",
                    role: "textbox",
                    "aria-controls": $options.computedDoRenderDropdown ? $data.dropdownId : null,
                    "aria-activedescendant": $options.getIdAsString($data.focusedOptionId),
                    "aria-invalid": !!_ctx.$props.errors.length,
                    "aria-describedby": _ctx.$props.errors.length ? $data.errorId : null,
                    placeholder: $options.computedPlaceholder,
                    readonly: $options.isReadOnly,
                    disabled: _ctx.$props.disabled
                  }, _ctx.$attrs, {
                    onInput: _cache[1] || (_cache[1] = (...args) => $options.onInput && $options.onInput(...args)),
                    onClick: _cache[2] || (_cache[2] = (...args) => $options.onClick && $options.onClick(...args)),
                    onBlur: _cache[3] || (_cache[3] = (...args) => $options.onBlur && $options.onBlur(...args)),
                    onKeydown: [
                      _cache[4] || (_cache[4] = withKeys(withModifiers((...args) => $options.down && $options.down(...args), ["prevent"]), ["down"])),
                      _cache[5] || (_cache[5] = withKeys(withModifiers((...args) => $options.up && $options.up(...args), ["prevent"]), ["up"])),
                      _cache[6] || (_cache[6] = withKeys(withModifiers((...args) => $options.enter && $options.enter(...args), ["prevent"]), ["enter"])),
                      _cache[7] || (_cache[7] = withKeys(withModifiers((...args) => $options.escape && $options.escape(...args), ["stop"]), ["esc"]))
                    ]
                  }), null, 16, _hoisted_8$B)), [
                    [vModelText, $data.input]
                  ]),
                  !_ctx.$props.disabled && $options.hasAutocompletedValue ? (openBlock(), createBlock(_component_ButtonIcon, {
                    key: 2,
                    class: "slds-input__icon",
                    iconCategory: "utility",
                    iconName: "clear",
                    assistiveText: $options.computedLabels.clearAssistiveText,
                    title: $options.computedLabels.clearTitle,
                    onClick: $options.clear
                  }, null, 8, ["assistiveText", "title", "onClick"])) : $options.isLoading ? (openBlock(), createBlock(_component_Spinner, {
                    key: 3,
                    class: "slds-input__icon",
                    size: "x-small",
                    theme: "brand",
                    loadingLabel: $options.computedLabels.loading,
                    withoutContainer: ""
                  }, null, 8, ["loadingLabel"])) : renderSlot(_ctx.$slots, "icon", { key: 4 }, () => [
                    $options.showSearchIcon ? (openBlock(), createBlock(_component_Icon, {
                      key: 0,
                      class: "slds-input__icon",
                      category: "utility",
                      name: "search",
                      size: "x-small"
                    })) : $options.showDownIcon && !$options.isLoading ? (openBlock(), createBlock(_component_Icon, {
                      key: 1,
                      class: "slds-input__icon",
                      category: "utility",
                      name: "down",
                      size: "x-small"
                    })) : createCommentVNode("", true)
                  ], true)
                ], 64)) : (openBlock(), createElementBlock("div", _hoisted_9$A, toDisplayString($options.readonlyValue), 1))
              ]),
              $options.computedDoRenderDropdown ? withDirectives((openBlock(), createBlock(_component_Dropdown, {
                key: 0,
                ref: "dropdown"
              }, {
                option: withCtx(({ option, index }) => [
                  renderSlot(_ctx.$slots, "option", {
                    option,
                    index
                  }, void 0, true)
                ]),
                dropdownHeader: withCtx(() => [
                  renderSlot(_ctx.$slots, "dropdownHeader", {}, void 0, true)
                ]),
                _: 3
              })), [
                [_directive_click_outside, $options.clickOutsideOptions],
                [_directive_detach_element, {
                  disabled: !$props.detach,
                  anchorRef: _ctx.$refs.input,
                  viewPortOverflow: true,
                  anchorTopOnVerticalOverflow: true,
                  onRender: $options.onDetachRender,
                  resizeToAnchor: !_ctx.$props.resizeToFitContent,
                  resizeToFitContent: _ctx.$props.resizeToFitContent,
                  alignment: "left",
                  scrollHandler: $options.reset
                }]
              ]) : createCommentVNode("", true),
              _ctx.$props.multiselectDialog && $data.doRenderDropdown ? withDirectives((openBlock(), createBlock(_component_MultiselectDialog, {
                key: 1,
                ref: "dropdown"
              }, null, 512)), [
                [_directive_detach_element, {
                  disabled: !$props.detach,
                  anchorRef: _ctx.$refs.input,
                  viewPortOverflow: true,
                  anchorTopOnVerticalOverflow: true,
                  onRender: $options.onDetachRender,
                  resizeToAnchor: !_ctx.$props.resizeToFitContent,
                  resizeToFitContent: _ctx.$props.resizeToFitContent,
                  alignment: "left",
                  scrollHandler: $options.reset
                }]
              ]) : createCommentVNode("", true)
            ], 10, _hoisted_4$$)
          ], 2),
          $options.doRenderPillList ? (openBlock(), createBlock(_component_PillList, {
            key: 0,
            readonly: _ctx.$props.readonly,
            options: $data.multiselectOptions,
            onRemove: $options.removePillListOptionHandler
          }, null, 8, ["readonly", "options", "onRemove"])) : createCommentVNode("", true)
        ]),
        renderSlot(_ctx.$slots, "footer", {}, void 0, true),
        _ctx.$props.errors.length ? (openBlock(), createElementBlock("div", {
          key: 2,
          id: $data.errorId,
          class: "slds-form-element__help"
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.errors, (error, index) => {
            return openBlock(), createElementBlock("p", { key: index }, toDisplayString(_ctx.decodeHtml(error)), 1);
          }), 128))
        ], 8, _hoisted_10$s)) : createCommentVNode("", true)
      ], 2);
    }
    const Picklist = /* @__PURE__ */ _export_sfc(_sfc_main$1z, [["render", _sfc_render$1y], ["__scopeId", "data-v-3db3f0d2"]]);
    const TextInput_vue_vue_type_style_index_0_scoped_7b6f943d_lang = "";
    const defaultLabels$3 = () => ({
      name: null,
      placeholder: null,
      required: "Required"
    });
    const _sfc_main$1y = {
      name: "TextInput",
      components: { Tooltip },
      mixins: [decodeHtml],
      props: {
        /**
         * Disables the input and prevents editing the contents.
         */
        disabled: Boolean,
        /**
         * Disables manual resize for textarea type inputs.
         */
        disableResize: Boolean,
        /**
         * Error array for text input.
         */
        errors: {
          type: Array,
          default: () => []
        },
        /**
         * Displays text or node to the left of the input. This follows the fixed text input UX pattern.
         */
        fixedTextLeft: {
          type: String,
          default: ""
        },
        /**
         * Displays text or node to the right of the input. This follows the fixed text input UX pattern.
         */
        fixedTextRight: {
          type: String,
          default: ""
        },
        /**
         * Immediately sets focus to input.
         */
        hasFocus: Boolean,
        /**
         * Content for Tooltip component that is displayed next to the label.
         */
        helpText: {
          type: String,
          default: ""
        },
        /**
         * Labels prop for input.
         */
        labels: {
          type: Object,
          default: () => {
          }
        },
        /**
         * The input is a controlled component, and will always display this value.
         */
        modelValue: {
          type: [String, Number],
          default: null
        },
        /**
         * Displays the value of the input as read-only. This is used in the inline edit UX pattern.
         */
        readonly: Boolean,
        /**
         * Highlights the input as a required field (does not perform any validation).
         */
        required: Boolean,
        /**
         * The element includes support for all HTML5 types.
         */
        type: {
          type: String,
          default: "text"
        },
        /**
         * A multi-line plain-text editing control.
         */
        useTextArea: Boolean
      },
      data() {
        return {
          errorId: getGUID(),
          inputId: getGUID(),
          labelId: getGUID()
        };
      },
      computed: {
        computedLabels() {
          const globals = Object.hasOwn(this, "$__getGlobalLabels") ? this.$__getGlobalLabels().textInput || {} : {};
          return {
            ...defaultLabels$3(),
            ...globals,
            ...this.$props.labels
          };
        },
        hasErrors() {
          return this.$props.errors.length;
        },
        hasFixedAddon() {
          return this.$props.fixedTextLeft || this.$props.fixedTextRight;
        },
        fixedAddonIds() {
          if (!this.hasFixedAddon)
            return null;
          let addonIds = this.labelId;
          if (this.$props.fixedTextLeft)
            addonIds += " fixed-text-addon-pre";
          if (this.$props.fixedTextRight)
            addonIds += " fixed-text-addon-post";
          return addonIds;
        }
      },
      watch: {
        "$props.hasFocus": {
          handler(value) {
            if (value)
              this.focus();
          }
        }
      },
      mounted() {
        if (this.$props.hasFocus)
          this.focus();
      },
      methods: {
        focus() {
          this.$refs.input.focus();
          this.$refs.input.select();
        },
        onInput(e) {
          this.$emit("update:modelValue", e.target.value);
        }
      }
    };
    const _hoisted_1$1o = ["id", "for"];
    const _hoisted_2$1m = ["title"];
    const _hoisted_3$16 = {
      key: 0,
      id: "fixed-text-addon-pre",
      class: "slds-form-element__addon"
    };
    const _hoisted_4$_ = ["id", "disabled", "value", "placeholder", "readonly", "aria-labelledby", "aria-invalid", "aria-describedby"];
    const _hoisted_5$U = ["id", "type", "disabled", "readonly", "placeholder", "value", "aria-labelledby", "aria-invalid", "aria-describedby"];
    const _hoisted_6$L = {
      key: 3,
      id: "fixed-text-addon-post",
      class: "slds-form-element__addon"
    };
    const _hoisted_7$E = ["id"];
    function _sfc_render$1x(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Tooltip = resolveComponent("Tooltip");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([{ "slds-has-error": $options.hasErrors }, "slds-form-element"])
      }, [
        $options.computedLabels.name ? (openBlock(), createElementBlock("label", {
          key: 0,
          id: $data.labelId,
          for: $data.inputId,
          class: "slds-form-element__label"
        }, [
          _ctx.$props.required ? (openBlock(), createElementBlock("abbr", {
            key: 0,
            class: "slds-required",
            title: $options.computedLabels.required
          }, "*", 8, _hoisted_2$1m)) : createCommentVNode("", true),
          createTextVNode(" " + toDisplayString(_ctx.decodeHtml($options.computedLabels.name)), 1)
        ], 8, _hoisted_1$1o)) : createCommentVNode("", true),
        _ctx.$props.helpText ? (openBlock(), createBlock(_component_Tooltip, {
          key: 1,
          class: "slds-form-element__icon",
          alignment: "top right",
          text: _ctx.$props.helpText
        }, null, 8, ["text"])) : createCommentVNode("", true),
        createBaseVNode("div", {
          class: normalizeClass(["slds-form-element__control", { "slds-input-has-fixed-addon": $options.hasFixedAddon }])
        }, [
          _ctx.$props.fixedTextLeft ? (openBlock(), createElementBlock("span", _hoisted_3$16, toDisplayString(_ctx.$props.fixedTextLeft), 1)) : createCommentVNode("", true),
          _ctx.$props.useTextArea ? (openBlock(), createElementBlock("textarea", mergeProps({
            key: 1,
            id: $data.inputId,
            ref: "input",
            disabled: _ctx.$props.disabled,
            value: _ctx.$props.modelValue,
            placeholder: $options.computedLabels.placeholder,
            readonly: _ctx.$props.readonly,
            "aria-labelledby": $options.fixedAddonIds,
            "aria-invalid": !!_ctx.$props.errors.length,
            "aria-describedby": _ctx.$props.errors.length ? $data.errorId : null,
            class: [{ "disable-resize": _ctx.$props.disableResize }, "slds-textarea"]
          }, toHandlers(_ctx.$attrs, true), {
            onInput: _cache[0] || (_cache[0] = (...args) => $options.onInput && $options.onInput(...args)),
            onBlur: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("update:hasFocus", false))
          }), null, 16, _hoisted_4$_)) : (openBlock(), createElementBlock("input", mergeProps({
            key: 2,
            id: $data.inputId,
            ref: "input",
            type: _ctx.$props.type,
            disabled: _ctx.$props.disabled,
            readonly: _ctx.$props.readonly,
            placeholder: $options.computedLabels.placeholder,
            value: _ctx.$props.modelValue,
            "aria-labelledby": $options.fixedAddonIds,
            "aria-invalid": !!_ctx.$props.errors.length,
            "aria-describedby": _ctx.$props.errors.length ? $data.errorId : null,
            class: "slds-input"
          }, toHandlers(_ctx.$attrs, true), {
            onInput: _cache[2] || (_cache[2] = (...args) => $options.onInput && $options.onInput(...args)),
            onBlur: _cache[3] || (_cache[3] = ($event) => _ctx.$emit("update:hasFocus", false))
          }), null, 16, _hoisted_5$U)),
          _ctx.$props.fixedTextRight ? (openBlock(), createElementBlock("span", _hoisted_6$L, toDisplayString(_ctx.$props.fixedTextRight), 1)) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "extend", {}, void 0, true)
        ], 2),
        _ctx.$props.errors.length ? (openBlock(), createElementBlock("div", {
          key: 2,
          id: $data.errorId,
          class: "slds-form-element__help"
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.errors, (error, index) => {
            return openBlock(), createElementBlock("p", { key: index }, toDisplayString(_ctx.decodeHtml(error)), 1);
          }), 128))
        ], 8, _hoisted_7$E)) : createCommentVNode("", true)
      ], 2);
    }
    const TextInput = /* @__PURE__ */ _export_sfc(_sfc_main$1y, [["render", _sfc_render$1x], ["__scopeId", "data-v-7b6f943d"]]);
    var columnResizer = { exports: {} };
    (function(module2, exports2) {
      !function webpackUniversalModuleDefinition(e, t) {
        module2.exports = t();
      }(commonjsGlobal, () => (() => {
        var e = { 887: (e2) => {
          e2.exports = function hash2(e3) {
            for (var t2 = 5381, r2 = e3.length; r2; )
              t2 = 33 * t2 ^ e3.charCodeAt(--r2);
            return t2 >>> 0;
          };
        } }, t = {};
        function __webpack_require__(r2) {
          var i2 = t[r2];
          if (void 0 !== i2)
            return i2.exports;
          var o = t[r2] = { exports: {} };
          return e[r2](o, o.exports, __webpack_require__), o.exports;
        }
        __webpack_require__.n = (e2) => {
          var t2 = e2 && e2.__esModule ? () => e2.default : () => e2;
          return __webpack_require__.d(t2, { a: t2 }), t2;
        }, __webpack_require__.d = (e2, t2) => {
          for (var r2 in t2)
            __webpack_require__.o(t2, r2) && !__webpack_require__.o(e2, r2) && Object.defineProperty(e2, r2, { enumerable: true, get: t2[r2] });
        }, __webpack_require__.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), __webpack_require__.r = (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        };
        var r = {};
        return (() => {
          __webpack_require__.r(r), __webpack_require__.d(r, { default: () => n });
          var e2 = __webpack_require__(887), t2 = __webpack_require__.n(e2);
          function _typeof2(e3) {
            return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            }, _typeof2(e3);
          }
          function _defineProperties(e3, t3) {
            for (var r2 = 0; r2 < t3.length; r2++) {
              var i3 = t3[r2];
              i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(e3, _toPropertyKey(i3.key), i3);
            }
          }
          function _createClass(e3, t3, r2) {
            return t3 && _defineProperties(e3.prototype, t3), r2 && _defineProperties(e3, r2), Object.defineProperty(e3, "prototype", { writable: false }), e3;
          }
          function _classCallCheck(e3, t3) {
            if (!(e3 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          }
          function _defineProperty2(e3, t3, r2) {
            return (t3 = _toPropertyKey(t3)) in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
          }
          function _toPropertyKey(e3) {
            var t3 = function _toPrimitive(e4, t4) {
              if ("object" !== _typeof2(e4) || null === e4)
                return e4;
              var r2 = e4[Symbol.toPrimitive];
              if (void 0 !== r2) {
                var i3 = r2.call(e4, t4 || "default");
                if ("object" !== _typeof2(i3))
                  return i3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return ("string" === t4 ? String : Number)(e4);
            }(e3, "string");
            return "symbol" === _typeof2(t3) ? t3 : String(t3);
          }
          var i2, o = (i2 = 0, function() {
            return i2++;
          }), n = _createClass(function ColumnResizer2(e3) {
            var r2 = this, i3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            _classCallCheck(this, ColumnResizer2), _defineProperty2(this, "ID", "id"), _defineProperty2(this, "PX", "px"), _defineProperty2(this, "RESIZABLE", "grip-resizable"), _defineProperty2(this, "FLEX", "grip-flex"), _defineProperty2(this, "legacyIE", navigator.userAgent.indexOf("Trident/4.0") > 0), _defineProperty2(this, "reset", function(e4) {
              return r2.init(e4);
            }), _defineProperty2(this, "onResize", function() {
              var e4 = r2.tb;
              if (e4.classList.remove(r2.RESIZABLE), e4.opt.fixed) {
                e4.tableWidth = Number(window.getComputedStyle(e4).width.replace(/px/, "")).valueOf();
                for (var t3 = 0, i4 = 0; i4 < e4.columnCnt; i4++)
                  t3 += e4.columns[i4].w;
                for (var o2 = 0; o2 < e4.columnCnt; o2++)
                  e4.columns[o2].style.width = Math.round(1e3 * e4.columns[o2].w / t3) / 10 + "%", e4.columns[o2].locked = true, e4.opt.currentWidths[o2] = Number(window.getComputedStyle(e4.columns[o2]).width.replace(/px/, "")).valueOf();
              } else
                r2.applyBounds(), "flex" === e4.opt.resizeMode && e4.opt.serialize && r2.serializeStore();
              e4.classList.add(r2.RESIZABLE), r2.syncGrips();
            }), _defineProperty2(this, "onGripMouseDown", function(e4) {
              var t3 = e4.target.parentNode.data, i4 = r2.tb, o2 = i4.grips[t3.i], n2 = e4.touches;
              if (o2.ox = n2 ? n2[0].pageX : e4.pageX, o2.l = o2.offsetLeft, o2.x = o2.l, r2.createStyle(document.querySelector("head"), "*{cursor:" + i4.opt.dragCursor + "!important}"), document.addEventListener("touchmove", r2.onGripDrag), document.addEventListener("mousemove", r2.onGripDrag), document.addEventListener("touchend", r2.onGripDragOver), document.addEventListener("mouseup", r2.onGripDragOver), o2.classList.add(i4.opt.draggingClass), r2.grip = o2, i4.columns[t3.i].locked)
                for (var l, a = 0; a < i4.columnCnt; a++)
                  (l = i4.columns[a]).locked = false, l.w = Number(window.getComputedStyle(l).width.replace(/px/, "")).valueOf();
              e4.preventDefault();
            }), _defineProperty2(this, "onGripDrag", function(e4) {
              var t3 = r2.grip;
              if (t3) {
                var i4 = t3.t, o2 = e4.touches, n2 = (o2 ? o2[0].pageX : e4.pageX) - t3.ox + t3.l, l = i4.opt.minWidth, a = t3.i, s = 1.5 * i4.cellSpace + l + i4.borderSpace, d = a === i4.columnCnt - 1, p2 = a ? i4.grips[a - 1].offsetLeft + i4.cellSpace + l : s, u = i4.opt.fixed ? a === i4.columnCnt - 1 ? i4.tableWidth - s : i4.grips[a + 1].offsetLeft - i4.cellSpace - l : 1 / 0;
                if (n2 = Math.max(p2, Math.min(u, n2)), t3.x = n2, t3.style.left = n2 + r2.PX, d && (t3.w = i4.columns[a].w + n2 - t3.l), i4.opt.liveDrag) {
                  d ? (i4.columns[a].style.width = t3.w + r2.PX, !i4.opt.fixed && i4.opt.overflow ? i4.style.minWidth = i4.tableWidth + n2 - t3.l + r2.PX : i4.tableWidth = Number(window.getComputedStyle(i4).width.replace(/px/, "")).valueOf()) : r2.syncCols(i4, a, false, i4.opt), r2.syncGrips();
                  var c = i4.opt.onDrag;
                  c && c(e4);
                }
                e4.preventDefault();
              }
            }), _defineProperty2(this, "onGripDragOver", function(e4) {
              var t3 = r2.grip;
              document.removeEventListener("touchend", r2.onGripDragOver), document.removeEventListener("mouseup", r2.onGripDragOver), document.removeEventListener("touchmove", r2.onGripDrag), document.removeEventListener("mousemove", r2.onGripDrag);
              var i4 = document.querySelector("head").lastChild;
              if (i4.parentNode.removeChild(i4), t3) {
                if (t3.classList.remove(t3.t.opt.draggingClass), t3.x - t3.l != 0) {
                  var o2 = t3.t, n2 = o2.opt.onResize, l = t3.i;
                  if (l === o2.columnCnt - 1) {
                    var a = o2.columns[l];
                    a.style.width = t3.w + r2.PX, a.w = t3.w;
                  } else
                    r2.syncCols(o2, l, true, o2.opt);
                  o2.opt.fixed || r2.applyBounds(), r2.syncGrips(), n2 && n2(e4), o2.opt.serialize && r2.serializeStore();
                }
                r2.grip = null;
              }
            }), _defineProperty2(this, "init", function(e4) {
              if (e4.disable)
                return r2.destroy();
              var t3 = r2.tb, i4 = t3.getAttribute(r2.ID) || r2.RESIZABLE + o();
              if (!t3.matches("table") || t3.extended && !e4.partialRefresh)
                return null;
              var n2 = document.querySelector("head");
              if (r2.createStyle(n2, " .grip-resizable{table-layout:fixed;} .grip-resizable > tbody > tr > td, .grip-resizable > tbody > tr > th{overflow:hidden} .grip-padding > tbody > tr > td, .grip-padding > tbody > tr > th{padding-left:0!important; padding-right:0!important;} .grip-container{ height:0px; position:relative;} .grip-handle{margin-left:-5px; position:absolute; z-index:5; } .grip-handle .grip-resizable{position:absolute;background-color:red;filter:alpha(opacity=1);opacity:0;width:10px;height:100%;cursor: col-resize;top:0px} .grip-lastgrip{position:absolute; width:1px; } .grip-drag{ border-left:1px dotted black;	} .grip-flex{width:auto!important;} .grip-handle.grip-disabledgrip .grip-resizable{cursor:default; display:none;}"), e4.hoverCursor && "col-resize" !== e4.hoverCursor) {
                var l = ".grip-handle .grip-resizable:hover{cursor:" + e4.hoverCursor + "!important}";
                r2.createStyle(n2, l);
              }
              t3.setAttribute(r2.ID, i4);
              var a = t3.opt;
              t3.opt = r2.extendOptions(e4);
              var s = r2.getTableHeaders(t3);
              if (r2.extendTable(s), e4.remoteTable && e4.remoteTable.matches("table")) {
                var d = r2.getTableHeaders(t3.opt.remoteTable);
                s.length === d.length ? r2.extendRemoteTable(t3.opt.remoteTable, d, t3) : console.warn("column count for remote table did not match");
              }
              return a;
            }), _defineProperty2(this, "applyBounds", function() {
              var e4 = r2.tb, t3 = e4.columns.map(function(e5) {
                return window.getComputedStyle(e5).width;
              });
              e4.style.width = window.getComputedStyle(e4).width, e4.tableWidth = Number(e4.style.width.replace(/px/, "")).valueOf(), e4.classList.remove(r2.FLEX), e4.columns.forEach(function(r3, i4) {
                r3.style.width = t3[i4];
                var o2 = Number(t3[i4].replace(/px/, "")).valueOf();
                r3.w = o2, e4.opt.currentWidths[i4] = o2;
              }), e4.classList.add(r2.FLEX);
            }), _defineProperty2(this, "serializeStore", function() {
              var e4 = r2.store, t3 = r2.tb;
              e4[t3.getAttribute(r2.ID)] = "";
              for (var i4 = 0, o2 = 0; o2 < t3.columns.length; o2++) {
                var n2 = window.getComputedStyle(t3.columns[o2]).width.replace(/px/, "");
                e4[t3.getAttribute(r2.ID)] += n2 + ";", i4 += Number(n2).valueOf();
              }
              e4[t3.getAttribute(r2.ID)] += i4.toString(), t3.opt.fixed || (e4[t3.getAttribute(r2.ID)] += ";" + window.getComputedStyle(t3).width.replace(/px/, ""));
            }), _defineProperty2(this, "syncGrips", function() {
              var e4 = r2.tb;
              e4.gripContainer.style.width = e4.tableWidth + r2.PX;
              for (var t3 = 0; t3 < e4.columnCnt; t3++) {
                var i4 = e4.columns[t3], o2 = i4.getBoundingClientRect(), n2 = e4.getBoundingClientRect();
                e4.grips[t3].style.left = o2.left - n2.left + i4.offsetWidth + e4.cellSpace / 2 + r2.PX, e4.grips[t3].style.height = (e4.opt.headerOnly ? e4.columns[0].offsetHeight : e4.offsetHeight) + r2.PX;
              }
            }), _defineProperty2(this, "destroy", function() {
              var e4 = r2.tb, t3 = e4.getAttribute(r2.ID);
              return t3 ? (r2.store[t3] = "", e4.classList.remove(r2.RESIZABLE), e4.classList.remove(r2.FLEX), e4.remote && (e4.remote.classList.remove(r2.RESIZABLE), e4.remote.classList.remove(r2.FLEX)), e4.gripContainer && e4.gripContainer.parentNode && e4.gripContainer.parentNode.removeChild(e4.gripContainer), delete e4.extended, e4.opt) : null;
            }), _defineProperty2(this, "createStyle", function(e4, r3) {
              var i4 = t2()(r3).toString(), o2 = e4.querySelectorAll("style"), n2 = Array.from(o2).filter(function(e5) {
                return e5.gripid === i4;
              });
              if (!n2.length) {
                var l = document.createElement("style");
                l.type = "text/css", l.gripid = i4, l.styleSheet ? l.styleSheet.cssText = r3 : l.appendChild(document.createTextNode(r3)), e4.appendChild(l);
              }
            }), _defineProperty2(this, "extendOptions", function(e4) {
              var t3 = Object.assign({}, ColumnResizer2.DEFAULTS, e4);
              switch (t3.fixed = true, t3.overflow = false, t3.resizeMode) {
                case "flex":
                  t3.fixed = false;
                  break;
                case "overflow":
                  t3.fixed = false, t3.overflow = true;
              }
              return t3;
            }), _defineProperty2(this, "getTableHeaders", function(e4) {
              var t3 = "#" + e4.id, i4 = Array.from(e4.querySelectorAll(t3 + ">thead>tr:nth-of-type(1)>th"));
              return (i4 = i4.concat(Array.from(e4.querySelectorAll(t3 + ">thead>tr:nth-of-type(1)>td")))).length || (i4 = (i4 = (i4 = (i4 = Array.from(e4.querySelectorAll(t3 + ">tbody>tr:nth-of-type(1)>th"))).concat(Array.from(e4.querySelectorAll(t3 + ">tr:nth-of-type(1)>th")))).concat(Array.from(e4.querySelectorAll(t3 + ">tbody>tr:nth-of-type(1)>td")))).concat(Array.from(e4.querySelectorAll(t3 + ">tr:nth-of-type(1)>td")))), r2.filterInvisible(i4, false);
            }), _defineProperty2(this, "filterInvisible", function(e4, t3) {
              return e4.filter(function(e5) {
                var r3 = t3 ? -1 : e5.offsetWidth, i4 = t3 ? -1 : e5.offsetHeight;
                return !(0 === r3 && 0 === i4 || e5.style && e5.style.display && "none" === window.getComputedStyle(e5).display || false);
              });
            }), _defineProperty2(this, "extendTable", function(e4) {
              var t3 = r2.tb;
              t3.opt.removePadding && t3.classList.add("grip-padding"), t3.classList.add(r2.RESIZABLE), t3.insertAdjacentHTML("beforebegin", '<div class="grip-container"/>'), t3.grips = [], t3.columns = [], t3.tableWidth = Number(window.getComputedStyle(t3).width.replace(/px/, "")).valueOf(), t3.gripContainer = t3.previousElementSibling, t3.opt.marginLeft && (t3.gripContainer.style.marginLeft = t3.opt.marginLeft), t3.opt.marginRight && (t3.gripContainer.style.marginRight = t3.opt.marginRight), t3.cellSpace = parseInt(r2.legacyIE ? t3.cellSpacing || t3.currentStyle.borderSpacing : window.getComputedStyle(t3).borderSpacing.split(" ")[0].replace(/px/, "")) || 2, t3.borderSpace = parseInt(r2.legacyIE ? t3.border || t3.currentStyle.borderLeftWidth : window.getComputedStyle(t3).borderLeftWidth.replace(/px/, "")) || 1, t3.extended = true, r2.createGrips(e4);
            }), _defineProperty2(this, "extendRemoteTable", function(e4, t3, i4) {
              i4.opt.removePadding && e4.classList.add("grip-padding"), e4.classList.add(r2.RESIZABLE), e4.getAttribute(r2.ID) || e4.setAttribute(r2.ID, i4.getAttribute(r2.ID) + "remote"), e4.columns = [], t3.forEach(function(o3, n2) {
                var l = t3[n2];
                l.w = i4.columns[n2].w, l.style.width = l.w + r2.PX, l.removeAttribute("width"), e4.columns.push(l);
              }), e4.tableWidth = i4.tableWidth, e4.cellSpace = i4.cellSpace, e4.borderSpace = i4.borderSpace;
              var o2 = Array.from(e4.querySelectorAll("col"));
              e4.columnGrp = r2.filterInvisible(o2, true), e4.columnGrp.forEach(function(e5, t4) {
                e5.removeAttribute("width"), e5.style.width = i4.columnGrp[t4].style.width;
              }), i4.remote = e4;
            }), _defineProperty2(this, "createGrips", function(e4) {
              var t3 = r2.tb;
              t3.columnGrp = r2.filterInvisible(Array.from(t3.querySelectorAll("col")), true), t3.columnGrp.forEach(function(e5) {
                e5.removeAttribute("width");
              }), t3.columnCnt = e4.length;
              var i4 = false;
              r2.store[t3.getAttribute(r2.ID)] && (r2.deserializeStore(e4), i4 = true), e4.forEach(function(o3, n2) {
                var l = e4[n2], a = -1 !== t3.opt.disabledColumns.indexOf(n2);
                r2.createDiv(t3.gripContainer, "grip-handle");
                var s = t3.gripContainer.lastChild;
                !a && t3.opt.gripInnerHtml && (s.innerHTML = t3.opt.gripInnerHtml), r2.createDiv(s, r2.RESIZABLE), n2 === t3.columnCnt - 1 && (s.classList.add("grip-lastgrip"), t3.opt.fixed && (s.innerHTML = "")), s.addEventListener("touchstart", r2.onGripMouseDown, { capture: true, passive: true }), s.addEventListener("mousedown", r2.onGripMouseDown, true), a ? s.classList.add("grip-disabledgrip") : (s.classList.remove("grip-disabledgrip"), s.addEventListener("touchstart", r2.onGripMouseDown, { capture: true, passive: true }), s.addEventListener("mousedown", r2.onGripMouseDown, true)), s.t = t3, s.i = n2, t3.opt.widths[n2] ? l.w = t3.opt.widths[n2] : l.w = i4 ? Number(l.style.width.replace(/px/, "")).valueOf() : Number(window.getComputedStyle(l).width.replace(/px/, "")).valueOf(), t3.opt.currentWidths[n2] = l.w, l.style.width = l.w + r2.PX, l.removeAttribute("width"), s.data = { i: n2, t: t3.getAttribute(r2.ID), last: n2 === t3.columnCnt - 1 }, t3.grips.push(s), t3.columns.push(l);
              });
              var o2 = Array.from(t3.querySelectorAll("td"));
              o2.concat(Array.from(t3.querySelectorAll("th"))), (o2 = (o2 = o2.filter(function(t4) {
                for (var r3 = 0; r3 < e4.length; r3++)
                  if (e4[r3] === t4)
                    return false;
                return true;
              })).filter(function(e5) {
                return !(e5.querySelectorAll("table th").length || e5.querySelectorAll("table td").length);
              })).forEach(function(e5) {
                e5.removeAttribute("width");
              }), t3.opt.fixed || (t3.removeAttribute("width"), t3.classList.add(r2.FLEX)), r2.syncGrips();
            }), _defineProperty2(this, "deserializeStore", function(e4) {
              var t3 = r2.tb;
              if (t3.columnGrp.forEach(function(e5) {
                e5.removeAttribute("width");
              }), t3.opt.flush)
                r2.store[t3.getAttribute(r2.ID)] = "";
              else {
                var i4 = r2.store[t3.getAttribute(r2.ID)].split(";"), o2 = i4[t3.columnCnt + 1];
                !t3.opt.fixed && o2 && (t3.style.width = o2 + r2.PX, t3.opt.overflow && (t3.style.minWidth = o2 + r2.PX, t3.tableWidth = Number(o2).valueOf()));
                for (var n2 = 0; n2 < t3.columnCnt; n2++)
                  e4[n2].style.width = i4[n2] + r2.PX, t3.columnGrp[n2] && (t3.columnGrp[n2].style.width = 100 * Number(i4[n2]).valueOf() / Number(i4[t3.columnCnt]).valueOf() + "%");
              }
            }), _defineProperty2(this, "createDiv", function(e4, t3, r3) {
              var i4 = document.createElement("div");
              i4.classList.add(t3), r3 && (i4.innerHTML = r3), e4.appendChild(i4);
            }), _defineProperty2(this, "syncCols", function(e4, t3, i4, o2) {
              var n2 = e4.remote, l = r2.grip.x - r2.grip.l, a = e4.columns[t3], s = e4.columns[t3 + 1];
              if (a && s) {
                var d = a.w + l, p2 = s.w - l, u = d + r2.PX;
                if (a.style.width = u, e4.columnGrp[t3] && e4.columnGrp[t3].style.width && (e4.columnGrp[t3].style.width = u), n2 && (n2.columns[t3].style.width = u, n2.columnGrp[t3] && n2.columnGrp[t3].style.width && (n2.columnGrp[t3].style.width = u)), o2.fixed) {
                  var c = p2 + r2.PX;
                  s.style.width = c, e4.columnGrp[t3 + 1] && e4.columnGrp[t3 + 1].style.width && (e4.columnGrp[t3 + 1].style.width = c), n2 && (n2.columns[t3 + 1].style.width = c, n2.columnGrp[t3 + 1] && n2.columnGrp[t3 + 1].style.width && (n2.columnGrp[t3 + 1].style.width = c));
                } else
                  o2.overflow && (e4.style.minWidth = e4.tableWidth + l + r2.PX);
                i4 && (a.w = d, s.w = o2.fixed ? p2 : s.w, n2 && (n2.columns[t3].w = d, n2.columns[t3 + 1].w = o2.fixed ? p2 : s.w));
              }
            });
            try {
              this.store = sessionStorage;
            } catch (e4) {
              this.store = {};
            }
            this.grip = null, this.tb = e3, window.addEventListener("resize", this.onResize), Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector), this.init(i3);
          });
          n.DEFAULTS = { resizeMode: "fit", draggingClass: "grip-drag", gripInnerHtml: "", liveDrag: false, minWidth: 15, headerOnly: false, hoverCursor: "col-resize", dragCursor: "col-resize", flush: false, marginLeft: null, marginRight: null, remoteTable: null, disable: false, partialRefresh: false, disabledColumns: [], removePadding: true, widths: [], currentWidths: [], serialize: true, onDrag: null, onResize: null };
        })(), r;
      })());
    })(columnResizer);
    var columnResizerExports = columnResizer.exports;
    const ColumnResizer = /* @__PURE__ */ getDefaultExportFromCjs(columnResizerExports);
    const Layout_vue_vue_type_style_index_0_scoped_8aa1ef04_lang = "";
    const HALIN_CLASS = {
      center: "slds-grid_align-center",
      space: "slds-grid_align-space",
      spread: "slds-grid_align-spread",
      end: "slds-grid_align-end"
    };
    const VALIN_CLASS = {
      start: "slds-grid_vertical-align-start",
      center: "slds-grid_vertical-align-center",
      end: "slds-grid_vertical-align-end",
      stretch: "slds-grid_vertical-stretch"
    };
    const BOUNDARY_CLASS = {
      small: "slds-grid_pull-padded",
      medium: "slds-grid_pull-padded-medium",
      large: "slds-grid_pull-padded-large"
    };
    const VERTICAL_ALIGN = Object.keys(VALIN_CLASS);
    const BOUNDARY = Object.keys(BOUNDARY_CLASS);
    const HORIZONTAL_ALIGN = Object.keys(HALIN_CLASS);
    const ROWS_CLASS = "slds-wrap";
    const GRID_CLASS = "slds-grid";
    const VERTICAL_CLASS = "slds-grid_vertical";
    const GUTTERS_CLASS = "slds-gutters";
    const _sfc_main$1x = {
      name: "Layout",
      props: {
        gutters: Boolean,
        horizontalAlign: {
          type: String,
          default: null,
          validator(value) {
            return !value || HORIZONTAL_ALIGN.includes(value);
          }
        },
        multipleRows: Boolean,
        pullToBoundary: {
          type: String,
          default: null,
          validator(value) {
            return !value || BOUNDARY.includes(value);
          }
        },
        vertical: Boolean,
        verticalAlign: {
          type: String,
          default: null,
          validator(value) {
            return !value || VERTICAL_ALIGN.includes(value);
          }
        }
      },
      computed: {
        computedClasses() {
          const result = [
            GRID_CLASS,
            HALIN_CLASS[this.$props.horizontalAlign],
            VALIN_CLASS[this.$props.verticalAlign],
            BOUNDARY_CLASS[this.$props.boundary]
          ];
          if (this.$props.multipleRows) {
            result.push(ROWS_CLASS);
          }
          if (this.$props.vertical) {
            result.push(VERTICAL_CLASS);
          }
          if (this.$props.gutters) {
            result.push(GUTTERS_CLASS);
          }
          return result;
        }
      }
    };
    function _sfc_render$1w(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass($options.computedClasses)
      }, [
        renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ], 2);
    }
    const Layout = /* @__PURE__ */ _export_sfc(_sfc_main$1x, [["render", _sfc_render$1w], ["__scopeId", "data-v-8aa1ef04"]]);
    const PADDING = [
      "horizontal-small",
      "horizontal-medium",
      "horizontal-large",
      "around-small",
      "around-medium",
      "around-large"
    ];
    const PADDING_CLASS = {
      "slds-p-right_small": "horizontal-small",
      "slds-p-left_small": "horizontal-small",
      "slds-p-right_medium": "horizontal-medium",
      "slds-p-left_medium": "horizontal-medium",
      "slds-p-right_large": "horizontal-large",
      "slds-p-left_large": "horizontal-large",
      "slds-p-around_small": "around-small",
      "slds-p-around_medium": "around-medium",
      "slds-p-around_large": "around-large"
    };
    const FLEXIBILITY = [
      "auto",
      "shrink",
      "no-shrink",
      "grow",
      "no-grow",
      "no-flex"
    ];
    const FLEX_CLASS = {
      "slds-col": "auto",
      "slds-grow": "grow",
      "slds-shrink": "shrink",
      "slds-grow-none": "no-grow",
      "slds-shrink-none": "no-shrink",
      "slds-no-flex": "no-flex"
    };
    const SIZE_MIN = 1;
    const SIZE_MAX = 12;
    const SIZE_CLASS = {
      default: "slds-size_",
      small: "slds-small-size_",
      medium: "slds-medium-size_",
      large: "slds-large-size_"
    };
    const DIRECTION = ["left", "top", "right", "bottom"];
    const ERRORS = {
      FLEX_CONFLICT: "You cannot have `flexibility` value to be set to `auto` and `no-flex` together for LayoutItem component",
      SIZE_RANGE: "Invalid `size` attribute for LayoutItem component. The `size` attribute should be an integer between 1 and 12",
      SMALL_SIZE_RANGE: "Invalid `smallDeviceSize` attribute for LayoutItem component. The `smallDeviceSize` attribute should be an integer between 1 and 12",
      MEDIUM_SIZE_RANGE: "Invalid `mediumDeviceSize` attribute for LayoutItem component. The `mediumDeviceSize` attribute should be an integer between 1 and 12",
      LARGE_SIZE_RANGE: "Invalid `largeDeviceSize` attribute for LayoutItem component. The `largeDeviceSize` attribute should be an integer between 1 and 12",
      SIZE_REQUIRED: "You cannot have device specific size attributes for LayoutItem component without specifying the `size` attribute"
    };
    const _sfc_main$1w = {
      name: "LayoutItem",
      props: {
        /**
         * Make the item fluid so that it absorbs any extra space in its
         * container or shrinks when there is less space. Allowed values are:
         *   auto (columns grow or shrink equally as space allows),
         *   shrink (columns shrink equally as space decreases),
         *   no-shrink (columns don't shrink as space reduces),
         *   grow (columns grow equally as space increases),
         *   no-grow (columns don't grow as space increases),
         *   no-flex (columns don't grow or shrink as space changes).
         * Use a comma-separated or space-separated value for multiple options, such as 'auto, no-shrink'.
         */
        flexibility: {
          type: String,
          default: "auto",
          validator(value) {
            const classes = value.trim().split(/[,|\s]+/).map((item) => item.trim());
            if (classes.some((item) => item === "auto") && classes.some((item) => item === "no-flex")) {
              throw new Error(ERRORS.FLEX_CONFLICT);
            }
            return classes.every((item) => FLEXIBILITY.some((allowed) => item === allowed));
          }
        },
        /**
         * Specifies a direction to bump the alignment of adjacent layout items. Allowed values are left, top, right, bottom.
         */
        alignmentBump: {
          type: String,
          default: null,
          validator(value) {
            const classes = value.trim().split(/[,|\s]+/);
            if (classes.size > 1) {
              throw new Error("You cannot have more than one alignment class set.");
            }
            return classes.every((item) => DIRECTION.some((allowed) => item === allowed));
          }
        },
        padding: {
          type: String,
          default: null,
          validator(value) {
            const classes = value.trim().split(/[,|\s]+/);
            if (classes.size > 1) {
              throw new Error("You cannot have more than one padding class set.");
            }
            return classes.every((item) => PADDING.some((allowed) => item === allowed));
          }
        },
        size: {
          type: [Number, String],
          default: null,
          validator(value) {
            const num = parseInt(value, 10);
            if (!(SIZE_MIN <= num && num <= SIZE_MAX)) {
              throw new Error(ERRORS.SIZE_RANGE);
            }
            return true;
          }
        },
        smallDeviceSize: {
          type: [Number, String],
          default: null,
          validator(value) {
            const num = parseInt(value, 10);
            if (!(SIZE_MIN <= num && num <= SIZE_MAX)) {
              throw new Error(ERRORS.SMALL_SIZE_RANGE);
            }
            return true;
          }
        },
        mediumDeviceSize: {
          type: [Number, String],
          default: null,
          validator(value) {
            const num = parseInt(value, 10);
            if (!(SIZE_MIN <= num && num <= SIZE_MAX)) {
              throw new Error(ERRORS.MEDIUM_SIZE_RANGE);
            }
            return true;
          }
        },
        largeDeviceSize: {
          type: [Number, String],
          default: null,
          validator(value) {
            const num = parseInt(value, 10);
            if (!(SIZE_MIN <= num && num <= SIZE_MAX)) {
              throw new Error(ERRORS.LARGE_SIZE_RANGE);
            }
            return true;
          }
        }
      },
      data() {
        return {
          pFlexibility: null,
          pPadding: null,
          pAlignmentBump: null
        };
      },
      computed: {
        computedClasses() {
          const classes = /* @__PURE__ */ new Set();
          this.computeSizeClasses(
            {
              default: this.$props.size,
              small: this.$props.smallDeviceSize,
              medium: this.$props.mediumDeviceSize,
              large: this.$props.largeDeviceSize
            },
            classes
          );
          this.computePaddingClass(this.$props.padding, classes);
          this.computeFlexibilityClass(this.$props.flexibility, classes);
          this.computeBumpClass(this.$props.alignmentBump, classes);
          return Array.from(classes);
        }
      },
      watch: {
        size() {
          this.validateSizes();
        },
        smallDeviceSize() {
          this.validateSizes();
        },
        mediumDeviceSize() {
          this.validateSizes();
        },
        largeDeviceSize() {
          this.validateSizes();
        }
      },
      created() {
        this.validateSizes();
      },
      methods: {
        validateSizes() {
          if (this.$props.size === null && (this.$props.smallDeviceSize != null || this.$props.mediumDeviceSize != null || this.$props.largeDeviceSize != null)) {
            throw new Error(ERRORS.SIZE_REQUIRED);
          }
        },
        computeSizeClasses(sizes, classes) {
          Object.keys(SIZE_CLASS).forEach((key) => {
            const size2 = sizes[key];
            if (size2 != null && size2 !== 0) {
              classes.add(`${SIZE_CLASS[key]}${size2}-of-12`);
            }
          });
        },
        computeFlexibilityClass(flexibility, classes) {
          if (flexibility === null)
            return;
          flexibility = flexibility.trim().split(/[,|\s]+/).map((item) => item.trim());
          Object.keys(FLEX_CLASS).forEach((key) => {
            if (flexibility.some((flex) => flex === FLEX_CLASS[key])) {
              classes.add(key);
            }
          });
        },
        computePaddingClass(padding, classes) {
          if (padding === null)
            return;
          Object.keys(PADDING_CLASS).forEach((key) => {
            if (PADDING_CLASS[key].toLowerCase() === padding.trim()) {
              classes.add(key);
            }
          });
        },
        computeBumpClass(direction, classes) {
          if (direction) {
            classes.add(`slds-col_bump-${direction}`);
          }
        }
      }
    };
    function _sfc_render$1v(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass($options.computedClasses)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    }
    const LayoutItem = /* @__PURE__ */ _export_sfc(_sfc_main$1w, [["render", _sfc_render$1v]]);
    const _sfc_main$1v = {
      name: "DataTableRow",
      components: {
        ActionMenu,
        ActionMenuItem,
        Badge,
        ButtonIcon,
        Checkbox,
        ConditionalWrapper: ConditionalWrapper$1,
        Icon
      },
      inject: [
        "rootProps",
        "selectAllId",
        "rootEmit"
      ],
      props: [
        "childIndex",
        "depth",
        "parentRef",
        "row"
      ],
      data() {
        return {
          indexOfColumnBeingEdited: null
        };
      },
      methods: {
        handleAnchorClick(data, e) {
          if (typeof data.onClick === "function") {
            e.preventDefault();
            data.onClick(data, e);
          }
        },
        handleRowToggleClick() {
          this.$props.row.expanded = !this.$props.row.expanded;
        },
        handleCellEdit(event, index) {
          this.indexOfColumnBeingEdited = index;
          const cell = event.path.find((el) => ["td", "th"].includes(el.localName) && el.className.includes("slds-cell-edit"));
          this.$nextTick(() => cell.querySelector("input").focus());
        },
        handleRowAction(action) {
          this.rootEmit(
            "row-action",
            {
              action,
              ...this.$props
            }
          );
        },
        updateCellValue(e) {
          const cellValue = e.path[0].value;
          this.$props.row.data[this.indexOfColumnBeingEdited].value = cellValue;
          this.rootEmit("update-cell", { value: cellValue, row: this.$props.row, columnIndex: this.indexOfColumnBeingEdited });
          this.$nextTick(() => {
            if (!this.$props.row.data[this.indexOfColumnBeingEdited].error)
              this.indexOfColumnBeingEdited = null;
          });
        },
        resetEditMode() {
          this.indexOfColumnBeingEdited = null;
        }
      }
    };
    const _hoisted_1$1n = ["aria-selected", "aria-level"];
    const _hoisted_2$1l = {
      key: 0,
      class: "slds-text-align_right slds-cell_action-mode",
      role: "gridcell"
    };
    const _hoisted_3$15 = ["title"];
    const _hoisted_4$Z = {
      key: 0,
      "aria-describedby": "dialog-body-id-1",
      class: "slds-popover slds-popover slds-popover_edit",
      role: "dialog",
      style: { "position": "absolute", "top": "0px", "left": "0.0625rem" }
    };
    const _hoisted_5$T = {
      id: "dialog-body-id-1",
      class: "slds-popover__body"
    };
    const _hoisted_6$K = { class: "slds-media" };
    const _hoisted_7$D = { class: "slds-media__body" };
    const _hoisted_8$A = ["for"];
    const _hoisted_9$z = { class: "slds-assistive-text" };
    const _hoisted_10$r = { class: "slds-form-element__control slds-grow" };
    const _hoisted_11$o = ["id", "value"];
    const _hoisted_12$k = {
      key: 0,
      class: "slds-form-element__help"
    };
    const _hoisted_13$k = {
      key: 1,
      class: "slds-cell_action-mode",
      role: "gridcell"
    };
    function _sfc_render$1u(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Badge = resolveComponent("Badge");
      const _component_Icon = resolveComponent("Icon");
      const _component_ConditionalWrapper = resolveComponent("ConditionalWrapper");
      const _component_ActionMenuItem = resolveComponent("ActionMenuItem");
      const _component_ActionMenu = resolveComponent("ActionMenu");
      return openBlock(), createElementBlock("tr", {
        ref: "row",
        key: _ctx.$props.row.id,
        "aria-selected": $options.rootProps.multiselectable ? _ctx.$props.row.selected || "false" : null,
        "aria-level": _ctx.$props.depth ? _ctx.$props.depth : null,
        class: normalizeClass([{ "slds-is-selected": _ctx.$props.row.selected }, "slds-hint-parent"])
      }, [
        $options.rootProps.multiselectable ? (openBlock(), createElementBlock("td", _hoisted_2$1l, [
          createVNode(_component_Checkbox, {
            modelValue: _ctx.$props.row.selected,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.$props.row.selected = $event),
            ariaLabeledBy: $options.selectAllId,
            labels: { name: `Select item ${_ctx.$props.childIndex + 1}` },
            hideLabel: "",
            onInput: _cache[1] || (_cache[1] = ($event) => $options.rootEmit("select-row", { id: _ctx.$props.row.id, row: _ctx.$props.row, selected: _ctx.$props.row.selected }))
          }, null, 8, ["modelValue", "ariaLabeledBy", "labels"])
        ])) : createCommentVNode("", true),
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.row.data, (data, i2) => {
          var _a3, _b;
          return openBlock(), createBlock(resolveDynamicComponent(i2 === 0 ? "th" : "td"), {
            key: `'Root' + ${i2}`,
            "data-label": $options.rootProps.columns[i2].name,
            class: normalizeClass([
              `slds-text-align_${((_a3 = $options.rootProps.columns[i2]) == null ? void 0 : _a3.alignment) || "left"}`,
              {
                "slds-tree__item": i2 === 0 && $options.rootProps.tree,
                "slds-cell-edit": (_b = $options.rootProps) == null ? void 0 : _b.editableColumnIndices.includes(i2),
                "slds-is-edited": data == null ? void 0 : data.dirty,
                "slds-has-error": data == null ? void 0 : data.error
              }
            ]),
            role: i2 > 0 && $options.rootProps.tree ? "gridcell" : null,
            scope: i2 === 0 ? "row" : null
          }, {
            default: withCtx(() => {
              var _a4;
              return [
                createVNode(_component_ConditionalWrapper, {
                  class: normalizeClass(["slds-grid slds-grid_align-spread", { "slds-grow": i2 === 0 }]),
                  element: "span",
                  style: { "width": "100%" },
                  active: (_a4 = $options.rootProps) == null ? void 0 : _a4.editableColumnIndices.includes(i2)
                }, {
                  default: withCtx(() => {
                    var _a5, _b2;
                    return [
                      createVNode(_component_ConditionalWrapper, {
                        element: "span",
                        class: "slds-grid slds-truncate",
                        active: i2 === 0 && ((_a5 = $options.rootProps) == null ? void 0 : _a5.editableColumnIndices.includes(i2))
                      }, {
                        default: withCtx(() => {
                          var _a6;
                          return [
                            $options.rootProps.tree && i2 === 0 ? (openBlock(), createBlock(_component_ButtonIcon, {
                              key: 0,
                              variant: "bare",
                              iconCategory: "utility",
                              iconName: _ctx.$props.row.expanded ? "chevrondown" : "chevronright",
                              size: "x-small",
                              class: normalizeClass(["slds-m-right_x-small", { "slds-is-disabled": !((_a6 = _ctx.$props.row.children) == null ? void 0 : _a6.length) }]),
                              tabindex: "-1",
                              title: `Expand ${(data == null ? void 0 : data.type) === "anchor" ? data.value : data}`,
                              assistiveText: `Expand ${(data == null ? void 0 : data.type) === "anchor" ? data.value : data}`,
                              onClick: $options.handleRowToggleClick
                            }, null, 8, ["iconName", "class", "title", "assistiveText", "onClick"])) : createCommentVNode("", true),
                            (data == null ? void 0 : data.type) === "custom" ? renderSlot(_ctx.$slots, "cell", mergeProps({
                              key: 1,
                              column: $options.rootProps.columns[i2],
                              columnIndex: i2,
                              data
                            }, _ctx.$props)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                              (data == null ? void 0 : data.type) === "badge" ? (openBlock(), createBlock(_component_Badge, {
                                key: 0,
                                theme: data.theme,
                                content: data.value
                              }, null, 8, ["theme", "content"])) : typeof data === "boolean" ? (openBlock(), createBlock(_component_Icon, {
                                key: 1,
                                category: "utility",
                                name: "check",
                                size: "xx-small"
                              })) : (openBlock(), createElementBlock("div", {
                                key: 2,
                                title: (data == null ? void 0 : data.type) === "anchor" ? data.value : data,
                                class: "slds-truncate"
                              }, [
                                createVNode(_component_ConditionalWrapper, mergeProps({
                                  tabindex: "-1",
                                  element: "a"
                                }, (data == null ? void 0 : data.attrs) || {}, {
                                  active: (data == null ? void 0 : data.type) === "anchor",
                                  onClick: ($event) => $options.handleAnchorClick(data, $event)
                                }), {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString((data == null ? void 0 : data.type) === "anchor" ? data.value : data), 1)
                                  ]),
                                  _: 2
                                }, 1040, ["active", "onClick"])
                              ], 8, _hoisted_3$15))
                            ], 64))
                          ];
                        }),
                        _: 2
                      }, 1032, ["active"]),
                      ((_b2 = $options.rootProps) == null ? void 0 : _b2.editableColumnIndices.includes(i2)) ? (openBlock(), createBlock(_component_ButtonIcon, {
                        key: 0,
                        variant: "bare",
                        iconCategory: "utility",
                        iconClass: "slds-button__icon_hint slds-button__icon_edit",
                        iconName: data.locked ? "lock" : "edit",
                        size: "x-small",
                        class: "slds-cell-edit__button slds-m-left_x-small",
                        title: `Edit ${$options.rootProps.columns[i2].name} of ${(data == null ? void 0 : data.type) === "anchor" ? data.value : data}`,
                        assistiveText: `Edit ${$options.rootProps.columns[i2].name} of ${(data == null ? void 0 : data.type) === "anchor" ? data.value : data}`,
                        disabled: data.locked,
                        onClick: ($event) => $options.handleCellEdit($event, i2)
                      }, null, 8, ["iconName", "title", "assistiveText", "disabled", "onClick"])) : createCommentVNode("", true)
                    ];
                  }),
                  _: 2
                }, 1032, ["class", "active"]),
                i2 === $data.indexOfColumnBeingEdited ? (openBlock(), createElementBlock("section", _hoisted_4$Z, [
                  createBaseVNode("div", _hoisted_5$T, [
                    createBaseVNode("div", _hoisted_6$K, [
                      createBaseVNode("div", _hoisted_7$D, [
                        createBaseVNode("div", {
                          class: normalizeClass(["slds-form-element slds-grid slds-wrap", { "slds-has-error": data.error }])
                        }, [
                          createBaseVNode("label", {
                            class: "slds-form-element__label slds-form-element__label_edit slds-no-flex",
                            for: `${$options.rootProps.columns[i2].name}-${i2}`
                          }, [
                            createBaseVNode("span", _hoisted_9$z, toDisplayString($options.rootProps.columns[i2].name), 1)
                          ], 8, _hoisted_8$A),
                          createBaseVNode("div", _hoisted_10$r, [
                            createBaseVNode("input", {
                              id: `${$options.rootProps.columns[i2].name}-${i2}`,
                              class: "slds-input",
                              type: "text",
                              value: data.value,
                              onBlur: _cache[2] || (_cache[2] = (...args) => $options.resetEditMode && $options.resetEditMode(...args)),
                              onKeydown: [
                                _cache[3] || (_cache[3] = withKeys(withModifiers((...args) => $options.resetEditMode && $options.resetEditMode(...args), ["stop"]), ["esc"])),
                                _cache[4] || (_cache[4] = withKeys(withModifiers(($event) => $options.updateCellValue($event), ["stop"]), ["enter"]))
                              ]
                            }, null, 40, _hoisted_11$o)
                          ]),
                          data.error ? (openBlock(), createElementBlock("div", _hoisted_12$k, toDisplayString(data.error), 1)) : createCommentVNode("", true)
                        ], 2)
                      ])
                    ])
                  ])
                ])) : createCommentVNode("", true)
              ];
            }),
            _: 2
          }, 1032, ["data-label", "class", "role", "scope"]);
        }), 128)),
        ((_a2 = _ctx.$props.row.actions) == null ? void 0 : _a2.length) ? (openBlock(), createElementBlock("td", _hoisted_13$k, [
          createVNode(_component_ActionMenu, null, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.row.actions, (action, i2) => {
                return openBlock(), createBlock(_component_ActionMenuItem, {
                  key: i2,
                  label: action.label,
                  onClick: ($event) => $options.handleRowAction(action)
                }, null, 8, ["label", "onClick"]);
              }), 128))
            ]),
            _: 1
          })
        ])) : createCommentVNode("", true)
      ], 10, _hoisted_1$1n);
    }
    const Row$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1v, [["render", _sfc_render$1u]]);
    const Node$1 = {
      name: "DataTableTreeNode",
      components: {
        Row: Row$1
      },
      props: [
        "depth",
        "parentRef",
        "row",
        "childIndex"
      ],
      render() {
        const children = [
          h(
            Row$1,
            {
              ...this.$props
            },
            {
              cell: (propsData) => this.$slots.cell ? this.$slots.cell(propsData) : null
            }
          )
        ];
        if (this.$props.row.children && this.$props.row.expanded) {
          this.$props.row.children.forEach((row, childIndex) => children.push(
            h(
              Node$1,
              {
                childIndex,
                depth: this.$props.depth + 1,
                parentRef: this.$props.row,
                row
              },
              {
                cell: (propsData) => this.$slots.cell ? this.$slots.cell(propsData) : null
              }
            )
          ));
        }
        return [children];
      }
    };
    const Tree$3 = {
      name: "DataTableTree",
      components: {
        Node: Node$1
      },
      props: ["rows"],
      render() {
        const _default = this.$slots.default ? this.$slots.default() : null;
        return this.$props.rows.map((row, childIndex) => h(
          Node$1,
          {
            childIndex,
            depth: 0,
            parentRef: null,
            row
          },
          {
            cell: (propsData) => this.$slots.cell ? this.$slots.cell(propsData) : null
          }
        )).concat(_default);
      }
    };
    const DataTable_vue_vue_type_style_index_0_scoped_c329aaab_lang = "";
    const __default__$3 = {
      name: "DataTable",
      components: {
        ActionMenu,
        ActionMenuItem,
        Checkbox,
        // ConditionalWrapper,
        Icon,
        Layout,
        LayoutItem,
        Row: Row$1,
        Tree: Tree$3
      },
      provide() {
        return {
          rootProps: this.$props,
          selectAllId: this.selectAllId,
          rootEmit: (...args) => {
            this.$emit(args[0], ...args.slice(1));
          }
        };
      },
      props: {
        actions: Boolean,
        ariaLabel: {
          type: String,
          default: ""
        },
        bordered: Boolean,
        bufferCells: Boolean,
        columns: {
          type: Array,
          required: true
        },
        columnsBordered: Boolean,
        editableColumnIndices: {
          type: Array,
          default: () => []
        },
        hideHeader: Boolean,
        multiselectable: Boolean,
        resizable: Boolean,
        // TODO: Explore making a copy of this array to avoid directly manipulating rows
        rows: {
          type: Array,
          required: true
        },
        selectAll: Boolean,
        summaryFooter: Boolean,
        summaryHeader: Boolean,
        tree: Boolean,
        virtual: Boolean
      },
      emits: [
        "column-action",
        "row-action",
        "select-all",
        "select-column",
        "select-row",
        "update-cell"
      ],
      data() {
        return {
          selectedAll: false,
          selectAllId: getGUID(),
          columnResizer: {},
          rowHeight: 0,
          containerHeight: 0,
          visibleRowsStartIndex: 0,
          // CSS vars
          selectedColumnBackgroundColor: "blue"
        };
      },
      computed: {
        computedRole() {
          if (this.$props.tree)
            return "treegrid";
          if (this.$props.multiselectable)
            return "grid";
          return null;
        },
        visibleRows() {
          return this.$props.virtual ? this.rows.slice(this.visibleRowsStartIndex, this.visibleRowsStartIndex + 200) : this.rows;
        },
        tableContainerPaddingTop() {
          return this.visibleRowsStartIndex * this.rowHeight;
        },
        tableContainerPaddingBottom() {
          return (this.rows.length - this.visibleRows.length) * this.rowHeight - this.tableContainerPaddingTop;
        },
        hasSelectableColumns() {
          return this.$props.columns.some((column) => column.selectable);
        },
        verticalHeaderCellPadding() {
          return this.$props.summaryHeader && this.hasSelectableColumns ? "0.75rem" : "0.5rem";
        },
        selectedPseudoElementTop() {
          return !this.hasSelectableColumns || !this.$props.summaryHeader ? "-4px" : 0;
        },
        selectedBorderRadius() {
          return this.$props.summaryHeader ? 0 : "2px";
        }
      },
      watch: {
        "$props.rows": {
          handler(rows) {
            if (rows.length) {
              this.initColumnResizer();
              if (this.$props.virtual) {
                this.$nextTick(() => {
                  this.rowHeight = this.$refs["row-0"][0].$refs.row.offsetHeight;
                  this.containerHeight = this.$refs.tableContainer.offsetHeight;
                });
              }
            }
          },
          immediate: true
        }
      },
      methods: {
        async initColumnResizer() {
          if (!this.$props.resizable)
            return;
          await this.$nextTick();
          this.columnResizer = new ColumnResizer(this.$refs.table, {
            disable: !this.$props.resizable,
            innerGripHtml: "<div class='rangeGrip'></div>",
            removePadding: false,
            minWidth: 48
          });
        },
        onSelectAllChange() {
          this.rows.forEach((row) => {
            row.selected = this.selectedAll;
          });
          this.$emit("select-all", this.selectedAll);
        },
        onScroll() {
          if (!this.$props.virtual || this.scrollTimeout)
            return;
          this.scrollTimeout = setTimeout(() => {
            this.visibleRowsStartIndex = Math.max(0, Math.floor(this.$refs.tableContainer.scrollTop / this.rowHeight) - 100);
            this.scrollTimeout = null;
          }, 500);
        },
        getListeners(column, columnIndex) {
          const base = { ...column.listeners || {} };
          if (column.selectable) {
            base.click = [base.click, this.onHeaderClick.bind(this, column, columnIndex)];
          }
          return base;
        },
        onHeaderClick(column, columnIndex, e) {
          function getParentTH(el) {
            if (el.nodeName === "TH")
              return el;
            while (el.parentNode) {
              el = el.parentNode;
              if (el.nodeName === "TH") {
                return el;
              }
            }
            return null;
          }
          if (e.target.nodeName !== "BUTTON") {
            this.$emit("select-column", { column, columnIndex });
            column.selected = true;
            this.$refs.tableContainer.style.paddingTop = "5px";
            if (column.icon) {
              const iconContainer = getParentTH(e.target).querySelector("div.slds-icon_container");
              if (iconContainer) {
                this.selectedColumnBackgroundColor = window.getComputedStyle(iconContainer).backgroundColor;
              }
            }
          }
        }
      }
    };
    const __injectCSSVars__$3 = () => {
      useCssVars((_ctx) => ({
        "4d4e3100": _ctx.selectedPseudoElementTop,
        "85016f72": _ctx.selectedBorderRadius,
        "484c9e56": _ctx.selectedColumnBackgroundColor,
        "f99d0584": _ctx.verticalHeaderCellPadding
      }));
    };
    const __setup__$3 = __default__$3.setup;
    __default__$3.setup = __setup__$3 ? (props, ctx) => {
      __injectCSSVars__$3();
      return __setup__$3(props, ctx);
    } : __injectCSSVars__$3;
    //! moment.js
    //! version : 2.29.4
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    var hookCallback;
    function hooks() {
      return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
    }
    function isObject$1(input) {
      return input != null && Object.prototype.toString.call(input) === "[object Object]";
    }
    function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }
    function isObjectEmpty(obj) {
      if (Object.getOwnPropertyNames) {
        return Object.getOwnPropertyNames(obj).length === 0;
      } else {
        var k;
        for (k in obj) {
          if (hasOwnProp(obj, k)) {
            return false;
          }
        }
        return true;
      }
    }
    function isUndefined(input) {
      return input === void 0;
    }
    function isNumber(input) {
      return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
    }
    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
    }
    function map(arr, fn) {
      var res = [], i2, arrLen = arr.length;
      for (i2 = 0; i2 < arrLen; ++i2) {
        res.push(fn(arr[i2], i2));
      }
      return res;
    }
    function extend(a, b) {
      for (var i2 in b) {
        if (hasOwnProp(b, i2)) {
          a[i2] = b[i2];
        }
      }
      if (hasOwnProp(b, "toString")) {
        a.toString = b.toString;
      }
      if (hasOwnProp(b, "valueOf")) {
        a.valueOf = b.valueOf;
      }
      return a;
    }
    function createUTC(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, true).utc();
    }
    function defaultParsingFlags() {
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidEra: null,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false,
        parsedDateParts: [],
        era: null,
        meridiem: null,
        rfc2822: false,
        weekdayMismatch: false
      };
    }
    function getParsingFlags(m) {
      if (m._pf == null) {
        m._pf = defaultParsingFlags();
      }
      return m._pf;
    }
    var some;
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function(fun) {
        var t = Object(this), len2 = t.length >>> 0, i2;
        for (i2 = 0; i2 < len2; i2++) {
          if (i2 in t && fun.call(this, t[i2], i2, t)) {
            return true;
          }
        }
        return false;
      };
    }
    function isValid(m) {
      if (m._isValid == null) {
        var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i2) {
          return i2 != null;
        }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
        if (m._strict) {
          isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
        }
        if (Object.isFrozen == null || !Object.isFrozen(m)) {
          m._isValid = isNowValid;
        } else {
          return isNowValid;
        }
      }
      return m._isValid;
    }
    function createInvalid(flags) {
      var m = createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m), flags);
      } else {
        getParsingFlags(m).userInvalidated = true;
      }
      return m;
    }
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to2, from2) {
      var i2, prop, val, momentPropertiesLen = momentProperties.length;
      if (!isUndefined(from2._isAMomentObject)) {
        to2._isAMomentObject = from2._isAMomentObject;
      }
      if (!isUndefined(from2._i)) {
        to2._i = from2._i;
      }
      if (!isUndefined(from2._f)) {
        to2._f = from2._f;
      }
      if (!isUndefined(from2._l)) {
        to2._l = from2._l;
      }
      if (!isUndefined(from2._strict)) {
        to2._strict = from2._strict;
      }
      if (!isUndefined(from2._tzm)) {
        to2._tzm = from2._tzm;
      }
      if (!isUndefined(from2._isUTC)) {
        to2._isUTC = from2._isUTC;
      }
      if (!isUndefined(from2._offset)) {
        to2._offset = from2._offset;
      }
      if (!isUndefined(from2._pf)) {
        to2._pf = getParsingFlags(from2);
      }
      if (!isUndefined(from2._locale)) {
        to2._locale = from2._locale;
      }
      if (momentPropertiesLen > 0) {
        for (i2 = 0; i2 < momentPropertiesLen; i2++) {
          prop = momentProperties[i2];
          val = from2[prop];
          if (!isUndefined(val)) {
            to2[prop] = val;
          }
        }
      }
      return to2;
    }
    function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(config._d != null ? config._d.getTime() : NaN);
      if (!this.isValid()) {
        this._d = /* @__PURE__ */ new Date(NaN);
      }
      if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
      if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
        console.warn("Deprecation warning: " + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend(function() {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
          var args = [], arg, i2, key, argLen = arguments.length;
          for (i2 = 0; i2 < argLen; i2++) {
            arg = "";
            if (typeof arguments[i2] === "object") {
              arg += "\n[" + i2 + "] ";
              for (key in arguments[0]) {
                if (hasOwnProp(arguments[0], key)) {
                  arg += key + ": " + arguments[0][key] + ", ";
                }
              }
              arg = arg.slice(0, -2);
            } else {
              arg = arguments[i2];
            }
            args.push(arg);
          }
          warn(
            msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
          );
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
      }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction$2(input) {
      return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
    }
    function set(config) {
      var prop, i2;
      for (i2 in config) {
        if (hasOwnProp(config, i2)) {
          prop = config[i2];
          if (isFunction$2(prop)) {
            this[i2] = prop;
          } else {
            this["_" + i2] = prop;
          }
        }
      }
      this._config = config;
      this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
      );
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig), prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject$1(parentConfig[prop]) && isObject$1(childConfig[prop])) {
            res[prop] = {};
            extend(res[prop], parentConfig[prop]);
            extend(res[prop], childConfig[prop]);
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop];
          } else {
            delete res[prop];
          }
        }
      }
      for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject$1(parentConfig[prop])) {
          res[prop] = extend({}, res[prop]);
        }
      }
      return res;
    }
    function Locale(config) {
      if (config != null) {
        this.set(config);
      }
    }
    var keys;
    if (Object.keys) {
      keys = Object.keys;
    } else {
      keys = function(obj) {
        var i2, res = [];
        for (i2 in obj) {
          if (hasOwnProp(obj, i2)) {
            res.push(i2);
          }
        }
        return res;
      };
    }
    var defaultCalendar = {
      sameDay: "[Today at] LT",
      nextDay: "[Tomorrow at] LT",
      nextWeek: "dddd [at] LT",
      lastDay: "[Yesterday at] LT",
      lastWeek: "[Last] dddd [at] LT",
      sameElse: "L"
    };
    function calendar(key, mom, now2) {
      var output = this._calendar[key] || this._calendar["sameElse"];
      return isFunction$2(output) ? output.call(mom, now2) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
      var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
      return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
    function addFormatToken(token2, padded, ordinal2, callback) {
      var func = callback;
      if (typeof callback === "string") {
        func = function() {
          return this[callback]();
        };
      }
      if (token2) {
        formatTokenFunctions[token2] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function() {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal2) {
        formatTokenFunctions[ordinal2] = function() {
          return this.localeData().ordinal(
            func.apply(this, arguments),
            token2
          );
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, "");
      }
      return input.replace(/\\/g, "");
    }
    function makeFormatFunction(format2) {
      var array = format2.match(formattingTokens), i2, length;
      for (i2 = 0, length = array.length; i2 < length; i2++) {
        if (formatTokenFunctions[array[i2]]) {
          array[i2] = formatTokenFunctions[array[i2]];
        } else {
          array[i2] = removeFormattingTokens(array[i2]);
        }
      }
      return function(mom) {
        var output = "", i3;
        for (i3 = 0; i3 < length; i3++) {
          output += isFunction$2(array[i3]) ? array[i3].call(mom, format2) : array[i3];
        }
        return output;
      };
    }
    function formatMoment(m, format2) {
      if (!m.isValid()) {
        return m.localeData().invalidDate();
      }
      format2 = expandFormat(format2, m.localeData());
      formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
      return formatFunctions[format2](m);
    }
    function expandFormat(format2, locale2) {
      var i2 = 5;
      function replaceLongDateFormatTokens(input) {
        return locale2.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i2 >= 0 && localFormattingTokens.test(format2)) {
        format2 = format2.replace(
          localFormattingTokens,
          replaceLongDateFormatTokens
        );
        localFormattingTokens.lastIndex = 0;
        i2 -= 1;
      }
      return format2;
    }
    var defaultLongDateFormat = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    function longDateFormat(key) {
      var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format2 || !formatUpper) {
        return format2;
      }
      this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
        if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
          return tok.slice(1);
        }
        return tok;
      }).join("");
      return this._longDateFormat[key];
    }
    var defaultInvalidDate = "Invalid date";
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace("%d", number);
    }
    var defaultRelativeTime = {
      future: "in %s",
      past: "%s ago",
      s: "a few seconds",
      ss: "%d seconds",
      m: "a minute",
      mm: "%d minutes",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      w: "a week",
      ww: "%d weeks",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return isFunction$2(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff2, output) {
      var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
      return isFunction$2(format2) ? format2(output) : format2.replace(/%s/i, output);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
      return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {}, normalizedProp, prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    var priorities = {};
    function addUnitPriority(unit, priority) {
      priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
      var units = [], u;
      for (u in unitsObj) {
        if (hasOwnProp(unitsObj, u)) {
          units.push({ unit: u, priority: priorities[u] });
        }
      }
      units.sort(function(a, b) {
        return a.priority - b.priority;
      });
      return units;
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    function absFloor(number) {
      if (number < 0) {
        return Math.ceil(number) || 0;
      } else {
        return Math.floor(number);
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion, value = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
      }
      return value;
    }
    function makeGetSet(unit, keepTime) {
      return function(value) {
        if (value != null) {
          set$1(this, unit, value);
          hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get$1(this, unit);
        }
      };
    }
    function get$1(mom, unit) {
      return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
    }
    function set$1(mom, unit, value) {
      if (mom.isValid() && !isNaN(value)) {
        if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
          value = toInt(value);
          mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
            value,
            mom.month(),
            daysInMonth(value, mom.month())
          );
        } else {
          mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
        }
      }
    }
    function stringGet(units) {
      units = normalizeUnits(units);
      if (isFunction$2(this[units])) {
        return this[units]();
      }
      return this;
    }
    function stringSet(units, value) {
      if (typeof units === "object") {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units), i2, prioritizedLen = prioritized.length;
        for (i2 = 0; i2 < prioritizedLen; i2++) {
          this[prioritized[i2].unit](units[prioritized[i2].unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction$2(this[units])) {
          return this[units](value);
        }
      }
      return this;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
    regexes = {};
    function addRegexToken(token2, regex2, strictRegex) {
      regexes[token2] = isFunction$2(regex2) ? regex2 : function(isStrict, localeData2) {
        return isStrict && strictRegex ? strictRegex : regex2;
      };
    }
    function getParseRegexForToken(token2, config) {
      if (!hasOwnProp(regexes, token2)) {
        return new RegExp(unescapeFormat(token2));
      }
      return regexes[token2](config._strict, config._locale);
    }
    function unescapeFormat(s) {
      return regexEscape(
        s.replace("\\", "").replace(
          /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
          function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
          }
        )
      );
    }
    function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    var tokens = {};
    function addParseToken(token2, callback) {
      var i2, func = callback, tokenLen;
      if (typeof token2 === "string") {
        token2 = [token2];
      }
      if (isNumber(callback)) {
        func = function(input, array) {
          array[callback] = toInt(input);
        };
      }
      tokenLen = token2.length;
      for (i2 = 0; i2 < tokenLen; i2++) {
        tokens[token2[i2]] = func;
      }
    }
    function addWeekParseToken(token2, callback) {
      addParseToken(token2, function(input, array, config, token3) {
        config._w = config._w || {};
        callback(input, config._w, config, token3);
      });
    }
    function addTimeToArrayFromToken(token2, input, config) {
      if (input != null && hasOwnProp(tokens, token2)) {
        tokens[token2](input, config._a, config, token2);
      }
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    function mod(n, x) {
      return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(o) {
        var i2;
        for (i2 = 0; i2 < this.length; ++i2) {
          if (this[i2] === o) {
            return i2;
          }
        }
        return -1;
      };
    }
    function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
        return NaN;
      }
      var modMonth = mod(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    addFormatToken("M", ["MM", 2], "Mo", function() {
      return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken("MMMM", 0, 0, function(format2) {
      return this.localeData().months(this, format2);
    });
    addUnitAlias("month", "M");
    addUnitPriority("month", 8);
    addRegexToken("M", match1to2);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(["M", "MM"], function(input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
      var month = config._locale.monthsParse(input, token2, config._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config).invalidMonth = input;
      }
    });
    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
      "_"
    ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m, format2) {
      if (!m) {
        return isArray(this._months) ? this._months : this._months["standalone"];
      }
      return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
    }
    function localeMonthsShort(m, format2) {
      if (!m) {
        return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
      }
      return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
    }
    function handleStrictParse(monthName, format2, strict) {
      var i2, ii, mom, llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i2 = 0; i2 < 12; ++i2) {
          mom = createUTC([2e3, i2]);
          this._shortMonthsParse[i2] = this.monthsShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "MMM") {
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format2 === "MMM") {
          ii = indexOf.call(this._shortMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeMonthsParse(monthName, format2, strict) {
      var i2, mom, regex2;
      if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format2, strict);
      }
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }
      for (i2 = 0; i2 < 12; i2++) {
        mom = createUTC([2e3, i2]);
        if (strict && !this._longMonthsParse[i2]) {
          this._longMonthsParse[i2] = new RegExp(
            "^" + this.months(mom, "").replace(".", "") + "$",
            "i"
          );
          this._shortMonthsParse[i2] = new RegExp(
            "^" + this.monthsShort(mom, "").replace(".", "") + "$",
            "i"
          );
        }
        if (!strict && !this._monthsParse[i2]) {
          regex2 = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
          this._monthsParse[i2] = new RegExp(regex2.replace(".", ""), "i");
        }
        if (strict && format2 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
          return i2;
        } else if (strict && format2 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
          return i2;
        } else if (!strict && this._monthsParse[i2].test(monthName)) {
          return i2;
        }
      }
    }
    function setMonth(mom, value) {
      var dayOfMonth;
      if (!mom.isValid()) {
        return mom;
      }
      if (typeof value === "string") {
        if (/^\d+$/.test(value)) {
          value = toInt(value);
        } else {
          value = mom.localeData().monthsParse(value);
          if (!isNumber(value)) {
            return mom;
          }
        }
      }
      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
      mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
      return mom;
    }
    function getSetMonth(value) {
      if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
      } else {
        return get$1(this, "Month");
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsShortStrictRegex;
        } else {
          return this._monthsShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsShortRegex")) {
          this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
      }
    }
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsStrictRegex;
        } else {
          return this._monthsRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsRegex")) {
          this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length;
      }
      var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom;
      for (i2 = 0; i2 < 12; i2++) {
        mom = createUTC([2e3, i2]);
        shortPieces.push(this.monthsShort(mom, ""));
        longPieces.push(this.months(mom, ""));
        mixedPieces.push(this.months(mom, ""));
        mixedPieces.push(this.monthsShort(mom, ""));
      }
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i2 = 0; i2 < 12; i2++) {
        shortPieces[i2] = regexEscape(shortPieces[i2]);
        longPieces[i2] = regexEscape(longPieces[i2]);
      }
      for (i2 = 0; i2 < 24; i2++) {
        mixedPieces[i2] = regexEscape(mixedPieces[i2]);
      }
      this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._monthsShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken("Y", 0, 0, function() {
      var y = this.year();
      return y <= 9999 ? zeroFill(y, 4) : "+" + y;
    });
    addFormatToken(0, ["YY", 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ["YYYY", 4], 0, "year");
    addFormatToken(0, ["YYYYY", 5], 0, "year");
    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
    addUnitAlias("year", "y");
    addUnitPriority("year", 1);
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken(["YYYYY", "YYYYYY"], YEAR);
    addParseToken("YYYY", function(input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
      array[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }
    hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    var getSetYear = makeGetSet("FullYear", true);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    function createDate(y, m, d, h2, M, s, ms) {
      var date;
      if (y < 100 && y >= 0) {
        date = new Date(y + 400, m, d, h2, M, s, ms);
        if (isFinite(date.getFullYear())) {
          date.setFullYear(y);
        }
      } else {
        date = new Date(y, m, d, h2, M, s, ms);
      }
      return date;
    }
    function createUTCDate(y) {
      var date, args;
      if (y < 100 && y >= 0) {
        args = Array.prototype.slice.call(arguments);
        args[0] = y + 400;
        date = new Date(Date.UTC.apply(null, args));
        if (isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y);
        }
      } else {
        date = new Date(Date.UTC.apply(null, arguments));
      }
      return date;
    }
    function firstWeekOffset(year, dow, doy) {
      var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
      } else {
        resYear = year;
        resDayOfYear = dayOfYear;
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      };
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
      } else {
        resYear = mom.year();
        resWeek = week;
      }
      return {
        week: resWeek,
        year: resYear
      };
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken("w", ["ww", 2], "wo", "week");
    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
    addUnitAlias("week", "w");
    addUnitAlias("isoWeek", "W");
    addUnitPriority("week", 5);
    addUnitPriority("isoWeek", 5);
    addRegexToken("w", match1to2);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken(
      ["w", "ww", "W", "WW"],
      function(input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      }
    );
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6
      // The week that contains Jan 6th is the first week of the year.
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken("ddd", 0, 0, function(format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken("dddd", 0, 0, function(format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addUnitAlias("day", "d");
    addUnitAlias("weekday", "e");
    addUnitAlias("isoWeekday", "E");
    addUnitPriority("day", 11);
    addUnitPriority("weekday", 11);
    addUnitPriority("isoWeekday", 11);
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
      var weekday = config._locale.weekdaysParse(input, token2, config._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config).invalidWeekday = input;
      }
    });
    addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
      week[token2] = toInt(input);
    });
    function parseWeekday(input, locale2) {
      if (typeof input !== "string") {
        return input;
      }
      if (!isNaN(input)) {
        return parseInt(input, 10);
      }
      input = locale2.weekdaysParse(input);
      if (typeof input === "number") {
        return input;
      }
      return null;
    }
    function parseIsoWeekday(input, locale2) {
      if (typeof input === "string") {
        return locale2.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
    }
    function shiftWeekdays(ws, n) {
      return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m, format2) {
      var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
      return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    function localeWeekdaysShort(m) {
      return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m) {
      return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format2, strict) {
      var i2, ii, mom, llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];
        for (i2 = 0; i2 < 7; ++i2) {
          mom = createUTC([2e3, 1]).day(i2);
          this._minWeekdaysParse[i2] = this.weekdaysMin(
            mom,
            ""
          ).toLocaleLowerCase();
          this._shortWeekdaysParse[i2] = this.weekdaysShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "dddd") {
          ii = indexOf.call(this._weekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format2 === "ddd") {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format2 === "dddd") {
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format2 === "ddd") {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeWeekdaysParse(weekdayName, format2, strict) {
      var i2, mom, regex2;
      if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format2, strict);
      }
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
      }
      for (i2 = 0; i2 < 7; i2++) {
        mom = createUTC([2e3, 1]).day(i2);
        if (strict && !this._fullWeekdaysParse[i2]) {
          this._fullWeekdaysParse[i2] = new RegExp(
            "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._shortWeekdaysParse[i2] = new RegExp(
            "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._minWeekdaysParse[i2] = new RegExp(
            "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
        }
        if (!this._weekdaysParse[i2]) {
          regex2 = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
          this._weekdaysParse[i2] = new RegExp(regex2.replace(".", ""), "i");
        }
        if (strict && format2 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
          return i2;
        } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
          return i2;
        } else if (strict && format2 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
          return i2;
        } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
          return i2;
        }
      }
    }
    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, "d");
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, "d");
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
        return this.day() || 7;
      }
    }
    function weekdaysRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysStrictRegex;
        } else {
          return this._weekdaysRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
      }
    }
    function weekdaysShortRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysShortStrictRegex;
        } else {
          return this._weekdaysShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysShortRegex")) {
          this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
    }
    function weekdaysMinRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysMinStrictRegex;
        } else {
          return this._weekdaysMinRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysMinRegex")) {
          this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
    }
    function computeWeekdaysParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length;
      }
      var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
      for (i2 = 0; i2 < 7; i2++) {
        mom = createUTC([2e3, 1]).day(i2);
        minp = regexEscape(this.weekdaysMin(mom, ""));
        shortp = regexEscape(this.weekdaysShort(mom, ""));
        longp = regexEscape(this.weekdays(mom, ""));
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
      }
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;
      this._weekdaysStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._weekdaysShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
      this._weekdaysMinStrictRegex = new RegExp(
        "^(" + minPieces.join("|") + ")",
        "i"
      );
    }
    function hFormat() {
      return this.hours() % 12 || 12;
    }
    function kFormat() {
      return this.hours() || 24;
    }
    addFormatToken("H", ["HH", 2], 0, "hour");
    addFormatToken("h", ["hh", 2], 0, hFormat);
    addFormatToken("k", ["kk", 2], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token2, lowercase) {
      addFormatToken(token2, 0, 0, function() {
        return this.localeData().meridiem(
          this.hours(),
          this.minutes(),
          lowercase
        );
      });
    }
    meridiem("a", true);
    meridiem("A", false);
    addUnitAlias("hour", "h");
    addUnitPriority("hour", 13);
    function matchMeridiem(isStrict, locale2) {
      return locale2._meridiemParse;
    }
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2);
    addRegexToken("h", match1to2);
    addRegexToken("k", match1to2);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken(["H", "HH"], HOUR);
    addParseToken(["k", "kk"], function(input, array, config) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(["a", "A"], function(input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
    });
    addParseToken(["h", "hh"], function(input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
      return (input + "").toLowerCase().charAt(0) === "p";
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
    function localeMeridiem(hours2, minutes2, isLower) {
      if (hours2 > 11) {
        return isLower ? "pm" : "PM";
      } else {
        return isLower ? "am" : "AM";
      }
    }
    var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {}, localeFamilies = {}, globalLocale;
    function commonPrefix(arr1, arr2) {
      var i2, minl = Math.min(arr1.length, arr2.length);
      for (i2 = 0; i2 < minl; i2 += 1) {
        if (arr1[i2] !== arr2[i2]) {
          return i2;
        }
      }
      return minl;
    }
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace("_", "-") : key;
    }
    function chooseLocale(names) {
      var i2 = 0, j, next, locale2, split;
      while (i2 < names.length) {
        split = normalizeLocale(names[i2]).split("-");
        j = split.length;
        next = normalizeLocale(names[i2 + 1]);
        next = next ? next.split("-") : null;
        while (j > 0) {
          locale2 = loadLocale(split.slice(0, j).join("-"));
          if (locale2) {
            return locale2;
          }
          if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
            break;
          }
          j--;
        }
        i2++;
      }
      return globalLocale;
    }
    function isLocaleNameSane(name) {
      return name.match("^[^/\\\\]*$") != null;
    }
    function loadLocale(name) {
      var oldLocale = null, aliasedRequire;
      if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
        try {
          oldLocale = globalLocale._abbr;
          aliasedRequire = require;
          aliasedRequire("./locale/" + name);
          getSetGlobalLocale(oldLocale);
        } catch (e) {
          locales[name] = null;
        }
      }
      return locales[name];
    }
    function getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (isUndefined(values)) {
          data = getLocale(key);
        } else {
          data = defineLocale(key, values);
        }
        if (data) {
          globalLocale = data;
        } else {
          if (typeof console !== "undefined" && console.warn) {
            console.warn(
              "Locale " + key + " not found. Did you forget to load it?"
            );
          }
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, config) {
      if (config !== null) {
        var locale2, parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
          deprecateSimple(
            "defineLocaleOverride",
            "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
          );
          parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
          if (locales[config.parentLocale] != null) {
            parentConfig = locales[config.parentLocale]._config;
          } else {
            locale2 = loadLocale(config.parentLocale);
            if (locale2 != null) {
              parentConfig = locale2._config;
            } else {
              if (!localeFamilies[config.parentLocale]) {
                localeFamilies[config.parentLocale] = [];
              }
              localeFamilies[config.parentLocale].push({
                name,
                config
              });
              return null;
            }
          }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));
        if (localeFamilies[name]) {
          localeFamilies[name].forEach(function(x) {
            defineLocale(x.name, x.config);
          });
        }
        getSetGlobalLocale(name);
        return locales[name];
      } else {
        delete locales[name];
        return null;
      }
    }
    function updateLocale(name, config) {
      if (config != null) {
        var locale2, tmpLocale, parentConfig = baseConfig;
        if (locales[name] != null && locales[name].parentLocale != null) {
          locales[name].set(mergeConfigs(locales[name]._config, config));
        } else {
          tmpLocale = loadLocale(name);
          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }
          config = mergeConfigs(parentConfig, config);
          if (tmpLocale == null) {
            config.abbr = name;
          }
          locale2 = new Locale(config);
          locale2.parentLocale = locales[name];
          locales[name] = locale2;
        }
        getSetGlobalLocale(name);
      } else {
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale;
            if (name === getSetGlobalLocale()) {
              getSetGlobalLocale(name);
            }
          } else if (locales[name] != null) {
            delete locales[name];
          }
        }
      }
      return locales[name];
    }
    function getLocale(key) {
      var locale2;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray(key)) {
        locale2 = loadLocale(key);
        if (locale2) {
          return locale2;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    function listLocales() {
      return keys(locales);
    }
    function checkOverflow(m) {
      var overflow, a = m._a;
      if (a && getParsingFlags(m).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
          overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY;
        }
        getParsingFlags(m).overflow = overflow;
      }
      return m;
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
      ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
      ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
      ["YYYY-DDD", /\d{4}-\d{3}/],
      ["YYYY-MM", /\d{4}-\d\d/, false],
      ["YYYYYYMMDD", /[+-]\d{10}/],
      ["YYYYMMDD", /\d{8}/],
      ["GGGG[W]WWE", /\d{4}W\d{3}/],
      ["GGGG[W]WW", /\d{4}W\d{2}/, false],
      ["YYYYDDD", /\d{7}/],
      ["YYYYMM", /\d{6}/, false],
      ["YYYY", /\d{4}/, false]
    ], isoTimes = [
      ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
      ["HH:mm:ss", /\d\d:\d\d:\d\d/],
      ["HH:mm", /\d\d:\d\d/],
      ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
      ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
      ["HHmmss", /\d\d\d\d\d\d/],
      ["HHmm", /\d\d\d\d/],
      ["HH", /\d\d/]
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    function configFromISO(config) {
      var i2, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
      if (match) {
        getParsingFlags(config).iso = true;
        for (i2 = 0, l = isoDatesLen; i2 < l; i2++) {
          if (isoDates[i2][1].exec(match[1])) {
            dateFormat = isoDates[i2][0];
            allowTime = isoDates[i2][2] !== false;
            break;
          }
        }
        if (dateFormat == null) {
          config._isValid = false;
          return;
        }
        if (match[3]) {
          for (i2 = 0, l = isoTimesLen; i2 < l; i2++) {
            if (isoTimes[i2][1].exec(match[3])) {
              timeFormat = (match[2] || " ") + isoTimes[i2][0];
              break;
            }
          }
          if (timeFormat == null) {
            config._isValid = false;
            return;
          }
        }
        if (!allowTime && timeFormat != null) {
          config._isValid = false;
          return;
        }
        if (match[4]) {
          if (tzRegex.exec(match[4])) {
            tzFormat = "Z";
          } else {
            config._isValid = false;
            return;
          }
        }
        config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
        configFromStringAndFormat(config);
      } else {
        config._isValid = false;
      }
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      var result = [
        untruncateYear(yearStr),
        defaultLocaleMonthsShort.indexOf(monthStr),
        parseInt(dayStr, 10),
        parseInt(hourStr, 10),
        parseInt(minuteStr, 10)
      ];
      if (secondStr) {
        result.push(parseInt(secondStr, 10));
      }
      return result;
    }
    function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
        return 2e3 + year;
      } else if (year <= 999) {
        return 1900 + year;
      }
      return year;
    }
    function preprocessRFC2822(s) {
      return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    }
    function checkWeekday(weekdayStr, parsedInput, config) {
      if (weekdayStr) {
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
          parsedInput[0],
          parsedInput[1],
          parsedInput[2]
        ).getDay();
        if (weekdayProvided !== weekdayActual) {
          getParsingFlags(config).weekdayMismatch = true;
          config._isValid = false;
          return false;
        }
      }
      return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
        return obsOffsets[obsOffset];
      } else if (militaryOffset) {
        return 0;
      } else {
        var hm = parseInt(numOffset, 10), m = hm % 100, h2 = (hm - m) / 100;
        return h2 * 60 + m;
      }
    }
    function configFromRFC2822(config) {
      var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
      if (match) {
        parsedArray = extractFromRFC2822Strings(
          match[4],
          match[3],
          match[2],
          match[5],
          match[6],
          match[7]
        );
        if (!checkWeekday(match[1], parsedArray, config)) {
          return;
        }
        config._a = parsedArray;
        config._tzm = calculateOffset(match[8], match[9], match[10]);
        config._d = createUTCDate.apply(null, config._a);
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        getParsingFlags(config).rfc2822 = true;
      } else {
        config._isValid = false;
      }
    }
    function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);
      if (matched !== null) {
        config._d = /* @__PURE__ */ new Date(+matched[1]);
        return;
      }
      configFromISO(config);
      if (config._isValid === false) {
        delete config._isValid;
      } else {
        return;
      }
      configFromRFC2822(config);
      if (config._isValid === false) {
        delete config._isValid;
      } else {
        return;
      }
      if (config._strict) {
        config._isValid = false;
      } else {
        hooks.createFromInputFallback(config);
      }
    }
    hooks.createFromInputFallback = deprecate(
      "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
      function(config) {
        config._d = /* @__PURE__ */ new Date(config._i + (config._useUTC ? " UTC" : ""));
      }
    );
    function defaults(a, b, c) {
      if (a != null) {
        return a;
      }
      if (b != null) {
        return b;
      }
      return c;
    }
    function currentDateArray(config) {
      var nowValue = new Date(hooks.now());
      if (config._useUTC) {
        return [
          nowValue.getUTCFullYear(),
          nowValue.getUTCMonth(),
          nowValue.getUTCDate()
        ];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }
    function configFromArray(config) {
      var i2, date, input = [], currentDate, expectedWeekday, yearToUse;
      if (config._d) {
        return;
      }
      currentDate = currentDateArray(config);
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
      }
      if (config._dayOfYear != null) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
          getParsingFlags(config)._overflowDayOfYear = true;
        }
        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
      }
      for (i2 = 0; i2 < 3 && config._a[i2] == null; ++i2) {
        config._a[i2] = input[i2] = currentDate[i2];
      }
      for (; i2 < 7; i2++) {
        config._a[i2] = input[i2] = config._a[i2] == null ? i2 === 2 ? 1 : 0 : config._a[i2];
      }
      if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
      }
      config._d = (config._useUTC ? createUTCDate : createDate).apply(
        null,
        input
      );
      expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
      if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
      }
      if (config._nextDay) {
        config._a[HOUR] = 24;
      }
      if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
        getParsingFlags(config).weekdayMismatch = true;
      }
    }
    function dayOfYearFromWeekInfo(config) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;
        weekYear = defaults(
          w.GG,
          config._a[YEAR],
          weekOfYear(createLocal(), 1, 4).year
        );
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true;
        }
      } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;
        curWeek = weekOfYear(createLocal(), dow, doy);
        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
        week = defaults(w.w, curWeek.week);
        if (w.d != null) {
          weekday = w.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true;
          }
        } else if (w.e != null) {
          weekday = w.e + dow;
          if (w.e < 0 || w.e > 6) {
            weekdayOverflow = true;
          }
        } else {
          weekday = dow;
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
      }
    }
    hooks.ISO_8601 = function() {
    };
    hooks.RFC_2822 = function() {
    };
    function configFromStringAndFormat(config) {
      if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
      }
      if (config._f === hooks.RFC_2822) {
        configFromRFC2822(config);
        return;
      }
      config._a = [];
      getParsingFlags(config).empty = true;
      var string = "" + config._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
      tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
      tokenLen = tokens2.length;
      for (i2 = 0; i2 < tokenLen; i2++) {
        token2 = tokens2[i2];
        parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config).unusedInput.push(skipped);
          }
          string = string.slice(
            string.indexOf(parsedInput) + parsedInput.length
          );
          totalParsedInputLength += parsedInput.length;
        }
        if (formatTokenFunctions[token2]) {
          if (parsedInput) {
            getParsingFlags(config).empty = false;
          } else {
            getParsingFlags(config).unusedTokens.push(token2);
          }
          addTimeToArrayFromToken(token2, parsedInput, config);
        } else if (config._strict && !parsedInput) {
          getParsingFlags(config).unusedTokens.push(token2);
        }
      }
      getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
      }
      if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = void 0;
      }
      getParsingFlags(config).parsedDateParts = config._a.slice(0);
      getParsingFlags(config).meridiem = config._meridiem;
      config._a[HOUR] = meridiemFixWrap(
        config._locale,
        config._a[HOUR],
        config._meridiem
      );
      era = getParsingFlags(config).era;
      if (era !== null) {
        config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
      }
      configFromArray(config);
      checkOverflow(config);
    }
    function meridiemFixWrap(locale2, hour, meridiem2) {
      var isPm;
      if (meridiem2 == null) {
        return hour;
      }
      if (locale2.meridiemHour != null) {
        return locale2.meridiemHour(hour, meridiem2);
      } else if (locale2.isPM != null) {
        isPm = locale2.isPM(meridiem2);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        return hour;
      }
    }
    function configFromStringAndArray(config) {
      var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
      if (configfLen === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = /* @__PURE__ */ new Date(NaN);
        return;
      }
      for (i2 = 0; i2 < configfLen; i2++) {
        currentScore = 0;
        validFormatFound = false;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
          tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i2];
        configFromStringAndFormat(tempConfig);
        if (isValid(tempConfig)) {
          validFormatFound = true;
        }
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (!bestFormatIsValid) {
          if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
            if (validFormatFound) {
              bestFormatIsValid = true;
            }
          }
        } else {
          if (currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }
      }
      extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
      if (config._d) {
        return;
      }
      var i2 = normalizeObjectUnits(config._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
      config._a = map(
        [i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond],
        function(obj) {
          return obj && parseInt(obj, 10);
        }
      );
      configFromArray(config);
    }
    function createFromConfig(config) {
      var res = new Moment(checkOverflow(prepareConfig(config)));
      if (res._nextDay) {
        res.add(1, "d");
        res._nextDay = void 0;
      }
      return res;
    }
    function prepareConfig(config) {
      var input = config._i, format2 = config._f;
      config._locale = config._locale || getLocale(config._l);
      if (input === null || format2 === void 0 && input === "") {
        return createInvalid({ nullInput: true });
      }
      if (typeof input === "string") {
        config._i = input = config._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isDate(input)) {
        config._d = input;
      } else if (isArray(format2)) {
        configFromStringAndArray(config);
      } else if (format2) {
        configFromStringAndFormat(config);
      } else {
        configFromInput(config);
      }
      if (!isValid(config)) {
        config._d = null;
      }
      return config;
    }
    function configFromInput(config) {
      var input = config._i;
      if (isUndefined(input)) {
        config._d = new Date(hooks.now());
      } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
      } else if (typeof input === "string") {
        configFromString(config);
      } else if (isArray(input)) {
        config._a = map(input.slice(0), function(obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config);
      } else if (isObject$1(input)) {
        configFromObject(config);
      } else if (isNumber(input)) {
        config._d = new Date(input);
      } else {
        hooks.createFromInputFallback(config);
      }
    }
    function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
      var c = {};
      if (format2 === true || format2 === false) {
        strict = format2;
        format2 = void 0;
      }
      if (locale2 === true || locale2 === false) {
        strict = locale2;
        locale2 = void 0;
      }
      if (isObject$1(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
        input = void 0;
      }
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale2;
      c._i = input;
      c._f = format2;
      c._strict = strict;
      return createFromConfig(c);
    }
    function createLocal(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, false);
    }
    var prototypeMin = deprecate(
      "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }
    ), prototypeMax = deprecate(
      "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    function pickBy(fn, moments) {
      var res, i2;
      if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return createLocal();
      }
      res = moments[0];
      for (i2 = 1; i2 < moments.length; ++i2) {
        if (!moments[i2].isValid() || moments[i2][fn](res)) {
          res = moments[i2];
        }
      }
      return res;
    }
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy("isBefore", args);
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy("isAfter", args);
    }
    var now = function() {
      return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
    };
    var ordering = [
      "year",
      "quarter",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    function isDurationValid(m) {
      var key, unitHasDecimal = false, i2, orderLen = ordering.length;
      for (key in m) {
        if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
          return false;
        }
      }
      for (i2 = 0; i2 < orderLen; ++i2) {
        if (m[ordering[i2]]) {
          if (unitHasDecimal) {
            return false;
          }
          if (parseFloat(m[ordering[i2]]) !== toInt(m[ordering[i2]])) {
            unitHasDecimal = true;
          }
        }
      }
      return true;
    }
    function isValid$1() {
      return this._isValid;
    }
    function createInvalid$1() {
      return createDuration(NaN);
    }
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
      this._isValid = isDurationValid(normalizedInput);
      this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
      minutes2 * 6e4 + // 1000 * 60
      hours2 * 1e3 * 60 * 60;
      this._days = +days2 + weeks2 * 7;
      this._months = +months2 + quarters * 3 + years2 * 12;
      this._data = {};
      this._locale = getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function absRound(number) {
      if (number < 0) {
        return Math.round(-1 * number) * -1;
      } else {
        return Math.round(number);
      }
    }
    function compareArrays(array1, array2, dontConvert) {
      var len2 = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i2;
      for (i2 = 0; i2 < len2; i2++) {
        if (dontConvert && array1[i2] !== array2[i2] || !dontConvert && toInt(array1[i2]) !== toInt(array2[i2])) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }
    function offset(token2, separator) {
      addFormatToken(token2, 0, 0, function() {
        var offset2 = this.utcOffset(), sign2 = "+";
        if (offset2 < 0) {
          offset2 = -offset2;
          sign2 = "-";
        }
        return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
      });
    }
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken(["Z", "ZZ"], function(input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
      var matches = (string || "").match(matcher), chunk, parts, minutes2;
      if (matches === null) {
        return null;
      }
      chunk = matches[matches.length - 1] || [];
      parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
      minutes2 = +(parts[1] * 60) + toInt(parts[2]);
      return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
    }
    function cloneWithOffset(input, model) {
      var res, diff2;
      if (model._isUTC) {
        res = model.clone();
        diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        res._d.setTime(res._d.valueOf() + diff2);
        hooks.updateOffset(res, false);
        return res;
      } else {
        return createLocal(input).local();
      }
    }
    function getDateOffset(m) {
      return -Math.round(m._d.getTimezoneOffset());
    }
    hooks.updateOffset = function() {
    };
    function getSetOffset(input, keepLocalTime, keepMinutes) {
      var offset2 = this._offset || 0, localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        if (typeof input === "string") {
          input = offsetFromString(matchShortOffset, input);
          if (input === null) {
            return this;
          }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, "m");
        }
        if (offset2 !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            addSubtract(
              this,
              createDuration(input - offset2, "m"),
              1,
              false
            );
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset2 : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== "string") {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), "m");
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === "string") {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
          this.utcOffset(tZone);
        } else {
          this.utcOffset(0, true);
        }
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
      }
      var c = {}, other;
      copyConfig(c, this);
      c = prepareConfig(c);
      if (c._a) {
        other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }
      return this._isDSTShifted;
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
      var duration = input, match = null, sign2, ret, diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (isNumber(input) || !isNaN(+input)) {
        duration = {};
        if (key) {
          duration[key] = +input;
        } else {
          duration.milliseconds = +input;
        }
      } else if (match = aspNetRegex.exec(input)) {
        sign2 = match[1] === "-" ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match[DATE]) * sign2,
          h: toInt(match[HOUR]) * sign2,
          m: toInt(match[MINUTE]) * sign2,
          s: toInt(match[SECOND]) * sign2,
          ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          // the millisecond decimal point is included in the match
        };
      } else if (match = isoRegex.exec(input)) {
        sign2 = match[1] === "-" ? -1 : 1;
        duration = {
          y: parseIso(match[2], sign2),
          M: parseIso(match[3], sign2),
          w: parseIso(match[4], sign2),
          d: parseIso(match[5], sign2),
          h: parseIso(match[6], sign2),
          m: parseIso(match[7], sign2),
          s: parseIso(match[8], sign2)
        };
      } else if (duration == null) {
        duration = {};
      } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
        diffRes = momentsDifference(
          createLocal(duration.from),
          createLocal(duration.to)
        );
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, "_locale")) {
        ret._locale = input._locale;
      }
      if (isDuration(input) && hasOwnProp(input, "_isValid")) {
        ret._isValid = input._isValid;
      }
      return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign2) {
      var res = inp && parseFloat(inp.replace(",", "."));
      return (isNaN(res) ? 0 : res) * sign2;
    }
    function positiveMomentsDifference(base, other) {
      var res = {};
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, "M").isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +base.clone().add(res.months, "M");
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return { milliseconds: 0, months: 0 };
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }
    function createAdder(direction, name) {
      return function(val, period) {
        var dur, tmp;
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(
            name,
            "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
          );
          tmp = val;
          val = period;
          period = tmp;
        }
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
      };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
      if (!mom.isValid()) {
        return;
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (months2) {
        setMonth(mom, get$1(mom, "Month") + months2 * isAdding);
      }
      if (days2) {
        set$1(mom, "Date", get$1(mom, "Date") + days2 * isAdding);
      }
      if (milliseconds2) {
        mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
      }
      if (updateOffset) {
        hooks.updateOffset(mom, days2 || months2);
      }
    }
    var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
    function isString(input) {
      return typeof input === "string" || input instanceof String;
    }
    function isMomentInput(input) {
      return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
    }
    function isMomentInputObject(input) {
      var objectTest = isObject$1(input) && !isObjectEmpty(input), propertyTest = false, properties = [
        "years",
        "year",
        "y",
        "months",
        "month",
        "M",
        "days",
        "day",
        "d",
        "dates",
        "date",
        "D",
        "hours",
        "hour",
        "h",
        "minutes",
        "minute",
        "m",
        "seconds",
        "second",
        "s",
        "milliseconds",
        "millisecond",
        "ms"
      ], i2, property, propertyLen = properties.length;
      for (i2 = 0; i2 < propertyLen; i2 += 1) {
        property = properties[i2];
        propertyTest = propertyTest || hasOwnProp(input, property);
      }
      return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
      var arrayTest = isArray(input), dataTypeTest = false;
      if (arrayTest) {
        dataTypeTest = input.filter(function(item) {
          return !isNumber(item) && isString(input);
        }).length === 0;
      }
      return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
      var objectTest = isObject$1(input) && !isObjectEmpty(input), propertyTest = false, properties = [
        "sameDay",
        "nextDay",
        "lastDay",
        "nextWeek",
        "lastWeek",
        "sameElse"
      ], i2, property;
      for (i2 = 0; i2 < properties.length; i2 += 1) {
        property = properties[i2];
        propertyTest = propertyTest || hasOwnProp(input, property);
      }
      return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now2) {
      var diff2 = myMoment.diff(now2, "days", true);
      return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
    }
    function calendar$1(time, formats) {
      if (arguments.length === 1) {
        if (!arguments[0]) {
          time = void 0;
          formats = void 0;
        } else if (isMomentInput(arguments[0])) {
          time = arguments[0];
          formats = void 0;
        } else if (isCalendarSpec(arguments[0])) {
          formats = arguments[0];
          time = void 0;
        }
      }
      var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction$2(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
      return this.format(
        output || this.localeData().calendar(format2, this, createLocal(now2))
      );
    }
    function clone() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() > localInput.valueOf();
      } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() < localInput.valueOf();
      } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
    }
    function isBetween(from2, to2, units, inclusivity) {
      var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
      if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
        return false;
      }
      inclusivity = inclusivity || "()";
      return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input), inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() === localInput.valueOf();
      } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, output;
      if (!this.isValid()) {
        return NaN;
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN;
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
      units = normalizeUnits(units);
      switch (units) {
        case "year":
          output = monthDiff(this, that) / 12;
          break;
        case "month":
          output = monthDiff(this, that);
          break;
        case "quarter":
          output = monthDiff(this, that) / 3;
          break;
        case "second":
          output = (this - that) / 1e3;
          break;
        case "minute":
          output = (this - that) / 6e4;
          break;
        case "hour":
          output = (this - that) / 36e5;
          break;
        case "day":
          output = (this - that - zoneDelta) / 864e5;
          break;
        case "week":
          output = (this - that - zoneDelta) / 6048e5;
          break;
        default:
          output = this - that;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
      if (a.date() < b.date()) {
        return -monthDiff(b, a);
      }
      var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
      if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
        adjust = (b - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
        adjust = (b - anchor) / (anchor2 - anchor);
      }
      return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    function toString() {
      return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }
    function toISOString(keepOffset) {
      if (!this.isValid()) {
        return null;
      }
      var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
      if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(
          m,
          utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      if (isFunction$2(Date.prototype.toISOString)) {
        if (utc) {
          return this.toDate().toISOString();
        } else {
          return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
        }
      }
      return formatMoment(
        m,
        utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
      );
    }
    function inspect() {
      if (!this.isValid()) {
        return "moment.invalid(/* " + this._i + " */)";
      }
      var func = "moment", zone = "", prefix, year, datetime, suffix;
      if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
        zone = "Z";
      }
      prefix = "[" + func + '("]';
      year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
      datetime = "-MM-DD[T]HH:mm:ss.SSS";
      suffix = zone + '[")]';
      return this.format(prefix + year + datetime + suffix);
    }
    function format(inputString) {
      if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function toNow(withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
    }
    function locale$1(key) {
      var newLocaleData;
      if (key === void 0) {
        return this._locale._abbr;
      } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate(
      "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
      function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );
    function localeData() {
      return this._locale;
    }
    var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    function mod$1(dividend, divisor) {
      return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
      if (y < 100 && y >= 0) {
        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
        return new Date(y, m, d).valueOf();
      }
    }
    function utcStartOfDate(y, m, d) {
      if (y < 100 && y >= 0) {
        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
        return Date.UTC(y, m, d);
      }
    }
    function startOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time = startOfDate(this.year(), 0, 1);
          break;
        case "quarter":
          time = startOfDate(
            this.year(),
            this.month() - this.month() % 3,
            1
          );
          break;
        case "month":
          time = startOfDate(this.year(), this.month(), 1);
          break;
        case "week":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday()
          );
          break;
        case "isoWeek":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1)
          );
          break;
        case "day":
        case "date":
          time = startOfDate(this.year(), this.month(), this.date());
          break;
        case "hour":
          time = this._d.valueOf();
          time -= mod$1(
            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          );
          break;
        case "minute":
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_MINUTE);
          break;
        case "second":
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_SECOND);
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function endOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time = startOfDate(this.year() + 1, 0, 1) - 1;
          break;
        case "quarter":
          time = startOfDate(
            this.year(),
            this.month() - this.month() % 3 + 3,
            1
          ) - 1;
          break;
        case "month":
          time = startOfDate(this.year(), this.month() + 1, 1) - 1;
          break;
        case "week":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday() + 7
          ) - 1;
          break;
        case "isoWeek":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1) + 7
          ) - 1;
          break;
        case "day":
        case "date":
          time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
          break;
        case "hour":
          time = this._d.valueOf();
          time += MS_PER_HOUR - mod$1(
            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          ) - 1;
          break;
        case "minute":
          time = this._d.valueOf();
          time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
          break;
        case "second":
          time = this._d.valueOf();
          time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function valueOf() {
      return this._d.valueOf() - (this._offset || 0) * 6e4;
    }
    function unix() {
      return Math.floor(this.valueOf() / 1e3);
    }
    function toDate$1() {
      return new Date(this.valueOf());
    }
    function toArray$1() {
      var m = this;
      return [
        m.year(),
        m.month(),
        m.date(),
        m.hour(),
        m.minute(),
        m.second(),
        m.millisecond()
      ];
    }
    function toObject() {
      var m = this;
      return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
      };
    }
    function toJSON() {
      return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
      return isValid(this);
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      };
    }
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", ["y", 1], "yo", "eraYear");
    addFormatToken("y", ["yy", 2], 0, "eraYear");
    addFormatToken("y", ["yyy", 3], 0, "eraYear");
    addFormatToken("y", ["yyyy", 4], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken(
      ["N", "NN", "NNN", "NNNN", "NNNNN"],
      function(input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      }
    );
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
    addParseToken(["yo"], function(input, array, config, token2) {
      var match;
      if (config._locale._eraYearOrdinalRegex) {
        match = input.match(config._locale._eraYearOrdinalRegex);
      }
      if (config._locale.eraYearOrdinalParse) {
        array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    function localeEras(m, format2) {
      var i2, l, date, eras = this._eras || getLocale("en")._eras;
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        switch (typeof eras[i2].since) {
          case "string":
            date = hooks(eras[i2].since).startOf("day");
            eras[i2].since = date.valueOf();
            break;
        }
        switch (typeof eras[i2].until) {
          case "undefined":
            eras[i2].until = Infinity;
            break;
          case "string":
            date = hooks(eras[i2].until).startOf("day").valueOf();
            eras[i2].until = date.valueOf();
            break;
        }
      }
      return eras;
    }
    function localeErasParse(eraName, format2, strict) {
      var i2, l, eras = this.eras(), name, abbr, narrow;
      eraName = eraName.toUpperCase();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        name = eras[i2].name.toUpperCase();
        abbr = eras[i2].abbr.toUpperCase();
        narrow = eras[i2].narrow.toUpperCase();
        if (strict) {
          switch (format2) {
            case "N":
            case "NN":
            case "NNN":
              if (abbr === eraName) {
                return eras[i2];
              }
              break;
            case "NNNN":
              if (name === eraName) {
                return eras[i2];
              }
              break;
            case "NNNNN":
              if (narrow === eraName) {
                return eras[i2];
              }
              break;
          }
        } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
          return eras[i2];
        }
      }
    }
    function localeErasConvertYear(era, year) {
      var dir = era.since <= era.until ? 1 : -1;
      if (year === void 0) {
        return hooks(era.since).year();
      } else {
        return hooks(era.since).year() + (year - era.offset) * dir;
      }
    }
    function getEraName() {
      var i2, l, val, eras = this.localeData().eras();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until) {
          return eras[i2].name;
        }
        if (eras[i2].until <= val && val <= eras[i2].since) {
          return eras[i2].name;
        }
      }
      return "";
    }
    function getEraNarrow() {
      var i2, l, val, eras = this.localeData().eras();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until) {
          return eras[i2].narrow;
        }
        if (eras[i2].until <= val && val <= eras[i2].since) {
          return eras[i2].narrow;
        }
      }
      return "";
    }
    function getEraAbbr() {
      var i2, l, val, eras = this.localeData().eras();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until) {
          return eras[i2].abbr;
        }
        if (eras[i2].until <= val && val <= eras[i2].since) {
          return eras[i2].abbr;
        }
      }
      return "";
    }
    function getEraYear() {
      var i2, l, dir, val, eras = this.localeData().eras();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        dir = eras[i2].since <= eras[i2].until ? 1 : -1;
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
          return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
        }
      }
      return this.year();
    }
    function erasNameRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNameRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
      if (!hasOwnProp(this, "_erasAbbrRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNarrowRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale2) {
      return locale2.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale2) {
      return locale2.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale2) {
      return locale2.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale2) {
      return locale2._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
      var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l, eras = this.eras();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        namePieces.push(regexEscape(eras[i2].name));
        abbrPieces.push(regexEscape(eras[i2].abbr));
        narrowPieces.push(regexEscape(eras[i2].narrow));
        mixedPieces.push(regexEscape(eras[i2].name));
        mixedPieces.push(regexEscape(eras[i2].abbr));
        mixedPieces.push(regexEscape(eras[i2].narrow));
      }
      this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
      this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
      this._erasNarrowRegex = new RegExp(
        "^(" + narrowPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken(0, ["gg", 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ["GG", 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token2, getter) {
      addFormatToken(0, [token2, token2.length], 0, getter);
    }
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addUnitAlias("weekYear", "gg");
    addUnitAlias("isoWeekYear", "GG");
    addUnitPriority("weekYear", 1);
    addUnitPriority("isoWeekYear", 1);
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken(
      ["gggg", "ggggg", "GGGG", "GGGGG"],
      function(input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      }
    );
    addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.week(),
        this.weekday(),
        this.localeData()._week.dow,
        this.localeData()._week.doy
      );
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.isoWeek(),
        this.isoWeekday(),
        1,
        4
      );
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
      return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year;
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this;
    }
    addFormatToken("Q", 0, "Qo", "quarter");
    addUnitAlias("quarter", "Q");
    addUnitPriority("quarter", 7);
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken("D", ["DD", 2], "Do", "date");
    addUnitAlias("date", "D");
    addUnitPriority("date", 9);
    addRegexToken("D", match1to2);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(["D", "DD"], DATE);
    addParseToken("Do", function(input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });
    var getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    addUnitAlias("dayOfYear", "DDD");
    addUnitPriority("dayOfYear", 4);
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken(["DDD", "DDDD"], function(input, array, config) {
      config._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round(
        (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
      ) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    }
    addFormatToken("m", ["mm", 2], 0, "minute");
    addUnitAlias("minute", "m");
    addUnitPriority("minute", 14);
    addRegexToken("m", match1to2);
    addRegexToken("mm", match1to2, match2);
    addParseToken(["m", "mm"], MINUTE);
    var getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", ["ss", 2], 0, "second");
    addUnitAlias("second", "s");
    addUnitPriority("second", 15);
    addRegexToken("s", match1to2);
    addRegexToken("ss", match1to2, match2);
    addParseToken(["s", "ss"], SECOND);
    var getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ["SS", 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ["SSS", 3], 0, "millisecond");
    addFormatToken(0, ["SSSS", 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ["SSSSS", 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ["SSSSSS", 6], 0, function() {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ["SSSSSSS", 7], 0, function() {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
      return this.millisecond() * 1e6;
    });
    addUnitAlias("millisecond", "ms");
    addUnitPriority("millisecond", 16);
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    var token, getSetMillisecond;
    for (token = "SSSS"; token.length <= 9; token += "S") {
      addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
      array[MILLISECOND] = toInt(("0." + input) * 1e3);
    }
    for (token = "S"; token.length <= 9; token += "S") {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    function getZoneAbbr() {
      return this._isUTC ? "UTC" : "";
    }
    function getZoneName() {
      return this._isUTC ? "Coordinated Universal Time" : "";
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale$1;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray$1;
    proto.toObject = toObject;
    proto.toDate = toDate$1;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) {
      proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
      "dates accessor is deprecated. Use date instead.",
      getSetDayOfMonth
    );
    proto.months = deprecate(
      "months accessor is deprecated. Use month instead",
      getSetMonth
    );
    proto.years = deprecate(
      "years accessor is deprecated. Use year instead",
      getSetYear
    );
    proto.zone = deprecate(
      "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
      getSetZone
    );
    proto.isDSTShifted = deprecate(
      "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
      isDaylightSavingTimeShifted
    );
    function createUnix(input) {
      return createLocal(input * 1e3);
    }
    function createInZone() {
      return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
      return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1$1(format2, index, field, setter) {
      var locale2 = getLocale(), utc = createUTC().set(setter, index);
      return locale2[field](utc, format2);
    }
    function listMonthsImpl(format2, index, field) {
      if (isNumber(format2)) {
        index = format2;
        format2 = void 0;
      }
      format2 = format2 || "";
      if (index != null) {
        return get$1$1(format2, index, field, "month");
      }
      var i2, out = [];
      for (i2 = 0; i2 < 12; i2++) {
        out[i2] = get$1$1(format2, i2, field, "month");
      }
      return out;
    }
    function listWeekdaysImpl(localeSorted, format2, index, field) {
      if (typeof localeSorted === "boolean") {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      } else {
        format2 = localeSorted;
        index = format2;
        localeSorted = false;
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      }
      var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i2, out = [];
      if (index != null) {
        return get$1$1(format2, (index + shift) % 7, field, "day");
      }
      for (i2 = 0; i2 < 7; i2++) {
        out[i2] = get$1$1(format2, (i2 + shift) % 7, field, "day");
      }
      return out;
    }
    function listMonths(format2, index) {
      return listMonthsImpl(format2, index, "months");
    }
    function listMonthsShort(format2, index) {
      return listMonthsImpl(format2, index, "monthsShort");
    }
    function listWeekdays(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
    }
    function listWeekdaysShort(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
    }
    function listWeekdaysMin(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
    }
    getSetGlobalLocale("en", {
      eras: [
        {
          since: "0001-01-01",
          until: Infinity,
          offset: 1,
          name: "Anno Domini",
          narrow: "AD",
          abbr: "AD"
        },
        {
          since: "0000-12-31",
          until: -Infinity,
          offset: 1,
          name: "Before Christ",
          narrow: "BC",
          abbr: "BC"
        }
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number) {
        var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
        return number + output;
      }
    });
    hooks.lang = deprecate(
      "moment.lang is deprecated. Use moment.locale instead.",
      getSetGlobalLocale
    );
    hooks.langData = deprecate(
      "moment.langData is deprecated. Use moment.localeData instead.",
      getLocale
    );
    var mathAbs = Math.abs;
    function abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function addSubtract$1(duration, input, value, direction) {
      var other = createDuration(input, value);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble();
    }
    function add$1(input, value) {
      return addSubtract$1(this, input, value, 1);
    }
    function subtract$1(input, value) {
      return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number) {
      if (number < 0) {
        return Math.floor(number);
      } else {
        return Math.ceil(number);
      }
    }
    function bubble() {
      var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
      if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
        milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
        days2 = 0;
        months2 = 0;
      }
      data.milliseconds = milliseconds2 % 1e3;
      seconds2 = absFloor(milliseconds2 / 1e3);
      data.seconds = seconds2 % 60;
      minutes2 = absFloor(seconds2 / 60);
      data.minutes = minutes2 % 60;
      hours2 = absFloor(minutes2 / 60);
      data.hours = hours2 % 24;
      days2 += absFloor(hours2 / 24);
      monthsFromDays = absFloor(daysToMonths(days2));
      months2 += monthsFromDays;
      days2 -= absCeil(monthsToDays(monthsFromDays));
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      data.days = days2;
      data.months = months2;
      data.years = years2;
      return this;
    }
    function daysToMonths(days2) {
      return days2 * 4800 / 146097;
    }
    function monthsToDays(months2) {
      return months2 * 146097 / 4800;
    }
    function as(units) {
      if (!this.isValid()) {
        return NaN;
      }
      var days2, months2, milliseconds2 = this._milliseconds;
      units = normalizeUnits(units);
      if (units === "month" || units === "quarter" || units === "year") {
        days2 = this._days + milliseconds2 / 864e5;
        months2 = this._months + daysToMonths(days2);
        switch (units) {
          case "month":
            return months2;
          case "quarter":
            return months2 / 3;
          case "year":
            return months2 / 12;
        }
      } else {
        days2 = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case "week":
            return days2 / 7 + milliseconds2 / 6048e5;
          case "day":
            return days2 + milliseconds2 / 864e5;
          case "hour":
            return days2 * 24 + milliseconds2 / 36e5;
          case "minute":
            return days2 * 1440 + milliseconds2 / 6e4;
          case "second":
            return days2 * 86400 + milliseconds2 / 1e3;
          case "millisecond":
            return Math.floor(days2 * 864e5) + milliseconds2;
          default:
            throw new Error("Unknown unit " + units);
        }
      }
    }
    function valueOf$1() {
      if (!this.isValid()) {
        return NaN;
      }
      return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }
    function makeAs(alias) {
      return function() {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
    function clone$1() {
      return createDuration(this);
    }
    function get$2(units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + "s"]() : NaN;
    }
    function makeGetter(name) {
      return function() {
        return this.isValid() ? this._data[name] : NaN;
      };
    }
    var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round = Math.round, thresholds = {
      ss: 44,
      // a few seconds to seconds
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month/week
      w: null,
      // weeks to month
      M: 11
      // months to year
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
      return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
      var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
      if (thresholds2.w != null) {
        a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
      }
      a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale2;
      return substituteTimeAgo.apply(null, a);
    }
    function getSetRelativeTimeRounding(roundingFunction) {
      if (roundingFunction === void 0) {
        return round;
      }
      if (typeof roundingFunction === "function") {
        round = roundingFunction;
        return true;
      }
      return false;
    }
    function getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === void 0) {
        return false;
      }
      if (limit === void 0) {
        return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      if (threshold === "s") {
        thresholds.ss = limit - 1;
      }
      return true;
    }
    function humanize(argWithSuffix, argThresholds) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var withSuffix = false, th = thresholds, locale2, output;
      if (typeof argWithSuffix === "object") {
        argThresholds = argWithSuffix;
        argWithSuffix = false;
      }
      if (typeof argWithSuffix === "boolean") {
        withSuffix = argWithSuffix;
      }
      if (typeof argThresholds === "object") {
        th = Object.assign({}, thresholds, argThresholds);
        if (argThresholds.s != null && argThresholds.ss == null) {
          th.ss = argThresholds.s - 1;
        }
      }
      locale2 = this.localeData();
      output = relativeTime$1(this, !withSuffix, th, locale2);
      if (withSuffix) {
        output = locale2.pastFuture(+this, output);
      }
      return locale2.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x) {
      return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
      if (!total) {
        return "P0D";
      }
      minutes2 = absFloor(seconds2 / 60);
      hours2 = absFloor(minutes2 / 60);
      seconds2 %= 60;
      minutes2 %= 60;
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
      totalSign = total < 0 ? "-" : "";
      ymSign = sign(this._months) !== sign(total) ? "-" : "";
      daysSign = sign(this._days) !== sign(total) ? "-" : "";
      hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
      return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale$1;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate(
      "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
      toISOString$1
    );
    proto$2.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config) {
      config._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken("x", function(input, array, config) {
      config._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = "2.29.4";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
      // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
      // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
      // <input type="datetime-local" step="0.001" />
      DATE: "YYYY-MM-DD",
      // <input type="date" />
      TIME: "HH:mm",
      // <input type="time" />
      TIME_SECONDS: "HH:mm:ss",
      // <input type="time" step="1" />
      TIME_MS: "HH:mm:ss.SSS",
      // <input type="time" step="0.001" />
      WEEK: "GGGG-[W]WW",
      // <input type="week" />
      MONTH: "YYYY-MM"
      // <input type="month" />
    };
    const DatePicker_vue_vue_type_style_index_0_scoped_f344abe5_lang = "";
    const ExpandableSection_vue_vue_type_style_index_0_scoped_4839f121_lang = "";
    const _sfc_main$1u = {
      name: "ExpandableSection",
      components: { Icon, Tooltip },
      mixins: [decodeHtml],
      props: {
        /**
         * Collapse content on load of component.
         */
        collapsedOnLoad: Boolean,
        /**
         * Disable toggle button.
         */
        disabled: Boolean,
        /**
         * Disable truncation of section title.
         */
        disableTitleTruncation: Boolean,
        /**
         * Content for Tooltip component that is displayed next to the title.
         */
        helpText: {
          type: String,
          default: ""
        },
        /**
         * Renders the slot content immediately even if it is collapsed on load.
         */
        renderImmediately: Boolean,
        /**
         * The title for the section.
         */
        title: {
          type: String,
          required: true
        },
        /**
         * Sets title background to transparent.
         */
        transparent: Boolean
      },
      data() {
        return {
          id: getGUID(),
          isOpen: !this.$props.collapsedOnLoad,
          doRender: !this.$props.collapsedOnLoad || this.$props.renderImmediately
        };
      },
      methods: {
        collapse(e = null) {
          this.isOpen = false;
          this.$emit("collapsed", e);
        },
        expand(e = null) {
          this.isOpen = true;
          this.$emit("expanded", e);
        },
        toggleSection(e) {
          if (this.isOpen) {
            this.collapse(e);
          } else {
            this.expand(e);
          }
          if (!this.doRender) {
            this.doRender = true;
          }
        }
      }
    };
    const _withScopeId$s = (n) => (pushScopeId("data-v-4839f121"), n = n(), popScopeId(), n);
    const _hoisted_1$1m = ["aria-expanded", "aria-controls"];
    const _hoisted_2$1k = ["title"];
    const _hoisted_3$14 = ["title"];
    const _hoisted_4$Y = ["id", "aria-hidden"];
    const _hoisted_5$S = /* @__PURE__ */ _withScopeId$s(() => /* @__PURE__ */ createBaseVNode("p", null, " Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo. Nulla vitae elit libero, a pharetra augue. ", -1));
    function _sfc_render$1t(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_Tooltip = resolveComponent("Tooltip");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([{ "slds-is-open": $data.isOpen }, "slds-section"])
      }, [
        createBaseVNode("h3", {
          class: normalizeClass([{ "slds-theme_shade": _ctx.$props.disabled && !_ctx.$props.transparent }, "slds-section__title"])
        }, [
          !_ctx.$props.disabled ? (openBlock(), createElementBlock("button", {
            key: 0,
            "aria-expanded": $data.isOpen,
            "aria-controls": $data.id,
            class: normalizeClass(["slds-button slds-section__title-action", { "transparent slds-p-left_none": _ctx.$props.transparent }]),
            onClick: _cache[0] || (_cache[0] = ($event) => $options.toggleSection($event))
          }, [
            createVNode(_component_Icon, {
              category: "utility",
              name: "switch",
              size: "x-small",
              iconClass: ["slds-section__title-action-icon", "slds-button__icon", "slds-button__icon_left"]
            }),
            renderSlot(_ctx.$slots, "title", {}, () => [
              createBaseVNode("span", {
                class: normalizeClass({ "slds-truncate": !_ctx.$props.disableTitleTruncation, "slds-p-right_xx-small": _ctx.$props.helpText }),
                title: _ctx.$props.title
              }, toDisplayString(_ctx.decodeHtml(_ctx.$props.title)), 11, _hoisted_2$1k),
              _ctx.$props.helpText ? (openBlock(), createBlock(_component_Tooltip, {
                key: 0,
                style: { "line-height": "normal", "margin-top": "-2px" },
                assistiveText: _ctx.$props.helpText,
                text: _ctx.$props.helpText
              }, null, 8, ["assistiveText", "text"])) : createCommentVNode("", true)
            ], true)
          ], 10, _hoisted_1$1m)) : renderSlot(_ctx.$slots, "title", { key: 1 }, () => [
            createBaseVNode("span", {
              class: normalizeClass({ "slds-truncate": !_ctx.$props.disableTitleTruncation, "slds-p-left_small": !_ctx.$props.transparent, "slds-p-right_xx-small": _ctx.$props.helpText }),
              title: _ctx.$props.title
            }, toDisplayString(_ctx.decodeHtml(_ctx.$props.title)), 11, _hoisted_3$14),
            _ctx.$props.helpText ? (openBlock(), createBlock(_component_Tooltip, {
              key: 0,
              alignment: "top right",
              style: { "line-height": "normal" },
              assistiveText: _ctx.$props.helpText,
              text: _ctx.$props.helpText
            }, null, 8, ["assistiveText", "text"])) : createCommentVNode("", true)
          ], true)
        ], 2),
        $data.doRender ? (openBlock(), createElementBlock("div", {
          key: 0,
          id: $data.id,
          "aria-hidden": !$data.isOpen,
          class: "slds-section__content"
        }, [
          renderSlot(_ctx.$slots, "default", {}, () => [
            _hoisted_5$S
          ], true)
        ], 8, _hoisted_4$Y)) : createCommentVNode("", true)
      ], 2);
    }
    const ExpandableSection = /* @__PURE__ */ _export_sfc(_sfc_main$1u, [["render", _sfc_render$1t], ["__scopeId", "data-v-4839f121"]]);
    const Modes = Object.freeze({
      ALL: Symbol.for("slds-vue-expression-all"),
      ANY: Symbol.for("slds-vue-expression-any"),
      CUSTOM: Symbol.for("slds-vue-expression-custom")
    });
    const getDefaultLabels = () => ({
      addCondition: "Add Condition",
      customLogic: "Custom Logic",
      takeAction: "Take Action When",
      title: "Conditions",
      modeAll: "All Conditions Are Met",
      modeAny: "Any Condition Is Met",
      modeCustom: "Custom Logic Is Met",
      and: "AND",
      or: "OR",
      customLogicPlaceholder: "e.g. (1 AND 2) OR 3"
    });
    ({
      name: "Expression",
      components: {
        Button: SLDSButton,
        TextInput,
        Picklist
      },
      mixins: [decodeHtml],
      props: {
        /**
         * Proxied listeners to the custom logic TextInput component.
         */
        customLogicListeners: {
          type: Object,
          default: () => {
          }
        },
        /**
         * If true, disables built-in accessibility logic when component state changes.
         */
        disableA11y: Boolean,
        /**
         * If true, the logic selection picklist is diabled.
         */
        disableLogic: Boolean,
        /**
         * @param {Object} labels Text labels for internationalization.
         * @param {String} labels.addCondition Label for the Add Condition button. Defaults to "Add Condition".
         * @param {String} labels.customLogic Label for the custom logic input. Default to "Custom Logic".
         * @param {String} labels.takeAction Label for the expression mode dropdown. Defaults to "Take Action When".
         * @param {String} labels.title Label for the expression title. Defaults to "Conditions".
         * @param {String} labels.modeAll Label for the ALL mode. Defaults to "All Conditions Are Met".
         * @param {String} labels.modeAny Label for the ANY mode. Defaults to "Any Condition Is Met".
         * @param {String} labels.modeCustom Label for the CUSTOM mode. Defaults to "Custom Logic Is Met".
         * @param {String} labels.and Label for the gutter label when mode is ALL. Defaults to "AND".
         * @param {String} labels.or Label for the gutter label when mode is ANY. Defaults to "OR".
         */
        labels: {
          type: Object,
          default: () => getDefaultLabels()
        },
        /**
         * @param {Symbol} mode The selected mode. Defaults to Modes.ALL.
         */
        mode: {
          type: Symbol,
          default: Modes.ALL,
          validator(value) {
            const valid = Object.values(Modes).includes(value);
            if (!valid) {
              console.warn("Mode prop must be equal to one of the enumerated values from the exported Expression.Modes module.");
            }
            return valid;
          }
        },
        /**
        * @param {Array} modes The list of available modes. Defaults to ALL, ANY, and CUSTOM. Array members must be
        *                      one or more of the available properties from the exported Modes module.
        */
        modes: {
          type: Array,
          default: () => [
            Modes.ALL,
            Modes.ANY,
            Modes.CUSTOM
          ],
          validator() {
            return true;
          }
        },
        /**
         * If true, gutters are not rendered.
         */
        noGutter: Boolean,
        /**
         * If true, all logic-related artifacts will not be rendered.
         */
        noLogic: Boolean,
        /**
         * If true, no title is rendered.
         */
        noTitle: Boolean,
        /**
        * @param {String} customLogic The custom logic value. If set, it will appear in the custom logic input box
        *                             if the current mode is Modes.CUSTOM.
        */
        customLogic: {
          type: String,
          default: ""
        },
        customLogicErrors: {
          type: Array,
          default: () => []
        }
      },
      data() {
        return {
          registeredConditions: {},
          localMode: this.$props.mode,
          addConditionFlag: false,
          mergedLabels: {
            ...getDefaultLabels(),
            ...this.$props.labels
          }
        };
      },
      computed: {
        modeOptions() {
          return this.$props.modes.map((mode) => ({
            id: mode,
            title: this.modeLabels[mode]
          }));
        },
        modeLabels() {
          return {
            [Modes.ALL]: this.mergedLabels.modeAll,
            [Modes.ANY]: this.mergedLabels.modeAny,
            [Modes.CUSTOM]: this.mergedLabels.modeCustom
          };
        },
        showCustomLogicInput() {
          return this.$props.mode === Modes.CUSTOM;
        },
        numConditions() {
          return Object.keys(this.registeredConditions).length;
        }
      },
      watch: {
        numConditions(newValue, oldValue) {
          this.updateConditions();
          if (this.addConditionFlag && newValue > oldValue) {
            const conditionId = Object.keys(this.registeredConditions)[newValue - 1];
            this.$nextTick(this.registeredConditions[conditionId].focusResource);
          }
        },
        "$props.mode": {
          handler(value) {
            this.localMode = value;
          }
        },
        "$props.noGutter": {
          handler() {
            this.updateConditions();
          }
        },
        localMode() {
          this.updateConditions();
        }
      },
      mounted() {
        this.$el.addEventListener("register-condition", this.onRegisterCondition);
      },
      methods: {
        registerCondition(id, callbacks) {
          this.registeredConditions[id] = callbacks;
        },
        unregisterCondition(id) {
          this.updateFocus(id);
          delete this.registeredConditions[id];
        },
        updateFocus(id) {
          const conditionIds = Object.keys(this.registeredConditions);
          const indexToBeUnregistered = conditionIds.indexOf(id);
          let registeredCondition;
          if (indexToBeUnregistered === conditionIds.length - 1) {
            registeredCondition = this.registeredConditions[conditionIds[indexToBeUnregistered - 1]];
          } else {
            registeredCondition = this.registeredConditions[conditionIds[indexToBeUnregistered + 1]];
          }
          if (registeredCondition && registeredCondition.focusResource) {
            registeredCondition.focusResource();
          }
        },
        addCondition() {
          this.addConditionFlag = true;
          this.$emit("add-condition");
        },
        updateConditions() {
          Object.entries(this.registeredConditions).forEach(([, callbacks], index) => {
            callbacks.setGutterLabel(null);
            switch (this.localMode) {
              case Modes.ALL:
                if (index > 0) {
                  callbacks.setGutterLabel(this.mergedLabels.and);
                }
                break;
              case Modes.ANY:
                if (index > 0) {
                  callbacks.setGutterLabel(this.mergedLabels.or);
                }
                break;
              case Modes.CUSTOM:
                callbacks.setGutterLabel(index + 1);
                break;
            }
            callbacks.setGutterVisibility(!this.$props.noGutter);
            callbacks.setIndex(index);
            callbacks.setNumSiblings(this.numConditions - 1);
          });
        }
      }
    });
    const Modal_vue_vue_type_style_index_0_scoped_7777abc4_lang = "";
    const defaultLabels$2 = () => ({
      prompt: "Okay",
      closeTitle: "Close",
      closeAssistiveText: "Close"
    });
    const _sfc_main$1t = {
      name: "Modal",
      components: { ButtonIcon },
      mixins: [decodeHtml],
      props: {
        /**
         * Hides modal body.
         */
        bodyless: Boolean,
        /**
         * Detaches modal from flow of DOM.
         */
        detach: {
          type: Boolean,
          default: true
        },
        /**
         * Hides modal header.
         */
        headless: Boolean,
        /**
         * Hides close button.
         */
        hideCloseButton: Boolean,
        /**
         * Hides modal footer.
         */
        footless: Boolean,
        /**
         * Modal label object.
         */
        labels: {
          type: Object,
          default: () => {
          }
        },
        /**
         * Styles the modal as a prompt.
         */
        prompt: Boolean,
        /**
         * Specifies the modal's width.
         */
        size: {
          type: String,
          default: "medium",
          validator: (value) => {
            const validSizes = [
              "small",
              "base",
              "medium",
              "large",
              "x-large"
            ];
            if (!value || !validSizes.includes(value)) {
              console.error(`Valid size prop values are ${validSizes.join(", ")}`);
              return false;
            }
            return true;
          }
        },
        /**
         * Text heading at the top of a modal.
         */
        title: {
          type: String,
          required: true
        }
      },
      data() {
        return {
          container: null,
          focusableElements: [],
          modalId: getGUID(),
          triggerElement: null
        };
      },
      computed: {
        computedLabels() {
          const globals = Object.hasOwn(this, "$__getGlobalLabels") ? this.$__getGlobalLabels().modal || {} : {};
          return {
            ...defaultLabels$2(),
            ...globals,
            ...this.$props.labels
          };
        },
        headerClasses() {
          const classes = [];
          if (this.prompt)
            classes.push("slds-theme_alert-texture slds-theme_error");
          if (this.headless)
            classes.push("slds-modal__header_empty");
          return classes;
        },
        footerClasses() {
          const classes = [];
          if (this.prompt)
            classes.push("slds-theme_default");
          if (this.bodyless)
            classes.push("footer-bodyless");
          return classes;
        },
        modalClass() {
          const classes = [];
          if (this.size !== "base") {
            classes.push(`slds-modal_${this.size}`);
          }
          if (this.prompt) {
            classes.push("slds-modal_prompt");
          }
          return classes;
        }
      },
      mounted() {
        this.triggerElement = document.activeElement || document.body;
        if (this.detach) {
          this._detach();
          Array.from(this.container.parentNode.children).filter((node) => node !== this.container && !(node instanceof HTMLScriptElement)).forEach((node) => {
            node.setAttribute("aria-hidden", true);
          });
        }
        this.getFocusableElements();
        this.setFocusOnFirstFocusableItem();
        this.$emit("mounted");
      },
      beforeUnmount() {
        if (this.container) {
          this.container.remove();
          this.container = null;
        }
        this.triggerElement.focus();
      },
      updated() {
        this.getFocusableElements();
      },
      methods: {
        _detach() {
          this.container = document.createElement("div");
          this.container.className = `slds-scope ${this.$el.className}`;
          this.container.appendChild(this.$el);
          document.body.appendChild(this.container);
        },
        getFocusableElements() {
          this.focusableElements = [...this.$refs.section.querySelectorAll("a, button, input, textarea, select, details")].filter((el) => !el.hasAttribute("disabled") && el.tabIndex !== -1);
        },
        setFocusOnFirstFocusableItem() {
          if (!this.focusableElements.length)
            return;
          if (this.focusableElements.length > 1 && this.focusableElements[0] === this.$refs.closeButton.$el) {
            this.focusableElements[1].focus();
          } else {
            this.focusableElements[0].focus();
          }
        },
        tab(e) {
          if (!this.focusableElements.length)
            return;
          if (this.focusableElements[this.focusableElements.length - 1] === document.activeElement) {
            e.preventDefault();
            this.focusableElements[0].focus();
          }
        },
        shiftTab(e) {
          if (!this.focusableElements.length)
            return;
          if (this.focusableElements[0] === document.activeElement) {
            e.preventDefault();
            this.focusableElements[this.focusableElements.length - 1].focus();
          }
        }
      }
    };
    const _hoisted_1$1l = {
      appear: "",
      name: "fade"
    };
    const _hoisted_2$1j = ["role", "tabindex", "aria-labelledby", "aria-describedby"];
    const _hoisted_3$13 = { class: "slds-modal__container" };
    const _hoisted_4$X = ["id"];
    const _hoisted_5$R = ["id"];
    const _hoisted_6$J = { key: 1 };
    const _hoisted_7$C = {
      ref: "backdrop",
      key: "backdrop",
      class: "slds-backdrop-custom"
    };
    function _sfc_render$1s(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      return openBlock(), createElementBlock("div", _hoisted_1$1l, [
        createBaseVNode("section", {
          ref: "section",
          key: "section",
          role: $props.prompt ? "alertdialog" : "dialog",
          tabindex: $props.prompt ? "0" : null,
          class: normalizeClass(["slds-modal-custom", $options.modalClass]),
          "aria-labelledby": $props.headless ? null : `modal-heading-${$data.modalId}`,
          "aria-describedby": `modal-content-${$data.modalId}`,
          onKeydown: [
            _cache[3] || (_cache[3] = withKeys(withModifiers((...args) => $options.tab && $options.tab(...args), ["exact"]), ["tab"])),
            _cache[4] || (_cache[4] = withKeys(withModifiers((...args) => $options.shiftTab && $options.shiftTab(...args), ["shift"]), ["tab"])),
            _cache[5] || (_cache[5] = withKeys(withModifiers(($event) => _ctx.$emit("close"), ["stop"]), ["esc"]))
          ]
        }, [
          createBaseVNode("div", _hoisted_3$13, [
            createBaseVNode("header", {
              class: normalizeClass([$options.headerClasses, "slds-modal__header"])
            }, [
              !$props.hideCloseButton ? (openBlock(), createBlock(_component_ButtonIcon, {
                key: 0,
                ref: "closeButton",
                iconCategory: "utility",
                iconName: "close",
                iconSize: "large",
                class: "slds-modal__close slds-button_icon-inverse",
                assistiveText: $options.computedLabels.closeAssistiveText,
                title: $options.computedLabels.closeTitle,
                onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
              }, null, 8, ["assistiveText", "title"])) : createCommentVNode("", true),
              !$props.headless ? (openBlock(), createElementBlock("h2", {
                key: 1,
                id: `modal-heading-${$data.modalId}`,
                class: "slds-text-heading_medium slds-hyphenate"
              }, toDisplayString(_ctx.decodeHtml($props.title)), 9, _hoisted_4$X)) : createCommentVNode("", true),
              !$props.headless ? renderSlot(_ctx.$slots, "tagline", { key: 2 }, void 0, true) : createCommentVNode("", true)
            ], 2),
            !$props.bodyless ? (openBlock(), createElementBlock("div", {
              key: 0,
              id: `modal-content-${$data.modalId}`,
              ref: "content",
              class: "slds-modal__content slds-p-around_medium slds-is-relative",
              onKeydown: _cache[1] || (_cache[1] = withKeys(($event) => _ctx.$emit("submit"), ["enter"]))
            }, [
              renderSlot(_ctx.$slots, "content", {}, () => [
                createTextVNode("default content")
              ], true)
            ], 40, _hoisted_5$R)) : createCommentVNode("", true),
            !$props.footless ? (openBlock(), createElementBlock("footer", {
              key: 1,
              class: normalizeClass(["slds-modal__footer", $options.footerClasses])
            }, [
              renderSlot(_ctx.$slots, "footer", {}, () => [
                $props.prompt ? (openBlock(), createElementBlock("button", {
                  key: 0,
                  class: "slds-button slds-button_neutral",
                  onClick: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("close"))
                }, toDisplayString($options.computedLabels.prompt), 1)) : (openBlock(), createElementBlock("span", _hoisted_6$J, " default footer "))
              ], true)
            ], 2)) : createCommentVNode("", true)
          ])
        ], 42, _hoisted_2$1j),
        createBaseVNode("div", _hoisted_7$C, null, 512)
      ]);
    }
    const Modal = /* @__PURE__ */ _export_sfc(_sfc_main$1t, [["render", _sfc_render$1s], ["__scopeId", "data-v-7777abc4"]]);
    const Popover_vue_vue_type_style_index_0_scoped_ee69ade2_lang = "";
    const alignmentPositions = {
      top: "top",
      "top left": "top-end",
      "top right": "top-start",
      right: "right",
      "right top": "right-end",
      "right bottom": "right-start",
      bottom: "bottom",
      "bottom left": "bottom-end",
      "bottom right": "bottom-start",
      left: "left",
      "left top": "left-end",
      "left bottom": "left-start"
    };
    const defaultLabels$1 = () => ({
      closeTitle: "Close Dialog",
      closeAssistiveText: "Close Dialog"
    });
    const isAlignmentValid = (alignment) => Object.keys(alignmentPositions).find((value) => value === alignment);
    const _sfc_main$1s = {
      name: "Popover",
      description: "Renders a SLDS-themed popover dialog",
      components: {
        ButtonIcon,
        Icon
      },
      directives: {
        "click-outside": clickOutside
      },
      props: {
        /**
         * Alignment of popover in relation to trigger element.
         */
        alignment: {
          type: String,
          default: "top",
          validator(alignment) {
            return isAlignmentValid(alignment);
          }
        },
        /**
         * `aria-label` for popover section element. If no Heading element is present, use this prop and set the value to be a meaningful title of the dialog
         */
        ariaLabel: {
          type: String,
          default: null
        },
        /**
         * Bind the dialog to a specific element.
         */
        bindTo: {
          type: HTMLElement,
          default: null
        },
        /**
         * Bind to coordinates. Overrides bindTo.
         */
        bindToRect: {
          type: Object,
          default: () => {
          },
          validator: (value) => value.x && value.y
        },
        /**
         * Allow mouse click on elements outside popover to close popover.
         */
        closeOnClickOutside: Boolean,
        /**
         * Popover label object.
         */
        labels: {
          type: Object,
          default: () => {
          }
        },
        /**
         * The rem set for the nubbin.
         */
        nubbinREM: {
          type: Number,
          default: 1.8
        },
        /**
         * Amount of padding in px from edge of viewport if overflow is detected.
         */
        overflowPadding: {
          type: Number,
          default: 5
        },
        /**
         * Position attribute for the popover.
         */
        position: {
          type: String,
          default: "fixed",
          validator(position) {
            return ["absolute", "fixed"].find((value) => value === position);
          }
        },
        /**
         * Array of elements to allow scrolling without closing popover.
         */
        scrollElementsToIgnore: {
          type: Array,
          default: () => []
        },
        /**
         * Determines the type of the popover.
         */
        theme: {
          type: String,
          default: "base",
          validator: (value) => {
            const validThemes = [
              "base",
              "error",
              "warning"
            ];
            const isValid2 = !value || validThemes.includes(value);
            if (!isValid2)
              console.error(`Valid theme prop values are ${validThemes.join(", ")}`);
            return isValid2;
          }
        },
        /**
         * Sets width of popover.
         */
        width: {
          type: String,
          default: "small",
          validator: (value) => {
            const validThemes = [
              "small",
              "medium",
              "large",
              "x-large",
              "full-width"
            ];
            const isValid2 = !value || validThemes.includes(value);
            if (!isValid2)
              console.error(`Valid width prop values are ${validThemes.join(", ")}`);
            return isValid2;
          }
        }
      },
      data() {
        return {
          container: null,
          el: null,
          focusableElements: [],
          triggerElement: null,
          popoverId: getGUID(),
          observer: null,
          popperInstance: () => {
          }
        };
      },
      computed: {
        computedLabels() {
          const globals = Object.hasOwn(this, "$__getGlobalLabels") ? this.$__getGlobalLabels().popover || {} : {};
          return {
            ...defaultLabels$1(),
            ...globals,
            ...this.$props.labels
          };
        },
        widthClass() {
          return `slds-popover_${this.width}`;
        },
        popoverClass() {
          return this.theme !== "base" ? `slds-popover_${this.theme}` : "";
        },
        showHeader() {
          return this.$slots.header || this.$slots.custom;
        },
        showFooter() {
          return this.$slots.footer;
        },
        clickOutsideOptions() {
          return {
            active: this.closeOnClickOutside,
            handler: this.doHide
          };
        }
      },
      watch: {
        alignment() {
          if (isAlignmentValid(this.$props.alignment)) {
            this.popperInstance.setOptions({
              placement: alignmentPositions[this.$props.alignment]
            });
          }
        },
        width() {
          this.popperInstance.setOptions({
            placement: alignmentPositions[this.$props.alignment]
          });
        },
        "$props.bindTo": {
          handler() {
            if (!this.$props.bindTo)
              return;
            this.popperInstance.state.elements.reference = this.$props.bindTo;
            this.popperInstance.update();
          }
        }
      },
      mounted() {
        this.triggerElement = this.bindTo || document.activeElement || document.body;
        this.getFocusableElements();
        this.popperInstance = createPopper(this.triggerElement, this.$refs.popover, {
          strategy: this.position,
          placement: alignmentPositions[this.alignment],
          modifiers: [
            {
              name: "offset",
              options: {
                offset: ({ placement }) => {
                  if (placement.includes("end")) {
                    return [16, 16];
                  }
                  if (placement.includes("start")) {
                    return [-16, 16];
                  }
                  return [0, 16];
                }
              }
            },
            {
              name: "preventOverflow",
              options: {
                padding: this.$props.overflowPadding
              }
            }
          ]
        });
        this.observer = new MutationObserver(() => this.popperInstance.update());
        this.observer.observe(this.triggerElement, { attributes: true, childList: true, subtree: true });
        if (this.focusableElements.length) {
          if (this.focusableElements.length > 1 && this.focusableElements[0] === this.$refs.closeButton) {
            this.focusableElements[1].focus();
          } else {
            this.focusableElements[0].focus();
          }
        }
      },
      updated() {
        this.getFocusableElements();
      },
      beforeUnmount() {
        this.destroy();
      },
      methods: {
        doHide(e) {
          if (e) {
            if (e.type !== "scroll") {
              if (this.bindTo && this.bindTo.contains(e.target))
                return;
            } else {
              const isTargetInPopover = this.$refs.popover.contains(e.target);
              const targetIsInIgnoreList = this.scrollElementsToIgnore.includes(e.target) || this.scrollElementsToIgnore.some((el) => el && el.contains(e.target));
              if (isTargetInPopover || targetIsInIgnoreList)
                return;
            }
          }
          this.$emit("close", e);
        },
        destroy() {
          if (this.el)
            this.el.remove();
          if (this.container)
            this.container.remove();
          this.el = null;
          this.container = null;
          window.removeEventListener("scroll", this.doHide, true);
          this.triggerElement.focus();
          this.observer.disconnect();
          this.observer = null;
        },
        getFocusableElements() {
          this.focusableElements = [...this.$refs.popover.querySelectorAll('a, button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])')].filter((el) => !el.hasAttribute("disabled"));
        },
        tab(e) {
          if (!this.focusableElements.length)
            return;
          if (this.focusableElements[this.focusableElements.length - 1] === document.activeElement) {
            e.preventDefault();
            this.focusableElements[0].focus();
          }
        },
        shiftTab(e) {
          if (!this.focusableElements.length)
            return;
          if (this.focusableElements[0] === document.activeElement) {
            e.preventDefault();
            this.focusableElements[this.focusableElements.length - 1].focus();
          }
        }
      }
    };
    const _withScopeId$r = (n) => (pushScopeId("data-v-ee69ade2"), n = n(), popScopeId(), n);
    const _hoisted_1$1k = ["aria-describedby", "aria-labelledby", "aria-label"];
    const _hoisted_2$1i = ["id"];
    const _hoisted_3$12 = { class: "slds-media" };
    const _hoisted_4$W = { class: "slds-media__body" };
    const _hoisted_5$Q = ["id"];
    const _hoisted_6$I = { class: "slds-text-heading_small" };
    const _hoisted_7$B = /* @__PURE__ */ _withScopeId$r(() => /* @__PURE__ */ createBaseVNode("p", null, "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", -1));
    const _hoisted_8$z = ["id"];
    const _hoisted_9$y = { class: "slds-media slds-media_center slds-has-flexi-truncate" };
    const _hoisted_10$q = { class: "slds-media__figure" };
    const _hoisted_11$n = { class: "slds-media__body" };
    const _hoisted_12$j = { class: "slds-truncate slds-text-heading_medium" };
    const _hoisted_13$j = ["id"];
    const _hoisted_14$h = /* @__PURE__ */ _withScopeId$r(() => /* @__PURE__ */ createBaseVNode("p", null, "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", -1));
    const _hoisted_15$f = {
      key: 2,
      class: "slds-popover__footer"
    };
    const _hoisted_16$d = /* @__PURE__ */ _withScopeId$r(() => /* @__PURE__ */ createBaseVNode("div", {
      id: "arrow",
      "data-popper-arrow": ""
    }, null, -1));
    function _sfc_render$1r(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Icon = resolveComponent("Icon");
      const _directive_click_outside = resolveDirective("click-outside");
      return withDirectives((openBlock(), createElementBlock("section", {
        ref: "popover",
        role: "dialog",
        "aria-describedby": `dialog-body-${$data.popoverId}`,
        "aria-labelledby": $options.showHeader ? `dialog-heading-${$data.popoverId}` : null,
        "aria-label": $props.ariaLabel,
        tabindex: "-1",
        class: normalizeClass([[$options.popoverClass, $options.widthClass], "slds-popover"]),
        onKeydown: [
          _cache[0] || (_cache[0] = withKeys(withModifiers((...args) => $options.tab && $options.tab(...args), ["exact", "stop"]), ["tab"])),
          _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => $options.shiftTab && $options.shiftTab(...args), ["shift", "stop"]), ["tab"])),
          _cache[2] || (_cache[2] = withKeys(withModifiers((...args) => $options.doHide && $options.doHide(...args), ["stop"]), ["esc"]))
        ]
      }, [
        createVNode(_component_ButtonIcon, {
          ref: "closeButton",
          variant: $props.theme === "error" ? "inverse" : "bare",
          title: $options.computedLabels.closeTitle,
          class: "slds-float_right slds-popover__close",
          iconCategory: "utility",
          size: "small",
          iconName: "close",
          assistiveText: $options.computedLabels.closeAssistiveText,
          onClick: withModifiers($options.doHide, ["stop"])
        }, null, 8, ["variant", "title", "assistiveText", "onClick"]),
        $props.theme === "base" ? (openBlock(), createElementBlock("div", {
          key: 0,
          id: `dialog-body-${$data.popoverId}`,
          class: "slds-popover__body"
        }, [
          createBaseVNode("div", _hoisted_3$12, [
            createBaseVNode("div", _hoisted_4$W, [
              $options.showHeader ? (openBlock(), createElementBlock("header", {
                key: 0,
                id: `dialog-heading-${$data.popoverId}`,
                class: "slds-popover__header"
              }, [
                renderSlot(_ctx.$slots, "custom", {}, () => [
                  createBaseVNode("h2", _hoisted_6$I, [
                    renderSlot(_ctx.$slots, "header", {}, void 0, true)
                  ])
                ], true)
              ], 8, _hoisted_5$Q)) : createCommentVNode("", true)
            ])
          ]),
          renderSlot(_ctx.$slots, "content", {}, () => [
            _hoisted_7$B
          ], true)
        ], 8, _hoisted_2$1i)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          $options.showHeader ? (openBlock(), createElementBlock("header", {
            key: 0,
            id: `dialog-heading-${$data.popoverId}`,
            class: "slds-popover__header"
          }, [
            createBaseVNode("div", _hoisted_9$y, [
              renderSlot(_ctx.$slots, "custom", {}, () => [
                createBaseVNode("div", _hoisted_10$q, [
                  $props.theme !== "base" ? (openBlock(), createBlock(_component_Icon, {
                    key: 0,
                    category: "utility",
                    name: _ctx.$props.theme,
                    variant: "inverse",
                    iconClass: ["slds-icon", "slds-icon_x-small"]
                  }, null, 8, ["name"])) : createCommentVNode("", true)
                ]),
                createBaseVNode("div", _hoisted_11$n, [
                  createBaseVNode("h2", _hoisted_12$j, [
                    renderSlot(_ctx.$slots, "header", {}, void 0, true)
                  ])
                ])
              ], true)
            ])
          ], 8, _hoisted_8$z)) : createCommentVNode("", true),
          createBaseVNode("div", {
            id: `dialog-body-${$data.popoverId}`,
            class: "slds-popover__body"
          }, [
            renderSlot(_ctx.$slots, "content", {}, () => [
              _hoisted_14$h
            ], true)
          ], 8, _hoisted_13$j)
        ], 64)),
        $options.showFooter ? (openBlock(), createElementBlock("footer", _hoisted_15$f, [
          renderSlot(_ctx.$slots, "footer", {}, void 0, true)
        ])) : createCommentVNode("", true),
        _hoisted_16$d
      ], 42, _hoisted_1$1k)), [
        [_directive_click_outside, void 0, $options.clickOutsideOptions]
      ]);
    }
    const Popover = /* @__PURE__ */ _export_sfc(_sfc_main$1s, [["render", _sfc_render$1r], ["__scopeId", "data-v-ee69ade2"]]);
    const ProgressIndicator_vue_vue_type_style_index_0_scoped_87b7cb0a_lang = "";
    const defaultAssistiveText = () => ({
      active: "Active",
      completed: "Completed",
      error: "Error",
      progress: "Progress"
    });
    const _sfc_main$1r = {
      name: "ProgressIndicator",
      components: {
        Button: SLDSButton,
        ButtonIcon,
        Tooltip
      },
      mixins: [decodeHtml],
      props: {
        /**
         * Assistive text object
         */
        assistiveText: {
          type: Object,
          default: () => defaultAssistiveText()
        },
        /**
         * Represents the index currently selected or active step.
         */
        currentStep: {
          type: Number,
          default: 0
        },
        /**
         * Invoked when a step change is requested. If the callback returns true the step change occurs.
         * If the callback returns false the step change request is rejected.
         *
         * <strong>Callback Arguments</strong><br>
         * requestedStepId - id of the requested step<br>
         * currentStepId - id of the current step
         */
        onRequestStepChange: {
          type: Function,
          default: null
        },
        /**
         * Determines the orientation of the progress indicator
        */
        orientation: {
          type: String,
          default: "horizontal",
          validator: (value) => {
            const validOrientationValues = [
              "horizontal",
              "vertical"
            ];
            if (value && !validOrientationValues.includes(value)) {
              console.error(`Valid orientation prop values are ${validOrientationValues.join(", ")}`);
              return false;
            }
            return true;
          }
        },
        /**
         * It is an array of step objects in the following form:
         * [{
                id: <PropTypes.number> or <PropTypes.string> (has to be unique)
                label: <PropTypes.string>, representing the tooltip content
            }],
         */
        steps: {
          type: Array,
          required: true,
          validator: (steps) => {
            if (!steps.length)
              return false;
            const requiredProps = ["id", "label"];
            return steps.every((step) => requiredProps.every((prop) => Object.prototype.hasOwnProperty.call(step, prop)));
          }
        },
        /**
         * For use on gray backgrounds (ex. Modal footers)
         */
        withShade: Boolean
      },
      data() {
        return {
          currentStepIndex: 0
        };
      },
      computed: {
        percentComplete() {
          let percent = Math.floor(100 * (this.currentStepIndex / (this.$props.steps.length - 1)));
          if (percent > 100) {
            percent = 100;
          } else if (percent < 0) {
            percent = 0;
          }
          return percent;
        },
        completedBarWidth() {
          return this.$props.orientation === "horizontal" ? `width: ${this.percentComplete}%` : null;
        },
        themeClasses() {
          const classes = [];
          if (this.$props.withShade)
            classes.push("slds-progress_shade");
          if (this.$props.orientation === "vertical")
            classes.push("slds-progress_vertical");
          return classes;
        }
      },
      watch: {
        currentStep: {
          handler(value) {
            if (this.steps && value >= 0 && value < this.steps.length) {
              this.currentStepIndex = value;
              if (this.$refs && this.$refs.stepList)
                this.setCurrentStep(this.currentStepIndex);
            }
          },
          immediate: true
        }
      },
      methods: {
        getListItemClasses(step, index) {
          return {
            "slds-is-completed": index < this.currentStepIndex,
            "slds-is-active": index === this.currentStepIndex && !step.hasError,
            "slds-has-error": step.hasError
          };
        },
        getVerticalButtonClasses(step, index) {
          if (index < this.currentStepIndex || step.hasError) {
            return "slds-button_icon slds-progress__marker_icon";
          }
          return "button-without-icon";
        },
        allowStepChange(requestedStepIndex) {
          if (typeof this.$props.onRequestStepChange === "function") {
            return this.$props.onRequestStepChange(requestedStepIndex, this.currentStepIndex);
          }
          return true;
        },
        async setCurrentStep(index) {
          if (!await this.allowStepChange(index))
            return;
          this.$emit("step-change", index);
          this.$emit("update:currentStep", index);
          this.currentStepIndex = index;
          this.$nextTick(() => {
            this.$refs.stepList.querySelectorAll(".slds-progress__item button")[index].focus();
          });
        },
        onStepClick(index) {
          this.$emit("step-click", index);
          if (this.currentStepIndex === index)
            return;
          this.setCurrentStep(index);
        },
        up() {
          if (this.$props.orientation === "horizontal")
            return;
          this.previous();
        },
        down() {
          if (this.$props.orientation === "horizontal")
            return;
          this.next();
        },
        next() {
          const hasNextStep = this.$props.steps[this.currentStepIndex + 1];
          if (hasNextStep) {
            this.setCurrentStep(this.currentStepIndex + 1);
          }
        },
        previous() {
          const hasPreviousStep = this.currentStepIndex > 0;
          if (hasPreviousStep) {
            this.setCurrentStep(this.currentStepIndex - 1);
          }
        }
      }
    };
    const _hoisted_1$1j = ["aria-direction"];
    const _hoisted_2$1h = ["id"];
    const _hoisted_3$11 = {
      key: 0,
      class: "slds-assistive-text"
    };
    const _hoisted_4$V = ["id"];
    const _hoisted_5$P = ["aria-valuenow"];
    const _hoisted_6$H = { class: "slds-assistive-text" };
    function _sfc_render$1q(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Button = resolveComponent("Button");
      const _component_Tooltip = resolveComponent("Tooltip");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([$options.themeClasses, "slds-progress"])
      }, [
        createBaseVNode("ol", {
          ref: "stepList",
          role: "tablist",
          "aria-direction": _ctx.$props.orientation,
          class: "slds-progress__list",
          onKeydown: [
            _cache[0] || (_cache[0] = withKeys(withModifiers((...args) => $options.down && $options.down(...args), ["prevent"]), ["down"])),
            _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => $options.next && $options.next(...args), ["prevent"]), ["right"])),
            _cache[2] || (_cache[2] = withKeys(withModifiers((...args) => $options.up && $options.up(...args), ["prevent"]), ["up"])),
            _cache[3] || (_cache[3] = withKeys(withModifiers((...args) => $options.previous && $options.previous(...args), ["prevent"]), ["left"]))
          ]
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.steps, (step, index) => {
            return openBlock(), createElementBlock("li", {
              key: step.id,
              class: normalizeClass([$options.getListItemClasses(step, index), "slds-progress__item"])
            }, [
              _ctx.$props.orientation === "horizontal" ? (openBlock(), createBlock(_component_Tooltip, { key: 0 }, createSlots({
                default: withCtx(() => [
                  createBaseVNode("div", {
                    id: `step-${step.id}-tooltip`
                  }, toDisplayString(_ctx.decodeHtml(step.label)), 9, _hoisted_2$1h)
                ]),
                _: 2
              }, [
                step.hasError || index < $data.currentStepIndex ? {
                  name: "source",
                  fn: withCtx(() => [
                    createVNode(_component_ButtonIcon, {
                      ref_for: true,
                      ref: "source",
                      "aria-describedby": `step-${step.id}-tooltip`,
                      class: normalizeClass([{ "slds-button_icon slds-progress__marker_icon": index < $data.currentStepIndex || step.hasError }, "slds-button slds-progress__marker"]),
                      tabindex: index === $data.currentStepIndex ? 0 : -1,
                      iconCategory: "utility",
                      iconName: step.hasError ? "error" : "success",
                      assistiveText: step.hasError ? `${step.label} - ${_ctx.$props.assistiveText.error}` : `${step.label} - ${_ctx.$props.assistiveText.completed}`,
                      title: step.hasError ? `${step.label} - ${_ctx.$props.assistiveText.error}` : `${step.label} - ${_ctx.$props.assistiveText.completed}`,
                      onClick: ($event) => $options.onStepClick(index)
                    }, null, 8, ["aria-describedby", "class", "tabindex", "iconName", "assistiveText", "title", "onClick"])
                  ]),
                  key: "0"
                } : {
                  name: "source",
                  fn: withCtx(() => [
                    createVNode(_component_Button, {
                      ref_for: true,
                      ref: "source",
                      variant: "base",
                      class: "slds-progress__marker",
                      tabindex: index === $data.currentStepIndex ? 0 : -1,
                      onClick: ($event) => $options.onStepClick(index)
                    }, {
                      default: withCtx(() => [
                        createBaseVNode("span", { class: "slds-assistive-text" }, toDisplayString(_ctx.decodeHtml(`${step.label}${index === $data.currentStepIndex ? ` - ${_ctx.$props.assistiveText.active}` : ""}`)), 1)
                      ]),
                      _: 2
                    }, 1032, ["tabindex", "onClick"])
                  ]),
                  key: "1"
                }
              ]), 1024)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                step.hasError || index < $data.currentStepIndex ? (openBlock(), createBlock(_component_ButtonIcon, {
                  key: 0,
                  slot: "source",
                  "aria-describedby": `step-${step.id}`,
                  class: normalizeClass([$options.getVerticalButtonClasses(step, index), "slds-button slds-progress__marker"]),
                  tabindex: index === $data.currentStepIndex ? 0 : -1,
                  iconCategory: "utility",
                  iconName: step.hasError ? "error" : "success",
                  assistiveText: step.hasError ? `${step.label} - ${_ctx.$props.assistiveText.error}` : `${step.label} - ${_ctx.$props.assistiveText.completed}`,
                  title: step.hasError ? `${step.label} - ${_ctx.$props.assistiveText.error}` : `${step.label} - ${_ctx.$props.assistiveText.completed}`,
                  onClick: ($event) => $options.onStepClick(index)
                }, null, 8, ["aria-describedby", "class", "tabindex", "iconName", "assistiveText", "title", "onClick"])) : (openBlock(), createBlock(_component_Button, {
                  key: 1,
                  slot: "source",
                  variant: "base",
                  label: "",
                  class: "slds-progress__marker",
                  tabindex: index === $data.currentStepIndex ? 0 : -1,
                  onClick: ($event) => $options.onStepClick(index)
                }, {
                  default: withCtx(() => [
                    index === $data.currentStepIndex ? (openBlock(), createElementBlock("span", _hoisted_3$11, toDisplayString(_ctx.decodeHtml(`${step.label} - ${_ctx.$props.assistiveText.active}`)), 1)) : createCommentVNode("", true)
                  ]),
                  _: 2
                }, 1032, ["tabindex", "onClick"])),
                createBaseVNode("div", {
                  id: `step-${step.id}`,
                  class: "slds-progress__item_content slds-grid slds-grid_align-spread"
                }, toDisplayString(_ctx.decodeHtml(`${step.label}`)), 9, _hoisted_4$V)
              ], 64))
            ], 2);
          }), 128))
        ], 40, _hoisted_1$1j),
        createBaseVNode("div", {
          "aria-valuenow": $options.percentComplete,
          class: normalizeClass({ "slds-progress-bar slds-progress-bar_x-small": _ctx.$props.orientation === "horizontal" }),
          "aria-valuemin": "0",
          "aria-valuemax": "100",
          role: "progressbar"
        }, [
          createBaseVNode("span", {
            style: normalizeStyle($options.completedBarWidth),
            class: "slds-progress-bar__value"
          }, [
            createBaseVNode("span", _hoisted_6$H, toDisplayString(_ctx.decodeHtml(`${_ctx.$props.assistiveText.progress}: ${$options.percentComplete}%`)), 1)
          ], 4)
        ], 10, _hoisted_5$P)
      ], 2);
    }
    const ProgressIndicator = /* @__PURE__ */ _export_sfc(_sfc_main$1r, [["render", _sfc_render$1q], ["__scopeId", "data-v-87b7cb0a"]]);
    const Radio_vue_vue_type_style_index_0_scoped_20f14d8f_lang = "";
    const defaultLabels = () => ({
      name: null,
      required: "Required"
    });
    const _sfc_main$1q = {
      components: { Tooltip },
      props: {
        /**
         * Disable all radio inputs.
         */
        disabled: Boolean,
        /**
         * A Tooltip component that is displayed next to the label.
         */
        helpText: {
          type: String,
          default: ""
        },
        /**
         * Indicates that the radio group is in an invalid state.
         */
        invalid: Boolean,
        /**
         * Label object for the radio group.
         */
        labels: {
          type: Object,
          default: () => {
          }
        },
        /**
         * Selected value for the radio group.
         */
        modelValue: {
          type: [String, Number],
          default: null
        },
        /**
         * options needs to be an array of objects with label and value (optionally disabled).
         */
        options: {
          type: Array,
          required: true
        },
        /**
         * Read only state for the radio group.
         */
        readonly: Boolean,
        /**
         * Adds an indicator that this field is required.
         */
        required: Boolean
      },
      data() {
        return {
          guid: getGUID()
        };
      },
      computed: {
        computedLabels() {
          const globals = Object.hasOwn(this, "$__getGlobalLabels") ? this.$__getGlobalLabels().radio || {} : {};
          return {
            ...defaultLabels(),
            ...globals,
            ...this.$props.labels
          };
        },
        input: {
          get() {
            return this.$props.modelValue;
          },
          set(val) {
            this.$emit("update:modelValue", val);
          }
        }
      }
    };
    const BaseRadio = /* @__PURE__ */ _export_sfc(_sfc_main$1q, [["__scopeId", "data-v-20f14d8f"]]);
    const _sfc_main$1p = {
      name: "RadioButtonGroup",
      extends: BaseRadio,
      mixins: [decodeHtml]
    };
    const _hoisted_1$1i = {
      key: 0,
      class: "slds-form-element__legend slds-form-element__label"
    };
    const _hoisted_2$1g = ["title"];
    const _hoisted_3$10 = { class: "slds-form-element__control" };
    const _hoisted_4$U = {
      key: 0,
      class: "slds-radio_button-group"
    };
    const _hoisted_5$O = ["id", "name", "value", "disabled", "aria-describedby"];
    const _hoisted_6$G = ["for"];
    const _hoisted_7$A = { class: "slds-radio_faux" };
    const _hoisted_8$y = {
      key: 1,
      class: "readonly-radio-label"
    };
    const _hoisted_9$x = ["id"];
    function _sfc_render$1p(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Tooltip = resolveComponent("Tooltip");
      return openBlock(), createElementBlock("fieldset", {
        class: normalizeClass([{ "slds-has-error": _ctx.$props.invalid }, "slds-form-element"])
      }, [
        _ctx.computedLabels.name ? (openBlock(), createElementBlock("legend", _hoisted_1$1i, [
          _ctx.$props.required ? (openBlock(), createElementBlock("abbr", {
            key: 0,
            class: "slds-required",
            title: _ctx.computedLabels.required
          }, "*", 8, _hoisted_2$1g)) : createCommentVNode("", true),
          createTextVNode(" " + toDisplayString(_ctx.decodeHtml(_ctx.computedLabels.name)), 1)
        ])) : createCommentVNode("", true),
        _ctx.$props.helpText ? (openBlock(), createBlock(_component_Tooltip, {
          key: 1,
          alignment: "top right",
          class: "slds-form-element__icon",
          text: _ctx.$props.helpText
        }, null, 8, ["text"])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_3$10, [
          !_ctx.$props.readonly ? (openBlock(), createElementBlock("div", _hoisted_4$U, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, (option, index) => {
              return openBlock(), createElementBlock("span", {
                key: index,
                class: "slds-button slds-radio_button"
              }, [
                withDirectives(createBaseVNode("input", {
                  id: _ctx.guid + index,
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.input = $event),
                  class: normalizeClass({ "ma-is-selected": _ctx.input === option.value }),
                  name: _ctx.guid,
                  value: option.value,
                  disabled: _ctx.$props.disabled || option.disabled,
                  "aria-describedby": _ctx.$props.invalid ? `error-${_ctx.guid}` : null,
                  type: "radio"
                }, null, 10, _hoisted_5$O), [
                  [vModelRadio, _ctx.input]
                ]),
                createBaseVNode("label", {
                  class: "slds-radio_button__label",
                  for: _ctx.guid + index
                }, [
                  createBaseVNode("span", _hoisted_7$A, toDisplayString(_ctx.decodeHtml(option.label)), 1)
                ], 8, _hoisted_6$G)
              ]);
            }), 128))
          ])) : (openBlock(), createElementBlock("div", _hoisted_8$y, toDisplayString(_ctx.decodeHtml(_ctx.$props.modelValue) || " "), 1))
        ]),
        _ctx.$props.invalid ? (openBlock(), createElementBlock("div", {
          key: 2,
          id: `error-${_ctx.guid}`,
          class: "slds-form-element__help"
        }, [
          renderSlot(_ctx.$slots, "errors")
        ], 8, _hoisted_9$x)) : createCommentVNode("", true)
      ], 2);
    }
    const RadioButtonGroup = /* @__PURE__ */ _export_sfc(_sfc_main$1p, [["render", _sfc_render$1p]]);
    const _sfc_main$1o = {
      name: "RadioGroup",
      extends: BaseRadio,
      mixins: [decodeHtml]
    };
    const _hoisted_1$1h = {
      key: 0,
      class: "slds-form-element__label"
    };
    const _hoisted_2$1f = ["title"];
    const _hoisted_3$$ = {
      key: 2,
      class: "slds-form-element__control",
      style: { "position": "relative" }
    };
    const _hoisted_4$T = ["id", "name", "value", "disabled", "aria-describedby"];
    const _hoisted_5$N = ["for"];
    const _hoisted_6$F = /* @__PURE__ */ createBaseVNode("span", { class: "slds-radio_faux" }, null, -1);
    const _hoisted_7$z = { class: "slds-form-element__label" };
    const _hoisted_8$x = {
      key: 3,
      class: "slds-form-element__control readonly-radio-label"
    };
    const _hoisted_9$w = ["id"];
    function _sfc_render$1o(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Tooltip = resolveComponent("Tooltip");
      return openBlock(), createElementBlock("fieldset", {
        class: normalizeClass([{ "slds-has-error": _ctx.$props.invalid }, "slds-form-element"])
      }, [
        _ctx.computedLabels.name ? (openBlock(), createElementBlock("label", _hoisted_1$1h, [
          _ctx.$props.required ? (openBlock(), createElementBlock("abbr", {
            key: 0,
            class: "slds-required",
            title: _ctx.computedLabels.required
          }, "*", 8, _hoisted_2$1f)) : createCommentVNode("", true),
          createTextVNode(" " + toDisplayString(_ctx.decodeHtml(_ctx.computedLabels.name)), 1)
        ])) : createCommentVNode("", true),
        _ctx.$props.helpText ? (openBlock(), createBlock(_component_Tooltip, {
          key: 1,
          alignment: "top right",
          class: "slds-form-element__icon",
          text: _ctx.$props.helpText
        }, null, 8, ["text"])) : createCommentVNode("", true),
        !_ctx.$props.readonly ? (openBlock(), createElementBlock("div", _hoisted_3$$, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, (option, index) => {
            return openBlock(), createElementBlock("span", {
              key: index,
              class: "slds-radio"
            }, [
              withDirectives(createBaseVNode("input", {
                id: _ctx.guid + index,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.input = $event),
                name: _ctx.guid,
                value: option.value,
                disabled: _ctx.$props.disabled || option.disabled,
                "aria-describedby": _ctx.$props.invalid ? `error-${_ctx.guid}` : null,
                type: "radio"
              }, null, 8, _hoisted_4$T), [
                [vModelRadio, _ctx.input]
              ]),
              createBaseVNode("label", {
                for: _ctx.guid + index,
                class: "slds-radio__label"
              }, [
                _hoisted_6$F,
                createBaseVNode("span", _hoisted_7$z, toDisplayString(_ctx.decodeHtml(option.label)), 1)
              ], 8, _hoisted_5$N)
            ]);
          }), 128))
        ])) : (openBlock(), createElementBlock("div", _hoisted_8$x, toDisplayString(_ctx.decodeHtml(_ctx.$props.modelValue) || " "), 1)),
        _ctx.$props.invalid ? (openBlock(), createElementBlock("div", {
          key: 4,
          id: `error-${_ctx.guid}`,
          class: "slds-form-element__help"
        }, [
          renderSlot(_ctx.$slots, "errors")
        ], 8, _hoisted_9$w)) : createCommentVNode("", true)
      ], 2);
    }
    const RadioGroup = /* @__PURE__ */ _export_sfc(_sfc_main$1o, [["render", _sfc_render$1o]]);
    const _sfc_main$1n = {
      name: "ScopedNotification",
      components: { Icon },
      props: {
        /**
         * Theme for the scoped notification.
         */
        theme: {
          type: String,
          default: "base",
          validator: (value) => {
            const validThemes = [
              "base",
              "info",
              "success",
              "error",
              "warning"
            ];
            const isValid2 = !value || validThemes.includes(value);
            if (!isValid2)
              console.error(`Valid theme prop values are ${validThemes.join(", ")}`);
            return isValid2;
          }
        }
      },
      computed: {
        themeClass() {
          let themeClass;
          if (this.$props.theme === "" || this.$props.theme === "base") {
            themeClass = "slds-scoped-notification_light";
          } else {
            themeClass = `slds-theme_${this.$props.theme}`;
          }
          return themeClass;
        }
      }
    };
    const _hoisted_1$1g = { class: "slds-media__figure" };
    const _hoisted_2$1e = { class: "slds-media__body" };
    function _sfc_render$1n(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["slds-scoped-notification slds-media slds-media_center", $options.themeClass]),
        role: "status"
      }, [
        createBaseVNode("div", _hoisted_1$1g, [
          renderSlot(_ctx.$slots, "icon", {}, () => [
            createVNode(_component_Icon, {
              category: "utility",
              assistiveText: "info",
              size: "small",
              name: _ctx.$props.theme === "base" ? "info" : _ctx.$props.theme,
              variant: _ctx.$props.theme === "base" ? "default" : "inverse"
            }, null, 8, ["name", "variant"])
          ])
        ]),
        createBaseVNode("div", _hoisted_2$1e, [
          renderSlot(_ctx.$slots, "content")
        ])
      ], 2);
    }
    const ScopedNotification = /* @__PURE__ */ _export_sfc(_sfc_main$1n, [["render", _sfc_render$1n]]);
    const ToastContainer_vue_vue_type_style_index_0_scoped_f8233d6c_lang = "";
    const stateMap = /* @__PURE__ */ new Map();
    stateMap.set("info", {
      divClass: "slds-theme_info"
    });
    stateMap.set("success", {
      divClass: "slds-theme_success"
    });
    stateMap.set("warning", {
      divClass: "slds-theme_warning"
    });
    stateMap.set("error", {
      divClass: "slds-theme_error"
    });
    const _sfc_main$1m = {
      name: "ToastContainer",
      components: {
        ButtonIcon,
        Icon
      },
      mixins: [decodeHtml],
      props: {
        toasts: {
          type: Array,
          required: true
        }
      },
      data() {
        return {
          stateMap
        };
      }
    };
    const _hoisted_1$1f = { class: "slds-assistive-text" };
    const _hoisted_2$1d = { class: "slds-notify__content" };
    const _hoisted_3$_ = { class: "slds-text-heading_small" };
    const _hoisted_4$S = { key: 0 };
    function _sfc_render$1m(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      return openBlock(), createBlock(TransitionGroup, {
        name: "slide",
        tag: "div"
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.toasts, (toast) => {
            return openBlock(), createElementBlock("div", {
              key: toast.$__id,
              class: normalizeClass([$data.stateMap.get(toast.state).divClass, "slds-notify slds-notify_toast"]),
              role: "status"
            }, [
              createBaseVNode("span", _hoisted_1$1f, toDisplayString(toast.state), 1),
              createVNode(_component_Icon, {
                category: "utility",
                name: toast.state,
                size: "small",
                variant: "none",
                class: "slds-icon_container slds-m-right_small slds-no-flex slds-align-top"
              }, null, 8, ["name"]),
              createBaseVNode("div", _hoisted_2$1d, [
                renderSlot(_ctx.$slots, "default", {}, () => [
                  createBaseVNode("h2", _hoisted_3$_, toDisplayString(_ctx.decodeHtml(toast.message)), 1),
                  toast.subMessage ? (openBlock(), createElementBlock("p", _hoisted_4$S, toDisplayString(_ctx.decodeHtml(toast.subMessage)), 1)) : createCommentVNode("", true)
                ], true)
              ]),
              createVNode(_component_ButtonIcon, {
                title: toast.closeLabel,
                iconCategory: "utility",
                iconName: "close",
                iconSize: "large",
                variant: "inverse",
                class: "slds-notify__close",
                assistiveText: toast.closeLabel,
                onClick: ($event) => _ctx.$parent.close(toast.$__id)
              }, null, 8, ["title", "assistiveText", "onClick"])
            ], 2);
          }), 128))
        ]),
        _: 3
      });
    }
    const ToastContainer = /* @__PURE__ */ _export_sfc(_sfc_main$1m, [["render", _sfc_render$1m], ["__scopeId", "data-v-f8233d6c"]]);
    const Toasts_vue_vue_type_style_index_0_scoped_339e5872_lang = "";
    const _sfc_main$1l = {
      name: "Toast",
      components: { ToastContainer },
      props: {
        /**
         * Array of toasts. Each toast object should have `position`, `state`, `message` and optionally `submessage` properties.
         */
        toasts: {
          type: Array,
          required: true
        }
      },
      data() {
        return {
          timeoutMap: /* @__PURE__ */ new Map(),
          callbackMap: /* @__PURE__ */ new Map()
        };
      },
      computed: {
        topCenterToasts() {
          return this.toasts.filter((toast) => toast.position === "top-center");
        },
        topRightToasts() {
          return this.toasts.filter((toast) => toast.position === "top-right");
        },
        bottomRightToasts() {
          return this.toasts.filter((toast) => toast.position === "bottom-right");
        }
      },
      watch: {
        toasts: {
          handler(value) {
            value.forEach((toast) => {
              if (!Object.prototype.hasOwnProperty.call(toast, "$__id")) {
                if (!toast.state) {
                  toast.state = "info";
                }
                if (!toast.closeLabel) {
                  toast.closeLabel = "Close";
                }
                if (!toast.position) {
                  toast.position = "top-center";
                }
                const guid = getGUID();
                toast.$__id = guid;
                if (typeof toast.onClose === "function") {
                  this.callbackMap.set(guid, toast.onClose);
                }
                if (toast.duration > 0) {
                  this.timeoutMap.set(guid, setTimeout(this.close.bind(this, guid), toast.duration));
                }
              }
            });
          },
          immediate: true,
          deep: true
        }
      },
      beforeUnmount() {
        this.timeoutMap.forEach((timeoutId) => clearTimeout(timeoutId));
      },
      methods: {
        close(id) {
          this.$emit("close", id);
          const indexToRemove = this.toasts.findIndex((toast) => toast.$__id === id);
          const newToasts = this.toasts.splice(indexToRemove, 1);
          this.$emit("input", newToasts);
          this.$emit("update:toasts", newToasts);
          if (this.timeoutMap.has(id)) {
            clearTimeout(this.timeoutMap.get(id));
            this.timeoutMap.delete(id);
          }
          if (this.callbackMap.has(id)) {
            this.callbackMap.get(id)();
          }
        }
      }
    };
    function _sfc_render$1l(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ToastContainer = resolveComponent("ToastContainer");
      return openBlock(), createElementBlock("div", null, [
        createVNode(_component_ToastContainer, {
          toasts: $options.topCenterToasts,
          class: "slds-notify_container slds-is-fixed slds-grid slds-grid_vertical slds-grid_vertical-align-center slds-grid_vertical-reverse"
        }, null, 8, ["toasts"]),
        createVNode(_component_ToastContainer, {
          toasts: $options.bottomRightToasts,
          class: "slds-notify_container slds-is-fixed slds-grid slds-grid_vertical slds-grid_vertical-align-center notify_bottom-right slds-grid_vertical-align-end"
        }, null, 8, ["toasts"]),
        createVNode(_component_ToastContainer, {
          toasts: $options.topRightToasts,
          class: "slds-notify_container slds-is-fixed slds-grid slds-grid_vertical slds-grid_vertical-align-center notify_top-right slds-grid_vertical-reversee"
        }, null, 8, ["toasts"])
      ]);
    }
    const Toasts = /* @__PURE__ */ _export_sfc(_sfc_main$1l, [["render", _sfc_render$1l], ["__scopeId", "data-v-339e5872"]]);
    const AddTeamMember_vue_vue_type_style_index_0_scoped_15d7d0ce_lang = "";
    const _sfc_main$1k = {
      name: "AddTeamMember",
      components: {
        Spinner,
        Picklist,
        Card,
        ButtonIcon,
        Checkbox
      },
      props: ["addedUsers"],
      emits: ["add-user", "remove-user"],
      data() {
        return {
          loading: true,
          selectedUser: null,
          availableUserIds: /* @__PURE__ */ new Set(),
          userOptions: [{
            options: async (term) => {
              term = term.replace(/'/g, "\\'");
              const matchingUsers = await SPM.Utils.Rest.invoke("Query", {
                query: `
                            SELECT Id, Name, FirstName, LastName, UserRole.Name
                            FROM User
                            WHERE Name LIKE '%${term}%'
                            AND Id IN ('${[...this.availableUserIds].join("','")}')
                            LIMIT 10
                        `
              });
              return matchingUsers.filter((user) => {
                var _a2;
                return !this.$store.userAccessRecords.find((u) => u.sfsp__User__c === user.Id) && !this.addedUsers.find((u) => u.id === user.Id) && !((_a2 = SPM.Components.UsersList) == null ? void 0 : _a2.planUsers.find((u) => u.sfsp__User__c === user.Id));
              });
            }
          }]
        };
      },
      watch: {
        selectedUser: {
          handler() {
            if (this.selectedUser) {
              this.$emit("add-user", this.selectedUser);
              this.selectedUser = null;
            }
          }
        }
      },
      async mounted() {
        await this.init();
        this.loading = false;
      },
      methods: {
        async init() {
          const availableUserIds = /* @__PURE__ */ new Set();
          await Promise.allSettled([
            availableUserIds.add(...(await SPM.Utils.Apex.invoke("GetUsersWithPermissionSet", ["SalesPlanning"]) || []).map((u) => u.Id)),
            availableUserIds.add(...(await SPM.Utils.Apex.invoke("GetUsersWithPermissionSet", ["SalesPlanningOpsManager"]) || []).map((u) => u.Id)),
            availableUserIds.add(...(await SPM.Utils.Apex.invoke("GetUsersWithPermissionSet", ["SalesPlanningAdmin"]) || []).map((u) => u.Id))
          ]);
          this.availableUserIds = availableUserIds;
        }
      }
    };
    const _withScopeId$q = (n) => (pushScopeId("data-v-15d7d0ce"), n = n(), popScopeId(), n);
    const _hoisted_1$1e = { class: "slds-col slds-size_6-of-12 slds-p-right_small" };
    const _hoisted_2$1c = {
      class: "slds-media slds-listbox__option slds-listbox__option_plain",
      role: "option"
    };
    const _hoisted_3$Z = { class: "slds-media__body" };
    const _hoisted_4$R = ["title"];
    const _hoisted_5$M = {
      id: "added-users",
      class: "slds-table slds-table_bordered slds-no-row-hover slds-table_col-bordered"
    };
    const _hoisted_6$E = { class: "slds-line-height_reset" };
    const _hoisted_7$y = /* @__PURE__ */ _withScopeId$q(() => /* @__PURE__ */ createBaseVNode("div", {
      class: "slds-truncate",
      title: "User"
    }, "User", -1));
    const _hoisted_8$w = [
      _hoisted_7$y
    ];
    const _hoisted_9$v = ["title"];
    const _hoisted_10$p = /* @__PURE__ */ _withScopeId$q(() => /* @__PURE__ */ createBaseVNode("th", {
      class: "slds-col slds-size_1-of-12",
      scope: "col"
    }, null, -1));
    const _hoisted_11$m = ["id"];
    const _hoisted_12$i = { class: "slds-col slds-grid slds-grid_vertical-align-center slds-p-right_small" };
    const _hoisted_13$i = { class: "slds-grid slds-grid_vertical" };
    const _hoisted_14$g = {
      "data-label": "Remove",
      class: "slds-col slds-size_1-of-12"
    };
    function _sfc_render$1k(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_Picklist = resolveComponent("Picklist");
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Card = resolveComponent("Card");
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("div", _hoisted_1$1e, [
          createVNode(_component_Picklist, {
            modelValue: (_a2 = $data.selectedUser) == null ? void 0 : _a2.Name,
            id: "userLookup",
            ref: "userLookup",
            options: $data.userOptions,
            labelForId: "userLookup",
            labels: { name: "Users", search: "Add user..." },
            titleKey: "Name",
            idKey: "Id",
            filterable: "",
            onSelectedOption: _cache[0] || (_cache[0] = (user) => $data.selectedUser = user),
            onClear: _cache[1] || (_cache[1] = () => $data.selectedUser = null)
          }, {
            option: withCtx((item) => [
              createBaseVNode("div", _hoisted_2$1c, [
                createBaseVNode("span", _hoisted_3$Z, [
                  createBaseVNode("span", {
                    class: "slds-truncate",
                    title: item.option.Name
                  }, toDisplayString(item.option.Name), 9, _hoisted_4$R)
                ])
              ])
            ]),
            _: 1
          }, 8, ["modelValue", "options", "labels"])
        ]),
        createVNode(_component_Card, { class: "slds-m-top_medium" }, {
          body: withCtx(() => [
            createBaseVNode("table", _hoisted_5$M, [
              createBaseVNode("thead", null, [
                createBaseVNode("tr", _hoisted_6$E, [
                  createBaseVNode("th", {
                    class: normalizeClass(["slds-col slds-p-right_small", { "slds-size_11-of-12": !_ctx.$store.applicationNames, "slds-size_5-of-12": _ctx.$store.applicationNames }]),
                    scope: "col"
                  }, _hoisted_8$w, 2),
                  (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$store.applicationNames, (name) => {
                    return openBlock(), createElementBlock("th", {
                      key: name,
                      class: "slds-col slds-size_3-of-12 slds-p-right_small",
                      scope: "col"
                    }, [
                      createBaseVNode("div", {
                        class: "slds-truncate",
                        title: name
                      }, toDisplayString(name), 9, _hoisted_9$v)
                    ]);
                  }), 128)),
                  _hoisted_10$p
                ])
              ]),
              createBaseVNode("tbody", null, [
                (openBlock(true), createElementBlock(Fragment, null, renderList($props.addedUsers, (user) => {
                  return openBlock(), createElementBlock("tr", {
                    id: `addMember-${user.name}`,
                    key: `addMember-${user.name}`
                  }, [
                    createBaseVNode("th", {
                      "data-label": "User",
                      scope: "row",
                      class: normalizeClass(["slds-col slds-size_5-of-12", { "slds-size_11-of-12": !_ctx.$store.applicationNames, "slds-size_5-of-12": _ctx.$store.applicationNames }])
                    }, [
                      createBaseVNode("div", _hoisted_12$i, [
                        createBaseVNode("div", _hoisted_13$i, [
                          createBaseVNode("span", null, toDisplayString(user.name), 1)
                        ])
                      ])
                    ], 2),
                    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$store.applicationNames, (name) => {
                      return openBlock(), createElementBlock("td", {
                        key: name,
                        class: "slds-col slds-size_3-of-12"
                      }, [
                        createVNode(_component_Checkbox, {
                          modelValue: user.applicationAccess[name],
                          "onUpdate:modelValue": ($event) => user.applicationAccess[name] = $event,
                          hideLabel: ""
                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                      ]);
                    }), 128)),
                    createBaseVNode("td", _hoisted_14$g, [
                      createVNode(_component_ButtonIcon, {
                        id: `addMember-${user.name}-remove`,
                        class: "slds-button_icon-container",
                        assistiveText: "Remove",
                        iconCategory: "utility",
                        iconName: "delete",
                        variant: "border",
                        title: "Remove",
                        disabled: !$props.addedUsers.length,
                        onClick: ($event) => _ctx.$emit("remove-user", user.id)
                      }, null, 8, ["id", "disabled", "onClick"])
                    ])
                  ], 8, _hoisted_11$m);
                }), 128))
              ])
            ])
          ]),
          _: 1
        })
      ]);
    }
    const AddTeamMember = /* @__PURE__ */ _export_sfc(_sfc_main$1k, [["render", _sfc_render$1k], ["__scopeId", "data-v-15d7d0ce"]]);
    const ConditionalWrapper = {
      name: "ConditionalWrapper",
      functional: true,
      inheritAttrs: false,
      props: {
        element: {
          type: String,
          required: true
        },
        active: Boolean
      },
      render() {
        const _default = this.$slots.default ? this.$slots.default() : null;
        if (this.$props.active) {
          return h(
            this.$props.element,
            {
              ...this.$attrs
            },
            _default
          );
        }
        return _default;
      }
    };
    const ActivityTypes = Object.freeze({
      MANAGEMENT: "Management",
      APPROVAL_PROCESS: "ApprovalProcess",
      STATUS: "Status",
      ALLOCATION: "Allocation",
      ASSIGNMENT: "Assignment",
      HIERARCHY: "Hierarchy",
      SHARING: "Sharing",
      CUSTOM: "Custom"
    });
    const ActivitySubtypes = Object.freeze({
      CREATE: "Created",
      UPDATE: "Updated",
      DELETE: "Deleted",
      REFRESH: "Refreshed",
      ADD: "Added",
      REMOVE: "Removed",
      CUSTOM: "Custom"
    });
    const DefaultActivityName = {
      ActivityNameVNode: (activity) => createVNode(Fragment, null, [createVNode("span", null, [activity.Name])])
    };
    const ActivityNameMatrix = {
      [ActivityTypes.MANAGEMENT]: {
        [ActivitySubtypes.CREATE]: {
          ActivityNameVNode: (activity, link2) => createVNode(Fragment, null, [createVNode("span", null, [createTextVNode("Created "), activity.sfsp__RecordType__c, createTextVNode(": ")]), createVNode(ConditionalWrapper, {
            "element": "a",
            "active": link2,
            "onClick": () => SPM.Components.Root.loadPlan(activity.sfsp__SalesPlan__c)
          }, {
            default: () => [activity.Name]
          })])
        },
        [ActivitySubtypes.UPDATE]: {
          ActivityNameVNode: (activity, link2) => createVNode(Fragment, null, [createVNode("span", null, [createTextVNode("Updated "), activity.sfsp__RecordType__c, createTextVNode(": ")]), createVNode(ConditionalWrapper, {
            "element": "a",
            "active": link2,
            "onClick": () => SPM.Components.Root.loadPlan(activity.sfsp__SalesPlan__c)
          }, {
            default: () => [activity.Name]
          })])
        },
        [ActivitySubtypes.DELETE]: {
          ActivityNameVNode: (activity) => createVNode(Fragment, null, [createTextVNode("Deleted "), activity.sfsp__RecordType__c, createTextVNode(": "), activity.Name])
        },
        [ActivitySubtypes.REFRESH]: {
          ActivityNameVNode: (activity, link2) => createVNode(Fragment, null, [createVNode("span", null, [createTextVNode("Updated Assignment Objects")])])
        }
      },
      [ActivityTypes.SHARING]: {
        [ActivitySubtypes.CREATE]: {
          ActivityNameVNode: (activity, link2) => createVNode(Fragment, null, [createVNode("span", null, [createTextVNode("Granted user access to ")]), createVNode(ConditionalWrapper, {
            "element": "a",
            "active": link2,
            "onClick": () => SPM.Components.Root.loadPlan(activity.sfsp__SalesPlan__c)
          }, {
            default: () => [activity.Name]
          })])
        },
        [ActivitySubtypes.UPDATE]: {
          ActivityNameVNode: (activity, link2) => createVNode(Fragment, null, [createVNode("span", null, [createTextVNode("Edited user access for ")]), createVNode(ConditionalWrapper, {
            "element": "a",
            "active": link2,
            "onClick": () => SPM.Components.Root.loadPlan(activity.sfsp__SalesPlan__c)
          }, {
            default: () => [activity.Name]
          })])
        },
        [ActivitySubtypes.DELETE]: {
          ActivityNameVNode: (activity, link2) => createVNode(Fragment, null, [createVNode("span", null, [createTextVNode("Removed user access from ")]), createVNode(ConditionalWrapper, {
            "element": "a",
            "active": link2,
            "onClick": () => SPM.Components.Root.loadPlan(activity.sfsp__SalesPlan__c)
          }, {
            default: () => [activity.Name]
          })])
        },
        [ActivitySubtypes.ADD]: {
          ActivityNameVNode: (activity, link2) => createVNode(Fragment, null, [createVNode("span", null, [createTextVNode("Added "), activity.Name, createTextVNode(" to ")]), createVNode(ConditionalWrapper, {
            "element": "a",
            "active": link2,
            "onClick": () => SPM.Components.Root.openSegment(activity.sfsp__SalesNode__c)
          }, {
            default: () => [activity.sfsp__SalesNode__r.Name]
          })])
        },
        [ActivitySubtypes.REMOVE]: {
          ActivityNameVNode: (activity, link2) => createVNode(Fragment, null, [createVNode("span", null, [createTextVNode("Removed "), activity.Name, createTextVNode(" from ")]), createVNode(ConditionalWrapper, {
            "element": "a",
            "active": link2,
            "onClick": () => SPM.Components.Root.openSegment(activity.sfsp__SalesNode__c)
          }, {
            default: () => [activity.sfsp__SalesNode__r.Name]
          })])
        }
      },
      [ActivityTypes.CUSTOM]: {
        [ActivitySubtypes.CUSTOM]: {
          ActivityNameVNode: (activity, link2) => createVNode(Fragment, null, [createVNode("span", null, [activity.Name])])
        }
      }
    };
    const ActivityRecordTypes = Object.freeze({
      ASSIGNMENT: "Assignment",
      METRIC: "Metric",
      PLAN: "Plan",
      SCENARIO: "Scenario",
      CUSTOM: "Custom"
    });
    const HistoryTypes = Object.freeze({
      ALL: "all",
      OWN: "own"
    });
    const SortTypes = Object.freeze({
      OLDEST: "ASC",
      NEWEST: "DESC"
    });
    const Utils = UtilsClient({});
    const buildActivityNameVNode = (activity, link2) => {
      var _a2, _b;
      if (activity.sfsp__RecordType__c) {
        const allowableRecordTypeForLink = [ActivityRecordTypes.PLAN, ActivityRecordTypes.SCENARIO].includes(activity.sfsp__RecordType__c);
        const parentIsActive = ((_a2 = activity.sfsp__SalesPlan__r) == null ? void 0 : _a2.sfsp__Status__c) === "Active";
        const doLink = link2 && allowableRecordTypeForLink && parentIsActive;
        return (_b = ActivityNameMatrix[activity.sfsp__Type__c][activity.sfsp__Subtype__c]) == null ? void 0 : _b.ActivityNameVNode(activity, doLink);
      } else {
        return DefaultActivityName.ActivityNameVNode(activity);
      }
    };
    const getActivities = async (options = {}) => {
      const {
        batchSize = 10,
        embedLinks = false,
        history,
        maxRecords = 500,
        offset: offset2 = 0,
        // internal use only
        parentId,
        nodeId: nodeId2,
        segments,
        segmentsOnly,
        sort,
        userId
      } = options;
      let query = `
        SELECT
            CreatedDate,
            CreatedById,
            CreatedBy.Name,
            CreatedBy.SmallPhotoUrl,
            Name,
            sfsp__Description__c,
            sfsp__RecordType__c,
            sfsp__SalesPlan__c,
            sfsp__SalesPlan__r.Name,
            sfsp__SalesPlan__r.sfsp__Parent__c,
            sfsp__SalesPlan__r.sfsp__Status__c,
            sfsp__SalesNode__r.Name,
            sfsp__SalesNode__c,
            sfsp__Subtype__c,
            sfsp__Type__c
        FROM sfsp__SalesActivity__c
    `;
      const filters = [];
      if (!SPM.isAdmin && !segmentsOnly) {
        const userAccessRecords = await SPM.Utils.Apex.invoke("Query", [`SELECT Id, sfsp__SalesPlan__c, sfsp__AccessLevel__c FROM sfsp__SalesUserAccess__c WHERE sfsp__User__c = '${SPM.currentUser.Id}' AND sfsp__SalesPlan__c != NULL`]) || [];
        const availablePlanIds = userAccessRecords.map((ar) => `'${ar.sfsp__SalesPlan__c}'`);
        filters.push(`sfsp__SalesPlan__c IN (${availablePlanIds.length > 0 ? availablePlanIds.join(",") : null})`);
      }
      if (parentId) {
        filters.push(`sfsp__SalesPlan__c = '${parentId}'`);
      }
      if (nodeId2) {
        filters.push(`sfsp__SalesNode__c = '${nodeId2}'`);
      }
      if (segmentsOnly && segments.length > 0) {
        const segmentIds = segments.map((item) => item.Id);
        const segmentsToSearch = segmentIds.map((segmentIds2) => `'${segmentIds2}'`);
        filters.push(`sfsp__SalesNode__c IN (${segmentsToSearch.join(",")})`);
      }
      if (history === HistoryTypes.OWN && userId) {
        filters.push(`CreatedById = '${userId}'`);
      }
      if (filters.length) {
        query += "WHERE ";
        query += filters.join(" AND ");
      }
      query += `
ORDER BY CreatedDate ${sort}`;
      query += `
LIMIT ${Math.min(batchSize, maxRecords - offset2)}`;
      if (offset2) {
        query += `
OFFSET ${offset2}`;
      }
      const result = {
        activities: segmentsOnly && segments.length < 1 ? [] : await Utils.Apex.invoke("Query", [query]) || []
      };
      result.activities.forEach((activity) => {
        activity.nameVNode = buildActivityNameVNode(activity, embedLinks);
      });
      if (offset2 + batchSize < maxRecords && result.activities.length === batchSize) {
        result.queryMore = getActivities.bind(
          globalThis,
          {
            ...options,
            offset: Math.min(maxRecords, offset2 + batchSize)
          }
        );
      }
      return result;
    };
    const insertActivities = async (activities = []) => {
      return await Utils.CRM.upsert({
        records: activities.map(({ description, name, parentId, nodeId: nodeId2, recordType, subtype, type }) => ({
          sobjectType: "sfsp__SalesActivity__c",
          Name: name,
          sfsp__Description__c: description,
          sfsp__RecordType__c: recordType,
          sfsp__SalesPlan__c: parentId,
          sfsp__SalesNode__c: nodeId2,
          sfsp__Subtype__c: subtype,
          sfsp__Type__c: type
        }))
      });
    };
    const _sfc_main$1j = {
      name: "AddTeamMembersModal",
      components: {
        Spinner,
        Button: SLDSButton,
        Modal,
        ScopedNotification,
        AddTeamMember
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          loading: false,
          addedUsers: []
        };
      },
      methods: {
        addUser(user) {
          if (!user.Id)
            return;
          const newUser = {
            id: user.Id,
            name: user.Name
          };
          this.addedUsers.unshift(newUser);
        },
        removeUser(userId) {
          this.addedUsers.splice(this.addedUsers.findIndex((user) => user.id === userId), 1);
        },
        async saveUsers() {
          this.loading = true;
          const accessRecordsToInsert = /* @__PURE__ */ new Set();
          this.addedUsers.forEach((user) => {
            accessRecordsToInsert.add({
              sobjectType: "sfsp__SalesUserAccess__c",
              sfsp__SalesPlan__c: this.$store.plan.Id,
              sfsp__User__c: user.id
            });
          });
          await SPM.Utils.CRM.upsert({ records: accessRecordsToInsert });
          await SPM.Utils.Async.forEachParallel(Array.from(accessRecordsToInsert), async (r) => {
            if (!SPM.chatterEnabled)
              return;
            const comment = `{${r.sfsp__User__c}} ${SPM.currentUser.Name} added you to <a href="${SPM.orgDomainUrl}/one/one.app#/alohaRedirect/apex/sfsp__SalesPlanningHome?planId=${r.sfsp__SalesPlan__c}">${this.$store.plan.Name}</a>.`;
            await SPM.Utils.Apex.invoke("PostFeedItem", [SPM.currentUser.Id, comment]);
          }, 5);
          const activityRecords = [];
          for (const user of this.addedUsers) {
            activityRecords.push({
              name: this.$store.plan.Name,
              parentId: this.$store.plan.Id,
              recordType: ActivityRecordTypes.PLAN,
              subtype: ActivitySubtypes.CREATE,
              type: ActivityTypes.SHARING
            });
            const pendoPayload = {
              planId: this.$store.plan.Id
            };
            SPM.$store.trackPendoEvent({ actionType: "SP | Segmentation Plan - Add team member", pendoPayload });
          }
          await insertActivities(activityRecords);
          this.loading = true;
          const toastMsg = this.addedUsers.length === 1 ? `${this.addedUsers[0].name} was added to the plan.` : `${this.addedUsers.length} users were added to the plan.`;
          this.config.callback(toastMsg);
          this.$emit("close");
          await SPM.Components.UsersList.getPlanUsers();
          this.loading = false;
        }
      }
    };
    const _hoisted_1$1d = /* @__PURE__ */ createBaseVNode("p", null, "Encourage others to participate in the planning process.", -1);
    const _hoisted_2$1b = { class: "slds-grid" };
    const _hoisted_3$Y = { class: "slds-col_bump-left" };
    function _sfc_render$1j(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_AddTeamMember = resolveComponent("AddTeamMember");
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Button = resolveComponent("Button");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "add-team-members-modal",
        ref: "modal",
        size: "base",
        title: "Add team members",
        onClose: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          _hoisted_1$1d,
          createVNode(_component_AddTeamMember, {
            addedUsers: $data.addedUsers,
            onAddUser: $options.addUser,
            onRemoveUser: $options.removeUser
          }, null, 8, ["addedUsers", "onAddUser", "onRemoveUser"]),
          $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true)
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_2$1b, [
            createBaseVNode("div", _hoisted_3$Y, [
              createVNode(_component_Button, {
                class: "slds-button",
                disabled: $data.loading,
                onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
              }, {
                default: withCtx(() => [
                  createTextVNode(" Cancel ")
                ]),
                _: 1
              }, 8, ["disabled"]),
              createVNode(_component_Button, {
                class: "slds-button",
                disabled: $data.loading || !$data.addedUsers.length,
                variant: "brand",
                onClick: $options.saveUsers
              }, {
                default: withCtx(() => [
                  createTextVNode(" Add ")
                ]),
                _: 1
              }, 8, ["disabled", "onClick"])
            ])
          ])
        ]),
        _: 1
      }, 512);
    }
    const AddTeamMembersModal = /* @__PURE__ */ _export_sfc(_sfc_main$1j, [["render", _sfc_render$1j]]);
    const _sfc_main$1i = {
      name: "ActivityHistoryOptionsPopover",
      components: {
        Popover,
        RadioGroup,
        SLDSButton
      },
      emits: ["apply", "close"],
      props: {
        history: Object,
        sort: String,
        kondo: Boolean
      },
      data() {
        return {
          filters: {
            history: {
              binding: this.$props.history || HistoryTypes.ALL,
              options: [
                {
                  label: "All events",
                  value: HistoryTypes.ALL
                },
                {
                  label: "Events I initiated",
                  value: HistoryTypes.OWN
                }
              ]
            },
            sort: {
              binding: this.$props.sort || SortTypes.OLDEST,
              options: [
                {
                  label: "Newest first",
                  value: SortTypes.NEWEST
                },
                {
                  label: "Oldest first",
                  value: SortTypes.OLDEST
                }
              ]
            }
          }
        };
      },
      methods: {
        applyFilters() {
          this.$emit(
            "apply",
            {
              history: this.filters.history.binding,
              sort: this.filters.sort.binding
            }
          );
        }
      }
    };
    function _sfc_render$1i(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_RadioGroup = resolveComponent("RadioGroup");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Popover = resolveComponent("Popover");
      return openBlock(), createBlock(Teleport, { to: "body" }, [
        createVNode(_component_Popover, {
          class: normalizeClass({ "spm-kondo": $props.kondo }),
          onClose: _cache[3] || (_cache[3] = ($event) => _ctx.$emit("close")),
          closeOnClickOutside: ""
        }, {
          content: withCtx(() => [
            createVNode(_component_RadioGroup, {
              modelValue: $data.filters.history.binding,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.filters.history.binding = $event),
              class: "slds-m-bottom_medium",
              labels: { name: "History events to show" },
              options: $data.filters.history.options
            }, null, 8, ["modelValue", "options"]),
            createVNode(_component_RadioGroup, {
              modelValue: $data.filters.sort.binding,
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.filters.sort.binding = $event),
              labels: { name: "Sort by Created Date" },
              options: $data.filters.sort.options
            }, null, 8, ["modelValue", "options"])
          ]),
          footer: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(["slds-grid slds-grid_vertical-align-center", { "slds-grid_align-end": !$props.kondo }])
            }, [
              $props.kondo ? (openBlock(), createBlock(_component_SLDSButton, {
                key: 0,
                label: "Cancel",
                onClick: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("close"))
              })) : createCommentVNode("", true),
              createVNode(_component_SLDSButton, {
                label: "Apply",
                variant: "brand",
                onClick: $options.applyFilters
              }, null, 8, ["onClick"])
            ], 2)
          ]),
          _: 1
        }, 8, ["class"])
      ]);
    }
    const ActivityHistoryOptionsPopover = /* @__PURE__ */ _export_sfc(_sfc_main$1i, [["render", _sfc_render$1i]]);
    function requiredArgs(required2, args) {
      if (args.length < required2) {
        throw new TypeError(required2 + " argument" + (required2 > 1 ? "s" : "") + " required, but only " + args.length + " present");
      }
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function toDate(argument) {
      requiredArgs(1, arguments);
      var argStr = Object.prototype.toString.call(argument);
      if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
        return new Date(argument.getTime());
      } else if (typeof argument === "number" || argStr === "[object Number]") {
        return new Date(argument);
      } else {
        if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
          console.warn(new Error().stack);
        }
        return /* @__PURE__ */ new Date(NaN);
      }
    }
    var millisecondsInMinute = 6e4;
    var millisecondsInHour = 36e5;
    function differenceInMilliseconds(dateLeft, dateRight) {
      requiredArgs(2, arguments);
      return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
    }
    var roundingMap = {
      ceil: Math.ceil,
      round: Math.round,
      floor: Math.floor,
      trunc: function trunc(value) {
        return value < 0 ? Math.ceil(value) : Math.floor(value);
      }
      // Math.trunc is not supported by IE
    };
    var defaultRoundingMethod = "trunc";
    function getRoundingMethod(method) {
      return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
    }
    function differenceInHours(dateLeft, dateRight, options) {
      requiredArgs(2, arguments);
      var diff2 = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;
      return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff2);
    }
    function differenceInMinutes(dateLeft, dateRight, options) {
      requiredArgs(2, arguments);
      var diff2 = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;
      return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff2);
    }
    const EmptyStateSVG = "/resource/1730930651668/sfsp__SalesPlanningHome/dist/empty-state-events.svg";
    const ActivityHistory_vue_vue_type_style_index_0_scoped_c8156a5b_lang = "";
    const _sfc_main$1h = {
      name: "ActivityHistory",
      components: {
        ButtonIcon,
        Icon,
        Layout,
        LayoutItem,
        Spinner,
        Tooltip
      },
      props: {
        embedLinks: Boolean,
        history: String,
        parentId: String,
        nodeId: String,
        segments: {
          type: Array,
          default: () => []
        },
        segmentsOnly: Boolean,
        sort: String,
        userId: String
      },
      data() {
        return {
          activities: [],
          initialized: false,
          loading: false,
          queryMore: null,
          tooltipSource: null,
          tooltipText: "",
          EmptyStateSVG
        };
      },
      watch: {
        $props: {
          async handler() {
            this.init();
          },
          deep: true,
          immediate: true
        }
      },
      created() {
        this.$mitt.on("refresh-activity-history", this.init);
      },
      mounted() {
        SPM.Components.ActivityHistory = this;
        window.addEventListener("resize", this.onScroll);
      },
      computed: {
        empty() {
          return this.activities.length === 0;
        }
      },
      unmounted() {
        window.removeEventListener("resize", this.onScroll);
        this.$mitt.off("refresh-activity-history", this.init);
      },
      methods: {
        async init() {
          this.activities = [];
          this.queryMore = getActivities.bind(null, this.$props);
          await this.loadActivities();
          if (!this.initialized) {
            this.initialized = true;
            this.$emit("initialized");
          }
        },
        async loadActivities() {
          this.loading = true;
          const { activities, queryMore } = await this.queryMore();
          this.activities.push(
            ...activities.map((activity) => ({
              ...activity,
              ...{
                date: {
                  sinceActivityString: this.transformDate(activity.CreatedDate),
                  // e.g.  March 1, 2023 at 11:40 AM
                  localeString: this.$F("DateTime", new Date(activity.CreatedDate), {
                    month: "long",
                    day: "numeric",
                    year: "numeric",
                    hour: "numeric",
                    minute: "numeric"
                  })
                },
                showDescription: false
              }
            }))
          );
          this.queryMore = queryMore;
          this.loading = false;
          await this.$nextTick(this.onScroll);
        },
        onMouseOverTooltip(text, e) {
          this.tooltipText = text;
          this.tooltipSource = e.target;
        },
        transformDate(epoch) {
          const today = /* @__PURE__ */ new Date();
          const activity = new Date(epoch);
          const minuteDiff = differenceInMinutes(today, activity);
          if (minuteDiff === 0) {
            return "Just Now";
          }
          if (minuteDiff < 60) {
            return `${minuteDiff}m ago`;
          }
          const hourDiff = differenceInHours(today, activity);
          if (hourDiff >= 24) {
            return this.$F("DateTime", activity, { month: "long", day: "numeric", year: "numeric" });
          }
          return `${hourDiff}h ago`;
        },
        async onScroll() {
          if (this.loading || !this.queryMore)
            return;
          const { scrollTop, scrollHeight, clientHeight } = this.$refs.activityHistory ?? {};
          if (scrollTop + clientHeight >= scrollHeight - 5) {
            await this.loadActivities();
            this.$refs.activityHistory.scrollTop = scrollTop;
          }
        },
        async toggleDescription(activity) {
          activity.showDescription = !activity.showDescription;
          await this.$nextTick(this.onScroll);
        },
        getSanitizedDescription(activity) {
          return SPM.Utils.Str.sanitizeHTML(activity.sfsp__Description__c);
        }
      }
    };
    const _withScopeId$p = (n) => (pushScopeId("data-v-c8156a5b"), n = n(), popScopeId(), n);
    const _hoisted_1$1c = ["src"];
    const _hoisted_2$1a = /* @__PURE__ */ _withScopeId$p(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-heading_medium" }, "No Past History", -1));
    const _hoisted_3$X = /* @__PURE__ */ _withScopeId$p(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-title" }, "Sales Planning events will show up here.", -1));
    const _hoisted_4$Q = {
      key: 2,
      class: "spm-timeline"
    };
    const _hoisted_5$L = { class: "spm-timeline__item slds-m-bottom_x-small" };
    const _hoisted_6$D = { class: "slds-assistive-text" };
    const _hoisted_7$x = { class: "slds-media" };
    const _hoisted_8$v = { class: "slds-media__figure" };
    const _hoisted_9$u = ["src"];
    const _hoisted_10$o = { class: "slds-media__body" };
    const _hoisted_11$l = { class: "slds-grid slds-grid_align-spread" };
    const _hoisted_12$h = {
      class: "slds-col",
      style: { "max-width": "70%" }
    };
    const _hoisted_13$h = ["title"];
    const _hoisted_14$f = { class: "slds-text-align_right" };
    const _hoisted_15$e = ["onMouseover"];
    const _hoisted_16$c = {
      class: "spm-timeline__data",
      style: { "line-height": "1.5rem" }
    };
    const _hoisted_17$b = ["href"];
    const _hoisted_18$b = { key: 0 };
    const _hoisted_19$b = ["onClick"];
    const _hoisted_20$b = ["innerHTML"];
    function _sfc_render$1h(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Layout = resolveComponent("Layout");
      const _component_Tooltip = resolveComponent("Tooltip");
      return openBlock(), createElementBlock("div", {
        class: "activity-history-root",
        id: "activityHistory",
        ref: "activityHistory",
        onScroll: _cache[0] || (_cache[0] = (...args) => $options.onScroll && $options.onScroll(...args))
      }, [
        $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
        $options.empty ? (openBlock(), createBlock(_component_Layout, {
          key: 1,
          class: "slds-m-vertical_large",
          horizontalAlign: "center",
          verticalAlign: "center",
          vertical: "",
          style: { "min-height": "400px" }
        }, {
          default: withCtx(() => [
            createBaseVNode("img", {
              class: "slds-m-bottom_xx-large",
              src: $data.EmptyStateSVG
            }, null, 8, _hoisted_1$1c),
            _hoisted_2$1a,
            _hoisted_3$X
          ]),
          _: 1
        })) : (openBlock(), createElementBlock("ul", _hoisted_4$Q, [
          (openBlock(true), createElementBlock(Fragment, null, renderList($data.activities, (activity) => {
            return openBlock(), createElementBlock("li", {
              key: activity.Id
            }, [
              createBaseVNode("div", _hoisted_5$L, [
                createBaseVNode("span", _hoisted_6$D, toDisplayString(activity.Name), 1),
                createBaseVNode("div", _hoisted_7$x, [
                  createBaseVNode("div", _hoisted_8$v, [
                    createBaseVNode("img", {
                      class: "spm-timeline__img",
                      src: activity.CreatedBy.SmallPhotoUrl
                    }, null, 8, _hoisted_9$u)
                  ]),
                  createBaseVNode("div", _hoisted_10$o, [
                    createBaseVNode("div", _hoisted_11$l, [
                      createBaseVNode("div", _hoisted_12$h, [
                        createBaseVNode("h3", {
                          class: "slds-truncate",
                          title: activity.Name,
                          style: { "line-height": "1.15rem" }
                        }, [
                          (openBlock(), createBlock(resolveDynamicComponent(activity.nameVNode)))
                        ], 8, _hoisted_13$h)
                      ]),
                      createBaseVNode("div", _hoisted_14$f, [
                        createBaseVNode("p", {
                          class: "spm-timeline__data",
                          onMouseover: ($event) => $options.onMouseOverTooltip(activity.date.localeString, $event)
                        }, toDisplayString(activity.date.sinceActivityString), 41, _hoisted_15$e)
                      ])
                    ]),
                    createBaseVNode("div", _hoisted_16$c, [
                      createBaseVNode("a", {
                        href: `/${activity.CreatedById}`,
                        style: { "color": "currentColor" }
                      }, toDisplayString(activity.CreatedBy.Name), 9, _hoisted_17$b),
                      activity.sfsp__Description__c ? (openBlock(), createElementBlock("span", _hoisted_18$b, [
                        createTextVNode("  |  "),
                        createBaseVNode("span", {
                          class: "slds-text-link_faux",
                          style: { "user-select": "none" },
                          onClick: ($event) => $options.toggleDescription(activity)
                        }, toDisplayString(activity.showDescription ? "Hide" : "Show") + " Description ", 9, _hoisted_19$b)
                      ])) : createCommentVNode("", true)
                    ]),
                    withDirectives(createBaseVNode("div", {
                      innerHTML: $options.getSanitizedDescription(activity),
                      class: "spm-timeline__description slds-m-top_small",
                      style: { "word-wrap": "break-word" }
                    }, null, 8, _hoisted_20$b), [
                      [vShow, activity.showDescription]
                    ])
                  ])
                ])
              ])
            ]);
          }), 128))
        ])),
        $data.tooltipSource && $data.tooltipText ? (openBlock(), createBlock(_component_Tooltip, {
          key: 3,
          source: $data.tooltipSource,
          text: $data.tooltipText
        }, null, 8, ["source", "text"])) : createCommentVNode("", true)
      ], 544);
    }
    const ActivityHistory = /* @__PURE__ */ _export_sfc(_sfc_main$1h, [["render", _sfc_render$1h], ["__scopeId", "data-v-c8156a5b"]]);
    const TemplateCard_vue_vue_type_style_index_0_lang = "";
    const __default__$2 = {
      name: "TemplateCard",
      components: { SLDSButton },
      props: {
        template: {
          type: Object,
          required: true
        }
      },
      emits: ["select-template"],
      data() {
        return {
          templateHoverX: "0px",
          templateHoverY: "0px",
          buttonHovered: false,
          buttonFocused: false
        };
      },
      computed: {
        templateBackground() {
          return this.template.background || "#0250D9";
        },
        templateShadow() {
          return this.template.shadow || "#066AFE";
        },
        templateClasses() {
          const classes = ["spm-kondo-template-card", "spm-kondo", "slds-grid"];
          if (this.$props.template.stretched) {
            classes.push("slds-grid_vertical-align-center spm-kondo-template-card-stretched");
          } else {
            classes.push("slds-grid_vertical");
          }
          if (this.$props.template.disabled)
            classes.push("template-disabled");
          if (this.buttonHovered)
            classes.push("template-button-hover");
          if (this.buttonFocused)
            classes.push("template-button-hover");
          return classes;
        }
      },
      methods: {
        onTemplateMouseMove(e) {
          const { x, y } = this.$el.getBoundingClientRect();
          this.templateHoverX = `${e.clientX - x}px`;
          this.templateHoverY = `${e.clientY - y}px`;
        },
        onTemplateButtonClick(isAdvanced) {
          this.$emit("select-template", this.template, isAdvanced);
        }
      }
    };
    const __injectCSSVars__$2 = () => {
      useCssVars((_ctx) => ({
        "496b8690": _ctx.templateBackground,
        "1e3ac9b4": _ctx.templateHoverX,
        "1e3ac9b2": _ctx.templateHoverY,
        "033bb5aa": _ctx.templateShadow
      }));
    };
    const __setup__$2 = __default__$2.setup;
    __default__$2.setup = __setup__$2 ? (props, ctx) => {
      __injectCSSVars__$2();
      return __setup__$2(props, ctx);
    } : __injectCSSVars__$2;
    const _sfc_main$1g = __default__$2;
    const _hoisted_1$1b = ["id"];
    const _hoisted_2$19 = { key: 0 };
    const _hoisted_3$W = { class: "template-name" };
    const _hoisted_4$P = { class: "template-description" };
    function _sfc_render$1g(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_SLDSButton = resolveComponent("SLDSButton");
      return openBlock(), createElementBlock("article", {
        id: `${$props.template.name.replaceAll(" ", "-").toLowerCase()}-card`,
        class: normalizeClass($options.templateClasses),
        onMousemove: _cache[6] || (_cache[6] = (...args) => $options.onTemplateMouseMove && $options.onTemplateMouseMove(...args))
      }, [
        $props.template.icon ? (openBlock(), createElementBlock("div", _hoisted_2$19, [
          (openBlock(), createBlock(resolveDynamicComponent($props.template.icon), {
            template: $props.template.name
          }, null, 8, ["template"]))
        ])) : createCommentVNode("", true),
        createBaseVNode("div", null, [
          createBaseVNode("div", _hoisted_3$W, toDisplayString($props.template.label), 1),
          createBaseVNode("div", _hoisted_4$P, toDisplayString($props.template.description), 1)
        ]),
        createBaseVNode("div", {
          class: normalizeClass($props.template.stretched ? "slds-col_bump-left" : "slds-col_bump-top")
        }, [
          $props.template.advancedButtonLabel ? (openBlock(), createBlock(_component_SLDSButton, {
            key: 0,
            label: $props.template.advancedButtonLabel,
            disabled: $props.template.disabled,
            class: "spm-link-button",
            onClick: _cache[0] || (_cache[0] = ($event) => $options.onTemplateButtonClick(true))
          }, null, 8, ["label", "disabled"])) : createCommentVNode("", true),
          createVNode(_component_SLDSButton, {
            label: $props.template.buttonLabel,
            disabled: $props.template.disabled,
            onClick: _cache[1] || (_cache[1] = ($event) => $options.onTemplateButtonClick(false)),
            onMouseover: _cache[2] || (_cache[2] = ($event) => $data.buttonHovered = true),
            onFocus: _cache[3] || (_cache[3] = ($event) => $data.buttonFocused = true),
            onMouseleave: _cache[4] || (_cache[4] = ($event) => $data.buttonHovered = false),
            onBlur: _cache[5] || (_cache[5] = ($event) => $data.buttonFocused = false)
          }, null, 8, ["label", "disabled"])
        ], 2)
      ], 42, _hoisted_1$1b);
    }
    const TemplateCard = /* @__PURE__ */ _export_sfc(_sfc_main$1g, [["render", _sfc_render$1g]]);
    const ArrowIcon_vue_vue_type_style_index_0_scoped_d6ca9109_lang = "";
    const _sfc_main$1f = {
      name: "ArrowIcon"
    };
    const _withScopeId$o = (n) => (pushScopeId("data-v-d6ca9109"), n = n(), popScopeId(), n);
    const _hoisted_1$1a = {
      xmlns: "http://www.w3.org/2000/svg",
      class: "spm-kondo-icon-arrow",
      width: "100%",
      height: "100%",
      viewBox: "0 0 72 72"
    };
    const _hoisted_2$18 = /* @__PURE__ */ _withScopeId$o(() => /* @__PURE__ */ createBaseVNode("path", {
      class: "animate-scale-bounce",
      d: "M20.0002 51.9999L38.2858 33.7144"
    }, null, -1));
    const _hoisted_3$V = /* @__PURE__ */ _withScopeId$o(() => /* @__PURE__ */ createBaseVNode("path", {
      class: "animate-scale-bounce",
      d: "M26.8575 33.7144H38.2859V45.1428"
    }, null, -1));
    const _hoisted_4$O = /* @__PURE__ */ _withScopeId$o(() => /* @__PURE__ */ createBaseVNode("path", {
      class: "animate-scale-bounce",
      d: "M33.7141 26.8569H45.1426V38.2854"
    }, null, -1));
    const _hoisted_5$K = /* @__PURE__ */ _withScopeId$o(() => /* @__PURE__ */ createBaseVNode("path", {
      class: "animate-scale-bounce",
      d: "M40.5713 20H51.9998V31.4285"
    }, null, -1));
    const _hoisted_6$C = [
      _hoisted_2$18,
      _hoisted_3$V,
      _hoisted_4$O,
      _hoisted_5$K
    ];
    function _sfc_render$1f(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1$1a, _hoisted_6$C);
    }
    const ArrowIcon = /* @__PURE__ */ _export_sfc(_sfc_main$1f, [["render", _sfc_render$1f], ["__scopeId", "data-v-d6ca9109"]]);
    const MapIcon_vue_vue_type_style_index_0_lang = "";
    const _sfc_main$1e = {
      name: "MapIcon"
    };
    const _hoisted_1$19 = {
      xmlns: "http://www.w3.org/2000/svg",
      class: "spm-kondo-icon-map",
      width: "100%",
      height: "100%",
      viewBox: "0 0 72 72"
    };
    const _hoisted_2$17 = /* @__PURE__ */ createStaticVNode('<g class="animate-vertical-bounce"><circle cx="36.0001" cy="24.0876" r="4.08758"></circle><path d="M35.9103 38.1019L35.9103 28.206"></path></g><g><path d="M39.9513 33.4309L42.0993 34.0446C42.2076 34.0756 42.3235 34.0648 42.4242 34.0144L48.7794 30.8369C49.0786 30.6873 49.4306 30.9048 49.4306 31.2393V48.1406C49.4306 48.3111 49.3343 48.4669 49.1819 48.5431L42.4242 51.922C42.3235 51.9723 42.2076 51.9831 42.0993 51.9521L29.9007 48.4668C29.7924 48.4359 29.6765 48.4467 29.5758 48.497L23.2206 51.6746C22.9214 51.8242 22.5694 51.6066 22.5694 51.2721V34.3708C22.5694 34.2004 22.6657 34.0446 22.8181 33.9684L29.5758 30.5895C29.6765 30.5392 29.7924 30.5284 29.9007 30.5593L31.4063 30.9895L32.2433 31.2286"></path><path d="M42.2676 51.9991V34.0916"></path><path d="M29.7324 48.4187V30.5112"></path></g>', 2);
    const _hoisted_4$N = [
      _hoisted_2$17
    ];
    function _sfc_render$1e(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1$19, _hoisted_4$N);
    }
    const MapIcon = /* @__PURE__ */ _export_sfc(_sfc_main$1e, [["render", _sfc_render$1e]]);
    const NodesIcon_vue_vue_type_style_index_0_lang = "";
    const __default__$1 = {
      name: "NodesIcon",
      props: ["template"],
      computed: {
        iconBackground() {
          return this.template === "Role Hierarchy" ? "#5867E8" : "#58c1e8";
        },
        iconBackgroundHover() {
          return this.template === "Role Hierarchy" ? "#9EA9F1" : "#a9d9eb";
        },
        circleColor() {
          return this.template === "Role Hierarchy" ? "#9EA9F1" : "#a9d9eb";
        }
      }
    };
    const __injectCSSVars__$1 = () => {
      useCssVars((_ctx) => ({
        "d1c97248": _ctx.iconBackground,
        "aa51df84": _ctx.circleColor,
        "ded50880": _ctx.iconBackgroundHover
      }));
    };
    const __setup__$1 = __default__$1.setup;
    __default__$1.setup = __setup__$1 ? (props, ctx) => {
      __injectCSSVars__$1();
      return __setup__$1(props, ctx);
    } : __injectCSSVars__$1;
    const _sfc_main$1d = __default__$1;
    const _hoisted_1$18 = {
      xmlns: "http://www.w3.org/2000/svg",
      class: "spm-kondo-icon-nodes",
      width: "100%",
      height: "100%",
      viewBox: "0 0 72 72"
    };
    const _hoisted_2$16 = /* @__PURE__ */ createStaticVNode('<path class="animate-scale-bounce" d="M22.6783 52.0001C24.5993 52.0001 26.1565 50.4429 26.1565 48.5219C26.1565 46.601 24.5993 45.0437 22.6783 45.0437C20.7573 45.0437 19.2001 46.601 19.2001 48.5219C19.2001 50.4429 20.7573 52.0001 22.6783 52.0001Z"></path><path class="animate-scale-bounce" d="M24.39 45.4882L30.0108 35.5544"></path><path class="animate-scale-bounce" d="M31.7218 35.9997C33.6428 35.9997 35.2 34.4424 35.2 32.5214C35.2 30.6005 33.6428 29.0432 31.7218 29.0432C29.8009 29.0432 28.2436 30.6005 28.2436 32.5214C28.2436 34.4424 29.8009 35.9997 31.7218 35.9997Z"></path><path class="animate-scale-bounce" d="M34.3627 34.7881L38.8149 38.6002"></path><path class="animate-scale-bounce" d="M41.4608 44.3478C43.3818 44.3478 44.939 42.7905 44.939 40.8696C44.939 38.9486 43.3818 37.3914 41.4608 37.3914C39.5398 37.3914 37.9826 38.9486 37.9826 40.8696C37.9826 42.7905 39.5398 44.3478 41.4608 44.3478Z"></path><path class="animate-scale-bounce" d="M42.6456 37.5999L48.1412 26.7478"></path><path class="animate-scale-bounce" d="M49.3217 26.9564C51.2427 26.9564 52.7999 25.3992 52.7999 23.4782C52.7999 21.5573 51.2427 20 49.3217 20C47.4007 20 45.8435 21.5573 45.8435 23.4782C45.8435 25.3992 47.4007 26.9564 49.3217 26.9564Z"></path>', 7);
    const _hoisted_9$t = [
      _hoisted_2$16
    ];
    function _sfc_render$1d(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1$18, _hoisted_9$t);
    }
    const NodesIcon = /* @__PURE__ */ _export_sfc(_sfc_main$1d, [["render", _sfc_render$1d]]);
    const StackIcon_vue_vue_type_style_index_0_lang = "";
    const _sfc_main$1c = {
      name: "StackIcon"
    };
    const _hoisted_1$17 = {
      class: "spm-kondo-icon-stack",
      width: "100%",
      height: "100%",
      viewBox: "0 0 72 72"
    };
    const _hoisted_2$15 = /* @__PURE__ */ createStaticVNode('<path class="plus-anim element animate-stack-icon-bounce" d="M51.8 24.432V23.168C51.8 20.912 50.776 20 48.232 20H23.768C21.224 20 20.2 20.912 20.2 23.168V24.416C20.2 26.688    21.224 27.584 23.768 27.584H48.232C50.776 27.6 51.8 26.688 51.8 24.432Z"></path><path class="plus-anim element animate-stack-icon-bounce" d="M51.8 37.432V36.168C51.8 33.912 50.776 33 48.232 33H23.768C21.224 33 20.2 33.912 20.2 36.168V37.416C20.2 39.688 21.224 40.584 23.768 40.584H48.232C50.776 40.6 51.8 39.688 51.8 37.432Z"></path><g class="plus plus-anim animate-stack-icon-bounce"><path d="M33.2 49H39.2"></path><path d="M36.2 52V46"></path></g>', 3);
    const _hoisted_5$J = [
      _hoisted_2$15
    ];
    function _sfc_render$1c(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1$17, _hoisted_5$J);
    }
    const StackIcon = /* @__PURE__ */ _export_sfc(_sfc_main$1c, [["render", _sfc_render$1c]]);
    const DemoHierarchy = [
      {
        Name: "Hardware",
        rules: [
          { field: "Id", operator: "!=", value: "" }
        ],
        children: [
          {
            Name: "Hardware US",
            rules: [
              { field: "Country", operator: "==", value: "US" }
            ],
            children: [
              {
                Name: "Hardware US North",
                boundaries: ["USA_Virginia", "USA_Wyoming", "USA_Rhode Island", "USA_Massachusetts", "USA_Nebraska", "USA_Vermont", "USA_Pennsylvania", "USA_South Dakota", "USA_Maryland", "USA_Minnesota", "USA_Illinois", "USA_Indiana", "USA_New Jersey", "USA_Colorado", "USA_Iowa", "USA_Maine", "USA_Montana", "USA_Ohio", "USA_Tennessee", "USA_Delaware", "USA_Kentucky", "USA_Connecticut", "USA_West Virginia", "USA_Kansas", "USA_New York", "USA_Missouri", "USA_Michigan", "USA_Wisconsin", "USA_North Dakota", "USA_New Hampshire"],
                children: []
              },
              {
                Name: "Hardware US South",
                boundaries: ["USA_New Mexico", "USA_Texas", "USA_Alabama", "USA_Arkansas", "USA_Mississippi", "USA_Oklahoma", "USA_Louisiana"],
                children: []
              },
              {
                Name: "Hardware US East",
                boundaries: ["USA_Georgia", "USA_Florida", "USA_South Carolina", "USA_North Carolina"],
                children: []
              },
              {
                Name: "Hardware US West",
                boundaries: ["USA_Alaska", "USA_Oregon", "USA_California", "USA_Nevada", "USA_Utah", "USA_Washington", "USA_Idaho", "USA_Arizona", "USA_Hawaii"],
                children: []
              }
            ]
          },
          {
            Name: "Hardware Global",
            rules: [
              { field: "Country", operator: "!=", value: "US" }
            ],
            children: [
              {
                Name: "Hardware Global UK",
                rules: [
                  { field: "Country", operator: "==", value: "GB" }
                ],
                children: []
              },
              {
                Name: "Hardware Global Germany",
                rules: [
                  { field: "Country", operator: "==", value: "DE" }
                ],
                children: []
              }
            ]
          }
        ]
      },
      {
        Name: "Software",
        rules: [
          { field: "Id", operator: "!=", value: "" }
        ],
        children: [
          {
            Name: "Software SMB",
            rules: [
              { field: "Employees", operator: "<=", value: "9500" }
            ],
            children: [
              {
                Name: "Software Industry 1",
                rules: [
                  { field: "Industry", operator: "==", value: "Healthcare" }
                ],
                children: []
              },
              {
                Name: "Software Industry 2",
                rules: [
                  { field: "Industry", operator: "==", value: "Financial Services" }
                ],
                children: []
              },
              {
                Name: "Software Industry 3",
                rules: [
                  { field: "Industry", operator: "==", value: "Manufacturing" }
                ],
                children: []
              },
              {
                Name: "Software Industry 4",
                rules: [
                  { field: "Industry", operator: "==", value: "Aerospace" }
                ],
                children: []
              }
            ]
          },
          {
            Name: "Software Enterprise",
            rules: [
              { field: "Employees", operator: ">", value: "9500" }
            ],
            children: [
              {
                Name: "Software Enterprise New Logo",
                assignments: ["US Account 18", "US Account 95", "US Account 179", "US Account 199", "US Account 253", "US Account 263", "US Account 318", "US Account 339", "US Account 355", "US Account 395", "US Account 439", "US Account 483", "US Account 533", "US Account 677", "US Account 691", "UK Account 1", "UK Account 68", "UK Account 118", "DE Account 78", "DE Account 96", "DE Account 120"],
                children: []
              },
              {
                Name: "Software Enterprise Growth",
                assignments: ["US Account 75", "US Account 112", "US Account 185", "US Account 225", "US Account 262", "US Account 284", "US Account 331", "US Account 343", "US Account 361", "US Account 397", "US Account 453", "US Account 485", "US Account 605", "US Account 689", "US Account 738", "UK Account 4", "UK Account 80", "DE Account 15", "DE Account 95", "DE Account 104"],
                children: []
              }
            ]
          }
        ]
      }
    ];
    const DemoAccounts = [
      {
        Name: "DE Account 1",
        Country: "DE",
        PostalCode: 67121,
        Latitude: 49.60990857,
        Longitude: 11.06602463,
        Revenue: 720356,
        Employees: 3600,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 2",
        Country: "DE",
        PostalCode: 7194,
        Latitude: 50.36183799,
        Longitude: 8.668313618,
        Revenue: 202238,
        Employees: 4743,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 3",
        Country: "DE",
        PostalCode: 2766,
        Latitude: 50.04605898,
        Longitude: 10.22171355,
        Revenue: 232080,
        Employees: 2171,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 4",
        Country: "DE",
        PostalCode: 15323,
        Latitude: 49.30701479,
        Longitude: 8.075313983,
        Revenue: 981358,
        Employees: 4214,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 5",
        Country: "DE",
        PostalCode: 93711,
        Latitude: 50.76993321,
        Longitude: 12.02554422,
        Revenue: 178551,
        Employees: 3861,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 6",
        Country: "DE",
        PostalCode: 6649,
        Latitude: 48.24057609,
        Longitude: 11.70475465,
        Revenue: 239967,
        Employees: 2913,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 7",
        Country: "DE",
        PostalCode: 4834,
        Latitude: 50.77677473,
        Longitude: 9.500631588,
        Revenue: 966427,
        Employees: 7731,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 8",
        Country: "DE",
        PostalCode: 1477,
        Latitude: 48.44277528,
        Longitude: 9.660936653,
        Revenue: 89526,
        Employees: 7542,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 9",
        Country: "DE",
        PostalCode: 69553,
        Latitude: 52.32405844,
        Longitude: 9.80489959,
        Revenue: 977729,
        Employees: 3993,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 10",
        Country: "DE",
        PostalCode: 85174,
        Latitude: 49.70402763,
        Longitude: 8.316113642,
        Revenue: 831265,
        Employees: 8169,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 11",
        Country: "DE",
        PostalCode: 5640,
        Latitude: 48.84894752,
        Longitude: 9.951294174,
        Revenue: 8079,
        Employees: 7078,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 12",
        Country: "DE",
        PostalCode: 4386,
        Latitude: 47.77189784,
        Longitude: 9.541977953,
        Revenue: 160699,
        Employees: 8356,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 13",
        Country: "DE",
        PostalCode: 72898,
        Latitude: 51.68317536,
        Longitude: 12.32321219,
        Revenue: 379982,
        Employees: 3697,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 14",
        Country: "DE",
        PostalCode: 41043,
        Latitude: 48.5546317,
        Longitude: 8.842324695,
        Revenue: 685911,
        Employees: 2433,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 15",
        Country: "DE",
        PostalCode: 93798,
        Latitude: 50.81442778,
        Longitude: 7.164754684,
        Revenue: 804879,
        Employees: 9572,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 16",
        Country: "DE",
        PostalCode: 6802,
        Latitude: 50.90806131,
        Longitude: 9.568590614,
        Revenue: 878305,
        Employees: 2262,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 17",
        Country: "DE",
        PostalCode: 2600,
        Latitude: 48.43322991,
        Longitude: 13.26829904,
        Revenue: 588805,
        Employees: 3223,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 18",
        Country: "DE",
        PostalCode: 31527,
        Latitude: 51.23078715,
        Longitude: 9.185519004,
        Revenue: 582191,
        Employees: 7400,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 19",
        Country: "DE",
        PostalCode: 557,
        Latitude: 50.61553675,
        Longitude: 6.950151405,
        Revenue: 115780,
        Employees: 2915,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 20",
        Country: "DE",
        PostalCode: 6981,
        Latitude: 48.27227671,
        Longitude: 10.03686369,
        Revenue: 520555,
        Employees: 3318,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 21",
        Country: "DE",
        PostalCode: 5729,
        Latitude: 49.0516424,
        Longitude: 12.11854521,
        Revenue: 772334,
        Employees: 5653,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 22",
        Country: "DE",
        PostalCode: 6121,
        Latitude: 49.49174512,
        Longitude: 7.907851473,
        Revenue: 145806,
        Employees: 2335,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 23",
        Country: "DE",
        PostalCode: 58331,
        Latitude: 50.97136344,
        Longitude: 7.193364805,
        Revenue: 927812,
        Employees: 9173,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 24",
        Country: "DE",
        PostalCode: 5402,
        Latitude: 54.08129605,
        Longitude: 10.28381353,
        Revenue: 797946,
        Employees: 674,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 25",
        Country: "DE",
        PostalCode: 32353,
        Latitude: 47.82576175,
        Longitude: 10.51896531,
        Revenue: 855998,
        Employees: 7788,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 26",
        Country: "DE",
        PostalCode: 5589,
        Latitude: 48.19119965,
        Longitude: 8.80803206,
        Revenue: 804713,
        Employees: 47,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 27",
        Country: "DE",
        PostalCode: 43261,
        Latitude: 51.51246767,
        Longitude: 7.374551456,
        Revenue: 218669,
        Employees: 9448,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 28",
        Country: "DE",
        PostalCode: 9837,
        Latitude: 49.72297436,
        Longitude: 8.59458216,
        Revenue: 325362,
        Employees: 3388,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 29",
        Country: "DE",
        PostalCode: 9640,
        Latitude: 53.65877987,
        Longitude: 7.938765915,
        Revenue: 925916,
        Employees: 9405,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 30",
        Country: "DE",
        PostalCode: 3273,
        Latitude: 49.34586652,
        Longitude: 11.16522169,
        Revenue: 894653,
        Employees: 1356,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 31",
        Country: "DE",
        PostalCode: 36091,
        Latitude: 48.32771791,
        Longitude: 10.3048637,
        Revenue: 388524,
        Employees: 3977,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 32",
        Country: "DE",
        PostalCode: 3146,
        Latitude: 49.92682406,
        Longitude: 8.84517261,
        Revenue: 386036,
        Employees: 1791,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 33",
        Country: "DE",
        PostalCode: 72119,
        Latitude: 48.79337192,
        Longitude: 10.0215921,
        Revenue: 557782,
        Employees: 6662,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 34",
        Country: "DE",
        PostalCode: 2021,
        Latitude: 48.2732017,
        Longitude: 8.339494545,
        Revenue: 833149,
        Employees: 8175,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 35",
        Country: "DE",
        PostalCode: 70037,
        Latitude: 50.02895444,
        Longitude: 9.129998785,
        Revenue: 292807,
        Employees: 1581,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 36",
        Country: "DE",
        PostalCode: 50579,
        Latitude: 50.54365961,
        Longitude: 7.803759796,
        Revenue: 484138,
        Employees: 310,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 37",
        Country: "DE",
        PostalCode: 9515,
        Latitude: 51.23714038,
        Longitude: 13.0538023,
        Revenue: 287078,
        Employees: 9040,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 38",
        Country: "DE",
        PostalCode: 88482,
        Latitude: 52.68285621,
        Longitude: 9.631276731,
        Revenue: 98793,
        Employees: 5943,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 39",
        Country: "DE",
        PostalCode: 4998,
        Latitude: 49.85131646,
        Longitude: 8.60802941,
        Revenue: 689758,
        Employees: 7574,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 40",
        Country: "DE",
        PostalCode: 7267,
        Latitude: 52.48312335,
        Longitude: 13.23653336,
        Revenue: 694022,
        Employees: 7532,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 41",
        Country: "DE",
        PostalCode: 8484,
        Latitude: 51.75813408,
        Longitude: 6.206960727,
        Revenue: 323407,
        Employees: 8334,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 42",
        Country: "DE",
        PostalCode: 48194,
        Latitude: 48.43172769,
        Longitude: 9.866729098,
        Revenue: 365536,
        Employees: 8497,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 43",
        Country: "DE",
        PostalCode: 21771,
        Latitude: 50.55684394,
        Longitude: 6.451620153,
        Revenue: 391773,
        Employees: 1840,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 44",
        Country: "DE",
        PostalCode: 72776,
        Latitude: 48.80512769,
        Longitude: 13.15967549,
        Revenue: 45706,
        Employees: 6886,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 45",
        Country: "DE",
        PostalCode: 5586,
        Latitude: 48.04947567,
        Longitude: 10.40562251,
        Revenue: 229998,
        Employees: 4345,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 46",
        Country: "DE",
        PostalCode: 10359,
        Latitude: 48.19188512,
        Longitude: 11.48245879,
        Revenue: 536167,
        Employees: 4535,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 47",
        Country: "DE",
        PostalCode: 56936,
        Latitude: 48.15530546,
        Longitude: 11.5659831,
        Revenue: 128848,
        Employees: 7694,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 48",
        Country: "DE",
        PostalCode: 99532,
        Latitude: 53.28154127,
        Longitude: 12.84374601,
        Revenue: 636150,
        Employees: 8386,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 49",
        Country: "DE",
        PostalCode: 4016,
        Latitude: 50.12478991,
        Longitude: 8.71378783,
        Revenue: 743903,
        Employees: 2959,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 50",
        Country: "DE",
        PostalCode: 77287,
        Latitude: 48.92607091,
        Longitude: 11.10641094,
        Revenue: 555423,
        Employees: 5551,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 51",
        Country: "DE",
        PostalCode: 17210,
        Latitude: 52.37011322,
        Longitude: 11.00676459,
        Revenue: 394227,
        Employees: 6047,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 52",
        Country: "DE",
        PostalCode: 52925,
        Latitude: 53.64721545,
        Longitude: 9.672398404,
        Revenue: 457290,
        Employees: 7956,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 53",
        Country: "DE",
        PostalCode: 1326,
        Latitude: 50.41867953,
        Longitude: 7.621721983,
        Revenue: 220903,
        Employees: 9032,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 54",
        Country: "DE",
        PostalCode: 53497,
        Latitude: 47.83837672,
        Longitude: 8.556456899,
        Revenue: 787960,
        Employees: 4862,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 55",
        Country: "DE",
        PostalCode: 1100,
        Latitude: 48.33171503,
        Longitude: 9.772439211,
        Revenue: 74185,
        Employees: 8475,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 56",
        Country: "DE",
        PostalCode: 80652,
        Latitude: 52.07355907,
        Longitude: 11.83625292,
        Revenue: 147408,
        Employees: 3696,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 57",
        Country: "DE",
        PostalCode: 20494,
        Latitude: 48.56566026,
        Longitude: 9.1738499,
        Revenue: 291085,
        Employees: 552,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 58",
        Country: "DE",
        PostalCode: 66574,
        Latitude: 53.76039613,
        Longitude: 13.29547891,
        Revenue: 464605,
        Employees: 1881,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 59",
        Country: "DE",
        PostalCode: 20195,
        Latitude: 53.59857639,
        Longitude: 10.04421276,
        Revenue: 320919,
        Employees: 3335,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 60",
        Country: "DE",
        PostalCode: 15781,
        Latitude: 48.76454117,
        Longitude: 9.195628232,
        Revenue: 687546,
        Employees: 5954,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 61",
        Country: "DE",
        PostalCode: 9995,
        Latitude: 48.67460981,
        Longitude: 9.464342216,
        Revenue: 883119,
        Employees: 6238,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 62",
        Country: "DE",
        PostalCode: 55616,
        Latitude: 49.79877221,
        Longitude: 10.33414838,
        Revenue: 817758,
        Employees: 6693,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 63",
        Country: "DE",
        PostalCode: 2132,
        Latitude: 48.12043899,
        Longitude: 11.58740707,
        Revenue: 396430,
        Employees: 1162,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 64",
        Country: "DE",
        PostalCode: 25295,
        Latitude: 48.38356093,
        Longitude: 9.679493391,
        Revenue: 708038,
        Employees: 6248,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 65",
        Country: "DE",
        PostalCode: 27037,
        Latitude: 50.10128334,
        Longitude: 9.635721463,
        Revenue: 521781,
        Employees: 5526,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 66",
        Country: "DE",
        PostalCode: 36981,
        Latitude: 51.16536528,
        Longitude: 10.8291942,
        Revenue: 89068,
        Employees: 2823,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 67",
        Country: "DE",
        PostalCode: 4385,
        Latitude: 47.9397593,
        Longitude: 8.086970854,
        Revenue: 767041,
        Employees: 2140,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 68",
        Country: "DE",
        PostalCode: 50995,
        Latitude: 50.15957386,
        Longitude: 8.696478449,
        Revenue: 426243,
        Employees: 6010,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 69",
        Country: "DE",
        PostalCode: 8412,
        Latitude: 51.42647323,
        Longitude: 7.932556635,
        Revenue: 194927,
        Employees: 5298,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 70",
        Country: "DE",
        PostalCode: 68152,
        Latitude: 48.68558749,
        Longitude: 10.13191565,
        Revenue: 574571,
        Employees: 7292,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 71",
        Country: "DE",
        PostalCode: 8580,
        Latitude: 52.37654042,
        Longitude: 9.801333661,
        Revenue: 865971,
        Employees: 4405,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 72",
        Country: "DE",
        PostalCode: 1825,
        Latitude: 48.1855549,
        Longitude: 10.98931954,
        Revenue: 987432,
        Employees: 50,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 73",
        Country: "DE",
        PostalCode: 83629,
        Latitude: 49.56002397,
        Longitude: 9.084082144,
        Revenue: 221406,
        Employees: 2443,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 74",
        Country: "DE",
        PostalCode: 7123,
        Latitude: 54.30286607,
        Longitude: 9.986223379,
        Revenue: 920083,
        Employees: 6689,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 75",
        Country: "DE",
        PostalCode: 59138,
        Latitude: 48.77316026,
        Longitude: 11.04783952,
        Revenue: 755503,
        Employees: 8590,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 76",
        Country: "DE",
        PostalCode: 7942,
        Latitude: 51.65932658,
        Longitude: 11.47065673,
        Revenue: 701551,
        Employees: 2346,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 77",
        Country: "DE",
        PostalCode: 53991,
        Latitude: 51.32965554,
        Longitude: 8.488373585,
        Revenue: 357358,
        Employees: 2828,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 78",
        Country: "DE",
        PostalCode: 10071,
        Latitude: 48.62140123,
        Longitude: 8.896882572,
        Revenue: 335244,
        Employees: 9594,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 79",
        Country: "DE",
        PostalCode: 72891,
        Latitude: 52.22422301,
        Longitude: 10.47813025,
        Revenue: 367831,
        Employees: 656,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 80",
        Country: "DE",
        PostalCode: 11158,
        Latitude: 48.9371356,
        Longitude: 12.47743429,
        Revenue: 440975,
        Employees: 7103,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 81",
        Country: "DE",
        PostalCode: 8466,
        Latitude: 48.42545729,
        Longitude: 10.71832152,
        Revenue: 790560,
        Employees: 3372,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 82",
        Country: "DE",
        PostalCode: 89067,
        Latitude: 51.67475696,
        Longitude: 8.088842775,
        Revenue: 243394,
        Employees: 7168,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 83",
        Country: "DE",
        PostalCode: 4477,
        Latitude: 47.75772967,
        Longitude: 12.4514179,
        Revenue: 88867,
        Employees: 6489,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 84",
        Country: "DE",
        PostalCode: 13437,
        Latitude: 49.54711782,
        Longitude: 7.848546838,
        Revenue: 494568,
        Employees: 9478,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 85",
        Country: "DE",
        PostalCode: 88993,
        Latitude: 50.97594751,
        Longitude: 6.282271119,
        Revenue: 864329,
        Employees: 3683,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 86",
        Country: "DE",
        PostalCode: 19859,
        Latitude: 50.34794215,
        Longitude: 7.38488604,
        Revenue: 368088,
        Employees: 5498,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 87",
        Country: "DE",
        PostalCode: 6409,
        Latitude: 52.97025211,
        Longitude: 10.56773335,
        Revenue: 195291,
        Employees: 6018,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 88",
        Country: "DE",
        PostalCode: 2547,
        Latitude: 52.1186589,
        Longitude: 9.705011648,
        Revenue: 938414,
        Employees: 50,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 89",
        Country: "DE",
        PostalCode: 66337,
        Latitude: 50.78743361,
        Longitude: 12.73510876,
        Revenue: 840183,
        Employees: 7892,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 90",
        Country: "DE",
        PostalCode: 63070,
        Latitude: 48.42309999,
        Longitude: 9.268967646,
        Revenue: 323425,
        Employees: 1927,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 91",
        Country: "DE",
        PostalCode: 52895,
        Latitude: 50.94865436,
        Longitude: 13.75675565,
        Revenue: 85886,
        Employees: 1385,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 92",
        Country: "DE",
        PostalCode: 35522,
        Latitude: 52.62184515,
        Longitude: 9.941673608,
        Revenue: 624633,
        Employees: 227,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 93",
        Country: "DE",
        PostalCode: 21640,
        Latitude: 53.09231775,
        Longitude: 11.49416911,
        Revenue: 325041,
        Employees: 2405,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 94",
        Country: "DE",
        PostalCode: 54768,
        Latitude: 48.06439186,
        Longitude: 9.435369405,
        Revenue: 326941,
        Employees: 486,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 95",
        Country: "DE",
        PostalCode: 8686,
        Latitude: 50.24657545,
        Longitude: 8.564921935,
        Revenue: 941741,
        Employees: 9837,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 96",
        Country: "DE",
        PostalCode: 7642,
        Latitude: 48.5607461,
        Longitude: 12.08972722,
        Revenue: 926680,
        Employees: 9799,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 97",
        Country: "DE",
        PostalCode: 6836,
        Latitude: 49.60737146,
        Longitude: 10.41226664,
        Revenue: 548992,
        Employees: 4769,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 98",
        Country: "DE",
        PostalCode: 940,
        Latitude: 48.29847616,
        Longitude: 11.23200114,
        Revenue: 337213,
        Employees: 1120,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 99",
        Country: "DE",
        PostalCode: 6240,
        Latitude: 51.91501218,
        Longitude: 9.691964726,
        Revenue: 694345,
        Employees: 8232,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 100",
        Country: "DE",
        PostalCode: 97958,
        Latitude: 47.81756816,
        Longitude: 11.7379061,
        Revenue: 806180,
        Employees: 5883,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 101",
        Country: "DE",
        PostalCode: 4358,
        Latitude: 47.85601729,
        Longitude: 9.015716167,
        Revenue: 977456,
        Employees: 4389,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 102",
        Country: "DE",
        PostalCode: 573,
        Latitude: 48.70817732,
        Longitude: 9.655175321,
        Revenue: 636407,
        Employees: 5579,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 103",
        Country: "DE",
        PostalCode: 349,
        Latitude: 49.94317404,
        Longitude: 10.34402777,
        Revenue: 106372,
        Employees: 6576,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 104",
        Country: "DE",
        PostalCode: 21138,
        Latitude: 51.64072962,
        Longitude: 10.44551111,
        Revenue: 571304,
        Employees: 9988,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 105",
        Country: "DE",
        PostalCode: 12013,
        Latitude: 52.86003618,
        Longitude: 13.39906971,
        Revenue: 623567,
        Employees: 1813,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 106",
        Country: "DE",
        PostalCode: 95170,
        Latitude: 47.67575093,
        Longitude: 10.81303705,
        Revenue: 18962,
        Employees: 7642,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 107",
        Country: "DE",
        PostalCode: 78548,
        Latitude: 51.28282144,
        Longitude: 7.365838998,
        Revenue: 980420,
        Employees: 8518,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 108",
        Country: "DE",
        PostalCode: 9062,
        Latitude: 50.99226798,
        Longitude: 6.933531414,
        Revenue: 774212,
        Employees: 4068,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 109",
        Country: "DE",
        PostalCode: 19702,
        Latitude: 49.82481548,
        Longitude: 11.91118796,
        Revenue: 661159,
        Employees: 7706,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 110",
        Country: "DE",
        PostalCode: 84525,
        Latitude: 48.0708314,
        Longitude: 11.15299241,
        Revenue: 827915,
        Employees: 7711,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 111",
        Country: "DE",
        PostalCode: 14997,
        Latitude: 48.11949134,
        Longitude: 8.820298229,
        Revenue: 601222,
        Employees: 1255,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 112",
        Country: "DE",
        PostalCode: 86751,
        Latitude: 50.27336775,
        Longitude: 10.06928396,
        Revenue: 213696,
        Employees: 9300,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 113",
        Country: "DE",
        PostalCode: 43244,
        Latitude: 50.10870078,
        Longitude: 8.846701368,
        Revenue: 283606,
        Employees: 4221,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 114",
        Country: "DE",
        PostalCode: 5380,
        Latitude: 47.86487245,
        Longitude: 8.06750709,
        Revenue: 574674,
        Employees: 5568,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 115",
        Country: "DE",
        PostalCode: 22684,
        Latitude: 47.85394815,
        Longitude: 9.747227772,
        Revenue: 617671,
        Employees: 7752,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 116",
        Country: "DE",
        PostalCode: 2261,
        Latitude: 49.18246469,
        Longitude: 12.10094439,
        Revenue: 142341,
        Employees: 6065,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 117",
        Country: "DE",
        PostalCode: 8047,
        Latitude: 48.08476473,
        Longitude: 8.891983036,
        Revenue: 272371,
        Employees: 3118,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 118",
        Country: "DE",
        PostalCode: 64292,
        Latitude: 54.11038546,
        Longitude: 10.00594895,
        Revenue: 569007,
        Employees: 3664,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 119",
        Country: "DE",
        PostalCode: 2476,
        Latitude: 49.11090982,
        Longitude: 10.7283884,
        Revenue: 175949,
        Employees: 990,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 120",
        Country: "DE",
        PostalCode: 44023,
        Latitude: 50.9847512,
        Longitude: 14.01523513,
        Revenue: 899239,
        Employees: 9771,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 121",
        Country: "DE",
        PostalCode: 9525,
        Latitude: 51.23371128,
        Longitude: 6.78050448,
        Revenue: 405328,
        Employees: 6449,
        Industry: "Manufacturing"
      },
      {
        Name: "DE Account 122",
        Country: "DE",
        PostalCode: 8880,
        Latitude: 49.80326151,
        Longitude: 10.23377364,
        Revenue: 567284,
        Employees: 3870,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 123",
        Country: "DE",
        PostalCode: 69427,
        Latitude: 48.0491097,
        Longitude: 8.696746963,
        Revenue: 756757,
        Employees: 5793,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 124",
        Country: "DE",
        PostalCode: 11706,
        Latitude: 48.48513069,
        Longitude: 12.42002776,
        Revenue: 437599,
        Employees: 1670,
        Industry: "Healthcare"
      },
      {
        Name: "DE Account 125",
        Country: "DE",
        PostalCode: 15528,
        Latitude: 49.8899839,
        Longitude: 11.33926646,
        Revenue: 628255,
        Employees: 5513,
        Industry: "Aerospace"
      },
      {
        Name: "DE Account 126",
        Country: "DE",
        PostalCode: 76102,
        Latitude: 50.58242425,
        Longitude: 11.49229032,
        Revenue: 123339,
        Employees: 7429,
        Industry: "Financial Services"
      },
      {
        Name: "DE Account 127",
        Country: "DE",
        PostalCode: 38767,
        Latitude: 48.12898839,
        Longitude: 10.13676873,
        Revenue: 650401,
        Employees: 7807,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 1",
        Country: "GB",
        PostalCode: "IG3 8RA",
        Latitude: 52.6320376,
        Longitude: 1.2982202,
        Revenue: 191738,
        Employees: 9759,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 2",
        Country: "GB",
        PostalCode: "DN8 5DE",
        Latitude: 53.386066,
        Longitude: -2.3522087,
        Revenue: 817142,
        Employees: 399,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 3",
        Country: "GB",
        PostalCode: "M33 5PN",
        Latitude: 51.5212,
        Longitude: -0.15168,
        Revenue: 32144,
        Employees: 2283,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 4",
        Country: "GB",
        PostalCode: "BN7 2AF",
        Latitude: 51.6191,
        Longitude: -0.31515,
        Revenue: 360738,
        Employees: 9557,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 5",
        Country: "GB",
        PostalCode: "RG1 4BP",
        Latitude: 51.3831806,
        Longitude: -2.3605697,
        Revenue: 738232,
        Employees: 9099,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 6",
        Country: "GB",
        PostalCode: "ME4 4BB",
        Latitude: 51.899524,
        Longitude: -2.0755147,
        Revenue: 381315,
        Employees: 5601,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 7",
        Country: "GB",
        PostalCode: "LN6 8JY",
        Latitude: 51.2843796,
        Longitude: -2.4833838,
        Revenue: 916298,
        Employees: 2021,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 8",
        Country: "GB",
        PostalCode: "ST8 6AA",
        Latitude: 51.2080992,
        Longitude: -2.6481026,
        Revenue: 640307,
        Employees: 83,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 9",
        Country: "GB",
        PostalCode: "W2 1RW",
        Latitude: 53.9010206,
        Longitude: -2.7743463,
        Revenue: 817386,
        Employees: 777,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 10",
        Country: "GB",
        PostalCode: "RH6 7QH",
        Latitude: 51.6422399,
        Longitude: -2.6741599,
        Revenue: 563280,
        Employees: 8277,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 11",
        Country: "GB",
        PostalCode: "LE1 3GH",
        Latitude: 50.8360001,
        Longitude: -0.7775564,
        Revenue: 602748,
        Employees: 123,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 12",
        Country: "GB",
        PostalCode: "GL7 2PF",
        Latitude: 51.5156391,
        Longitude: -0.0904503,
        Revenue: 125212,
        Employees: 4294,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 13",
        Country: "GB",
        PostalCode: "LS29 9LW",
        Latitude: 51.8644598,
        Longitude: -2.2458995,
        Revenue: 711250,
        Employees: 5989,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 14",
        Country: "GB",
        PostalCode: "NN1 5BD",
        Latitude: 54.3283607,
        Longitude: -2.7442948,
        Revenue: 126223,
        Employees: 5799,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 15",
        Country: "GB",
        PostalCode: "B31 2NG",
        Latitude: 51.7169528,
        Longitude: -1.9689587,
        Revenue: 574704,
        Employees: 1172,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 16",
        Country: "GB",
        PostalCode: "YO24 3BW",
        Latitude: 51.3990234,
        Longitude: -3.2836276,
        Revenue: 53315,
        Employees: 5675,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 17",
        Country: "GB",
        PostalCode: "SG18 8AX",
        Latitude: 50.7172371,
        Longitude: -1.9726052,
        Revenue: 983449,
        Employees: 5199,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 18",
        Country: "GB",
        PostalCode: "WR1 2HU",
        Latitude: 50.7259562,
        Longitude: -1.8413264,
        Revenue: 368740,
        Employees: 1598,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 19",
        Country: "GB",
        PostalCode: "EX4 5EX",
        Latitude: 51.4930622,
        Longitude: -3.1693379,
        Revenue: 75783,
        Employees: 5764,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 20",
        Country: "GB",
        PostalCode: "SW18 5LT",
        Latitude: 51.523646,
        Longitude: -0.1418368,
        Revenue: 591715,
        Employees: 1856,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 21",
        Country: "GB",
        PostalCode: "B63 3AS",
        Latitude: 51.48462,
        Longitude: -0.22016,
        Revenue: 853801,
        Employees: 5369,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 22",
        Country: "GB",
        PostalCode: "NG18 1RU",
        Latitude: 51.4437546,
        Longitude: -2.858438,
        Revenue: 993177,
        Employees: 6354,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 23",
        Country: "GB",
        PostalCode: "SE9 5DA",
        Latitude: 51.51231,
        Longitude: -0.08362,
        Revenue: 241588,
        Employees: 5753,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 24",
        Country: "GB",
        PostalCode: "DA6 7DQ",
        Latitude: 51.55821,
        Longitude: -1.82845,
        Revenue: 270596,
        Employees: 723,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 25",
        Country: "GB",
        PostalCode: "WS1 3AA",
        Latitude: 51.61035,
        Longitude: -0.64545,
        Revenue: 612502,
        Employees: 3149,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 26",
        Country: "GB",
        PostalCode: "HA4 9BH",
        Latitude: 51.53761,
        Longitude: -0.16907,
        Revenue: 207729,
        Employees: 8906,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 27",
        Country: "GB",
        PostalCode: "SN15 1HP",
        Latitude: 51.4629657,
        Longitude: -2.6105227,
        Revenue: 623501,
        Employees: 4662,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 28",
        Country: "GB",
        PostalCode: "HA3 6UA",
        Latitude: 51.7586377,
        Longitude: -1.5955179,
        Revenue: 998893,
        Employees: 4011,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 29",
        Country: "GB",
        PostalCode: "BR4 0LS",
        Latitude: 51.32002,
        Longitude: -0.56007,
        Revenue: 229871,
        Employees: 8315,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 30",
        Country: "GB",
        PostalCode: "LS14 6UF",
        Latitude: 53.3733718,
        Longitude: -3.0470746,
        Revenue: 511763,
        Employees: 9285,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 31",
        Country: "GB",
        PostalCode: "G32 6LH",
        Latitude: 51.57703,
        Longitude: -0.22341,
        Revenue: 43923,
        Employees: 2183,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 32",
        Country: "GB",
        PostalCode: "KT12 2QP",
        Latitude: 51.43809,
        Longitude: 0.04573,
        Revenue: 62962,
        Employees: 9165,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 33",
        Country: "GB",
        PostalCode: "NE2 2DJ",
        Latitude: 51.58639,
        Longitude: -0.3065,
        Revenue: 521548,
        Employees: 2117,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 34",
        Country: "GB",
        PostalCode: "IG7 5QB",
        Latitude: 53.3860421,
        Longitude: -2.9080426,
        Revenue: 198064,
        Employees: 2531,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 35",
        Country: "GB",
        PostalCode: "M11 4BD",
        Latitude: 51.51479,
        Longitude: -0.30258,
        Revenue: 82386,
        Employees: 2950,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 36",
        Country: "GB",
        PostalCode: "DA1 4HH",
        Latitude: 51.50985,
        Longitude: -0.3253,
        Revenue: 266801,
        Employees: 3435,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 37",
        Country: "GB",
        PostalCode: "WN5 8AQ",
        Latitude: 53.785869,
        Longitude: -3.0447218,
        Revenue: 252179,
        Employees: 2183,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 38",
        Country: "GB",
        PostalCode: "G64 2TR",
        Latitude: 52.6828275,
        Longitude: -1.8294578,
        Revenue: 976081,
        Employees: 3347,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 39",
        Country: "GB",
        PostalCode: "PO10 7PL",
        Latitude: 51.4453642,
        Longitude: -0.9652792,
        Revenue: 842282,
        Employees: 7465,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 40",
        Country: "GB",
        PostalCode: "BN11 3HA",
        Latitude: 52.6834707,
        Longitude: -1.8283433,
        Revenue: 608019,
        Employees: 8538,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 41",
        Country: "GB",
        PostalCode: "NG18 1SU",
        Latitude: 52.4790804,
        Longitude: -1.8997089,
        Revenue: 297749,
        Employees: 3160,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 42",
        Country: "GB",
        PostalCode: "IP22 4AD",
        Latitude: 51.4557749,
        Longitude: -0.9726402,
        Revenue: 131654,
        Employees: 3774,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 43",
        Country: "GB",
        PostalCode: "W6 8ET",
        Latitude: 52.5792206,
        Longitude: -1.9738107,
        Revenue: 376423,
        Employees: 2724,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 44",
        Country: "GB",
        PostalCode: "EC2R 8AJ",
        Latitude: 51.5600479,
        Longitude: -1.7834831,
        Revenue: 294463,
        Employees: 3774,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 45",
        Country: "GB",
        PostalCode: "WF9 4DP",
        Latitude: 53.4063212,
        Longitude: -2.9850659,
        Revenue: 737124,
        Employees: 4680,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 46",
        Country: "GB",
        PostalCode: "CR0 2RE",
        Latitude: 51.51407,
        Longitude: -0.10841,
        Revenue: 933769,
        Employees: 3869,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 47",
        Country: "GB",
        PostalCode: "PL25 5PY",
        Latitude: 50.7235931,
        Longitude: -1.9049153,
        Revenue: 897794,
        Employees: 3940,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 48",
        Country: "GB",
        PostalCode: "GU9 7NA",
        Latitude: 50.802163,
        Longitude: -1.8907002,
        Revenue: 961566,
        Employees: 3812,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 49",
        Country: "GB",
        PostalCode: "W8 4LL",
        Latitude: 53.389063,
        Longitude: -3.0294919,
        Revenue: 266613,
        Employees: 4907,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 50",
        Country: "GB",
        PostalCode: "S12 3GG",
        Latitude: 53.3834037,
        Longitude: -3.0984623,
        Revenue: 91041,
        Employees: 8079,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 51",
        Country: "GB",
        PostalCode: "BN18 9DG",
        Latitude: 53.3287018,
        Longitude: -3.0991815,
        Revenue: 595700,
        Employees: 4255,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 52",
        Country: "GB",
        PostalCode: "PL21 0QJ",
        Latitude: 51.5213947,
        Longitude: -0.7231418,
        Revenue: 691328,
        Employees: 8366,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 53",
        Country: "GB",
        PostalCode: "SS6 7EJ",
        Latitude: 53.3781665,
        Longitude: -2.189329,
        Revenue: 727580,
        Employees: 6443,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 54",
        Country: "GB",
        PostalCode: "HD6 1JR",
        Latitude: 50.8527082,
        Longitude: -1.1859736,
        Revenue: 193293,
        Employees: 5175,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 55",
        Country: "GB",
        PostalCode: "CO4 5TU",
        Latitude: 51.5124174,
        Longitude: -0.0842733,
        Revenue: 504100,
        Employees: 5103,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 56",
        Country: "GB",
        PostalCode: "FY4 2JF",
        Latitude: 50.8353139,
        Longitude: -0.7793119,
        Revenue: 620704,
        Employees: 1413,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 57",
        Country: "GB",
        PostalCode: "DL8 2BJ",
        Latitude: 50.8297398,
        Longitude: -0.1781669,
        Revenue: 626578,
        Employees: 4899,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 58",
        Country: "GB",
        PostalCode: "LE8 4DW",
        Latitude: 51.39395,
        Longitude: -0.30415,
        Revenue: 42685,
        Employees: 7756,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 59",
        Country: "GB",
        PostalCode: "SS9 1PE",
        Latitude: 53.4133518,
        Longitude: -2.5253313,
        Revenue: 583962,
        Employees: 1401,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 60",
        Country: "GB",
        PostalCode: "NN17 1BH",
        Latitude: 53.4435659,
        Longitude: -2.2778441,
        Revenue: 27940,
        Employees: 1576,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 61",
        Country: "GB",
        PostalCode: "SO32 1AB",
        Latitude: 53.5114022,
        Longitude: -2.3384392,
        Revenue: 800782,
        Employees: 9316,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 62",
        Country: "GB",
        PostalCode: "LN1 1TY",
        Latitude: 53.448905,
        Longitude: -2.3528445,
        Revenue: 235754,
        Employees: 1548,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 63",
        Country: "GB",
        PostalCode: "WA1 1TD",
        Latitude: 53.5599908,
        Longitude: -2.2739554,
        Revenue: 178288,
        Employees: 4609,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 64",
        Country: "GB",
        PostalCode: "IP4 4EL",
        Latitude: 53.6522576,
        Longitude: -2.6304056,
        Revenue: 145865,
        Employees: 3879,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 65",
        Country: "GB",
        PostalCode: "TN17 3HE",
        Latitude: 51.3733855,
        Longitude: -0.1018432,
        Revenue: 614687,
        Employees: 3260,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 66",
        Country: "GB",
        PostalCode: "PO7 5LJ",
        Latitude: 52.7077856,
        Longitude: -2.7561937,
        Revenue: 65697,
        Employees: 1645,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 67",
        Country: "GB",
        PostalCode: "BN23 7PH",
        Latitude: 51.5182958,
        Longitude: -3.1818982,
        Revenue: 612620,
        Employees: 5682,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 68",
        Country: "GB",
        PostalCode: "BA11 1AH",
        Latitude: 51.2377902,
        Longitude: -0.2043871,
        Revenue: 418409,
        Employees: 9700,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 69",
        Country: "GB",
        PostalCode: "ST6 3AG",
        Latitude: 51.36525,
        Longitude: -0.3994,
        Revenue: 13453,
        Employees: 4995,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 70",
        Country: "GB",
        PostalCode: "N5 1NE",
        Latitude: 51.334114,
        Longitude: -0.2650243,
        Revenue: 867807,
        Employees: 5093,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 71",
        Country: "GB",
        PostalCode: "CB2 3AX",
        Latitude: 50.8399966,
        Longitude: 0.4715821,
        Revenue: 647416,
        Employees: 1768,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 72",
        Country: "GB",
        PostalCode: "BN21 1SD",
        Latitude: 50.9157741,
        Longitude: 0.4858083,
        Revenue: 735923,
        Employees: 6558,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 73",
        Country: "GB",
        PostalCode: "RH1 1LY",
        Latitude: 50.7675567,
        Longitude: 0.2886155,
        Revenue: 316656,
        Employees: 1141,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 74",
        Country: "GB",
        PostalCode: "S71 1LN",
        Latitude: 50.8230745,
        Longitude: 0.2444849,
        Revenue: 894717,
        Employees: 359,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 75",
        Country: "GB",
        PostalCode: "DE24 8QP",
        Latitude: 50.772094,
        Longitude: 0.0993924,
        Revenue: 561560,
        Employees: 8474,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 76",
        Country: "GB",
        PostalCode: "SA7 9RD",
        Latitude: 50.8684285,
        Longitude: 0.5563111,
        Revenue: 931153,
        Employees: 192,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 77",
        Country: "GB",
        PostalCode: "CV6 1JF",
        Latitude: 51.49943,
        Longitude: -0.19831,
        Revenue: 760374,
        Employees: 8492,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 78",
        Country: "GB",
        PostalCode: "CH49 0UB",
        Latitude: 51.1285303,
        Longitude: 1.3081457,
        Revenue: 113347,
        Employees: 7336,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 79",
        Country: "GB",
        PostalCode: "SW15 1RG",
        Latitude: 51.51939,
        Longitude: -0.15605,
        Revenue: 569306,
        Employees: 5962,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 80",
        Country: "GB",
        PostalCode: "CV8 1HN",
        Latitude: 51.59576,
        Longitude: -3.78377,
        Revenue: 532892,
        Employees: 9972,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 81",
        Country: "GB",
        PostalCode: "LS24 9JB",
        Latitude: 51.5092795,
        Longitude: -2.6209171,
        Revenue: 207818,
        Employees: 2294,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 82",
        Country: "GB",
        PostalCode: "ML1 1RE",
        Latitude: 50.7175032,
        Longitude: -3.5405622,
        Revenue: 619063,
        Employees: 4931,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 83",
        Country: "GB",
        PostalCode: "GL50 1JD",
        Latitude: 51.4778991,
        Longitude: -3.7038655,
        Revenue: 687566,
        Employees: 8497,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 84",
        Country: "GB",
        PostalCode: "S36 6BR",
        Latitude: 55.89738,
        Longitude: -3.49608,
        Revenue: 570343,
        Employees: 340,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 85",
        Country: "GB",
        PostalCode: "N6 5JG",
        Latitude: 55.6537657,
        Longitude: -3.1892365,
        Revenue: 558697,
        Employees: 6308,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 86",
        Country: "GB",
        PostalCode: "SG14 1BN",
        Latitude: 55.94681,
        Longitude: -3.9906,
        Revenue: 332149,
        Employees: 7503,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 87",
        Country: "GB",
        PostalCode: "DY2 8TP",
        Latitude: 55.976242,
        Longitude: -4.0562571,
        Revenue: 797441,
        Employees: 8990,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 88",
        Country: "GB",
        PostalCode: "NE9 5AN",
        Latitude: 53.7494664,
        Longitude: -0.3505248,
        Revenue: 972153,
        Employees: 9426,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 89",
        Country: "GB",
        PostalCode: "SR8 1AE",
        Latitude: 53.5669349,
        Longitude: -0.65297,
        Revenue: 912442,
        Employees: 4216,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 90",
        Country: "GB",
        PostalCode: "DE56 1PW",
        Latitude: 53.7869227,
        Longitude: -0.3221465,
        Revenue: 845543,
        Employees: 1540,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 91",
        Country: "GB",
        PostalCode: "TD6 9LD",
        Latitude: 54.9736715,
        Longitude: -1.6116932,
        Revenue: 941870,
        Employees: 9481,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 92",
        Country: "GB",
        PostalCode: "SY13 1AF",
        Latitude: 52.20487,
        Longitude: 0.12149,
        Revenue: 951784,
        Employees: 9414,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 93",
        Country: "GB",
        PostalCode: "UB7 7LR",
        Latitude: 51.5669985,
        Longitude: 0.2679697,
        Revenue: 318414,
        Employees: 3002,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 94",
        Country: "GB",
        PostalCode: "CF48 2YF",
        Latitude: 51.5993586,
        Longitude: 0.1639093,
        Revenue: 614020,
        Employees: 7395,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 95",
        Country: "GB",
        PostalCode: "NG25 0HQ",
        Latitude: 53.8662344,
        Longitude: -1.6793001,
        Revenue: 832795,
        Employees: 707,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 96",
        Country: "GB",
        PostalCode: "G11 6RH",
        Latitude: 50.3381302,
        Longitude: -4.7947326,
        Revenue: 441817,
        Employees: 5890,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 97",
        Country: "GB",
        PostalCode: "KA26 9EU",
        Latitude: 50.6103135,
        Longitude: -2.4543558,
        Revenue: 558993,
        Employees: 5436,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 98",
        Country: "GB",
        PostalCode: "SG17 5AE",
        Latitude: 55.4212287,
        Longitude: -2.7894043,
        Revenue: 113637,
        Employees: 2254,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 99",
        Country: "GB",
        PostalCode: "EH48 2ES",
        Latitude: 51.53396,
        Longitude: 0.03621,
        Revenue: 839362,
        Employees: 4742,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 100",
        Country: "GB",
        PostalCode: "DN15 8GR",
        Latitude: 51.51908,
        Longitude: -0.15057,
        Revenue: 371716,
        Employees: 8513,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 101",
        Country: "GB",
        PostalCode: "BH14 9DS",
        Latitude: 52.9471826,
        Longitude: -1.183599,
        Revenue: 777686,
        Employees: 4032,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 102",
        Country: "GB",
        PostalCode: "CW8 3EU",
        Latitude: 52.1928943,
        Longitude: -2.2200999,
        Revenue: 754632,
        Employees: 4270,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 103",
        Country: "GB",
        PostalCode: "CV21 2JR",
        Latitude: 51.61424,
        Longitude: -0.27601,
        Revenue: 591803,
        Employees: 2242,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 104",
        Country: "GB",
        PostalCode: "NR35 1AW",
        Latitude: 51.0903758,
        Longitude: -1.1616415,
        Revenue: 904852,
        Employees: 537,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 105",
        Country: "GB",
        PostalCode: "SR4 9AS",
        Latitude: 51.0045895,
        Longitude: -0.9383451,
        Revenue: 363420,
        Employees: 3699,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 106",
        Country: "GB",
        PostalCode: "NE22 5UA",
        Latitude: 51.1104189,
        Longitude: -0.7534321,
        Revenue: 685651,
        Employees: 3171,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 107",
        Country: "GB",
        PostalCode: "WF9 2SE",
        Latitude: 51.1120462,
        Longitude: -1.0427758,
        Revenue: 724616,
        Employees: 3873,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 108",
        Country: "GB",
        PostalCode: "CT1 2BE",
        Latitude: 52.5628,
        Longitude: -1.82334,
        Revenue: 281434,
        Employees: 990,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 109",
        Country: "GB",
        PostalCode: "DA1 1DR",
        Latitude: 53.7494866,
        Longitude: -0.3518043,
        Revenue: 720268,
        Employees: 5727,
        Industry: "Healthcare"
      },
      {
        Name: "UK Account 110",
        Country: "GB",
        PostalCode: "CB2 3BZ",
        Latitude: 52.7070894,
        Longitude: -2.756634,
        Revenue: 132154,
        Employees: 1079,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 111",
        Country: "GB",
        PostalCode: "CF42 6AY",
        Latitude: 53.7244746,
        Longitude: -1.7139579,
        Revenue: 190417,
        Employees: 3383,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 112",
        Country: "GB",
        PostalCode: "CH48 4HB",
        Latitude: 51.8240277,
        Longitude: -0.3655824,
        Revenue: 203309,
        Employees: 7052,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 113",
        Country: "GB",
        PostalCode: "BS20 6AH",
        Latitude: 52.5706078,
        Longitude: -0.2421551,
        Revenue: 431924,
        Employees: 6579,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 114",
        Country: "GB",
        PostalCode: "SL1 4XP",
        Latitude: 50.7004278,
        Longitude: -1.2898892,
        Revenue: 29711,
        Employees: 6012,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 115",
        Country: "GB",
        PostalCode: "NW10 4LT",
        Latitude: 50.8184185,
        Longitude: -1.0784934,
        Revenue: 867574,
        Employees: 898,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 116",
        Country: "GB",
        PostalCode: "SK17 6DF",
        Latitude: 52.4462559,
        Longitude: -1.8875794,
        Revenue: 885416,
        Employees: 299,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 117",
        Country: "GB",
        PostalCode: "LS22 6LQ",
        Latitude: 52.3984738,
        Longitude: -1.9611151,
        Revenue: 849043,
        Employees: 2947,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 118",
        Country: "GB",
        PostalCode: "PR4 5PB",
        Latitude: 51.41529,
        Longitude: -0.75158,
        Revenue: 294664,
        Employees: 9988,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 119",
        Country: "GB",
        PostalCode: "ML3 7EF",
        Latitude: 51.2921683,
        Longitude: 0.3056507,
        Revenue: 950048,
        Employees: 1983,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 120",
        Country: "GB",
        PostalCode: "L3 7HY",
        Latitude: 55.9577817,
        Longitude: -3.2033237,
        Revenue: 931897,
        Employees: 5756,
        Industry: "Financial Services"
      },
      {
        Name: "UK Account 121",
        Country: "GB",
        PostalCode: "ME12 1NS",
        Latitude: 53.4560465,
        Longitude: -2.1163953,
        Revenue: 874009,
        Employees: 2772,
        Industry: "Aerospace"
      },
      {
        Name: "UK Account 122",
        Country: "GB",
        PostalCode: "CH1 1EF",
        Latitude: 52.5265449,
        Longitude: -1.8372519,
        Revenue: 107251,
        Employees: 4443,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 123",
        Country: "GB",
        PostalCode: "SS6 7EF",
        Latitude: 51.4830228,
        Longitude: -3.1725379,
        Revenue: 320240,
        Employees: 6913,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 124",
        Country: "GB",
        PostalCode: "NN11 4AA",
        Latitude: 51.4934719,
        Longitude: -3.1688968,
        Revenue: 33004,
        Employees: 6375,
        Industry: "Manufacturing"
      },
      {
        Name: "UK Account 125",
        Country: "GB",
        PostalCode: "SW19 1QD",
        Latitude: 52.4728758,
        Longitude: -2.080262,
        Revenue: 277021,
        Employees: 3915,
        Industry: "Manufacturing"
      },
      {
        Name: "US Account 1",
        Country: "US",
        PostalCode: 53562,
        Latitude: 43.11545885,
        Longitude: -89.54271798,
        Revenue: 593036,
        Employees: 4683,
        Industry: "Healthcare",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 2",
        Country: "US",
        PostalCode: 90013,
        Latitude: 34.04431432,
        Longitude: -118.2408214,
        Revenue: 580463,
        Employees: 5044,
        Industry: "Financial Services",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 3",
        Country: "US",
        PostalCode: 35294,
        Latitude: 33.50863888,
        Longitude: -86.80256049,
        Revenue: 586294,
        Employees: 5283,
        Industry: "Financial Services",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 4",
        Country: "US",
        PostalCode: 48154,
        Latitude: 42.39744244,
        Longitude: -83.37262657,
        Revenue: 656965,
        Employees: 5360,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 5",
        Country: "US",
        PostalCode: 84759,
        Latitude: 37.78656405,
        Longitude: -112.4480389,
        Revenue: 352849,
        Employees: 2012,
        Industry: "Manufacturing",
        BoundaryId: "USA_Utah"
      },
      {
        Name: "US Account 6",
        Country: "US",
        PostalCode: 77521,
        Latitude: 29.80375667,
        Longitude: -94.960824,
        Revenue: 176320,
        Employees: 697,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 7",
        Country: "US",
        PostalCode: 85282,
        Latitude: 33.39302292,
        Longitude: -111.9317444,
        Revenue: 552358,
        Employees: 1107,
        Industry: "Financial Services",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 8",
        Country: "US",
        PostalCode: 30705,
        Latitude: 34.72911334,
        Longitude: -84.76283913,
        Revenue: 55472,
        Employees: 150,
        Industry: "Manufacturing",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 9",
        Country: "US",
        PostalCode: 48038,
        Latitude: 42.60509066,
        Longitude: -82.94144003,
        Revenue: 183958,
        Employees: 3304,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 10",
        Country: "US",
        PostalCode: 30034,
        Latitude: 33.69146658,
        Longitude: -84.24927347,
        Revenue: 95146,
        Employees: 6386,
        Industry: "Manufacturing",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 11",
        Country: "US",
        PostalCode: 39401,
        Latitude: 31.21211252,
        Longitude: -89.26812911,
        Revenue: 848558,
        Employees: 2579,
        Industry: "Financial Services",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 12",
        Country: "US",
        PostalCode: 95616,
        Latitude: 38.55792996,
        Longitude: -121.804037,
        Revenue: 420815,
        Employees: 2293,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 13",
        Country: "US",
        PostalCode: 75243,
        Latitude: 32.91179428,
        Longitude: -96.73663776,
        Revenue: 458176,
        Employees: 7169,
        Industry: "Manufacturing",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 14",
        Country: "US",
        PostalCode: 7621,
        Latitude: 40.92401821,
        Longitude: -73.9978,
        Revenue: 381763,
        Employees: 2714,
        Industry: "Financial Services",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 15",
        Country: "US",
        PostalCode: 47882,
        Latitude: 39.08900525,
        Longitude: -87.40980038,
        Revenue: 854506,
        Employees: 9470,
        Industry: "Healthcare",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 16",
        Country: "US",
        PostalCode: 33901,
        Latitude: 26.62055535,
        Longitude: -81.87778965,
        Revenue: 594853,
        Employees: 2551,
        Industry: "Manufacturing",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 17",
        Country: "US",
        PostalCode: 77070,
        Latitude: 29.97861002,
        Longitude: -95.57327062,
        Revenue: 206335,
        Employees: 7735,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 18",
        Country: "US",
        PostalCode: 27612,
        Latitude: 35.85472572,
        Longitude: -78.70608215,
        Revenue: 847324,
        Employees: 9866,
        Industry: "Manufacturing",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 19",
        Country: "US",
        PostalCode: 87102,
        Latitude: 35.08278445,
        Longitude: -106.6458316,
        Revenue: 316893,
        Employees: 8051,
        Industry: "Healthcare",
        BoundaryId: "USA_New Mexico"
      },
      {
        Name: "US Account 20",
        Country: "US",
        PostalCode: 91504,
        Latitude: 34.20314699,
        Longitude: -118.3293422,
        Revenue: 414021,
        Employees: 3543,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 21",
        Country: "US",
        PostalCode: 42101,
        Latitude: 37.06520665,
        Longitude: -86.47971479,
        Revenue: 59383,
        Employees: 1010,
        Industry: "Aerospace",
        BoundaryId: "USA_Kentucky"
      },
      {
        Name: "US Account 22",
        Country: "US",
        PostalCode: 4106,
        Latitude: 43.63020364,
        Longitude: -70.29157867,
        Revenue: 538905,
        Employees: 2704,
        Industry: "Aerospace",
        BoundaryId: "USA_Maine"
      },
      {
        Name: "US Account 23",
        Country: "US",
        PostalCode: 10601,
        Latitude: 41.03284585,
        Longitude: -73.76500263,
        Revenue: 189057,
        Employees: 3766,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 24",
        Country: "US",
        PostalCode: 19134,
        Latitude: 39.98884717,
        Longitude: -75.10497237,
        Revenue: 517295,
        Employees: 2338,
        Industry: "Manufacturing",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 25",
        Country: "US",
        PostalCode: 16148,
        Latitude: 41.22698093,
        Longitude: -80.42850847,
        Revenue: 413384,
        Employees: 1179,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 26",
        Country: "US",
        PostalCode: 53703,
        Latitude: 43.07292229,
        Longitude: -89.37489569,
        Revenue: 851369,
        Employees: 2379,
        Industry: "Manufacturing",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 27",
        Country: "US",
        PostalCode: 31730,
        Latitude: 31.2128272,
        Longitude: -84.27634961,
        Revenue: 253895,
        Employees: 1975,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 28",
        Country: "US",
        PostalCode: 79902,
        Latitude: 31.78438808,
        Longitude: -106.4969402,
        Revenue: 975185,
        Employees: 3743,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 29",
        Country: "US",
        PostalCode: 22101,
        Latitude: 38.93827591,
        Longitude: -77.16500852,
        Revenue: 361605,
        Employees: 7003,
        Industry: "Healthcare",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 30",
        Country: "US",
        PostalCode: 11757,
        Latitude: 40.68937769,
        Longitude: -73.37202272,
        Revenue: 200940,
        Employees: 2713,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 31",
        Country: "US",
        PostalCode: 61270,
        Latitude: 41.8311788,
        Longitude: -89.96787033,
        Revenue: 482361,
        Employees: 2640,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 32",
        Country: "US",
        PostalCode: 90240,
        Latitude: 33.95693217,
        Longitude: -118.1183623,
        Revenue: 716515,
        Employees: 8307,
        Industry: "Financial Services",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 33",
        Country: "US",
        PostalCode: 29501,
        Latitude: 34.20891388,
        Longitude: -79.82384013,
        Revenue: 6471,
        Employees: 4192,
        Industry: "Financial Services",
        BoundaryId: "USA_South Carolina"
      },
      {
        Name: "US Account 34",
        Country: "US",
        PostalCode: 83651,
        Latitude: 43.58807035,
        Longitude: -116.6177631,
        Revenue: 311831,
        Employees: 7898,
        Industry: "Manufacturing",
        BoundaryId: "USA_Idaho"
      },
      {
        Name: "US Account 35",
        Country: "US",
        PostalCode: 43207,
        Latitude: 39.89524867,
        Longitude: -82.96284708,
        Revenue: 717094,
        Employees: 394,
        Industry: "Healthcare",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 36",
        Country: "US",
        PostalCode: 48043,
        Latitude: 42.59793969,
        Longitude: -82.88258513,
        Revenue: 397249,
        Employees: 5042,
        Industry: "Manufacturing",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 37",
        Country: "US",
        PostalCode: 57501,
        Latitude: 44.52100308,
        Longitude: -100.305031,
        Revenue: 608011,
        Employees: 6036,
        Industry: "Aerospace",
        BoundaryId: "USA_South Dakota"
      },
      {
        Name: "US Account 38",
        Country: "US",
        PostalCode: 48334,
        Latitude: 42.50631897,
        Longitude: -83.35031033,
        Revenue: 721593,
        Employees: 5305,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 39",
        Country: "US",
        PostalCode: 94598,
        Latitude: 37.90314772,
        Longitude: -121.9979295,
        Revenue: 767418,
        Employees: 1165,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 40",
        Country: "US",
        PostalCode: 7093,
        Latitude: 40.78680871,
        Longitude: -74.00897324,
        Revenue: 692119,
        Employees: 2894,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 41",
        Country: "US",
        PostalCode: 19122,
        Latitude: 39.97758307,
        Longitude: -75.14601506,
        Revenue: 12239,
        Employees: 7706,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 42",
        Country: "US",
        PostalCode: 21211,
        Latitude: 39.33128902,
        Longitude: -76.6388595,
        Revenue: 754827,
        Employees: 3873,
        Industry: "Healthcare",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 43",
        Country: "US",
        PostalCode: 30059,
        Latitude: 33.81625673,
        Longitude: -84.55132242,
        Revenue: 772336,
        Employees: 2483,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 44",
        Country: "US",
        PostalCode: 61252,
        Latitude: 41.84447595,
        Longitude: -90.12280544,
        Revenue: 403380,
        Employees: 7614,
        Industry: "Financial Services",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 45",
        Country: "US",
        PostalCode: 59101,
        Latitude: 45.6344636,
        Longitude: -108.3628186,
        Revenue: 22071,
        Employees: 7206,
        Industry: "Healthcare",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 46",
        Country: "US",
        PostalCode: 32792,
        Latitude: 28.61073491,
        Longitude: -81.29958514,
        Revenue: 170685,
        Employees: 610,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 47",
        Country: "US",
        PostalCode: 61401,
        Latitude: 40.94738847,
        Longitude: -90.38752255,
        Revenue: 911354,
        Employees: 7644,
        Industry: "Financial Services",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 48",
        Country: "US",
        PostalCode: 38967,
        Latitude: 33.48238412,
        Longitude: -89.7397559,
        Revenue: 77840,
        Employees: 3645,
        Industry: "Financial Services",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 49",
        Country: "US",
        PostalCode: 93277,
        Latitude: 36.29942015,
        Longitude: -119.3819484,
        Revenue: 19850,
        Employees: 1907,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 50",
        Country: "US",
        PostalCode: 87110,
        Latitude: 35.10871818,
        Longitude: -106.5775399,
        Revenue: 65501,
        Employees: 3018,
        Industry: "Financial Services",
        BoundaryId: "USA_New Mexico"
      },
      {
        Name: "US Account 51",
        Country: "US",
        PostalCode: 35758,
        Latitude: 34.71284032,
        Longitude: -86.74605794,
        Revenue: 754688,
        Employees: 8368,
        Industry: "Manufacturing",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 52",
        Country: "US",
        PostalCode: 62002,
        Latitude: 38.94172651,
        Longitude: -90.1295491,
        Revenue: 121906,
        Employees: 8677,
        Industry: "Financial Services",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 53",
        Country: "US",
        PostalCode: 98037,
        Latitude: 47.83886284,
        Longitude: -122.2856245,
        Revenue: 521059,
        Employees: 6166,
        Industry: "Manufacturing",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 54",
        Country: "US",
        PostalCode: 58801,
        Latitude: 48.22741958,
        Longitude: -103.7288685,
        Revenue: 89016,
        Employees: 5802,
        Industry: "Aerospace",
        BoundaryId: "USA_North Dakota"
      },
      {
        Name: "US Account 55",
        Country: "US",
        PostalCode: 34950,
        Latitude: 27.44534193,
        Longitude: -80.33528974,
        Revenue: 185858,
        Employees: 8079,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 56",
        Country: "US",
        PostalCode: 30269,
        Latitude: 33.39460204,
        Longitude: -84.5706371,
        Revenue: 342946,
        Employees: 5214,
        Industry: "Manufacturing",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 57",
        Country: "US",
        PostalCode: 60115,
        Latitude: 41.89940317,
        Longitude: -88.75051178,
        Revenue: 539015,
        Employees: 9270,
        Industry: "Financial Services",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 58",
        Country: "US",
        PostalCode: 78404,
        Latitude: 27.76805087,
        Longitude: -97.39929908,
        Revenue: 248396,
        Employees: 3398,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 59",
        Country: "US",
        PostalCode: 37172,
        Latitude: 36.53672963,
        Longitude: -86.85847033,
        Revenue: 824763,
        Employees: 566,
        Industry: "Financial Services",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 60",
        Country: "US",
        PostalCode: 60640,
        Latitude: 41.97128719,
        Longitude: -87.65996917,
        Revenue: 886951,
        Employees: 2625,
        Industry: "Healthcare",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 61",
        Country: "US",
        PostalCode: 63125,
        Latitude: 38.51891355,
        Longitude: -90.2919982,
        Revenue: 876577,
        Employees: 3954,
        Industry: "Manufacturing",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 62",
        Country: "US",
        PostalCode: 44305,
        Latitude: 41.07656194,
        Longitude: -81.46185857,
        Revenue: 222687,
        Employees: 4999,
        Industry: "Healthcare",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 63",
        Country: "US",
        PostalCode: 75080,
        Latitude: 32.97398876,
        Longitude: -96.74279666,
        Revenue: 213580,
        Employees: 7808,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 64",
        Country: "US",
        PostalCode: 60612,
        Latitude: 41.88053976,
        Longitude: -87.68764884,
        Revenue: 19342,
        Employees: 3475,
        Industry: "Manufacturing",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 65",
        Country: "US",
        PostalCode: 14580,
        Latitude: 43.21965762,
        Longitude: -77.44539549,
        Revenue: 813208,
        Employees: 3235,
        Industry: "Manufacturing",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 66",
        Country: "US",
        PostalCode: 15601,
        Latitude: 40.31562541,
        Longitude: -79.53336167,
        Revenue: 853619,
        Employees: 8853,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 67",
        Country: "US",
        PostalCode: 34102,
        Latitude: 26.14148849,
        Longitude: -81.79712455,
        Revenue: 969105,
        Employees: 94,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 68",
        Country: "US",
        PostalCode: 77057,
        Latitude: 29.74523556,
        Longitude: -95.48852391,
        Revenue: 473107,
        Employees: 5068,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 69",
        Country: "US",
        PostalCode: 48150,
        Latitude: 42.36852989,
        Longitude: -83.37246137,
        Revenue: 127643,
        Employees: 7468,
        Industry: "Aerospace",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 70",
        Country: "US",
        PostalCode: 20755,
        Latitude: 39.08166553,
        Longitude: -76.76083141,
        Revenue: 716069,
        Employees: 4556,
        Industry: "Manufacturing",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 71",
        Country: "US",
        PostalCode: 6606,
        Latitude: 41.21192789,
        Longitude: -73.20726846,
        Revenue: 254801,
        Employees: 171,
        Industry: "Healthcare",
        BoundaryId: "USA_Connecticut"
      },
      {
        Name: "US Account 72",
        Country: "US",
        PostalCode: 14129,
        Latitude: 42.47339735,
        Longitude: -79.00742139,
        Revenue: 968575,
        Employees: 8859,
        Industry: "Manufacturing",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 73",
        Country: "US",
        PostalCode: 25304,
        Latitude: 38.28843846,
        Longitude: -81.60443047,
        Revenue: 568136,
        Employees: 1355,
        Industry: "Manufacturing",
        BoundaryId: "USA_West Virginia"
      },
      {
        Name: "US Account 74",
        Country: "US",
        PostalCode: 37821,
        Latitude: 35.97663637,
        Longitude: -83.19642344,
        Revenue: 268219,
        Employees: 7924,
        Industry: "Aerospace",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 75",
        Country: "US",
        PostalCode: 10019,
        Latitude: 40.76622582,
        Longitude: -73.99272211,
        Revenue: 218300,
        Employees: 9612,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 76",
        Country: "US",
        PostalCode: 97062,
        Latitude: 45.36888464,
        Longitude: -122.7619799,
        Revenue: 671131,
        Employees: 8108,
        Industry: "Aerospace",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 77",
        Country: "US",
        PostalCode: 30326,
        Latitude: 33.8495152,
        Longitude: -84.36308888,
        Revenue: 848469,
        Employees: 5342,
        Industry: "Financial Services",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 78",
        Country: "US",
        PostalCode: 30040,
        Latitude: 34.2159737,
        Longitude: -84.17955159,
        Revenue: 722991,
        Employees: 1450,
        Industry: "Manufacturing",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 79",
        Country: "US",
        PostalCode: 32724,
        Latitude: 29.07945386,
        Longitude: -81.236001,
        Revenue: 433725,
        Employees: 7836,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 80",
        Country: "US",
        PostalCode: 14025,
        Latitude: 42.62248376,
        Longitude: -78.72562981,
        Revenue: 163695,
        Employees: 3161,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 81",
        Country: "US",
        PostalCode: 48843,
        Latitude: 42.56975288,
        Longitude: -83.92378799,
        Revenue: 70846,
        Employees: 2700,
        Industry: "Manufacturing",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 82",
        Country: "US",
        PostalCode: 37814,
        Latitude: 36.23642684,
        Longitude: -83.33077964,
        Revenue: 511502,
        Employees: 4504,
        Industry: "Financial Services",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 83",
        Country: "US",
        PostalCode: 84651,
        Latitude: 40.02251023,
        Longitude: -111.7306386,
        Revenue: 579886,
        Employees: 4652,
        Industry: "Aerospace",
        BoundaryId: "USA_Utah"
      },
      {
        Name: "US Account 84",
        Country: "US",
        PostalCode: 75240,
        Latitude: 32.93298027,
        Longitude: -96.78729011,
        Revenue: 649366,
        Employees: 8542,
        Industry: "Manufacturing",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 85",
        Country: "US",
        PostalCode: 19149,
        Latitude: 40.03675114,
        Longitude: -75.06559087,
        Revenue: 149799,
        Employees: 6984,
        Industry: "Aerospace",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 86",
        Country: "US",
        PostalCode: 60640,
        Latitude: 41.97128719,
        Longitude: -87.65996917,
        Revenue: 955321,
        Employees: 4805,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 87",
        Country: "US",
        PostalCode: 6105,
        Latitude: 41.77195269,
        Longitude: -72.70170837,
        Revenue: 734714,
        Employees: 4413,
        Industry: "Manufacturing",
        BoundaryId: "USA_Connecticut"
      },
      {
        Name: "US Account 88",
        Country: "US",
        PostalCode: 59701,
        Latitude: 46.00079129,
        Longitude: -112.5518911,
        Revenue: 913323,
        Employees: 894,
        Industry: "Manufacturing",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 89",
        Country: "US",
        PostalCode: 38201,
        Latitude: 36.12396773,
        Longitude: -88.53236354,
        Revenue: 874348,
        Employees: 5030,
        Industry: "Financial Services",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 90",
        Country: "US",
        PostalCode: 97140,
        Latitude: 45.35452863,
        Longitude: -122.863197,
        Revenue: 57522,
        Employees: 2089,
        Industry: "Aerospace",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 91",
        Country: "US",
        PostalCode: 68901,
        Latitude: 40.58892485,
        Longitude: -98.39094682,
        Revenue: 800340,
        Employees: 2218,
        Industry: "Aerospace",
        BoundaryId: "USA_Nebraska"
      },
      {
        Name: "US Account 92",
        Country: "US",
        PostalCode: 35055,
        Latitude: 34.15415155,
        Longitude: -86.76108948,
        Revenue: 865523,
        Employees: 4699,
        Industry: "Healthcare",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 93",
        Country: "US",
        PostalCode: 46013,
        Latitude: 40.05141345,
        Longitude: -85.6796199,
        Revenue: 747640,
        Employees: 5572,
        Industry: "Healthcare",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 94",
        Country: "US",
        PostalCode: 32504,
        Latitude: 30.48445106,
        Longitude: -87.19092759,
        Revenue: 921028,
        Employees: 8487,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 95",
        Country: "US",
        PostalCode: 59072,
        Latitude: 46.51637604,
        Longitude: -108.5750032,
        Revenue: 183336,
        Employees: 9521,
        Industry: "Healthcare",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 96",
        Country: "US",
        PostalCode: 37919,
        Latitude: 35.9149329,
        Longitude: -84.00184823,
        Revenue: 861080,
        Employees: 7256,
        Industry: "Aerospace",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 97",
        Country: "US",
        PostalCode: 11710,
        Latitude: 40.67575999,
        Longitude: -73.53313034,
        Revenue: 590819,
        Employees: 6969,
        Industry: "Manufacturing",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 98",
        Country: "US",
        PostalCode: 33317,
        Latitude: 26.11271504,
        Longitude: -80.22658259,
        Revenue: 7686,
        Employees: 4968,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 99",
        Country: "US",
        PostalCode: 98531,
        Latitude: 46.73916092,
        Longitude: -122.9501608,
        Revenue: 744097,
        Employees: 9390,
        Industry: "Financial Services",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 100",
        Country: "US",
        PostalCode: 31401,
        Latitude: 32.072629,
        Longitude: -81.08756275,
        Revenue: 590708,
        Employees: 5810,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 101",
        Country: "US",
        PostalCode: 95366,
        Latitude: 37.76423648,
        Longitude: -121.1258517,
        Revenue: 182799,
        Employees: 6549,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 102",
        Country: "US",
        PostalCode: 30240,
        Latitude: 33.03985177,
        Longitude: -85.1227458,
        Revenue: 119841,
        Employees: 4975,
        Industry: "Manufacturing",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 103",
        Country: "US",
        PostalCode: 51040,
        Latitude: 42.0173498,
        Longitude: -96.07003861,
        Revenue: 14176,
        Employees: 8664,
        Industry: "Healthcare",
        BoundaryId: "USA_Iowa"
      },
      {
        Name: "US Account 104",
        Country: "US",
        PostalCode: 60187,
        Latitude: 41.87279301,
        Longitude: -88.11204036,
        Revenue: 680650,
        Employees: 9126,
        Industry: "Financial Services",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 105",
        Country: "US",
        PostalCode: 15938,
        Latitude: 40.42390627,
        Longitude: -78.61469678,
        Revenue: 725068,
        Employees: 1550,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 106",
        Country: "US",
        PostalCode: 42167,
        Latitude: 36.72303655,
        Longitude: -85.67264055,
        Revenue: 550356,
        Employees: 6899,
        Industry: "Manufacturing",
        BoundaryId: "USA_Kentucky"
      },
      {
        Name: "US Account 107",
        Country: "US",
        PostalCode: 43078,
        Latitude: 40.11432573,
        Longitude: -83.778796,
        Revenue: 585285,
        Employees: 5108,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 108",
        Country: "US",
        PostalCode: 55112,
        Latitude: 45.07655502,
        Longitude: -93.19125772,
        Revenue: 506308,
        Employees: 8069,
        Industry: "Healthcare",
        BoundaryId: "USA_Minnesota"
      },
      {
        Name: "US Account 109",
        Country: "US",
        PostalCode: 10954,
        Latitude: 41.09950192,
        Longitude: -74.0123553,
        Revenue: 834355,
        Employees: 6503,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 110",
        Country: "US",
        PostalCode: 97206,
        Latitude: 45.48131809,
        Longitude: -122.5989757,
        Revenue: 177165,
        Employees: 4403,
        Industry: "Manufacturing",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 111",
        Country: "US",
        PostalCode: 10454,
        Latitude: 40.80564064,
        Longitude: -73.91586636,
        Revenue: 990190,
        Employees: 1496,
        Industry: "Manufacturing",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 112",
        Country: "US",
        PostalCode: 35206,
        Latitude: 33.56991152,
        Longitude: -86.71650872,
        Revenue: 461031,
        Employees: 9975,
        Industry: "Healthcare",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 113",
        Country: "US",
        PostalCode: 29340,
        Latitude: 34.98279988,
        Longitude: -81.59375476,
        Revenue: 835472,
        Employees: 6512,
        Industry: "Healthcare",
        BoundaryId: "USA_South Carolina"
      },
      {
        Name: "US Account 114",
        Country: "US",
        PostalCode: 18017,
        Latitude: 40.66030522,
        Longitude: -75.3851154,
        Revenue: 598346,
        Employees: 1181,
        Industry: "Healthcare",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 115",
        Country: "US",
        PostalCode: 48341,
        Latitude: 42.62699445,
        Longitude: -83.29577978,
        Revenue: 388071,
        Employees: 880,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 116",
        Country: "US",
        PostalCode: 19125,
        Latitude: 39.97541077,
        Longitude: -75.12434298,
        Revenue: 707651,
        Employees: 5307,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 117",
        Country: "US",
        PostalCode: 60174,
        Latitude: 41.92628718,
        Longitude: -88.29907352,
        Revenue: 747914,
        Employees: 9137,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 118",
        Country: "US",
        PostalCode: 49770,
        Latitude: 45.34193789,
        Longitude: -84.89224348,
        Revenue: 817206,
        Employees: 249,
        Industry: "Manufacturing",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 119",
        Country: "US",
        PostalCode: 39345,
        Latitude: 32.2973571,
        Longitude: -89.15259532,
        Revenue: 266890,
        Employees: 4791,
        Industry: "Manufacturing",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 120",
        Country: "US",
        PostalCode: 50511,
        Latitude: 43.07678206,
        Longitude: -94.21307904,
        Revenue: 975226,
        Employees: 2641,
        Industry: "Financial Services",
        BoundaryId: "USA_Iowa"
      },
      {
        Name: "US Account 121",
        Country: "US",
        PostalCode: 75208,
        Latitude: 32.75338519,
        Longitude: -96.84000771,
        Revenue: 907779,
        Employees: 2734,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 122",
        Country: "US",
        PostalCode: 48075,
        Latitude: 42.46235515,
        Longitude: -83.23065839,
        Revenue: 819490,
        Employees: 6863,
        Industry: "Financial Services",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 123",
        Country: "US",
        PostalCode: 95361,
        Latitude: 37.7849076,
        Longitude: -120.7827188,
        Revenue: 534132,
        Employees: 8087,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 124",
        Country: "US",
        PostalCode: 19122,
        Latitude: 39.97758307,
        Longitude: -75.14601506,
        Revenue: 747666,
        Employees: 7737,
        Industry: "Healthcare",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 125",
        Country: "US",
        PostalCode: 34601,
        Latitude: 28.5914156,
        Longitude: -82.36139611,
        Revenue: 263204,
        Employees: 9008,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 126",
        Country: "US",
        PostalCode: 27330,
        Latitude: 35.51709686,
        Longitude: -79.18754769,
        Revenue: 363294,
        Employees: 4680,
        Industry: "Manufacturing",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 127",
        Country: "US",
        PostalCode: 36330,
        Latitude: 31.34016845,
        Longitude: -85.84762225,
        Revenue: 87456,
        Employees: 2465,
        Industry: "Aerospace",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 128",
        Country: "US",
        PostalCode: 44221,
        Latitude: 41.13952358,
        Longitude: -81.47630237,
        Revenue: 368238,
        Employees: 3755,
        Industry: "Healthcare",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 129",
        Country: "US",
        PostalCode: 65453,
        Latitude: 38.11329649,
        Longitude: -91.42229386,
        Revenue: 848113,
        Employees: 8648,
        Industry: "Financial Services",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 130",
        Country: "US",
        PostalCode: 91405,
        Latitude: 34.20115122,
        Longitude: -118.4478406,
        Revenue: 537793,
        Employees: 2239,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 131",
        Country: "US",
        PostalCode: 31201,
        Latitude: 32.82688331,
        Longitude: -83.62376907,
        Revenue: 56423,
        Employees: 6157,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 132",
        Country: "US",
        PostalCode: 28227,
        Latitude: 35.18724166,
        Longitude: -80.65073215,
        Revenue: 556991,
        Employees: 7571,
        Industry: "Financial Services",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 133",
        Country: "US",
        PostalCode: 46224,
        Latitude: 39.79621945,
        Longitude: -86.25641093,
        Revenue: 260971,
        Employees: 5379,
        Industry: "Financial Services",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 134",
        Country: "US",
        PostalCode: 95482,
        Latitude: 39.14688702,
        Longitude: -123.2412186,
        Revenue: 353066,
        Employees: 4269,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 135",
        Country: "US",
        PostalCode: 98371,
        Latitude: 47.20030328,
        Longitude: -122.3233088,
        Revenue: 581550,
        Employees: 9032,
        Industry: "Aerospace",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 136",
        Country: "US",
        PostalCode: 97701,
        Latitude: 44.1138635,
        Longitude: -121.2614096,
        Revenue: 187598,
        Employees: 4224,
        Industry: "Financial Services",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 137",
        Country: "US",
        PostalCode: 68108,
        Latitude: 41.23877147,
        Longitude: -95.93087146,
        Revenue: 113578,
        Employees: 2024,
        Industry: "Healthcare",
        BoundaryId: "USA_Nebraska"
      },
      {
        Name: "US Account 138",
        Country: "US",
        PostalCode: 60201,
        Latitude: 42.05678976,
        Longitude: -87.69822178,
        Revenue: 514002,
        Employees: 4753,
        Industry: "Manufacturing",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 139",
        Country: "US",
        PostalCode: 34292,
        Latitude: 27.1060964,
        Longitude: -82.33725715,
        Revenue: 476961,
        Employees: 4347,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 140",
        Country: "US",
        PostalCode: 33155,
        Latitude: 25.73665135,
        Longitude: -80.31118968,
        Revenue: 126666,
        Employees: 4152,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 141",
        Country: "US",
        PostalCode: 1109,
        Latitude: 42.11707511,
        Longitude: -72.54750099,
        Revenue: 381616,
        Employees: 7530,
        Industry: "Financial Services",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 142",
        Country: "US",
        PostalCode: 77068,
        Latitude: 30.00582205,
        Longitude: -95.48691796,
        Revenue: 124329,
        Employees: 499,
        Industry: "Aerospace",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 143",
        Country: "US",
        PostalCode: 90247,
        Latitude: 33.89127699,
        Longitude: -118.2980142,
        Revenue: 280887,
        Employees: 2467,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 144",
        Country: "US",
        PostalCode: 34741,
        Latitude: 28.30462193,
        Longitude: -81.42555833,
        Revenue: 422243,
        Employees: 1128,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 145",
        Country: "US",
        PostalCode: 22903,
        Latitude: 38.01431698,
        Longitude: -78.60035705,
        Revenue: 371465,
        Employees: 6849,
        Industry: "Manufacturing",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 146",
        Country: "US",
        PostalCode: 48307,
        Latitude: 42.65987383,
        Longitude: -83.12304958,
        Revenue: 313955,
        Employees: 6461,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 147",
        Country: "US",
        PostalCode: 29569,
        Latitude: 34.03447357,
        Longitude: -78.90432285,
        Revenue: 779408,
        Employees: 1333,
        Industry: "Aerospace",
        BoundaryId: "USA_South Carolina"
      },
      {
        Name: "US Account 148",
        Country: "US",
        PostalCode: 98664,
        Latitude: 45.61997245,
        Longitude: -122.5778727,
        Revenue: 685588,
        Employees: 4710,
        Industry: "Financial Services",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 149",
        Country: "US",
        PostalCode: 90815,
        Latitude: 33.7962852,
        Longitude: -118.1161068,
        Revenue: 728580,
        Employees: 1488,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 150",
        Country: "US",
        PostalCode: 66044,
        Latitude: 39.03307808,
        Longitude: -95.21147147,
        Revenue: 366379,
        Employees: 5280,
        Industry: "Financial Services",
        BoundaryId: "USA_Kansas"
      },
      {
        Name: "US Account 151",
        Country: "US",
        PostalCode: 60134,
        Latitude: 41.87876081,
        Longitude: -88.34105904,
        Revenue: 45787,
        Employees: 3400,
        Industry: "Manufacturing",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 152",
        Country: "US",
        PostalCode: 31905,
        Latitude: 32.37720812,
        Longitude: -84.80963289,
        Revenue: 253442,
        Employees: 3489,
        Industry: "Aerospace",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 153",
        Country: "US",
        PostalCode: 91932,
        Latitude: 32.57525946,
        Longitude: -117.119031,
        Revenue: 898633,
        Employees: 2506,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 154",
        Country: "US",
        PostalCode: 8540,
        Latitude: 40.36533136,
        Longitude: -74.65808773,
        Revenue: 941829,
        Employees: 2393,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 155",
        Country: "US",
        PostalCode: 20006,
        Latitude: 38.89607365,
        Longitude: -77.039569,
        Revenue: 331912,
        Employees: 6238,
        Industry: "Manufacturing"
      },
      {
        Name: "US Account 156",
        Country: "US",
        PostalCode: 48170,
        Latitude: 42.36782664,
        Longitude: -83.53277119,
        Revenue: 76301,
        Employees: 6279,
        Industry: "Financial Services",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 157",
        Country: "US",
        PostalCode: 45214,
        Latitude: 39.1209847,
        Longitude: -84.54376838,
        Revenue: 497477,
        Employees: 3750,
        Industry: "Healthcare",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 158",
        Country: "US",
        PostalCode: 14120,
        Latitude: 43.07344231,
        Longitude: -78.83842728,
        Revenue: 138739,
        Employees: 4598,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 159",
        Country: "US",
        PostalCode: 96130,
        Latitude: 40.53706285,
        Longitude: -120.6336731,
        Revenue: 314162,
        Employees: 867,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 160",
        Country: "US",
        PostalCode: 28212,
        Latitude: 35.18824886,
        Longitude: -80.74481634,
        Revenue: 902665,
        Employees: 1291,
        Industry: "Manufacturing",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 161",
        Country: "US",
        PostalCode: 37917,
        Latitude: 36.00092549,
        Longitude: -83.91393817,
        Revenue: 854418,
        Employees: 6995,
        Industry: "Financial Services",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 162",
        Country: "US",
        PostalCode: 14043,
        Latitude: 42.90206334,
        Longitude: -78.70570026,
        Revenue: 112421,
        Employees: 471,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 163",
        Country: "US",
        PostalCode: 32952,
        Latitude: 28.33466661,
        Longitude: -80.67392841,
        Revenue: 970064,
        Employees: 7627,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 164",
        Country: "US",
        PostalCode: 33155,
        Latitude: 25.73665135,
        Longitude: -80.31118968,
        Revenue: 468854,
        Employees: 382,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 165",
        Country: "US",
        PostalCode: 45822,
        Latitude: 40.55451039,
        Longitude: -84.59517049,
        Revenue: 447374,
        Employees: 1020,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 166",
        Country: "US",
        PostalCode: 35630,
        Latitude: 34.82415174,
        Longitude: -87.66085797,
        Revenue: 140753,
        Employees: 8311,
        Industry: "Healthcare",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 167",
        Country: "US",
        PostalCode: 15136,
        Latitude: 40.46913657,
        Longitude: -80.10283699,
        Revenue: 766273,
        Employees: 5530,
        Industry: "Healthcare",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 168",
        Country: "US",
        PostalCode: 95677,
        Latitude: 38.79089369,
        Longitude: -121.2326841,
        Revenue: 531544,
        Employees: 4292,
        Industry: "Financial Services",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 169",
        Country: "US",
        PostalCode: 11754,
        Latitude: 40.88839563,
        Longitude: -73.24656047,
        Revenue: 86738,
        Employees: 5103,
        Industry: "Manufacturing",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 170",
        Country: "US",
        PostalCode: 47374,
        Latitude: 39.83558781,
        Longitude: -84.89008871,
        Revenue: 12033,
        Employees: 2027,
        Industry: "Financial Services",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 171",
        Country: "US",
        PostalCode: 53005,
        Latitude: 43.06254501,
        Longitude: -88.09908035,
        Revenue: 866660,
        Employees: 2430,
        Industry: "Aerospace",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 172",
        Country: "US",
        PostalCode: 31533,
        Latitude: 31.5519735,
        Longitude: -82.82224436,
        Revenue: 888988,
        Employees: 5363,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 173",
        Country: "US",
        PostalCode: 23321,
        Latitude: 36.80098494,
        Longitude: -76.42185419,
        Revenue: 371182,
        Employees: 7927,
        Industry: "Aerospace",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 174",
        Country: "US",
        PostalCode: 20009,
        Latitude: 38.92007803,
        Longitude: -77.0376157,
        Revenue: 446170,
        Employees: 1792,
        Industry: "Manufacturing"
      },
      {
        Name: "US Account 175",
        Country: "US",
        PostalCode: 35772,
        Latitude: 34.89867622,
        Longitude: -85.90693986,
        Revenue: 776847,
        Employees: 1504,
        Industry: "Financial Services",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 176",
        Country: "US",
        PostalCode: 7024,
        Latitude: 40.8513221,
        Longitude: -73.97048955,
        Revenue: 36833,
        Employees: 3189,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 177",
        Country: "US",
        PostalCode: 37311,
        Latitude: 35.1026878,
        Longitude: -84.92211627,
        Revenue: 902454,
        Employees: 1235,
        Industry: "Financial Services",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 178",
        Country: "US",
        PostalCode: 94087,
        Latitude: 37.35171213,
        Longitude: -122.0372623,
        Revenue: 979154,
        Employees: 1456,
        Industry: "Financial Services",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 179",
        Country: "US",
        PostalCode: 19382,
        Latitude: 39.92843662,
        Longitude: -75.61535408,
        Revenue: 582741,
        Employees: 9789,
        Industry: "Healthcare",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 180",
        Country: "US",
        PostalCode: 82001,
        Latitude: 41.12751498,
        Longitude: -104.8598798,
        Revenue: 746752,
        Employees: 4048,
        Industry: "Financial Services",
        BoundaryId: "USA_Wyoming"
      },
      {
        Name: "US Account 181",
        Country: "US",
        PostalCode: 30308,
        Latitude: 33.77177877,
        Longitude: -84.37825511,
        Revenue: 809441,
        Employees: 9344,
        Industry: "Aerospace",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 182",
        Country: "US",
        PostalCode: 59729,
        Latitude: 45.33576899,
        Longitude: -111.650357,
        Revenue: 665951,
        Employees: 6696,
        Industry: "Financial Services",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 183",
        Country: "US",
        PostalCode: 26175,
        Latitude: 39.53652764,
        Longitude: -80.96075329,
        Revenue: 255267,
        Employees: 6491,
        Industry: "Manufacturing",
        BoundaryId: "USA_West Virginia"
      },
      {
        Name: "US Account 184",
        Country: "US",
        PostalCode: 70118,
        Latitude: 29.94490007,
        Longitude: -90.12572639,
        Revenue: 869811,
        Employees: 2383,
        Industry: "Financial Services",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 185",
        Country: "US",
        PostalCode: 37748,
        Latitude: 35.94576211,
        Longitude: -84.51404163,
        Revenue: 287837,
        Employees: 9613,
        Industry: "Aerospace",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 186",
        Country: "US",
        PostalCode: 48446,
        Latitude: 43.05672794,
        Longitude: -83.33479491,
        Revenue: 341454,
        Employees: 1679,
        Industry: "Aerospace",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 187",
        Country: "US",
        PostalCode: 17013,
        Latitude: 40.23817272,
        Longitude: -77.1957561,
        Revenue: 371112,
        Employees: 3675,
        Industry: "Healthcare",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 188",
        Country: "US",
        PostalCode: 94560,
        Latitude: 37.5191867,
        Longitude: -122.0464197,
        Revenue: 584164,
        Employees: 7924,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 189",
        Country: "US",
        PostalCode: 80262,
        Latitude: 39.74752619,
        Longitude: -104.8376344,
        Revenue: 403457,
        Employees: 5224,
        Industry: "Aerospace",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 190",
        Country: "US",
        PostalCode: 1581,
        Latitude: 42.26793651,
        Longitude: -71.61455227,
        Revenue: 565365,
        Employees: 3337,
        Industry: "Healthcare",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 191",
        Country: "US",
        PostalCode: 59840,
        Latitude: 46.17344535,
        Longitude: -114.1158125,
        Revenue: 854953,
        Employees: 8563,
        Industry: "Aerospace",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 192",
        Country: "US",
        PostalCode: 44857,
        Latitude: 41.21686095,
        Longitude: -82.58421112,
        Revenue: 49482,
        Employees: 2805,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 193",
        Country: "US",
        PostalCode: 70112,
        Latitude: 29.95759877,
        Longitude: -90.0766476,
        Revenue: 583920,
        Employees: 7448,
        Industry: "Healthcare",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 194",
        Country: "US",
        PostalCode: 73507,
        Latitude: 34.73994862,
        Longitude: -98.50093813,
        Revenue: 56339,
        Employees: 6640,
        Industry: "Financial Services",
        BoundaryId: "USA_Oklahoma"
      },
      {
        Name: "US Account 195",
        Country: "US",
        PostalCode: 1757,
        Latitude: 42.15798536,
        Longitude: -71.52128682,
        Revenue: 609525,
        Employees: 6122,
        Industry: "Financial Services",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 196",
        Country: "US",
        PostalCode: 85541,
        Latitude: 34.22459078,
        Longitude: -111.3389752,
        Revenue: 667627,
        Employees: 4029,
        Industry: "Financial Services",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 197",
        Country: "US",
        PostalCode: 41653,
        Latitude: 37.65894813,
        Longitude: -82.76008215,
        Revenue: 306314,
        Employees: 3481,
        Industry: "Healthcare",
        BoundaryId: "USA_Kentucky"
      },
      {
        Name: "US Account 198",
        Country: "US",
        PostalCode: 84047,
        Latitude: 40.61624442,
        Longitude: -111.8897639,
        Revenue: 589388,
        Employees: 2279,
        Industry: "Aerospace",
        BoundaryId: "USA_Utah"
      },
      {
        Name: "US Account 199",
        Country: "US",
        PostalCode: 1760,
        Latitude: 42.28361578,
        Longitude: -71.35015314,
        Revenue: 355101,
        Employees: 9844,
        Industry: "Financial Services",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 200",
        Country: "US",
        PostalCode: 49221,
        Latitude: 41.90459078,
        Longitude: -84.06379355,
        Revenue: 163363,
        Employees: 4081,
        Industry: "Aerospace",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 201",
        Country: "US",
        PostalCode: 33611,
        Latitude: 27.89055814,
        Longitude: -82.50627977,
        Revenue: 328721,
        Employees: 4330,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 202",
        Country: "US",
        PostalCode: 45373,
        Latitude: 40.02980171,
        Longitude: -84.19539434,
        Revenue: 355392,
        Employees: 8122,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 203",
        Country: "US",
        PostalCode: 63857,
        Latitude: 36.22629338,
        Longitude: -90.04331627,
        Revenue: 428529,
        Employees: 7452,
        Industry: "Financial Services",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 204",
        Country: "US",
        PostalCode: 78216,
        Latitude: 29.53692198,
        Longitude: -98.48863863,
        Revenue: 805191,
        Employees: 638,
        Industry: "Aerospace",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 205",
        Country: "US",
        PostalCode: 43311,
        Latitude: 40.36822134,
        Longitude: -83.75419892,
        Revenue: 893743,
        Employees: 1960,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 206",
        Country: "US",
        PostalCode: 33756,
        Latitude: 27.94513731,
        Longitude: -82.7885745,
        Revenue: 267411,
        Employees: 6607,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 207",
        Country: "US",
        PostalCode: 26505,
        Latitude: 39.65203483,
        Longitude: -79.9425927,
        Revenue: 50202,
        Employees: 7839,
        Industry: "Aerospace",
        BoundaryId: "USA_West Virginia"
      },
      {
        Name: "US Account 208",
        Country: "US",
        PostalCode: 91402,
        Latitude: 34.22425181,
        Longitude: -118.4445967,
        Revenue: 460888,
        Employees: 3887,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 209",
        Country: "US",
        PostalCode: 31082,
        Latitude: 32.99510733,
        Longitude: -82.89959864,
        Revenue: 930211,
        Employees: 2606,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 210",
        Country: "US",
        PostalCode: 79410,
        Latitude: 33.5699289,
        Longitude: -101.8913805,
        Revenue: 889916,
        Employees: 3893,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 211",
        Country: "US",
        PostalCode: 59047,
        Latitude: 45.54177318,
        Longitude: -110.5192423,
        Revenue: 941014,
        Employees: 995,
        Industry: "Healthcare",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 212",
        Country: "US",
        PostalCode: 90262,
        Latitude: 33.92521482,
        Longitude: -118.2016504,
        Revenue: 245186,
        Employees: 2910,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 213",
        Country: "US",
        PostalCode: 30214,
        Latitude: 33.49201791,
        Longitude: -84.49002633,
        Revenue: 840746,
        Employees: 2167,
        Industry: "Financial Services",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 214",
        Country: "US",
        PostalCode: 43201,
        Latitude: 39.99087602,
        Longitude: -83.000551,
        Revenue: 216691,
        Employees: 5144,
        Industry: "Aerospace",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 215",
        Country: "US",
        PostalCode: 96822,
        Latitude: 21.31920993,
        Longitude: -157.8091685,
        Revenue: 137431,
        Employees: 509,
        Industry: "Manufacturing",
        BoundaryId: "USA_Hawaii"
      },
      {
        Name: "US Account 216",
        Country: "US",
        PostalCode: 87501,
        Latitude: 35.84632384,
        Longitude: -105.8172253,
        Revenue: 111170,
        Employees: 4924,
        Industry: "Financial Services",
        BoundaryId: "USA_New Mexico"
      },
      {
        Name: "US Account 217",
        Country: "US",
        PostalCode: 90006,
        Latitude: 34.04807465,
        Longitude: -118.2943286,
        Revenue: 167242,
        Employees: 6279,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 218",
        Country: "US",
        PostalCode: 73119,
        Latitude: 35.42109791,
        Longitude: -97.56936115,
        Revenue: 728776,
        Employees: 2661,
        Industry: "Financial Services",
        BoundaryId: "USA_Oklahoma"
      },
      {
        Name: "US Account 219",
        Country: "US",
        PostalCode: 57301,
        Latitude: 43.71046384,
        Longitude: -98.04566227,
        Revenue: 46440,
        Employees: 4982,
        Industry: "Aerospace",
        BoundaryId: "USA_South Dakota"
      },
      {
        Name: "US Account 220",
        Country: "US",
        PostalCode: 33707,
        Latitude: 27.75661295,
        Longitude: -82.72118215,
        Revenue: 491406,
        Employees: 5698,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 221",
        Country: "US",
        PostalCode: 31406,
        Latitude: 31.97964242,
        Longitude: -81.08457195,
        Revenue: 153841,
        Employees: 3466,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 222",
        Country: "US",
        PostalCode: 72205,
        Latitude: 34.75001649,
        Longitude: -92.35200477,
        Revenue: 671758,
        Employees: 7474,
        Industry: "Healthcare",
        BoundaryId: "USA_Arkansas"
      },
      {
        Name: "US Account 223",
        Country: "US",
        PostalCode: 28791,
        Latitude: 35.35761037,
        Longitude: -82.50934723,
        Revenue: 946047,
        Employees: 9363,
        Industry: "Manufacturing",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 224",
        Country: "US",
        PostalCode: 78539,
        Latitude: 26.28099388,
        Longitude: -98.18436691,
        Revenue: 674544,
        Employees: 2448,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 225",
        Country: "US",
        PostalCode: 35501,
        Latitude: 33.82078749,
        Longitude: -87.29301479,
        Revenue: 607870,
        Employees: 9600,
        Industry: "Financial Services",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 226",
        Country: "US",
        PostalCode: 85643,
        Latitude: 32.46104661,
        Longitude: -109.9888062,
        Revenue: 373040,
        Employees: 3252,
        Industry: "Aerospace",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 227",
        Country: "US",
        PostalCode: 65401,
        Latitude: 37.88614916,
        Longitude: -91.7590073,
        Revenue: 534864,
        Employees: 819,
        Industry: "Manufacturing",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 228",
        Country: "US",
        PostalCode: 1104,
        Latitude: 42.13332099,
        Longitude: -72.56712867,
        Revenue: 263812,
        Employees: 930,
        Industry: "Manufacturing",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 229",
        Country: "US",
        PostalCode: 4062,
        Latitude: 43.79753659,
        Longitude: -70.40540779,
        Revenue: 996845,
        Employees: 7365,
        Industry: "Aerospace",
        BoundaryId: "USA_Maine"
      },
      {
        Name: "US Account 230",
        Country: "US",
        PostalCode: 77581,
        Latitude: 29.56190852,
        Longitude: -95.27906817,
        Revenue: 229164,
        Employees: 8698,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 231",
        Country: "US",
        PostalCode: 50569,
        Latitude: 42.40185558,
        Longitude: -94.13671018,
        Revenue: 242629,
        Employees: 8774,
        Industry: "Manufacturing",
        BoundaryId: "USA_Iowa"
      },
      {
        Name: "US Account 232",
        Country: "US",
        PostalCode: 39452,
        Latitude: 30.8660754,
        Longitude: -88.5998745,
        Revenue: 554430,
        Employees: 8258,
        Industry: "Aerospace",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 233",
        Country: "US",
        PostalCode: 32063,
        Latitude: 30.27183254,
        Longitude: -82.10975288,
        Revenue: 132328,
        Employees: 1813,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 234",
        Country: "US",
        PostalCode: 86505,
        Latitude: 35.60497117,
        Longitude: -109.4590233,
        Revenue: 846406,
        Employees: 2748,
        Industry: "Healthcare",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 235",
        Country: "US",
        PostalCode: 47304,
        Latitude: 40.23341035,
        Longitude: -85.46120234,
        Revenue: 764765,
        Employees: 3820,
        Industry: "Healthcare",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 236",
        Country: "US",
        PostalCode: 84606,
        Latitude: 40.21799869,
        Longitude: -111.6142335,
        Revenue: 338074,
        Employees: 4832,
        Industry: "Financial Services",
        BoundaryId: "USA_Utah"
      },
      {
        Name: "US Account 237",
        Country: "US",
        PostalCode: 60031,
        Latitude: 42.37386613,
        Longitude: -87.942057,
        Revenue: 258073,
        Employees: 3083,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 238",
        Country: "US",
        PostalCode: 45440,
        Latitude: 39.6752575,
        Longitude: -84.09890841,
        Revenue: 887723,
        Employees: 6753,
        Industry: "Healthcare",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 239",
        Country: "US",
        PostalCode: 77063,
        Latitude: 29.73514132,
        Longitude: -95.52038866,
        Revenue: 808157,
        Employees: 3222,
        Industry: "Manufacturing",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 240",
        Country: "US",
        PostalCode: 14456,
        Latitude: 42.83715357,
        Longitude: -76.99749666,
        Revenue: 250647,
        Employees: 1707,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 241",
        Country: "US",
        PostalCode: 90013,
        Latitude: 34.04431432,
        Longitude: -118.2408214,
        Revenue: 944593,
        Employees: 1848,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 242",
        Country: "US",
        PostalCode: 83814,
        Latitude: 47.63774394,
        Longitude: -116.693763,
        Revenue: 680147,
        Employees: 2145,
        Industry: "Financial Services",
        BoundaryId: "USA_Idaho"
      },
      {
        Name: "US Account 243",
        Country: "US",
        PostalCode: 84535,
        Latitude: 38.08418913,
        Longitude: -109.3762521,
        Revenue: 654451,
        Employees: 4013,
        Industry: "Aerospace",
        BoundaryId: "USA_Utah"
      },
      {
        Name: "US Account 244",
        Country: "US",
        PostalCode: 20872,
        Latitude: 39.2924031,
        Longitude: -77.21833336,
        Revenue: 766908,
        Employees: 3884,
        Industry: "Manufacturing",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 245",
        Country: "US",
        PostalCode: 97222,
        Latitude: 45.44036146,
        Longitude: -122.6152261,
        Revenue: 661615,
        Employees: 3123,
        Industry: "Healthcare",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 246",
        Country: "US",
        PostalCode: 95991,
        Latitude: 39.02306052,
        Longitude: -121.6127271,
        Revenue: 266964,
        Employees: 7909,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 247",
        Country: "US",
        PostalCode: 77550,
        Latitude: 29.31046594,
        Longitude: -94.77728666,
        Revenue: 469515,
        Employees: 795,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 248",
        Country: "US",
        PostalCode: 97220,
        Latitude: 45.55102608,
        Longitude: -122.5584483,
        Revenue: 730330,
        Employees: 1503,
        Industry: "Aerospace",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 249",
        Country: "US",
        PostalCode: 59101,
        Latitude: 45.6344636,
        Longitude: -108.3628186,
        Revenue: 690923,
        Employees: 7870,
        Industry: "Financial Services",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 250",
        Country: "US",
        PostalCode: 44510,
        Latitude: 41.12220207,
        Longitude: -80.67579716,
        Revenue: 455416,
        Employees: 6022,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 251",
        Country: "US",
        PostalCode: 59701,
        Latitude: 46.00079129,
        Longitude: -112.5518911,
        Revenue: 950176,
        Employees: 4469,
        Industry: "Aerospace",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 252",
        Country: "US",
        PostalCode: 29204,
        Latitude: 34.02910155,
        Longitude: -80.99953327,
        Revenue: 556430,
        Employees: 8233,
        Industry: "Aerospace",
        BoundaryId: "USA_South Carolina"
      },
      {
        Name: "US Account 253",
        Country: "US",
        PostalCode: 37210,
        Latitude: 36.14329904,
        Longitude: -86.73408901,
        Revenue: 833788,
        Employees: 9542,
        Industry: "Aerospace",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 254",
        Country: "US",
        PostalCode: 28722,
        Latitude: 35.24028461,
        Longitude: -82.13409268,
        Revenue: 596526,
        Employees: 6153,
        Industry: "Financial Services",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 255",
        Country: "US",
        PostalCode: 28459,
        Latitude: 33.95943075,
        Longitude: -78.39950505,
        Revenue: 559570,
        Employees: 3285,
        Industry: "Healthcare",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 256",
        Country: "US",
        PostalCode: 15022,
        Latitude: 40.13025252,
        Longitude: -79.93072586,
        Revenue: 913898,
        Employees: 8768,
        Industry: "Healthcare",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 257",
        Country: "US",
        PostalCode: 88260,
        Latitude: 32.90940353,
        Longitude: -103.4818429,
        Revenue: 345860,
        Employees: 51,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Mexico"
      },
      {
        Name: "US Account 258",
        Country: "US",
        PostalCode: 87106,
        Latitude: 35.04921977,
        Longitude: -106.6213285,
        Revenue: 95758,
        Employees: 5282,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Mexico"
      },
      {
        Name: "US Account 259",
        Country: "US",
        PostalCode: 94108,
        Latitude: 37.79160116,
        Longitude: -122.4085885,
        Revenue: 404648,
        Employees: 8998,
        Industry: "Financial Services",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 260",
        Country: "US",
        PostalCode: 10011,
        Latitude: 40.74398914,
        Longitude: -74.00535645,
        Revenue: 218586,
        Employees: 1514,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 261",
        Country: "US",
        PostalCode: 97330,
        Latitude: 44.63744585,
        Longitude: -123.2753319,
        Revenue: 589682,
        Employees: 4431,
        Industry: "Manufacturing",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 262",
        Country: "US",
        PostalCode: 45810,
        Latitude: 40.77615264,
        Longitude: -83.80973507,
        Revenue: 921808,
        Employees: 9735,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 263",
        Country: "US",
        PostalCode: 24016,
        Latitude: 37.27326376,
        Longitude: -79.94902222,
        Revenue: 449608,
        Employees: 9793,
        Industry: "Financial Services",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 264",
        Country: "US",
        PostalCode: 28655,
        Latitude: 35.75509206,
        Longitude: -81.74138725,
        Revenue: 845239,
        Employees: 1975,
        Industry: "Aerospace",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 265",
        Country: "US",
        PostalCode: 99111,
        Latitude: 46.86176447,
        Longitude: -117.4202802,
        Revenue: 217204,
        Employees: 9066,
        Industry: "Manufacturing",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 266",
        Country: "US",
        PostalCode: 90067,
        Latitude: 34.05750418,
        Longitude: -118.4143843,
        Revenue: 532843,
        Employees: 4700,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 267",
        Country: "US",
        PostalCode: 49015,
        Latitude: 42.26975507,
        Longitude: -85.23532589,
        Revenue: 988477,
        Employees: 6239,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 268",
        Country: "US",
        PostalCode: 44505,
        Latitude: 41.12788911,
        Longitude: -80.62167929,
        Revenue: 369480,
        Employees: 768,
        Industry: "Aerospace",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 269",
        Country: "US",
        PostalCode: 32054,
        Latitude: 30.03164511,
        Longitude: -82.39606456,
        Revenue: 841201,
        Employees: 5039,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 270",
        Country: "US",
        PostalCode: 95051,
        Latitude: 37.34704541,
        Longitude: -121.9832388,
        Revenue: 19634,
        Employees: 954,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 271",
        Country: "US",
        PostalCode: 38119,
        Latitude: 35.07934755,
        Longitude: -89.84587359,
        Revenue: 345188,
        Employees: 2764,
        Industry: "Manufacturing",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 272",
        Country: "US",
        PostalCode: 12047,
        Latitude: 42.78385983,
        Longitude: -73.72678087,
        Revenue: 365984,
        Employees: 3212,
        Industry: "Aerospace",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 273",
        Country: "US",
        PostalCode: 13850,
        Latitude: 42.0532549,
        Longitude: -76.03379659,
        Revenue: 121423,
        Employees: 5817,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 274",
        Country: "US",
        PostalCode: 7960,
        Latitude: 40.78462498,
        Longitude: -74.50158416,
        Revenue: 33444,
        Employees: 6973,
        Industry: "Aerospace",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 275",
        Country: "US",
        PostalCode: 55125,
        Latitude: 44.92000353,
        Longitude: -92.94356052,
        Revenue: 445200,
        Employees: 8998,
        Industry: "Financial Services",
        BoundaryId: "USA_Minnesota"
      },
      {
        Name: "US Account 276",
        Country: "US",
        PostalCode: 7087,
        Latitude: 40.76779342,
        Longitude: -74.03241819,
        Revenue: 359420,
        Employees: 623,
        Industry: "Healthcare",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 277",
        Country: "US",
        PostalCode: 27534,
        Latitude: 35.3686766,
        Longitude: -77.90326314,
        Revenue: 944691,
        Employees: 2453,
        Industry: "Manufacturing",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 278",
        Country: "US",
        PostalCode: 33316,
        Latitude: 26.10005049,
        Longitude: -80.12315395,
        Revenue: 447460,
        Employees: 5633,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 279",
        Country: "US",
        PostalCode: 56085,
        Latitude: 44.27909207,
        Longitude: -94.7417338,
        Revenue: 359098,
        Employees: 5100,
        Industry: "Financial Services",
        BoundaryId: "USA_Minnesota"
      },
      {
        Name: "US Account 280",
        Country: "US",
        PostalCode: 2780,
        Latitude: 41.90718782,
        Longitude: -71.11853925,
        Revenue: 744472,
        Employees: 7931,
        Industry: "Healthcare",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 281",
        Country: "US",
        PostalCode: 27511,
        Latitude: 35.76332344,
        Longitude: -78.782725,
        Revenue: 443138,
        Employees: 6991,
        Industry: "Healthcare",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 282",
        Country: "US",
        PostalCode: 2747,
        Latitude: 41.65350334,
        Longitude: -71.0110446,
        Revenue: 17903,
        Employees: 7021,
        Industry: "Manufacturing",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 283",
        Country: "US",
        PostalCode: 15067,
        Latitude: 40.20798281,
        Longitude: -79.9604516,
        Revenue: 611663,
        Employees: 1788,
        Industry: "Manufacturing",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 284",
        Country: "US",
        PostalCode: 42066,
        Latitude: 36.72904535,
        Longitude: -88.64021911,
        Revenue: 943381,
        Employees: 9589,
        Industry: "Financial Services",
        BoundaryId: "USA_Kentucky"
      },
      {
        Name: "US Account 285",
        Country: "US",
        PostalCode: 5301,
        Latitude: 42.84668482,
        Longitude: -72.65738215,
        Revenue: 631606,
        Employees: 699,
        Industry: "Financial Services",
        BoundaryId: "USA_Vermont"
      },
      {
        Name: "US Account 286",
        Country: "US",
        PostalCode: 31904,
        Latitude: 32.54484994,
        Longitude: -84.9921309,
        Revenue: 579089,
        Employees: 6799,
        Industry: "Manufacturing",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 287",
        Country: "US",
        PostalCode: 44115,
        Latitude: 41.49275986,
        Longitude: -81.67053602,
        Revenue: 831615,
        Employees: 9278,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 288",
        Country: "US",
        PostalCode: 78629,
        Latitude: 29.48621205,
        Longitude: -97.43409944,
        Revenue: 385749,
        Employees: 1275,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 289",
        Country: "US",
        PostalCode: 1960,
        Latitude: 42.53384517,
        Longitude: -70.9728205,
        Revenue: 295858,
        Employees: 5721,
        Industry: "Manufacturing",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 290",
        Country: "US",
        PostalCode: 60103,
        Latitude: 41.97720651,
        Longitude: -88.20293476,
        Revenue: 682025,
        Employees: 3728,
        Industry: "Manufacturing",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 291",
        Country: "US",
        PostalCode: 59301,
        Latitude: 46.39307034,
        Longitude: -105.8791351,
        Revenue: 501578,
        Employees: 7424,
        Industry: "Aerospace",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 292",
        Country: "US",
        PostalCode: 95616,
        Latitude: 38.55792996,
        Longitude: -121.804037,
        Revenue: 694889,
        Employees: 4822,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 293",
        Country: "US",
        PostalCode: 2116,
        Latitude: 42.35070955,
        Longitude: -71.07657935,
        Revenue: 209508,
        Employees: 49,
        Industry: "Aerospace",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 294",
        Country: "US",
        PostalCode: 43215,
        Latitude: 39.96680007,
        Longitude: -83.01343988,
        Revenue: 405698,
        Employees: 7496,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 295",
        Country: "US",
        PostalCode: 81625,
        Latitude: 40.64672685,
        Longitude: -107.7692411,
        Revenue: 916626,
        Employees: 8818,
        Industry: "Healthcare",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 296",
        Country: "US",
        PostalCode: 70119,
        Latitude: 29.97585911,
        Longitude: -90.08758113,
        Revenue: 6856,
        Employees: 6476,
        Industry: "Healthcare",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 297",
        Country: "US",
        PostalCode: 19124,
        Latitude: 40.01678698,
        Longitude: -75.09372763,
        Revenue: 661603,
        Employees: 6844,
        Industry: "Manufacturing",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 298",
        Country: "US",
        PostalCode: 60603,
        Latitude: 41.87984024,
        Longitude: -87.62355127,
        Revenue: 310007,
        Employees: 4440,
        Industry: "Healthcare",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 299",
        Country: "US",
        PostalCode: 80262,
        Latitude: 39.74752619,
        Longitude: -104.8376344,
        Revenue: 27362,
        Employees: 6771,
        Industry: "Manufacturing",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 300",
        Country: "US",
        PostalCode: 7666,
        Latitude: 40.88959771,
        Longitude: -74.01074972,
        Revenue: 641154,
        Employees: 6509,
        Industry: "Healthcare",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 301",
        Country: "US",
        PostalCode: 43130,
        Latitude: 39.69679768,
        Longitude: -82.61112408,
        Revenue: 784523,
        Employees: 1844,
        Industry: "Healthcare",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 302",
        Country: "US",
        PostalCode: 59901,
        Latitude: 48.07664395,
        Longitude: -113.7176288,
        Revenue: 372449,
        Employees: 6101,
        Industry: "Healthcare",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 303",
        Country: "US",
        PostalCode: 56156,
        Latitude: 43.69317656,
        Longitude: -96.26365734,
        Revenue: 368865,
        Employees: 3633,
        Industry: "Manufacturing",
        BoundaryId: "USA_Minnesota"
      },
      {
        Name: "US Account 304",
        Country: "US",
        PostalCode: 14216,
        Latitude: 42.94773285,
        Longitude: -78.86281556,
        Revenue: 635071,
        Employees: 4019,
        Industry: "Manufacturing",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 305",
        Country: "US",
        PostalCode: 75231,
        Latitude: 32.87774013,
        Longitude: -96.74994725,
        Revenue: 387043,
        Employees: 8510,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 306",
        Country: "US",
        PostalCode: 43215,
        Latitude: 39.96680007,
        Longitude: -83.01343988,
        Revenue: 305702,
        Employees: 5362,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 307",
        Country: "US",
        PostalCode: 90048,
        Latitude: 34.07300647,
        Longitude: -118.3728925,
        Revenue: 802576,
        Employees: 2603,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 308",
        Country: "US",
        PostalCode: 40121,
        Latitude: 37.88300058,
        Longitude: -85.94244844,
        Revenue: 158153,
        Employees: 7773,
        Industry: "Manufacturing",
        BoundaryId: "USA_Kentucky"
      },
      {
        Name: "US Account 309",
        Country: "US",
        PostalCode: 14534,
        Latitude: 43.05493908,
        Longitude: -77.51959671,
        Revenue: 393502,
        Employees: 6210,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 310",
        Country: "US",
        PostalCode: 35216,
        Latitude: 33.42135889,
        Longitude: -86.78740273,
        Revenue: 24857,
        Employees: 9324,
        Industry: "Healthcare",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 311",
        Country: "US",
        PostalCode: 75246,
        Latitude: 32.79282709,
        Longitude: -96.77271049,
        Revenue: 465929,
        Employees: 3996,
        Industry: "Manufacturing",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 312",
        Country: "US",
        PostalCode: 19444,
        Latitude: 40.08667439,
        Longitude: -75.25419591,
        Revenue: 275902,
        Employees: 3223,
        Industry: "Manufacturing",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 313",
        Country: "US",
        PostalCode: 11233,
        Latitude: 40.67838839,
        Longitude: -73.91991454,
        Revenue: 115199,
        Employees: 9176,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 314",
        Country: "US",
        PostalCode: 48202,
        Latitude: 42.37392738,
        Longitude: -83.0778604,
        Revenue: 941775,
        Employees: 2637,
        Industry: "Manufacturing",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 315",
        Country: "US",
        PostalCode: 54601,
        Latitude: 43.79719045,
        Longitude: -91.15308542,
        Revenue: 793841,
        Employees: 5488,
        Industry: "Financial Services",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 316",
        Country: "US",
        PostalCode: 49601,
        Latitude: 44.24716887,
        Longitude: -85.51794146,
        Revenue: 705104,
        Employees: 3061,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 317",
        Country: "US",
        PostalCode: 30080,
        Latitude: 33.87703333,
        Longitude: -84.50408069,
        Revenue: 126290,
        Employees: 4285,
        Industry: "Financial Services",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 318",
        Country: "US",
        PostalCode: 90255,
        Latitude: 33.97767467,
        Longitude: -118.2166212,
        Revenue: 162377,
        Employees: 9966,
        Industry: "Financial Services",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 319",
        Country: "US",
        PostalCode: 95816,
        Latitude: 38.57572805,
        Longitude: -121.4651758,
        Revenue: 741481,
        Employees: 7015,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 320",
        Country: "US",
        PostalCode: 19341,
        Latitude: 40.0408593,
        Longitude: -75.63861841,
        Revenue: 300039,
        Employees: 8812,
        Industry: "Manufacturing",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 321",
        Country: "US",
        PostalCode: 48167,
        Latitude: 42.43613011,
        Longitude: -83.52743009,
        Revenue: 649884,
        Employees: 996,
        Industry: "Aerospace",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 322",
        Country: "US",
        PostalCode: 64151,
        Latitude: 39.21523336,
        Longitude: -94.63088543,
        Revenue: 308032,
        Employees: 442,
        Industry: "Aerospace",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 323",
        Country: "US",
        PostalCode: 30097,
        Latitude: 34.02723629,
        Longitude: -84.14630238,
        Revenue: 746095,
        Employees: 7828,
        Industry: "Aerospace",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 324",
        Country: "US",
        PostalCode: 32095,
        Latitude: 30.00721645,
        Longitude: -81.4074251,
        Revenue: 563148,
        Employees: 4300,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 325",
        Country: "US",
        PostalCode: 8837,
        Latitude: 40.51513293,
        Longitude: -74.34489217,
        Revenue: 289514,
        Employees: 1318,
        Industry: "Financial Services",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 326",
        Country: "US",
        PostalCode: 72360,
        Latitude: 34.77399187,
        Longitude: -90.74885,
        Revenue: 458254,
        Employees: 4719,
        Industry: "Manufacturing",
        BoundaryId: "USA_Arkansas"
      },
      {
        Name: "US Account 327",
        Country: "US",
        PostalCode: 45601,
        Latitude: 39.31064619,
        Longitude: -82.95911671,
        Revenue: 814106,
        Employees: 2066,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 328",
        Country: "US",
        PostalCode: 27103,
        Latitude: 36.05744603,
        Longitude: -80.32142746,
        Revenue: 604352,
        Employees: 7251,
        Industry: "Healthcare",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 329",
        Country: "US",
        PostalCode: 53215,
        Latitude: 42.99875221,
        Longitude: -87.94640633,
        Revenue: 738381,
        Employees: 6566,
        Industry: "Manufacturing",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 330",
        Country: "US",
        PostalCode: 36027,
        Latitude: 31.92546918,
        Longitude: -85.20924104,
        Revenue: 322019,
        Employees: 2559,
        Industry: "Healthcare",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 331",
        Country: "US",
        PostalCode: 44120,
        Latitude: 41.47352435,
        Longitude: -81.57951127,
        Revenue: 621221,
        Employees: 9760,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 332",
        Country: "US",
        PostalCode: 80222,
        Latitude: 39.67199816,
        Longitude: -104.927464,
        Revenue: 124998,
        Employees: 4304,
        Industry: "Aerospace",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 333",
        Country: "US",
        PostalCode: 72956,
        Latitude: 35.46690705,
        Longitude: -94.3487773,
        Revenue: 402831,
        Employees: 9265,
        Industry: "Financial Services",
        BoundaryId: "USA_Arkansas"
      },
      {
        Name: "US Account 334",
        Country: "US",
        PostalCode: 92704,
        Latitude: 33.7200587,
        Longitude: -117.9081081,
        Revenue: 622230,
        Employees: 8697,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 335",
        Country: "US",
        PostalCode: 90292,
        Latitude: 33.9785756,
        Longitude: -118.4464165,
        Revenue: 950509,
        Employees: 4782,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 336",
        Country: "US",
        PostalCode: 78209,
        Latitude: 29.48930218,
        Longitude: -98.45666055,
        Revenue: 131535,
        Employees: 8315,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 337",
        Country: "US",
        PostalCode: 33125,
        Latitude: 25.78378655,
        Longitude: -80.23665056,
        Revenue: 264332,
        Employees: 1386,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 338",
        Country: "US",
        PostalCode: 77030,
        Latitude: 29.70695995,
        Longitude: -95.40040573,
        Revenue: 314111,
        Employees: 8143,
        Industry: "Aerospace",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 339",
        Country: "US",
        PostalCode: 39216,
        Latitude: 32.33357358,
        Longitude: -90.16098633,
        Revenue: 835797,
        Employees: 9561,
        Industry: "Healthcare",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 340",
        Country: "US",
        PostalCode: 15717,
        Latitude: 40.45262746,
        Longitude: -79.23628393,
        Revenue: 498514,
        Employees: 4885,
        Industry: "Healthcare",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 341",
        Country: "US",
        PostalCode: 81301,
        Latitude: 37.44894342,
        Longitude: -107.8318441,
        Revenue: 33795,
        Employees: 5823,
        Industry: "Healthcare",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 342",
        Country: "US",
        PostalCode: 53821,
        Latitude: 43.04095556,
        Longitude: -91.06000444,
        Revenue: 282773,
        Employees: 8017,
        Industry: "Aerospace",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 343",
        Country: "US",
        PostalCode: 5255,
        Latitude: 43.1675909,
        Longitude: -73.06478683,
        Revenue: 55025,
        Employees: 9957,
        Industry: "Financial Services",
        BoundaryId: "USA_Vermont"
      },
      {
        Name: "US Account 344",
        Country: "US",
        PostalCode: 35952,
        Latitude: 34.05381195,
        Longitude: -86.30570407,
        Revenue: 848742,
        Employees: 1989,
        Industry: "Aerospace",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 345",
        Country: "US",
        PostalCode: 88130,
        Latitude: 34.13914723,
        Longitude: -103.3090077,
        Revenue: 972810,
        Employees: 5030,
        Industry: "Aerospace",
        BoundaryId: "USA_New Mexico"
      },
      {
        Name: "US Account 346",
        Country: "US",
        PostalCode: 62002,
        Latitude: 38.94172651,
        Longitude: -90.1295491,
        Revenue: 252880,
        Employees: 2420,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 347",
        Country: "US",
        PostalCode: 28791,
        Latitude: 35.35761037,
        Longitude: -82.50934723,
        Revenue: 25132,
        Employees: 330,
        Industry: "Healthcare",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 348",
        Country: "US",
        PostalCode: 84107,
        Latitude: 40.6579058,
        Longitude: -111.8842059,
        Revenue: 106929,
        Employees: 6777,
        Industry: "Healthcare",
        BoundaryId: "USA_Utah"
      },
      {
        Name: "US Account 349",
        Country: "US",
        PostalCode: 22060,
        Latitude: 38.70797682,
        Longitude: -77.15583571,
        Revenue: 634145,
        Employees: 451,
        Industry: "Financial Services",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 350",
        Country: "US",
        PostalCode: 29622,
        Latitude: 34.5062698,
        Longitude: -82.60207797,
        Revenue: 186388,
        Employees: 7672,
        Industry: "Healthcare",
        BoundaryId: "USA_South Carolina"
      },
      {
        Name: "US Account 351",
        Country: "US",
        PostalCode: 75231,
        Latitude: 32.87774013,
        Longitude: -96.74994725,
        Revenue: 153834,
        Employees: 3721,
        Industry: "Aerospace",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 352",
        Country: "US",
        PostalCode: 71913,
        Latitude: 34.45675318,
        Longitude: -93.09523739,
        Revenue: 914051,
        Employees: 7346,
        Industry: "Manufacturing",
        BoundaryId: "USA_Arkansas"
      },
      {
        Name: "US Account 353",
        Country: "US",
        PostalCode: 21701,
        Latitude: 39.44703554,
        Longitude: -77.33554279,
        Revenue: 447284,
        Employees: 7444,
        Industry: "Financial Services",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 354",
        Country: "US",
        PostalCode: 97204,
        Latitude: 45.5183819,
        Longitude: -122.6738849,
        Revenue: 225390,
        Employees: 5380,
        Industry: "Manufacturing",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 355",
        Country: "US",
        PostalCode: 68105,
        Latitude: 41.24054072,
        Longitude: -95.96469939,
        Revenue: 227861,
        Employees: 9608,
        Industry: "Manufacturing",
        BoundaryId: "USA_Nebraska"
      },
      {
        Name: "US Account 356",
        Country: "US",
        PostalCode: 64112,
        Latitude: 39.03592868,
        Longitude: -94.59517276,
        Revenue: 491187,
        Employees: 3915,
        Industry: "Manufacturing",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 357",
        Country: "US",
        PostalCode: 83712,
        Latitude: 43.60770351,
        Longitude: -116.1060921,
        Revenue: 564984,
        Employees: 1561,
        Industry: "Financial Services",
        BoundaryId: "USA_Idaho"
      },
      {
        Name: "US Account 358",
        Country: "US",
        PostalCode: 61821,
        Latitude: 40.11104006,
        Longitude: -88.27575726,
        Revenue: 21460,
        Employees: 6557,
        Industry: "Healthcare",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 359",
        Country: "US",
        PostalCode: 30909,
        Latitude: 33.47162943,
        Longitude: -82.08420215,
        Revenue: 629867,
        Employees: 4729,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 360",
        Country: "US",
        PostalCode: 44134,
        Latitude: 41.3842844,
        Longitude: -81.70469455,
        Revenue: 539102,
        Employees: 6828,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 361",
        Country: "US",
        PostalCode: 35216,
        Latitude: 33.42135889,
        Longitude: -86.78740273,
        Revenue: 706065,
        Employees: 9909,
        Industry: "Healthcare",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 362",
        Country: "US",
        PostalCode: 67114,
        Latitude: 38.06260355,
        Longitude: -97.28148947,
        Revenue: 375486,
        Employees: 4647,
        Industry: "Manufacturing",
        BoundaryId: "USA_Kansas"
      },
      {
        Name: "US Account 363",
        Country: "US",
        PostalCode: 62906,
        Latitude: 37.45669755,
        Longitude: -89.18176209,
        Revenue: 952233,
        Employees: 6964,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 364",
        Country: "US",
        PostalCode: 30213,
        Latitude: 33.59083943,
        Longitude: -84.63483328,
        Revenue: 679613,
        Employees: 5761,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 365",
        Country: "US",
        PostalCode: 13760,
        Latitude: 42.1371941,
        Longitude: -76.08056772,
        Revenue: 786595,
        Employees: 1e3,
        Industry: "Aerospace",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 366",
        Country: "US",
        PostalCode: 17109,
        Latitude: 40.29017816,
        Longitude: -76.82337798,
        Revenue: 988722,
        Employees: 4918,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 367",
        Country: "US",
        PostalCode: 7860,
        Latitude: 41.05949814,
        Longitude: -74.81066697,
        Revenue: 480686,
        Employees: 8177,
        Industry: "Financial Services",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 368",
        Country: "US",
        PostalCode: 35234,
        Latitude: 33.54083138,
        Longitude: -86.80314574,
        Revenue: 152054,
        Employees: 7848,
        Industry: "Financial Services",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 369",
        Country: "US",
        PostalCode: 33155,
        Latitude: 25.73665135,
        Longitude: -80.31118968,
        Revenue: 182680,
        Employees: 3911,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 370",
        Country: "US",
        PostalCode: 86034,
        Latitude: 35.74606762,
        Longitude: -110.1592718,
        Revenue: 227631,
        Employees: 1735,
        Industry: "Healthcare",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 371",
        Country: "US",
        PostalCode: 8648,
        Latitude: 40.28317166,
        Longitude: -74.72171234,
        Revenue: 691176,
        Employees: 7983,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 372",
        Country: "US",
        PostalCode: 47714,
        Latitude: 37.95013729,
        Longitude: -87.52312442,
        Revenue: 323452,
        Employees: 9479,
        Industry: "Financial Services",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 373",
        Country: "US",
        PostalCode: 35242,
        Latitude: 33.42313036,
        Longitude: -86.66995567,
        Revenue: 985697,
        Employees: 2383,
        Industry: "Manufacturing",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 374",
        Country: "US",
        PostalCode: 59201,
        Latitude: 48.16946759,
        Longitude: -105.6175351,
        Revenue: 334565,
        Employees: 7519,
        Industry: "Healthcare",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 375",
        Country: "US",
        PostalCode: 39653,
        Latitude: 31.45246735,
        Longitude: -90.85840245,
        Revenue: 719495,
        Employees: 6480,
        Industry: "Manufacturing",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 376",
        Country: "US",
        PostalCode: 78236,
        Latitude: 29.37747972,
        Longitude: -98.62890561,
        Revenue: 403085,
        Employees: 7156,
        Industry: "Manufacturing",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 377",
        Country: "US",
        PostalCode: 35401,
        Latitude: 33.17770254,
        Longitude: -87.61555245,
        Revenue: 413598,
        Employees: 1875,
        Industry: "Aerospace",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 378",
        Country: "US",
        PostalCode: 10027,
        Latitude: 40.81174247,
        Longitude: -73.95312022,
        Revenue: 21817,
        Employees: 6877,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 379",
        Country: "US",
        PostalCode: 33173,
        Latitude: 25.70136017,
        Longitude: -80.35802224,
        Revenue: 147553,
        Employees: 3210,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 380",
        Country: "US",
        PostalCode: 31210,
        Latitude: 32.90725582,
        Longitude: -83.73997219,
        Revenue: 439875,
        Employees: 1011,
        Industry: "Manufacturing",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 381",
        Country: "US",
        PostalCode: 97206,
        Latitude: 45.48131809,
        Longitude: -122.5989757,
        Revenue: 363663,
        Employees: 6471,
        Industry: "Manufacturing",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 382",
        Country: "US",
        PostalCode: 3774,
        Latitude: 44.08579117,
        Longitude: -71.99684454,
        Revenue: 642552,
        Employees: 6672,
        Industry: "Financial Services",
        BoundaryId: "USA_New Hampshire"
      },
      {
        Name: "US Account 383",
        Country: "US",
        PostalCode: 98002,
        Latitude: 47.30952229,
        Longitude: -122.2157654,
        Revenue: 273320,
        Employees: 9007,
        Industry: "Manufacturing",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 384",
        Country: "US",
        PostalCode: 38138,
        Latitude: 35.08620146,
        Longitude: -89.80054145,
        Revenue: 199036,
        Employees: 3473,
        Industry: "Manufacturing",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 385",
        Country: "US",
        PostalCode: 12208,
        Latitude: 42.65239692,
        Longitude: -73.80664165,
        Revenue: 961038,
        Employees: 1741,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 386",
        Country: "US",
        PostalCode: 36303,
        Latitude: 31.26612011,
        Longitude: -85.39613774,
        Revenue: 214051,
        Employees: 1039,
        Industry: "Aerospace",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 387",
        Country: "US",
        PostalCode: 1844,
        Latitude: 42.73381908,
        Longitude: -71.18930239,
        Revenue: 556846,
        Employees: 8326,
        Industry: "Manufacturing",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 388",
        Country: "US",
        PostalCode: 14204,
        Latitude: 42.8824478,
        Longitude: -78.86145391,
        Revenue: 420058,
        Employees: 2639,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 389",
        Country: "US",
        PostalCode: 51031,
        Latitude: 42.80699165,
        Longitude: -96.17474469,
        Revenue: 205079,
        Employees: 599,
        Industry: "Healthcare",
        BoundaryId: "USA_Iowa"
      },
      {
        Name: "US Account 390",
        Country: "US",
        PostalCode: 46240,
        Latitude: 39.9070191,
        Longitude: -86.12561682,
        Revenue: 107549,
        Employees: 3428,
        Industry: "Manufacturing",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 391",
        Country: "US",
        PostalCode: 21780,
        Latitude: 39.6769761,
        Longitude: -77.46628071,
        Revenue: 462971,
        Employees: 7793,
        Industry: "Healthcare",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 392",
        Country: "US",
        PostalCode: 59230,
        Latitude: 48.36136579,
        Longitude: -106.6271124,
        Revenue: 69442,
        Employees: 4114,
        Industry: "Financial Services",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 393",
        Country: "US",
        PostalCode: 59255,
        Latitude: 48.31579776,
        Longitude: -105.2107436,
        Revenue: 367434,
        Employees: 4275,
        Industry: "Financial Services",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 394",
        Country: "US",
        PostalCode: 59457,
        Latitude: 47.0351076,
        Longitude: -109.4532709,
        Revenue: 148328,
        Employees: 1363,
        Industry: "Manufacturing",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 395",
        Country: "US",
        PostalCode: 77566,
        Latitude: 29.04358171,
        Longitude: -95.46620005,
        Revenue: 253245,
        Employees: 9550,
        Industry: "Aerospace",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 396",
        Country: "US",
        PostalCode: 41501,
        Latitude: 37.51052211,
        Longitude: -82.51554081,
        Revenue: 507850,
        Employees: 2934,
        Industry: "Aerospace",
        BoundaryId: "USA_Kentucky"
      },
      {
        Name: "US Account 397",
        Country: "US",
        PostalCode: 81601,
        Latitude: 39.60593604,
        Longitude: -107.2942767,
        Revenue: 538617,
        Employees: 9969,
        Industry: "Financial Services",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 398",
        Country: "US",
        PostalCode: 53705,
        Latitude: 43.07360563,
        Longitude: -89.45933389,
        Revenue: 378562,
        Employees: 704,
        Industry: "Healthcare",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 399",
        Country: "US",
        PostalCode: 79401,
        Latitude: 33.58707608,
        Longitude: -101.8525838,
        Revenue: 755941,
        Employees: 8236,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 400",
        Country: "US",
        PostalCode: 10003,
        Latitude: 40.73203013,
        Longitude: -73.98890394,
        Revenue: 48514,
        Employees: 6983,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 401",
        Country: "US",
        PostalCode: 39652,
        Latitude: 31.11113289,
        Longitude: -90.48388643,
        Revenue: 839742,
        Employees: 9176,
        Industry: "Aerospace",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 402",
        Country: "US",
        PostalCode: 16652,
        Latitude: 40.53963244,
        Longitude: -77.9312963,
        Revenue: 918040,
        Employees: 7072,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 403",
        Country: "US",
        PostalCode: 80111,
        Latitude: 39.61756056,
        Longitude: -104.8715843,
        Revenue: 497320,
        Employees: 2783,
        Industry: "Financial Services",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 404",
        Country: "US",
        PostalCode: 28472,
        Latitude: 34.2892582,
        Longitude: -78.68116244,
        Revenue: 640162,
        Employees: 1800,
        Industry: "Healthcare",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 405",
        Country: "US",
        PostalCode: 12308,
        Latitude: 42.82136415,
        Longitude: -73.9209401,
        Revenue: 656597,
        Employees: 5477,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 406",
        Country: "US",
        PostalCode: 77084,
        Latitude: 29.82531951,
        Longitude: -95.65030169,
        Revenue: 36590,
        Employees: 4192,
        Industry: "Manufacturing",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 407",
        Country: "US",
        PostalCode: 44129,
        Latitude: 41.39124235,
        Longitude: -81.73483614,
        Revenue: 498803,
        Employees: 1029,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 408",
        Country: "US",
        PostalCode: 65791,
        Latitude: 36.55856456,
        Longitude: -91.53417594,
        Revenue: 68886,
        Employees: 6069,
        Industry: "Financial Services",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 409",
        Country: "US",
        PostalCode: 96750,
        Latitude: 19.51521773,
        Longitude: -155.9313375,
        Revenue: 639719,
        Employees: 6760,
        Industry: "Financial Services",
        BoundaryId: "USA_Hawaii"
      },
      {
        Name: "US Account 410",
        Country: "US",
        PostalCode: 48603,
        Latitude: 43.46191841,
        Longitude: -84.02931466,
        Revenue: 816267,
        Employees: 3578,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 411",
        Country: "US",
        PostalCode: 39117,
        Latitude: 32.37361019,
        Longitude: -89.66128429,
        Revenue: 545344,
        Employees: 8750,
        Industry: "Aerospace",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 412",
        Country: "US",
        PostalCode: 72936,
        Latitude: 35.18630453,
        Longitude: -94.22947704,
        Revenue: 794367,
        Employees: 1489,
        Industry: "Manufacturing",
        BoundaryId: "USA_Arkansas"
      },
      {
        Name: "US Account 413",
        Country: "US",
        PostalCode: 59324,
        Latitude: 45.87777553,
        Longitude: -104.4963115,
        Revenue: 234889,
        Employees: 6492,
        Industry: "Aerospace",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 414",
        Country: "US",
        PostalCode: 33016,
        Latitude: 25.89512092,
        Longitude: -80.33256259,
        Revenue: 177172,
        Employees: 5854,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 415",
        Country: "US",
        PostalCode: 85251,
        Latitude: 33.4944755,
        Longitude: -111.9202335,
        Revenue: 710527,
        Employees: 3013,
        Industry: "Financial Services",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 416",
        Country: "US",
        PostalCode: 57006,
        Latitude: 44.32029327,
        Longitude: -96.80035052,
        Revenue: 813998,
        Employees: 8832,
        Industry: "Financial Services",
        BoundaryId: "USA_South Dakota"
      },
      {
        Name: "US Account 417",
        Country: "US",
        PostalCode: 77090,
        Latitude: 30.00931468,
        Longitude: -95.44364213,
        Revenue: 421124,
        Employees: 3092,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 418",
        Country: "US",
        PostalCode: 20646,
        Latitude: 38.52190842,
        Longitude: -76.99976811,
        Revenue: 753917,
        Employees: 685,
        Industry: "Aerospace",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 419",
        Country: "US",
        PostalCode: 88119,
        Latitude: 34.34514413,
        Longitude: -104.3298736,
        Revenue: 350919,
        Employees: 4234,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Mexico"
      },
      {
        Name: "US Account 420",
        Country: "US",
        PostalCode: 22203,
        Latitude: 38.87351776,
        Longitude: -77.11848721,
        Revenue: 469195,
        Employees: 3894,
        Industry: "Aerospace",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 421",
        Country: "US",
        PostalCode: 20735,
        Latitude: 38.74672033,
        Longitude: -76.90816392,
        Revenue: 879110,
        Employees: 1475,
        Industry: "Manufacturing",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 422",
        Country: "US",
        PostalCode: 48640,
        Latitude: 43.58639716,
        Longitude: -84.33870151,
        Revenue: 993931,
        Employees: 1694,
        Industry: "Aerospace",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 423",
        Country: "US",
        PostalCode: 78550,
        Latitude: 26.25701364,
        Longitude: -97.67249476,
        Revenue: 475516,
        Employees: 3512,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 424",
        Country: "US",
        PostalCode: 12208,
        Latitude: 42.65239692,
        Longitude: -73.80664165,
        Revenue: 961740,
        Employees: 5669,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 425",
        Country: "US",
        PostalCode: 36323,
        Latitude: 31.42093104,
        Longitude: -86.0786875,
        Revenue: 415696,
        Employees: 3787,
        Industry: "Aerospace",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 426",
        Country: "US",
        PostalCode: 59722,
        Latitude: 46.36229627,
        Longitude: -112.7640099,
        Revenue: 958165,
        Employees: 5802,
        Industry: "Financial Services",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 427",
        Country: "US",
        PostalCode: 34292,
        Latitude: 27.1060964,
        Longitude: -82.33725715,
        Revenue: 952326,
        Employees: 3043,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 428",
        Country: "US",
        PostalCode: 58701,
        Latitude: 48.10944209,
        Longitude: -101.3174374,
        Revenue: 26731,
        Employees: 7923,
        Industry: "Financial Services",
        BoundaryId: "USA_North Dakota"
      },
      {
        Name: "US Account 429",
        Country: "US",
        PostalCode: 48197,
        Latitude: 42.19556649,
        Longitude: -83.62670093,
        Revenue: 171571,
        Employees: 5459,
        Industry: "Aerospace",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 430",
        Country: "US",
        PostalCode: 11103,
        Latitude: 40.76297394,
        Longitude: -73.91338807,
        Revenue: 890125,
        Employees: 6913,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 431",
        Country: "US",
        PostalCode: 37857,
        Latitude: 36.41895207,
        Longitude: -82.96211272,
        Revenue: 662383,
        Employees: 6649,
        Industry: "Aerospace",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 432",
        Country: "US",
        PostalCode: 19802,
        Latitude: 39.75626396,
        Longitude: -75.52828079,
        Revenue: 299194,
        Employees: 3478,
        Industry: "Aerospace",
        BoundaryId: "USA_Delaware"
      },
      {
        Name: "US Account 433",
        Country: "US",
        PostalCode: 21218,
        Latitude: 39.32877318,
        Longitude: -76.60375821,
        Revenue: 604937,
        Employees: 959,
        Industry: "Financial Services",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 434",
        Country: "US",
        PostalCode: 1201,
        Latitude: 42.45905766,
        Longitude: -73.29039079,
        Revenue: 672312,
        Employees: 2923,
        Industry: "Healthcare",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 435",
        Country: "US",
        PostalCode: 48093,
        Latitude: 42.51423458,
        Longitude: -83.01221954,
        Revenue: 153083,
        Employees: 6472,
        Industry: "Aerospace",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 436",
        Country: "US",
        PostalCode: 93065,
        Latitude: 34.2842287,
        Longitude: -118.7693799,
        Revenue: 481216,
        Employees: 5487,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 437",
        Country: "US",
        PostalCode: 30106,
        Latitude: 33.83437323,
        Longitude: -84.62814192,
        Revenue: 952263,
        Employees: 4190,
        Industry: "Aerospace",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 438",
        Country: "US",
        PostalCode: 32765,
        Latitude: 28.66582646,
        Longitude: -81.19998319,
        Revenue: 731823,
        Employees: 4777,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 439",
        Country: "US",
        PostalCode: 33134,
        Latitude: 25.75298227,
        Longitude: -80.27106609,
        Revenue: 777473,
        Employees: 9723,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 440",
        Country: "US",
        PostalCode: 14215,
        Latitude: 42.93409085,
        Longitude: -78.80825375,
        Revenue: 292660,
        Employees: 9205,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 441",
        Country: "US",
        PostalCode: 11577,
        Latitude: 40.78288099,
        Longitude: -73.63633636,
        Revenue: 107122,
        Employees: 5434,
        Industry: "Aerospace",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 442",
        Country: "US",
        PostalCode: 92501,
        Latitude: 33.99473998,
        Longitude: -117.3746491,
        Revenue: 720498,
        Employees: 2463,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 443",
        Country: "US",
        PostalCode: 55435,
        Latitude: 44.87347384,
        Longitude: -93.33498781,
        Revenue: 17034,
        Employees: 7796,
        Industry: "Healthcare",
        BoundaryId: "USA_Minnesota"
      },
      {
        Name: "US Account 444",
        Country: "US",
        PostalCode: 23602,
        Latitude: 37.11263062,
        Longitude: -76.52094976,
        Revenue: 579155,
        Employees: 991,
        Industry: "Financial Services",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 445",
        Country: "US",
        PostalCode: 46219,
        Latitude: 39.78293901,
        Longitude: -86.04395472,
        Revenue: 403556,
        Employees: 2669,
        Industry: "Healthcare",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 446",
        Country: "US",
        PostalCode: 11203,
        Latitude: 40.6499928,
        Longitude: -73.93442256,
        Revenue: 828067,
        Employees: 7024,
        Industry: "Manufacturing",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 447",
        Country: "US",
        PostalCode: 82601,
        Latitude: 43.14659336,
        Longitude: -106.3727865,
        Revenue: 88735,
        Employees: 9448,
        Industry: "Healthcare",
        BoundaryId: "USA_Wyoming"
      },
      {
        Name: "US Account 448",
        Country: "US",
        PostalCode: 42129,
        Latitude: 36.99514189,
        Longitude: -85.58273459,
        Revenue: 416129,
        Employees: 7240,
        Industry: "Healthcare",
        BoundaryId: "USA_Kentucky"
      },
      {
        Name: "US Account 449",
        Country: "US",
        PostalCode: 27103,
        Latitude: 36.05744603,
        Longitude: -80.32142746,
        Revenue: 375270,
        Employees: 6608,
        Industry: "Aerospace",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 450",
        Country: "US",
        PostalCode: 72301,
        Latitude: 35.13730996,
        Longitude: -90.17308276,
        Revenue: 299558,
        Employees: 2621,
        Industry: "Aerospace",
        BoundaryId: "USA_Arkansas"
      },
      {
        Name: "US Account 451",
        Country: "US",
        PostalCode: 10020,
        Latitude: 40.75949267,
        Longitude: -73.98006231,
        Revenue: 641098,
        Employees: 1063,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 452",
        Country: "US",
        PostalCode: 84010,
        Latitude: 40.87144326,
        Longitude: -111.8309651,
        Revenue: 445203,
        Employees: 2938,
        Industry: "Healthcare",
        BoundaryId: "USA_Utah"
      },
      {
        Name: "US Account 453",
        Country: "US",
        PostalCode: 17044,
        Latitude: 40.59129191,
        Longitude: -77.58344947,
        Revenue: 843263,
        Employees: 9774,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 454",
        Country: "US",
        PostalCode: 36801,
        Latitude: 32.69011639,
        Longitude: -85.39997399,
        Revenue: 625576,
        Employees: 2064,
        Industry: "Financial Services",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 455",
        Country: "US",
        PostalCode: 28111,
        Latitude: 34.89331614,
        Longitude: -80.53992321,
        Revenue: 684203,
        Employees: 6089,
        Industry: "Aerospace",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 456",
        Country: "US",
        PostalCode: 24277,
        Latitude: 36.75340036,
        Longitude: -83.04063083,
        Revenue: 446914,
        Employees: 6895,
        Industry: "Financial Services",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 457",
        Country: "US",
        PostalCode: 70504,
        Latitude: 30.22006299,
        Longitude: -92.04666878,
        Revenue: 629663,
        Employees: 4792,
        Industry: "Aerospace",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 458",
        Country: "US",
        PostalCode: 36303,
        Latitude: 31.26612011,
        Longitude: -85.39613774,
        Revenue: 938423,
        Employees: 7391,
        Industry: "Aerospace",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 459",
        Country: "US",
        PostalCode: 7960,
        Latitude: 40.78462498,
        Longitude: -74.50158416,
        Revenue: 542521,
        Employees: 9096,
        Industry: "Aerospace",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 460",
        Country: "US",
        PostalCode: 2920,
        Latitude: 41.76729062,
        Longitude: -71.46597796,
        Revenue: 187982,
        Employees: 4945,
        Industry: "Healthcare",
        BoundaryId: "USA_Rhode Island"
      },
      {
        Name: "US Account 461",
        Country: "US",
        PostalCode: 59501,
        Latitude: 48.71086267,
        Longitude: -109.7935006,
        Revenue: 218396,
        Employees: 6066,
        Industry: "Aerospace",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 462",
        Country: "US",
        PostalCode: 78705,
        Latitude: 30.29283914,
        Longitude: -97.73746276,
        Revenue: 888953,
        Employees: 6005,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 463",
        Country: "US",
        PostalCode: 28348,
        Latitude: 34.930134,
        Longitude: -78.91611677,
        Revenue: 117792,
        Employees: 2754,
        Industry: "Aerospace",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 464",
        Country: "US",
        PostalCode: 28217,
        Latitude: 35.17166308,
        Longitude: -80.90748834,
        Revenue: 59221,
        Employees: 4264,
        Industry: "Financial Services",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 465",
        Country: "US",
        PostalCode: 28202,
        Latitude: 35.2279479,
        Longitude: -80.8439549,
        Revenue: 593877,
        Employees: 8252,
        Industry: "Manufacturing",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 466",
        Country: "US",
        PostalCode: 18960,
        Latitude: 40.36473843,
        Longitude: -75.32347154,
        Revenue: 487090,
        Employees: 8362,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 467",
        Country: "US",
        PostalCode: 54901,
        Latitude: 44.04731386,
        Longitude: -88.47868721,
        Revenue: 661734,
        Employees: 8886,
        Industry: "Aerospace",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 468",
        Country: "US",
        PostalCode: 31510,
        Latitude: 31.55561998,
        Longitude: -82.4454021,
        Revenue: 167235,
        Employees: 2963,
        Industry: "Manufacturing",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 469",
        Country: "US",
        PostalCode: 84120,
        Latitude: 40.69808982,
        Longitude: -112.0007777,
        Revenue: 563156,
        Employees: 1321,
        Industry: "Financial Services",
        BoundaryId: "USA_Utah"
      },
      {
        Name: "US Account 470",
        Country: "US",
        PostalCode: 94118,
        Latitude: 37.78042458,
        Longitude: -122.4621449,
        Revenue: 783336,
        Employees: 9011,
        Industry: "Financial Services",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 471",
        Country: "US",
        PostalCode: 19063,
        Latitude: 39.91981185,
        Longitude: -75.41562277,
        Revenue: 50032,
        Employees: 8556,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 472",
        Country: "US",
        PostalCode: 53704,
        Latitude: 43.12431366,
        Longitude: -89.37645098,
        Revenue: 667549,
        Employees: 4280,
        Industry: "Healthcare",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 473",
        Country: "US",
        PostalCode: 60035,
        Latitude: 42.18410334,
        Longitude: -87.81123808,
        Revenue: 149208,
        Employees: 310,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 474",
        Country: "US",
        PostalCode: 19143,
        Latitude: 39.94341957,
        Longitude: -75.22677133,
        Revenue: 209093,
        Employees: 2443,
        Industry: "Manufacturing",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 475",
        Country: "US",
        PostalCode: 48336,
        Latitude: 42.46327032,
        Longitude: -83.34642835,
        Revenue: 95966,
        Employees: 2067,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 476",
        Country: "US",
        PostalCode: 80751,
        Latitude: 40.64286767,
        Longitude: -103.2511508,
        Revenue: 384535,
        Employees: 1528,
        Industry: "Financial Services",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 477",
        Country: "US",
        PostalCode: 28144,
        Latitude: 35.70807729,
        Longitude: -80.46217045,
        Revenue: 913806,
        Employees: 4181,
        Industry: "Healthcare",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 478",
        Country: "US",
        PostalCode: 37604,
        Latitude: 36.30243906,
        Longitude: -82.38315574,
        Revenue: 986621,
        Employees: 363,
        Industry: "Manufacturing",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 479",
        Country: "US",
        PostalCode: 64601,
        Latitude: 39.77710111,
        Longitude: -93.53151356,
        Revenue: 731576,
        Employees: 9403,
        Industry: "Financial Services",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 480",
        Country: "US",
        PostalCode: 55416,
        Latitude: 44.95088917,
        Longitude: -93.34081727,
        Revenue: 904307,
        Employees: 2759,
        Industry: "Financial Services",
        BoundaryId: "USA_Minnesota"
      },
      {
        Name: "US Account 481",
        Country: "US",
        PostalCode: 99207,
        Latitude: 47.688989,
        Longitude: -117.3889762,
        Revenue: 28269,
        Employees: 3844,
        Industry: "Manufacturing",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 482",
        Country: "US",
        PostalCode: 38462,
        Latitude: 35.53255934,
        Longitude: -87.54327172,
        Revenue: 912880,
        Employees: 4806,
        Industry: "Healthcare",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 483",
        Country: "US",
        PostalCode: 37398,
        Latitude: 35.18639147,
        Longitude: -86.14316088,
        Revenue: 545478,
        Employees: 9610,
        Industry: "Financial Services",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 484",
        Country: "US",
        PostalCode: 60194,
        Latitude: 42.03370943,
        Longitude: -88.1110118,
        Revenue: 619615,
        Employees: 6969,
        Industry: "Healthcare",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 485",
        Country: "US",
        PostalCode: 39701,
        Latitude: 33.41980605,
        Longitude: -88.50897662,
        Revenue: 303728,
        Employees: 9748,
        Industry: "Aerospace",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 486",
        Country: "US",
        PostalCode: 46013,
        Latitude: 40.05141345,
        Longitude: -85.6796199,
        Revenue: 67466,
        Employees: 5e3,
        Industry: "Financial Services",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 487",
        Country: "US",
        PostalCode: 77550,
        Latitude: 29.31046594,
        Longitude: -94.77728666,
        Revenue: 793902,
        Employees: 2525,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 488",
        Country: "US",
        PostalCode: 76504,
        Latitude: 31.14391177,
        Longitude: -97.38008607,
        Revenue: 145514,
        Employees: 8743,
        Industry: "Aerospace",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 489",
        Country: "US",
        PostalCode: 77042,
        Latitude: 29.73992273,
        Longitude: -95.55797623,
        Revenue: 573314,
        Employees: 7569,
        Industry: "Aerospace",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 490",
        Country: "US",
        PostalCode: 71106,
        Latitude: 32.38438808,
        Longitude: -93.73400467,
        Revenue: 551882,
        Employees: 7985,
        Industry: "Manufacturing",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 491",
        Country: "US",
        PostalCode: 21213,
        Latitude: 39.3142933,
        Longitude: -76.57732154,
        Revenue: 720551,
        Employees: 300,
        Industry: "Manufacturing",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 492",
        Country: "US",
        PostalCode: 43056,
        Latitude: 40.00942028,
        Longitude: -82.33036788,
        Revenue: 117481,
        Employees: 7966,
        Industry: "Aerospace",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 493",
        Country: "US",
        PostalCode: 65807,
        Latitude: 37.16641122,
        Longitude: -93.32472975,
        Revenue: 842392,
        Employees: 2119,
        Industry: "Healthcare",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 494",
        Country: "US",
        PostalCode: 27401,
        Latitude: 36.06933386,
        Longitude: -79.76588927,
        Revenue: 16623,
        Employees: 8860,
        Industry: "Aerospace",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 495",
        Country: "US",
        PostalCode: 32605,
        Latitude: 29.67724588,
        Longitude: -82.37262396,
        Revenue: 572868,
        Employees: 8547,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 496",
        Country: "US",
        PostalCode: 1104,
        Latitude: 42.13332099,
        Longitude: -72.56712867,
        Revenue: 865076,
        Employees: 242,
        Industry: "Financial Services",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 497",
        Country: "US",
        PostalCode: 3103,
        Latitude: 42.95476802,
        Longitude: -71.44350204,
        Revenue: 578551,
        Employees: 2668,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Hampshire"
      },
      {
        Name: "US Account 498",
        Country: "US",
        PostalCode: 94526,
        Latitude: 37.81463582,
        Longitude: -121.9882127,
        Revenue: 579348,
        Employees: 2938,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 499",
        Country: "US",
        PostalCode: 37684,
        Latitude: 36.30243906,
        Longitude: -82.38315574,
        Revenue: 209959,
        Employees: 3222,
        Industry: "Manufacturing",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 500",
        Country: "US",
        PostalCode: 79904,
        Latitude: 31.85092667,
        Longitude: -106.4543062,
        Revenue: 28375,
        Employees: 8223,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 501",
        Country: "US",
        PostalCode: 80906,
        Latitude: 38.76434888,
        Longitude: -104.8728357,
        Revenue: 316706,
        Employees: 1149,
        Industry: "Financial Services",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 502",
        Country: "US",
        PostalCode: 60005,
        Latitude: 42.05761026,
        Longitude: -87.98768173,
        Revenue: 625319,
        Employees: 4396,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 503",
        Country: "US",
        PostalCode: 97754,
        Latitude: 44.12907433,
        Longitude: -120.4647729,
        Revenue: 595058,
        Employees: 366,
        Industry: "Manufacturing",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 504",
        Country: "US",
        PostalCode: 63109,
        Latitude: 38.58439515,
        Longitude: -90.29646298,
        Revenue: 324124,
        Employees: 9446,
        Industry: "Aerospace",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 505",
        Country: "US",
        PostalCode: 97210,
        Latitude: 45.54694069,
        Longitude: -122.7298258,
        Revenue: 220886,
        Employees: 9388,
        Industry: "Aerospace",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 506",
        Country: "US",
        PostalCode: 20850,
        Latitude: 39.08978137,
        Longitude: -77.18356195,
        Revenue: 555956,
        Employees: 7416,
        Industry: "Aerospace",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 507",
        Country: "US",
        PostalCode: 67846,
        Latitude: 38.01953167,
        Longitude: -100.7902468,
        Revenue: 561312,
        Employees: 3562,
        Industry: "Aerospace",
        BoundaryId: "USA_Kansas"
      },
      {
        Name: "US Account 508",
        Country: "US",
        PostalCode: 15108,
        Latitude: 40.50314941,
        Longitude: -80.19602639,
        Revenue: 617036,
        Employees: 9435,
        Industry: "Aerospace",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 509",
        Country: "US",
        PostalCode: 35660,
        Latitude: 34.75573737,
        Longitude: -87.70235729,
        Revenue: 514388,
        Employees: 2503,
        Industry: "Aerospace",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 510",
        Country: "US",
        PostalCode: 72101,
        Latitude: 35.23749789,
        Longitude: -91.14145252,
        Revenue: 191657,
        Employees: 3120,
        Industry: "Aerospace",
        BoundaryId: "USA_Arkansas"
      },
      {
        Name: "US Account 511",
        Country: "US",
        PostalCode: 43207,
        Latitude: 39.89524867,
        Longitude: -82.96284708,
        Revenue: 609833,
        Employees: 4937,
        Industry: "Healthcare",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 512",
        Country: "US",
        PostalCode: 33823,
        Latitude: 28.09677607,
        Longitude: -81.82635288,
        Revenue: 490775,
        Employees: 2136,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 513",
        Country: "US",
        PostalCode: 2114,
        Latitude: 42.36313429,
        Longitude: -71.06679902,
        Revenue: 786288,
        Employees: 988,
        Industry: "Aerospace",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 514",
        Country: "US",
        PostalCode: 44460,
        Latitude: 40.90183603,
        Longitude: -80.87233999,
        Revenue: 292371,
        Employees: 8198,
        Industry: "Healthcare",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 515",
        Country: "US",
        PostalCode: 38930,
        Latitude: 33.58597254,
        Longitude: -90.14047797,
        Revenue: 85660,
        Employees: 693,
        Industry: "Healthcare",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 516",
        Country: "US",
        PostalCode: 33143,
        Latitude: 25.70222541,
        Longitude: -80.29768725,
        Revenue: 716517,
        Employees: 5262,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 517",
        Country: "US",
        PostalCode: 95482,
        Latitude: 39.14688702,
        Longitude: -123.2412186,
        Revenue: 422749,
        Employees: 625,
        Industry: "Financial Services",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 518",
        Country: "US",
        PostalCode: 92630,
        Latitude: 33.64595295,
        Longitude: -117.6859821,
        Revenue: 10290,
        Employees: 8066,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 519",
        Country: "US",
        PostalCode: 98105,
        Latitude: 47.66183135,
        Longitude: -122.2810152,
        Revenue: 794839,
        Employees: 8577,
        Industry: "Aerospace",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 520",
        Country: "US",
        PostalCode: 44302,
        Latitude: 41.08927908,
        Longitude: -81.53718545,
        Revenue: 86529,
        Employees: 8885,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 521",
        Country: "US",
        PostalCode: 79413,
        Latitude: 33.5463352,
        Longitude: -101.8878202,
        Revenue: 846312,
        Employees: 5923,
        Industry: "Aerospace",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 522",
        Country: "US",
        PostalCode: 32703,
        Latitude: 28.65569778,
        Longitude: -81.52403989,
        Revenue: 475535,
        Employees: 715,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 523",
        Country: "US",
        PostalCode: 6460,
        Latitude: 41.21536256,
        Longitude: -73.05016178,
        Revenue: 510684,
        Employees: 4538,
        Industry: "Aerospace",
        BoundaryId: "USA_Connecticut"
      },
      {
        Name: "US Account 524",
        Country: "US",
        PostalCode: 85204,
        Latitude: 33.3971834,
        Longitude: -111.7876894,
        Revenue: 889877,
        Employees: 5651,
        Industry: "Financial Services",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 525",
        Country: "US",
        PostalCode: 90813,
        Latitude: 33.7807838,
        Longitude: -118.2005762,
        Revenue: 116866,
        Employees: 9343,
        Industry: "Financial Services",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 526",
        Country: "US",
        PostalCode: 37110,
        Latitude: 35.66273141,
        Longitude: -85.75905449,
        Revenue: 540552,
        Employees: 6145,
        Industry: "Manufacturing",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 527",
        Country: "US",
        PostalCode: 25705,
        Latitude: 38.40648092,
        Longitude: -82.36218995,
        Revenue: 183807,
        Employees: 7347,
        Industry: "Manufacturing",
        BoundaryId: "USA_West Virginia"
      },
      {
        Name: "US Account 528",
        Country: "US",
        PostalCode: 27834,
        Latitude: 35.66500526,
        Longitude: -77.38813329,
        Revenue: 295973,
        Employees: 2633,
        Industry: "Manufacturing",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 529",
        Country: "US",
        PostalCode: 97058,
        Latitude: 45.55137436,
        Longitude: -121.2005713,
        Revenue: 79302,
        Employees: 6984,
        Industry: "Healthcare",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 530",
        Country: "US",
        PostalCode: 80122,
        Latitude: 39.58058578,
        Longitude: -104.9557031,
        Revenue: 895252,
        Employees: 1835,
        Industry: "Healthcare",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 531",
        Country: "US",
        PostalCode: 97116,
        Latitude: 45.61009331,
        Longitude: -123.2394066,
        Revenue: 821642,
        Employees: 2578,
        Industry: "Financial Services",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 532",
        Country: "US",
        PostalCode: 28671,
        Latitude: 35.66203028,
        Longitude: -81.53707357,
        Revenue: 744647,
        Employees: 6033,
        Industry: "Aerospace",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 533",
        Country: "US",
        PostalCode: 60016,
        Latitude: 42.04893638,
        Longitude: -87.89259987,
        Revenue: 529620,
        Employees: 9854,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 534",
        Country: "US",
        PostalCode: 26505,
        Latitude: 39.65203483,
        Longitude: -79.9425927,
        Revenue: 146629,
        Employees: 463,
        Industry: "Manufacturing",
        BoundaryId: "USA_West Virginia"
      },
      {
        Name: "US Account 535",
        Country: "US",
        PostalCode: 21817,
        Latitude: 37.98114809,
        Longitude: -75.84786731,
        Revenue: 856740,
        Employees: 56,
        Industry: "Healthcare",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 536",
        Country: "US",
        PostalCode: 57301,
        Latitude: 43.71046384,
        Longitude: -98.04566227,
        Revenue: 996764,
        Employees: 4653,
        Industry: "Aerospace",
        BoundaryId: "USA_South Dakota"
      },
      {
        Name: "US Account 537",
        Country: "US",
        PostalCode: 59711,
        Latitude: 46.13608047,
        Longitude: -113.0218456,
        Revenue: 623016,
        Employees: 6394,
        Industry: "Aerospace",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 538",
        Country: "US",
        PostalCode: 35233,
        Latitude: 33.50863888,
        Longitude: -86.80256049,
        Revenue: 981286,
        Employees: 2909,
        Industry: "Aerospace",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 539",
        Country: "US",
        PostalCode: 89509,
        Latitude: 39.49676974,
        Longitude: -119.8275988,
        Revenue: 122165,
        Employees: 7991,
        Industry: "Manufacturing",
        BoundaryId: "USA_Nevada"
      },
      {
        Name: "US Account 540",
        Country: "US",
        PostalCode: 33484,
        Latitude: 26.45391182,
        Longitude: -80.13456976,
        Revenue: 460998,
        Employees: 3848,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 541",
        Country: "US",
        PostalCode: 92507,
        Latitude: 33.97536531,
        Longitude: -117.324987,
        Revenue: 144106,
        Employees: 5553,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 542",
        Country: "US",
        PostalCode: 78752,
        Latitude: 30.33076453,
        Longitude: -97.70348915,
        Revenue: 113285,
        Employees: 2251,
        Industry: "Manufacturing",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 543",
        Country: "US",
        PostalCode: 1606,
        Latitude: 42.31396296,
        Longitude: -71.79545368,
        Revenue: 979246,
        Employees: 7179,
        Industry: "Financial Services",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 544",
        Country: "US",
        PostalCode: 58504,
        Latitude: 46.71794812,
        Longitude: -100.6568273,
        Revenue: 304304,
        Employees: 2130,
        Industry: "Aerospace",
        BoundaryId: "USA_North Dakota"
      },
      {
        Name: "US Account 545",
        Country: "US",
        PostalCode: 63119,
        Latitude: 38.58898269,
        Longitude: -90.35171281,
        Revenue: 273874,
        Employees: 6879,
        Industry: "Healthcare",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 546",
        Country: "US",
        PostalCode: 8016,
        Latitude: 40.07010717,
        Longitude: -74.83212116,
        Revenue: 19166,
        Employees: 8819,
        Industry: "Financial Services",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 547",
        Country: "US",
        PostalCode: 38834,
        Latitude: 34.91143453,
        Longitude: -88.57130644,
        Revenue: 105848,
        Employees: 4710,
        Industry: "Manufacturing",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 548",
        Country: "US",
        PostalCode: 32808,
        Latitude: 28.57894116,
        Longitude: -81.44266975,
        Revenue: 151921,
        Employees: 7534,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 549",
        Country: "US",
        PostalCode: 90012,
        Latitude: 34.06595279,
        Longitude: -118.2387236,
        Revenue: 457368,
        Employees: 9382,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 550",
        Country: "US",
        PostalCode: 32501,
        Latitude: 30.42825954,
        Longitude: -87.22255707,
        Revenue: 103041,
        Employees: 1391,
        Industry: "Manufacturing",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 551",
        Country: "US",
        PostalCode: 46060,
        Latitude: 40.06575823,
        Longitude: -85.93153992,
        Revenue: 845863,
        Employees: 7236,
        Industry: "Manufacturing",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 552",
        Country: "US",
        PostalCode: 60076,
        Latitude: 42.03545076,
        Longitude: -87.73057246,
        Revenue: 59480,
        Employees: 2993,
        Industry: "Manufacturing",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 553",
        Country: "US",
        PostalCode: 21012,
        Latitude: 39.0451116,
        Longitude: -76.49799785,
        Revenue: 550714,
        Employees: 3889,
        Industry: "Healthcare",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 554",
        Country: "US",
        PostalCode: 46060,
        Latitude: 40.06575823,
        Longitude: -85.93153992,
        Revenue: 29248,
        Employees: 4508,
        Industry: "Aerospace",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 555",
        Country: "US",
        PostalCode: 6484,
        Latitude: 41.30580836,
        Longitude: -73.13861793,
        Revenue: 346982,
        Employees: 3613,
        Industry: "Aerospace",
        BoundaryId: "USA_Connecticut"
      },
      {
        Name: "US Account 556",
        Country: "US",
        PostalCode: 83805,
        Latitude: 48.80059126,
        Longitude: -116.5763225,
        Revenue: 643161,
        Employees: 586,
        Industry: "Healthcare",
        BoundaryId: "USA_Idaho"
      },
      {
        Name: "US Account 557",
        Country: "US",
        PostalCode: 51105,
        Latitude: 42.51133664,
        Longitude: -96.35974551,
        Revenue: 617699,
        Employees: 1590,
        Industry: "Healthcare",
        BoundaryId: "USA_Iowa"
      },
      {
        Name: "US Account 558",
        Country: "US",
        PostalCode: 53211,
        Latitude: 43.08201863,
        Longitude: -87.88377085,
        Revenue: 255265,
        Employees: 5539,
        Industry: "Aerospace",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 559",
        Country: "US",
        PostalCode: 52804,
        Latitude: 41.53428478,
        Longitude: -90.68319529,
        Revenue: 43521,
        Employees: 9351,
        Industry: "Financial Services",
        BoundaryId: "USA_Iowa"
      },
      {
        Name: "US Account 560",
        Country: "US",
        PostalCode: 2144,
        Latitude: 42.40108067,
        Longitude: -71.12209138,
        Revenue: 707551,
        Employees: 4516,
        Industry: "Aerospace",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 561",
        Country: "US",
        PostalCode: 55416,
        Latitude: 44.95088917,
        Longitude: -93.34081727,
        Revenue: 902951,
        Employees: 1949,
        Industry: "Financial Services",
        BoundaryId: "USA_Minnesota"
      },
      {
        Name: "US Account 562",
        Country: "US",
        PostalCode: 85390,
        Latitude: 33.83670056,
        Longitude: -113.0007148,
        Revenue: 255603,
        Employees: 863,
        Industry: "Aerospace",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 563",
        Country: "US",
        PostalCode: 77590,
        Latitude: 29.38555445,
        Longitude: -94.91758883,
        Revenue: 268130,
        Employees: 3586,
        Industry: "Aerospace",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 564",
        Country: "US",
        PostalCode: 35801,
        Latitude: 34.72379428,
        Longitude: -86.55223868,
        Revenue: 628914,
        Employees: 3369,
        Industry: "Financial Services",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 565",
        Country: "US",
        PostalCode: 18034,
        Latitude: 40.54325852,
        Longitude: -75.41056347,
        Revenue: 984374,
        Employees: 1893,
        Industry: "Healthcare",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 566",
        Country: "US",
        PostalCode: 60638,
        Latitude: 41.78321183,
        Longitude: -87.76965839,
        Revenue: 632733,
        Employees: 3544,
        Industry: "Financial Services",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 567",
        Country: "US",
        PostalCode: 2215,
        Latitude: 42.34747976,
        Longitude: -71.10228473,
        Revenue: 86664,
        Employees: 7326,
        Industry: "Financial Services",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 568",
        Country: "US",
        PostalCode: 38103,
        Latitude: 35.15811557,
        Longitude: -90.06766127,
        Revenue: 12849,
        Employees: 4776,
        Industry: "Financial Services",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 569",
        Country: "US",
        PostalCode: 67846,
        Latitude: 38.01953167,
        Longitude: -100.7902468,
        Revenue: 797785,
        Employees: 457,
        Industry: "Aerospace",
        BoundaryId: "USA_Kansas"
      },
      {
        Name: "US Account 570",
        Country: "US",
        PostalCode: 24701,
        Latitude: 37.29917479,
        Longitude: -81.20860655,
        Revenue: 338478,
        Employees: 8472,
        Industry: "Healthcare",
        BoundaryId: "USA_West Virginia"
      },
      {
        Name: "US Account 571",
        Country: "US",
        PostalCode: 59756,
        Latitude: 46.20331846,
        Longitude: -112.6763846,
        Revenue: 493700,
        Employees: 7633,
        Industry: "Financial Services",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 572",
        Country: "US",
        PostalCode: 83301,
        Latitude: 42.2873305,
        Longitude: -114.6024102,
        Revenue: 608848,
        Employees: 8942,
        Industry: "Aerospace",
        BoundaryId: "USA_Idaho"
      },
      {
        Name: "US Account 573",
        Country: "US",
        PostalCode: 89502,
        Latitude: 39.49332493,
        Longitude: -119.746534,
        Revenue: 406247,
        Employees: 3794,
        Industry: "Financial Services",
        BoundaryId: "USA_Nevada"
      },
      {
        Name: "US Account 574",
        Country: "US",
        PostalCode: 19010,
        Latitude: 40.02301166,
        Longitude: -75.33025163,
        Revenue: 302113,
        Employees: 5313,
        Industry: "Manufacturing",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 575",
        Country: "US",
        PostalCode: 38351,
        Latitude: 35.66616015,
        Longitude: -88.40524279,
        Revenue: 648714,
        Employees: 8061,
        Industry: "Healthcare",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 576",
        Country: "US",
        PostalCode: 56082,
        Latitude: 44.36904586,
        Longitude: -94.0544921,
        Revenue: 310797,
        Employees: 2282,
        Industry: "Healthcare",
        BoundaryId: "USA_Minnesota"
      },
      {
        Name: "US Account 577",
        Country: "US",
        PostalCode: 76104,
        Latitude: 32.72872976,
        Longitude: -97.31800884,
        Revenue: 99667,
        Employees: 328,
        Industry: "Aerospace",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 578",
        Country: "US",
        PostalCode: 80011,
        Latitude: 39.73854454,
        Longitude: -104.787017,
        Revenue: 453132,
        Employees: 3951,
        Industry: "Financial Services",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 579",
        Country: "US",
        PostalCode: 31728,
        Latitude: 30.79933759,
        Longitude: -84.22019806,
        Revenue: 792508,
        Employees: 6295,
        Industry: "Aerospace",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 580",
        Country: "US",
        PostalCode: 2879,
        Latitude: 41.42719295,
        Longitude: -71.53679335,
        Revenue: 339601,
        Employees: 4229,
        Industry: "Financial Services",
        BoundaryId: "USA_Rhode Island"
      },
      {
        Name: "US Account 581",
        Country: "US",
        PostalCode: 45895,
        Latitude: 40.57041079,
        Longitude: -84.15053262,
        Revenue: 300627,
        Employees: 8498,
        Industry: "Aerospace",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 582",
        Country: "US",
        PostalCode: 36111,
        Latitude: 32.33808585,
        Longitude: -86.27048624,
        Revenue: 472694,
        Employees: 1836,
        Industry: "Healthcare",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 583",
        Country: "US",
        PostalCode: 35950,
        Latitude: 34.25137124,
        Longitude: -86.26249118,
        Revenue: 488825,
        Employees: 9356,
        Industry: "Financial Services",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 584",
        Country: "US",
        PostalCode: 80234,
        Latitude: 39.91255938,
        Longitude: -105.0062369,
        Revenue: 735782,
        Employees: 8104,
        Industry: "Manufacturing",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 585",
        Country: "US",
        PostalCode: 29824,
        Latitude: 33.81455724,
        Longitude: -82.00802203,
        Revenue: 594197,
        Employees: 4324,
        Industry: "Manufacturing",
        BoundaryId: "USA_South Carolina"
      },
      {
        Name: "US Account 586",
        Country: "US",
        PostalCode: 70005,
        Latitude: 29.99883138,
        Longitude: -90.13407049,
        Revenue: 641723,
        Employees: 1458,
        Industry: "Financial Services",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 587",
        Country: "US",
        PostalCode: 2116,
        Latitude: 42.35070955,
        Longitude: -71.07657935,
        Revenue: 913235,
        Employees: 2765,
        Industry: "Financial Services",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 588",
        Country: "US",
        PostalCode: 24112,
        Latitude: 36.72344498,
        Longitude: -79.85746488,
        Revenue: 975646,
        Employees: 9208,
        Industry: "Aerospace",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 589",
        Country: "US",
        PostalCode: 76541,
        Latitude: 31.1147645,
        Longitude: -97.72827274,
        Revenue: 616693,
        Employees: 3345,
        Industry: "Manufacturing",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 590",
        Country: "US",
        PostalCode: 31601,
        Latitude: 30.74888325,
        Longitude: -83.33944377,
        Revenue: 264415,
        Employees: 6292,
        Industry: "Aerospace",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 591",
        Country: "US",
        PostalCode: 22015,
        Latitude: 38.78632346,
        Longitude: -77.28194658,
        Revenue: 229925,
        Employees: 6463,
        Industry: "Financial Services",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 592",
        Country: "US",
        PostalCode: 7505,
        Latitude: 40.91673873,
        Longitude: -74.17176963,
        Revenue: 91472,
        Employees: 6322,
        Industry: "Aerospace",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 593",
        Country: "US",
        PostalCode: 10003,
        Latitude: 40.73203013,
        Longitude: -73.98890394,
        Revenue: 793338,
        Employees: 5226,
        Industry: "Aerospace",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 594",
        Country: "US",
        PostalCode: 7435,
        Latitude: 41.07105622,
        Longitude: -74.44039618,
        Revenue: 660944,
        Employees: 3325,
        Industry: "Healthcare",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 595",
        Country: "US",
        PostalCode: 66614,
        Latitude: 39.01193841,
        Longitude: -95.82471471,
        Revenue: 958974,
        Employees: 4016,
        Industry: "Healthcare",
        BoundaryId: "USA_Kansas"
      },
      {
        Name: "US Account 596",
        Country: "US",
        PostalCode: 43952,
        Latitude: 40.39923214,
        Longitude: -80.66289301,
        Revenue: 987779,
        Employees: 6810,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 597",
        Country: "US",
        PostalCode: 76034,
        Latitude: 32.89170666,
        Longitude: -97.14884827,
        Revenue: 212321,
        Employees: 9464,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 598",
        Country: "US",
        PostalCode: 18834,
        Latitude: 41.84141472,
        Longitude: -75.71693031,
        Revenue: 491851,
        Employees: 2903,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 599",
        Country: "US",
        PostalCode: 44129,
        Latitude: 41.39124235,
        Longitude: -81.73483614,
        Revenue: 337527,
        Employees: 7459,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 600",
        Country: "US",
        PostalCode: 39476,
        Latitude: 31.37507306,
        Longitude: -88.87922089,
        Revenue: 94730,
        Employees: 6863,
        Industry: "Financial Services",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 601",
        Country: "US",
        PostalCode: 31709,
        Latitude: 32.04270309,
        Longitude: -84.13873553,
        Revenue: 454236,
        Employees: 7133,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 602",
        Country: "US",
        PostalCode: 11772,
        Latitude: 40.76168034,
        Longitude: -72.97369639,
        Revenue: 458816,
        Employees: 505,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 603",
        Country: "US",
        PostalCode: 33415,
        Latitude: 26.6597899,
        Longitude: -80.12770076,
        Revenue: 648422,
        Employees: 2623,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 604",
        Country: "US",
        PostalCode: 60005,
        Latitude: 42.05761026,
        Longitude: -87.98768173,
        Revenue: 588993,
        Employees: 1624,
        Industry: "Healthcare",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 605",
        Country: "US",
        PostalCode: 33511,
        Latitude: 27.90937093,
        Longitude: -82.29336155,
        Revenue: 363047,
        Employees: 9670,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 606",
        Country: "US",
        PostalCode: 25276,
        Latitude: 38.78356809,
        Longitude: -81.32630953,
        Revenue: 753298,
        Employees: 9248,
        Industry: "Aerospace",
        BoundaryId: "USA_West Virginia"
      },
      {
        Name: "US Account 607",
        Country: "US",
        PostalCode: 70114,
        Latitude: 29.93661213,
        Longitude: -90.03193328,
        Revenue: 234271,
        Employees: 1124,
        Industry: "Aerospace",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 608",
        Country: "US",
        PostalCode: 37166,
        Latitude: 35.92278567,
        Longitude: -85.79053448,
        Revenue: 398326,
        Employees: 3758,
        Industry: "Healthcare",
        BoundaryId: "USA_Tennessee"
      },
      {
        Name: "US Account 609",
        Country: "US",
        PostalCode: 32225,
        Latitude: 30.35424439,
        Longitude: -81.49777764,
        Revenue: 326819,
        Employees: 4383,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 610",
        Country: "US",
        PostalCode: 27401,
        Latitude: 36.06933386,
        Longitude: -79.76588927,
        Revenue: 946995,
        Employees: 7855,
        Industry: "Healthcare",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 611",
        Country: "US",
        PostalCode: 98520,
        Latitude: 47.08307657,
        Longitude: -123.7876919,
        Revenue: 764899,
        Employees: 7084,
        Industry: "Healthcare",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 612",
        Country: "US",
        PostalCode: 18015,
        Latitude: 40.59067622,
        Longitude: -75.36748486,
        Revenue: 621779,
        Employees: 2922,
        Industry: "Healthcare",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 613",
        Country: "US",
        PostalCode: 60613,
        Latitude: 41.95398375,
        Longitude: -87.65956068,
        Revenue: 24622,
        Employees: 6937,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 614",
        Country: "US",
        PostalCode: 78746,
        Latitude: 30.29442198,
        Longitude: -97.81308169,
        Revenue: 279086,
        Employees: 8255,
        Industry: "Manufacturing",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 615",
        Country: "US",
        PostalCode: 90003,
        Latitude: 33.96396423,
        Longitude: -118.2739273,
        Revenue: 482169,
        Employees: 1523,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 616",
        Country: "US",
        PostalCode: 36049,
        Latitude: 31.76280217,
        Longitude: -86.27618575,
        Revenue: 586223,
        Employees: 8153,
        Industry: "Manufacturing",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 617",
        Country: "US",
        PostalCode: 87106,
        Latitude: 35.04921977,
        Longitude: -106.6213285,
        Revenue: 897130,
        Employees: 1580,
        Industry: "Aerospace",
        BoundaryId: "USA_New Mexico"
      },
      {
        Name: "US Account 618",
        Country: "US",
        PostalCode: 48503,
        Latitude: 43.01085096,
        Longitude: -83.68908277,
        Revenue: 62331,
        Employees: 2886,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 619",
        Country: "US",
        PostalCode: 99122,
        Latitude: 47.68840212,
        Longitude: -118.179408,
        Revenue: 568053,
        Employees: 6423,
        Industry: "Aerospace",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 620",
        Country: "US",
        PostalCode: 43950,
        Latitude: 40.09427263,
        Longitude: -80.92315736,
        Revenue: 651411,
        Employees: 2958,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 621",
        Country: "US",
        PostalCode: 7740,
        Latitude: 40.29539322,
        Longitude: -73.99247524,
        Revenue: 591575,
        Employees: 7754,
        Industry: "Aerospace",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 622",
        Country: "US",
        PostalCode: 30680,
        Latitude: 33.99704306,
        Longitude: -83.70191661,
        Revenue: 1701,
        Employees: 2589,
        Industry: "Healthcare",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 623",
        Country: "US",
        PostalCode: 80501,
        Latitude: 40.16422606,
        Longitude: -105.1028489,
        Revenue: 630583,
        Employees: 630,
        Industry: "Manufacturing",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 624",
        Country: "US",
        PostalCode: 29732,
        Latitude: 34.96949951,
        Longitude: -81.08036919,
        Revenue: 307853,
        Employees: 4381,
        Industry: "Manufacturing",
        BoundaryId: "USA_South Carolina"
      },
      {
        Name: "US Account 625",
        Country: "US",
        PostalCode: 6040,
        Latitude: 41.76172966,
        Longitude: -72.52247256,
        Revenue: 561763,
        Employees: 3661,
        Industry: "Healthcare",
        BoundaryId: "USA_Connecticut"
      },
      {
        Name: "US Account 626",
        Country: "US",
        PostalCode: 62946,
        Latitude: 37.71675071,
        Longitude: -88.53560595,
        Revenue: 239815,
        Employees: 9095,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 627",
        Country: "US",
        PostalCode: 33157,
        Latitude: 25.60614394,
        Longitude: -80.34337174,
        Revenue: 2828,
        Employees: 4223,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 628",
        Country: "US",
        PostalCode: 63118,
        Latitude: 38.59251365,
        Longitude: -90.22626525,
        Revenue: 458003,
        Employees: 1367,
        Industry: "Financial Services",
        BoundaryId: "USA_Missouri"
      },
      {
        Name: "US Account 629",
        Country: "US",
        PostalCode: 91360,
        Latitude: 34.21465926,
        Longitude: -118.8799385,
        Revenue: 276477,
        Employees: 6833,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 630",
        Country: "US",
        PostalCode: 60025,
        Latitude: 42.07456872,
        Longitude: -87.82232383,
        Revenue: 787671,
        Employees: 1648,
        Industry: "Financial Services",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 631",
        Country: "US",
        PostalCode: 91910,
        Latitude: 32.63797662,
        Longitude: -117.0563189,
        Revenue: 991655,
        Employees: 7149,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 632",
        Country: "US",
        PostalCode: 60089,
        Latitude: 42.16737372,
        Longitude: -87.96383688,
        Revenue: 187300,
        Employees: 647,
        Industry: "Healthcare",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 633",
        Country: "US",
        PostalCode: 75218,
        Latitude: 32.84233541,
        Longitude: -96.7030552,
        Revenue: 961794,
        Employees: 1500,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 634",
        Country: "US",
        PostalCode: 84094,
        Latitude: 40.5713175,
        Longitude: -111.8623614,
        Revenue: 834274,
        Employees: 1707,
        Industry: "Aerospace",
        BoundaryId: "USA_Utah"
      },
      {
        Name: "US Account 635",
        Country: "US",
        PostalCode: 7050,
        Latitude: 40.76839163,
        Longitude: -74.23503768,
        Revenue: 300772,
        Employees: 7566,
        Industry: "Financial Services",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 636",
        Country: "US",
        PostalCode: 97220,
        Latitude: 45.55102608,
        Longitude: -122.5584483,
        Revenue: 258871,
        Employees: 340,
        Industry: "Manufacturing",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 637",
        Country: "US",
        PostalCode: 35205,
        Latitude: 33.49500411,
        Longitude: -86.80785805,
        Revenue: 564693,
        Employees: 4288,
        Industry: "Manufacturing",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 638",
        Country: "US",
        PostalCode: 48322,
        Latitude: 42.54226987,
        Longitude: -83.38203458,
        Revenue: 100324,
        Employees: 5003,
        Industry: "Manufacturing",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 639",
        Country: "US",
        PostalCode: 40033,
        Latitude: 37.56288671,
        Longitude: -85.25355458,
        Revenue: 869197,
        Employees: 3055,
        Industry: "Aerospace",
        BoundaryId: "USA_Kentucky"
      },
      {
        Name: "US Account 640",
        Country: "US",
        PostalCode: 39701,
        Latitude: 33.41980605,
        Longitude: -88.50897662,
        Revenue: 472240,
        Employees: 745,
        Industry: "Manufacturing",
        BoundaryId: "USA_Mississippi"
      },
      {
        Name: "US Account 641",
        Country: "US",
        PostalCode: 84321,
        Latitude: 41.68275451,
        Longitude: -111.6472519,
        Revenue: 773231,
        Employees: 1019,
        Industry: "Financial Services",
        BoundaryId: "USA_Utah"
      },
      {
        Name: "US Account 642",
        Country: "US",
        PostalCode: 70433,
        Latitude: 30.46076477,
        Longitude: -90.1308006,
        Revenue: 703464,
        Employees: 1502,
        Industry: "Manufacturing",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 643",
        Country: "US",
        PostalCode: 16652,
        Latitude: 40.53963244,
        Longitude: -77.9312963,
        Revenue: 998023,
        Employees: 9436,
        Industry: "Manufacturing",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 644",
        Country: "US",
        PostalCode: 27106,
        Latitude: 36.14244033,
        Longitude: -80.32161921,
        Revenue: 494095,
        Employees: 3104,
        Industry: "Aerospace",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 645",
        Country: "US",
        PostalCode: 30642,
        Latitude: 33.54985942,
        Longitude: -83.19183999,
        Revenue: 99218,
        Employees: 2625,
        Industry: "Aerospace",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 646",
        Country: "US",
        PostalCode: 90247,
        Latitude: 33.89127699,
        Longitude: -118.2980142,
        Revenue: 54374,
        Employees: 6381,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 647",
        Country: "US",
        PostalCode: 8079,
        Latitude: 39.53103725,
        Longitude: -75.44266331,
        Revenue: 878819,
        Employees: 6353,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 648",
        Country: "US",
        PostalCode: 85018,
        Latitude: 33.49966668,
        Longitude: -111.9825443,
        Revenue: 635899,
        Employees: 4417,
        Industry: "Aerospace",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 649",
        Country: "US",
        PostalCode: 42001,
        Latitude: 37.03490267,
        Longitude: -88.71306244,
        Revenue: 437264,
        Employees: 9494,
        Industry: "Financial Services",
        BoundaryId: "USA_Kentucky"
      },
      {
        Name: "US Account 650",
        Country: "US",
        PostalCode: 59263,
        Latitude: 48.74510843,
        Longitude: -105.4463176,
        Revenue: 368831,
        Employees: 8140,
        Industry: "Manufacturing",
        BoundaryId: "USA_Montana"
      },
      {
        Name: "US Account 651",
        Country: "US",
        PostalCode: 10032,
        Latitude: 40.83686891,
        Longitude: -73.94949064,
        Revenue: 727066,
        Employees: 3474,
        Industry: "Healthcare",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 652",
        Country: "US",
        PostalCode: 11042,
        Latitude: 40.75823924,
        Longitude: -73.69704124,
        Revenue: 932663,
        Employees: 6873,
        Industry: "Aerospace",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 653",
        Country: "US",
        PostalCode: 21620,
        Latitude: 39.20361403,
        Longitude: -76.09241539,
        Revenue: 90119,
        Employees: 776,
        Industry: "Healthcare",
        BoundaryId: "USA_Maryland"
      },
      {
        Name: "US Account 654",
        Country: "US",
        PostalCode: 61415,
        Latitude: 40.65089227,
        Longitude: -90.41829923,
        Revenue: 430192,
        Employees: 190,
        Industry: "Manufacturing",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 655",
        Country: "US",
        PostalCode: 61108,
        Latitude: 42.25494349,
        Longitude: -89.00193776,
        Revenue: 11492,
        Employees: 1410,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 656",
        Country: "US",
        PostalCode: 3867,
        Latitude: 43.30164213,
        Longitude: -70.98640183,
        Revenue: 641568,
        Employees: 4799,
        Industry: "Healthcare",
        BoundaryId: "USA_New Hampshire"
      },
      {
        Name: "US Account 657",
        Country: "US",
        PostalCode: 62220,
        Latitude: 38.47099503,
        Longitude: -89.98517086,
        Revenue: 759296,
        Employees: 2791,
        Industry: "Healthcare",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 658",
        Country: "US",
        PostalCode: 80909,
        Latitude: 38.85299577,
        Longitude: -104.7743476,
        Revenue: 674567,
        Employees: 5837,
        Industry: "Aerospace",
        BoundaryId: "USA_Colorado"
      },
      {
        Name: "US Account 659",
        Country: "US",
        PostalCode: 1741,
        Latitude: 42.52864386,
        Longitude: -71.35076256,
        Revenue: 190345,
        Employees: 2185,
        Industry: "Healthcare",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 660",
        Country: "US",
        PostalCode: 94086,
        Latitude: 37.37130309,
        Longitude: -122.0208351,
        Revenue: 855161,
        Employees: 2979,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 661",
        Country: "US",
        PostalCode: 96786,
        Latitude: 21.50716587,
        Longitude: -158.0266434,
        Revenue: 73267,
        Employees: 3284,
        Industry: "Healthcare",
        BoundaryId: "USA_Hawaii"
      },
      {
        Name: "US Account 662",
        Country: "US",
        PostalCode: 30474,
        Latitude: 32.21572218,
        Longitude: -82.41332299,
        Revenue: 376813,
        Employees: 7733,
        Industry: "Financial Services",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 663",
        Country: "US",
        PostalCode: 19468,
        Latitude: 40.20403393,
        Longitude: -75.52906209,
        Revenue: 384409,
        Employees: 5539,
        Industry: "Financial Services",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 664",
        Country: "US",
        PostalCode: 97045,
        Latitude: 45.3296918,
        Longitude: -122.5277109,
        Revenue: 198854,
        Employees: 3428,
        Industry: "Financial Services",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 665",
        Country: "US",
        PostalCode: 60020,
        Latitude: 42.39900188,
        Longitude: -88.17247239,
        Revenue: 922315,
        Employees: 31,
        Industry: "Aerospace",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 666",
        Country: "US",
        PostalCode: 78232,
        Latitude: 29.58730966,
        Longitude: -98.47403501,
        Revenue: 539423,
        Employees: 7925,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 667",
        Country: "US",
        PostalCode: 60608,
        Latitude: 41.84872315,
        Longitude: -87.67099101,
        Revenue: 968408,
        Employees: 619,
        Industry: "Healthcare",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 668",
        Country: "US",
        PostalCode: 53105,
        Latitude: 42.66096387,
        Longitude: -88.27906149,
        Revenue: 730952,
        Employees: 8077,
        Industry: "Aerospace",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 669",
        Country: "US",
        PostalCode: 23502,
        Latitude: 36.85603359,
        Longitude: -76.21200846,
        Revenue: 123505,
        Employees: 786,
        Industry: "Financial Services",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 670",
        Country: "US",
        PostalCode: 72117,
        Latitude: 34.78323545,
        Longitude: -92.14372569,
        Revenue: 566228,
        Employees: 7402,
        Industry: "Manufacturing",
        BoundaryId: "USA_Arkansas"
      },
      {
        Name: "US Account 671",
        Country: "US",
        PostalCode: 62226,
        Latitude: 38.53430352,
        Longitude: -90.00178315,
        Revenue: 718130,
        Employees: 5954,
        Industry: "Manufacturing",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 672",
        Country: "US",
        PostalCode: 6320,
        Latitude: 41.3528735,
        Longitude: -72.10536655,
        Revenue: 556952,
        Employees: 2936,
        Industry: "Aerospace",
        BoundaryId: "USA_Connecticut"
      },
      {
        Name: "US Account 673",
        Country: "US",
        PostalCode: 60085,
        Latitude: 42.35726999,
        Longitude: -87.86172232,
        Revenue: 8338,
        Employees: 2614,
        Industry: "Financial Services",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 674",
        Country: "US",
        PostalCode: 44140,
        Latitude: 41.48509525,
        Longitude: -81.9317048,
        Revenue: 626941,
        Employees: 115,
        Industry: "Healthcare",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 675",
        Country: "US",
        PostalCode: 61820,
        Latitude: 40.11158924,
        Longitude: -88.24320212,
        Revenue: 697421,
        Employees: 1646,
        Industry: "Manufacturing",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 676",
        Country: "US",
        PostalCode: 2904,
        Latitude: 41.85995936,
        Longitude: -71.43584853,
        Revenue: 581647,
        Employees: 167,
        Industry: "Financial Services",
        BoundaryId: "USA_Rhode Island"
      },
      {
        Name: "US Account 677",
        Country: "US",
        PostalCode: 77006,
        Latitude: 29.74097006,
        Longitude: -95.39148797,
        Revenue: 767684,
        Employees: 9845,
        Industry: "Financial Services",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 678",
        Country: "US",
        PostalCode: 95422,
        Latitude: 38.97625647,
        Longitude: -122.5563737,
        Revenue: 329185,
        Employees: 2630,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 679",
        Country: "US",
        PostalCode: 78284,
        Latitude: 29.54057532,
        Longitude: -98.42149272,
        Revenue: 303467,
        Employees: 749,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 680",
        Country: "US",
        PostalCode: 97504,
        Latitude: 42.32762425,
        Longitude: -122.80007,
        Revenue: 392718,
        Employees: 808,
        Industry: "Financial Services",
        BoundaryId: "USA_Oregon"
      },
      {
        Name: "US Account 681",
        Country: "US",
        PostalCode: 25414,
        Latitude: 39.25810456,
        Longitude: -77.86961702,
        Revenue: 380722,
        Employees: 677,
        Industry: "Aerospace",
        BoundaryId: "USA_West Virginia"
      },
      {
        Name: "US Account 682",
        Country: "US",
        PostalCode: 73051,
        Latitude: 35.03129397,
        Longitude: -97.24525976,
        Revenue: 661507,
        Employees: 497,
        Industry: "Manufacturing",
        BoundaryId: "USA_Oklahoma"
      },
      {
        Name: "US Account 683",
        Country: "US",
        PostalCode: 20117,
        Latitude: 38.99713538,
        Longitude: -77.73401821,
        Revenue: 783397,
        Employees: 5693,
        Industry: "Financial Services",
        BoundaryId: "USA_Virginia"
      },
      {
        Name: "US Account 684",
        Country: "US",
        PostalCode: 55122,
        Latitude: 44.80292696,
        Longitude: -93.19603207,
        Revenue: 66776,
        Employees: 5978,
        Industry: "Financial Services",
        BoundaryId: "USA_Minnesota"
      },
      {
        Name: "US Account 685",
        Country: "US",
        PostalCode: 33440,
        Latitude: 26.53970353,
        Longitude: -81.00771233,
        Revenue: 924415,
        Employees: 7361,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 686",
        Country: "US",
        PostalCode: 11566,
        Latitude: 40.66659761,
        Longitude: -73.55571036,
        Revenue: 445278,
        Employees: 366,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 687",
        Country: "US",
        PostalCode: 44505,
        Latitude: 41.12788911,
        Longitude: -80.62167929,
        Revenue: 934404,
        Employees: 4139,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 688",
        Country: "US",
        PostalCode: 20001,
        Latitude: 38.91104777,
        Longitude: -77.01783138,
        Revenue: 18340,
        Employees: 8217,
        Industry: "Healthcare"
      },
      {
        Name: "US Account 689",
        Country: "US",
        PostalCode: 44145,
        Latitude: 41.45244443,
        Longitude: -81.92950628,
        Revenue: 989582,
        Employees: 9589,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 690",
        Country: "US",
        PostalCode: 67156,
        Latitude: 37.24679873,
        Longitude: -96.96486735,
        Revenue: 204753,
        Employees: 6471,
        Industry: "Aerospace",
        BoundaryId: "USA_Kansas"
      },
      {
        Name: "US Account 691",
        Country: "US",
        PostalCode: 95123,
        Latitude: 37.24354785,
        Longitude: -121.8299557,
        Revenue: 953359,
        Employees: 9914,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 692",
        Country: "US",
        PostalCode: 10467,
        Latitude: 40.87783633,
        Longitude: -73.87077105,
        Revenue: 829940,
        Employees: 3833,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 693",
        Country: "US",
        PostalCode: 90031,
        Latitude: 34.08006855,
        Longitude: -118.2132103,
        Revenue: 602359,
        Employees: 9384,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 694",
        Country: "US",
        PostalCode: 77089,
        Latitude: 29.58831308,
        Longitude: -95.22673031,
        Revenue: 873230,
        Employees: 8018,
        Industry: "Healthcare",
        BoundaryId: "USA_Texas"
      },
      {
        Name: "US Account 695",
        Country: "US",
        PostalCode: 28001,
        Latitude: 35.33713794,
        Longitude: -80.20334261,
        Revenue: 805273,
        Employees: 5197,
        Industry: "Healthcare",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 696",
        Country: "US",
        PostalCode: 33125,
        Latitude: 25.78378655,
        Longitude: -80.23665056,
        Revenue: 94750,
        Employees: 1950,
        Industry: "Financial Services",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 697",
        Country: "US",
        PostalCode: 36106,
        Latitude: 32.35317848,
        Longitude: -86.25901749,
        Revenue: 209802,
        Employees: 5904,
        Industry: "Aerospace",
        BoundaryId: "USA_Alabama"
      },
      {
        Name: "US Account 698",
        Country: "US",
        PostalCode: 91205,
        Latitude: 34.13658198,
        Longitude: -118.2436072,
        Revenue: 424680,
        Employees: 3144,
        Industry: "Financial Services",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 699",
        Country: "US",
        PostalCode: 1588,
        Latitude: 42.11990403,
        Longitude: -71.66858547,
        Revenue: 45477,
        Employees: 2268,
        Industry: "Aerospace",
        BoundaryId: "USA_Massachusetts"
      },
      {
        Name: "US Account 700",
        Country: "US",
        PostalCode: 43130,
        Latitude: 39.69679768,
        Longitude: -82.61112408,
        Revenue: 654739,
        Employees: 2619,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 701",
        Country: "US",
        PostalCode: 98823,
        Latitude: 47.26431272,
        Longitude: -119.6037993,
        Revenue: 813934,
        Employees: 6392,
        Industry: "Healthcare",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 702",
        Country: "US",
        PostalCode: 12590,
        Latitude: 41.59437329,
        Longitude: -73.88763197,
        Revenue: 721061,
        Employees: 4542,
        Industry: "Manufacturing",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 703",
        Country: "US",
        PostalCode: 55433,
        Latitude: 45.16186529,
        Longitude: -93.31718139,
        Revenue: 131682,
        Employees: 6221,
        Industry: "Healthcare",
        BoundaryId: "USA_Minnesota"
      },
      {
        Name: "US Account 704",
        Country: "US",
        PostalCode: 33065,
        Latitude: 26.27355736,
        Longitude: -80.26127829,
        Revenue: 650662,
        Employees: 796,
        Industry: "Manufacturing",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 705",
        Country: "US",
        PostalCode: 85012,
        Latitude: 33.50917944,
        Longitude: -112.0694105,
        Revenue: 747047,
        Employees: 5595,
        Industry: "Manufacturing",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 706",
        Country: "US",
        PostalCode: 70006,
        Latitude: 30.01345742,
        Longitude: -90.19175729,
        Revenue: 834085,
        Employees: 1340,
        Industry: "Manufacturing",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 707",
        Country: "US",
        PostalCode: 26037,
        Latitude: 40.33886981,
        Longitude: -80.58076136,
        Revenue: 484572,
        Employees: 2133,
        Industry: "Healthcare",
        BoundaryId: "USA_West Virginia"
      },
      {
        Name: "US Account 708",
        Country: "US",
        PostalCode: 44512,
        Latitude: 41.02333539,
        Longitude: -80.67104478,
        Revenue: 596699,
        Employees: 4894,
        Industry: "Manufacturing",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 709",
        Country: "US",
        PostalCode: 33708,
        Latitude: 27.81296782,
        Longitude: -82.79318869,
        Revenue: 625453,
        Employees: 6849,
        Industry: "Healthcare",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 710",
        Country: "US",
        PostalCode: 29407,
        Latitude: 32.79960335,
        Longitude: -79.99752483,
        Revenue: 254634,
        Employees: 7756,
        Industry: "Aerospace",
        BoundaryId: "USA_South Carolina"
      },
      {
        Name: "US Account 711",
        Country: "US",
        PostalCode: 46374,
        Latitude: 41.20913078,
        Longitude: -86.88916379,
        Revenue: 70320,
        Employees: 9314,
        Industry: "Healthcare",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 712",
        Country: "US",
        PostalCode: 33145,
        Latitude: 25.75312567,
        Longitude: -80.23477388,
        Revenue: 516990,
        Employees: 9334,
        Industry: "Aerospace",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 713",
        Country: "US",
        PostalCode: 45631,
        Latitude: 38.80812972,
        Longitude: -82.25694145,
        Revenue: 942504,
        Employees: 5756,
        Industry: "Financial Services",
        BoundaryId: "USA_Ohio"
      },
      {
        Name: "US Account 714",
        Country: "US",
        PostalCode: 93003,
        Latitude: 34.27928307,
        Longitude: -119.2190332,
        Revenue: 875895,
        Employees: 5806,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 715",
        Country: "US",
        PostalCode: 19135,
        Latitude: 40.0196487,
        Longitude: -75.05007306,
        Revenue: 902429,
        Employees: 2399,
        Industry: "Manufacturing",
        BoundaryId: "USA_Pennsylvania"
      },
      {
        Name: "US Account 716",
        Country: "US",
        PostalCode: 48519,
        Latitude: 42.98758185,
        Longitude: -83.60576874,
        Revenue: 209434,
        Employees: 1833,
        Industry: "Aerospace",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 717",
        Country: "US",
        PostalCode: 48066,
        Latitude: 42.5075247,
        Longitude: -82.93683542,
        Revenue: 487117,
        Employees: 8359,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 718",
        Country: "US",
        PostalCode: 48116,
        Latitude: 42.50322489,
        Longitude: -83.77797547,
        Revenue: 832366,
        Employees: 6576,
        Industry: "Healthcare",
        BoundaryId: "USA_Michigan"
      },
      {
        Name: "US Account 719",
        Country: "US",
        PostalCode: 53227,
        Latitude: 42.99496112,
        Longitude: -88.04307519,
        Revenue: 692560,
        Employees: 4890,
        Industry: "Healthcare",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 720",
        Country: "US",
        PostalCode: 98107,
        Latitude: 47.66791063,
        Longitude: -122.3782968,
        Revenue: 575418,
        Employees: 6727,
        Industry: "Manufacturing",
        BoundaryId: "USA_Washington"
      },
      {
        Name: "US Account 721",
        Country: "US",
        PostalCode: 54901,
        Latitude: 44.04731386,
        Longitude: -88.47868721,
        Revenue: 540194,
        Employees: 1329,
        Industry: "Manufacturing",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 722",
        Country: "US",
        PostalCode: 47150,
        Latitude: 38.29252527,
        Longitude: -85.84583638,
        Revenue: 953152,
        Employees: 475,
        Industry: "Financial Services",
        BoundaryId: "USA_Indiana"
      },
      {
        Name: "US Account 723",
        Country: "US",
        PostalCode: 27834,
        Latitude: 35.66500526,
        Longitude: -77.38813329,
        Revenue: 406187,
        Employees: 8604,
        Industry: "Aerospace",
        BoundaryId: "USA_North Carolina"
      },
      {
        Name: "US Account 724",
        Country: "US",
        PostalCode: 6479,
        Latitude: 41.57627249,
        Longitude: -72.90833142,
        Revenue: 123449,
        Employees: 8919,
        Industry: "Aerospace",
        BoundaryId: "USA_Connecticut"
      },
      {
        Name: "US Account 725",
        Country: "US",
        PostalCode: 7032,
        Latitude: 40.75351417,
        Longitude: -74.12025284,
        Revenue: 818003,
        Employees: 1336,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 726",
        Country: "US",
        PostalCode: 70737,
        Latitude: 30.23153684,
        Longitude: -90.92034912,
        Revenue: 658548,
        Employees: 3324,
        Industry: "Aerospace",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 727",
        Country: "US",
        PostalCode: 29572,
        Latitude: 33.76695855,
        Longitude: -78.7946407,
        Revenue: 416826,
        Employees: 5557,
        Industry: "Financial Services",
        BoundaryId: "USA_South Carolina"
      },
      {
        Name: "US Account 728",
        Country: "US",
        PostalCode: 11554,
        Latitude: 40.72012572,
        Longitude: -73.56007567,
        Revenue: 520013,
        Employees: 7553,
        Industry: "Financial Services",
        BoundaryId: "USA_New York"
      },
      {
        Name: "US Account 729",
        Country: "US",
        PostalCode: 87701,
        Latitude: 35.49366451,
        Longitude: -105.0856823,
        Revenue: 132219,
        Employees: 7019,
        Industry: "Manufacturing",
        BoundaryId: "USA_New Mexico"
      },
      {
        Name: "US Account 730",
        Country: "US",
        PostalCode: 87110,
        Latitude: 35.10871818,
        Longitude: -106.5775399,
        Revenue: 579402,
        Employees: 4793,
        Industry: "Healthcare",
        BoundaryId: "USA_New Mexico"
      },
      {
        Name: "US Account 731",
        Country: "US",
        PostalCode: 6259,
        Latitude: 41.86744677,
        Longitude: -71.99112527,
        Revenue: 686544,
        Employees: 7363,
        Industry: "Healthcare",
        BoundaryId: "USA_Connecticut"
      },
      {
        Name: "US Account 732",
        Country: "US",
        PostalCode: 30512,
        Latitude: 34.8558626,
        Longitude: -83.9744994,
        Revenue: 81364,
        Employees: 4760,
        Industry: "Aerospace",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 733",
        Country: "US",
        PostalCode: 85014,
        Latitude: 33.50916774,
        Longitude: -112.0562886,
        Revenue: 965201,
        Employees: 9424,
        Industry: "Healthcare",
        BoundaryId: "USA_Arizona"
      },
      {
        Name: "US Account 734",
        Country: "US",
        PostalCode: 92653,
        Latitude: 33.59207541,
        Longitude: -117.697621,
        Revenue: 560639,
        Employees: 5587,
        Industry: "Manufacturing",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 735",
        Country: "US",
        PostalCode: 91776,
        Latitude: 34.08965655,
        Longitude: -118.0951581,
        Revenue: 213268,
        Employees: 4145,
        Industry: "Aerospace",
        BoundaryId: "USA_California"
      },
      {
        Name: "US Account 736",
        Country: "US",
        PostalCode: 60048,
        Latitude: 42.29371131,
        Longitude: -87.94734586,
        Revenue: 185838,
        Employees: 872,
        Industry: "Healthcare",
        BoundaryId: "USA_Illinois"
      },
      {
        Name: "US Account 737",
        Country: "US",
        PostalCode: 25287,
        Latitude: 38.94989555,
        Longitude: -82.05212732,
        Revenue: 187684,
        Employees: 8003,
        Industry: "Manufacturing",
        BoundaryId: "USA_West Virginia"
      },
      {
        Name: "US Account 738",
        Country: "US",
        PostalCode: 53703,
        Latitude: 43.07292229,
        Longitude: -89.37489569,
        Revenue: 628581,
        Employees: 9989,
        Industry: "Aerospace",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 739",
        Country: "US",
        PostalCode: 31791,
        Latitude: 31.52210813,
        Longitude: -83.88092184,
        Revenue: 881720,
        Employees: 862,
        Industry: "Aerospace",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 740",
        Country: "US",
        PostalCode: 53590,
        Latitude: 43.19938089,
        Longitude: -89.20560067,
        Revenue: 75489,
        Employees: 2783,
        Industry: "Financial Services",
        BoundaryId: "USA_Wisconsin"
      },
      {
        Name: "US Account 741",
        Country: "US",
        PostalCode: 67212,
        Latitude: 37.70230349,
        Longitude: -97.43586949,
        Revenue: 624114,
        Employees: 5562,
        Industry: "Financial Services",
        BoundaryId: "USA_Kansas"
      },
      {
        Name: "US Account 742",
        Country: "US",
        PostalCode: 32168,
        Latitude: 28.98089291,
        Longitude: -81.04382628,
        Revenue: 723366,
        Employees: 7743,
        Industry: "Manufacturing",
        BoundaryId: "USA_Florida"
      },
      {
        Name: "US Account 743",
        Country: "US",
        PostalCode: 71457,
        Latitude: 31.75776414,
        Longitude: -93.08441275,
        Revenue: 252885,
        Employees: 5530,
        Industry: "Manufacturing",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 744",
        Country: "US",
        PostalCode: 8096,
        Latitude: 39.82989138,
        Longitude: -75.12786459,
        Revenue: 46839,
        Employees: 8885,
        Industry: "Aerospace",
        BoundaryId: "USA_New Jersey"
      },
      {
        Name: "US Account 745",
        Country: "US",
        PostalCode: 83702,
        Latitude: 43.66111992,
        Longitude: -116.1667124,
        Revenue: 975374,
        Employees: 5736,
        Industry: "Manufacturing",
        BoundaryId: "USA_Idaho"
      },
      {
        Name: "US Account 746",
        Country: "US",
        PostalCode: 30309,
        Latitude: 33.79835115,
        Longitude: -84.38807645,
        Revenue: 477788,
        Employees: 9440,
        Industry: "Manufacturing",
        BoundaryId: "USA_Georgia"
      },
      {
        Name: "US Account 747",
        Country: "US",
        PostalCode: 71118,
        Latitude: 32.39264304,
        Longitude: -93.80433938,
        Revenue: 762284,
        Employees: 2483,
        Industry: "Healthcare",
        BoundaryId: "USA_Louisiana"
      },
      {
        Name: "US Account 748",
        Country: "US",
        PostalCode: 90035,
        Latitude: 34.05157693,
        Longitude: -118.3836179,
        Revenue: 342713,
        Employees: 4562,
        Industry: "Healthcare",
        BoundaryId: "USA_California"
      }
    ];
    const TemplateSelector_vue_vue_type_style_index_0_scoped_6fccdc12_lang = "";
    const _sfc_main$1b = {
      name: "TemplateSelector",
      components: {
        Spinner,
        ButtonIcon,
        TemplateCard
      },
      emits: ["close"],
      data() {
        return {
          loadingMsg: "",
          visible: false,
          selectedTemplate: null,
          templates: [
            {
              name: "Sales Planning Demo",
              label: "Populate your plan with sample data",
              background: "#7526E3",
              shadow: "#9050E9",
              icon: markRaw(ArrowIcon),
              buttonLabel: "Start",
              description: "Assemble a sales plan using common elements and sample data. Replace that data with your own."
            },
            {
              name: "Enterprise Territory Management",
              label: "Add Salesforce territory data to your plan",
              background: "#0250D9",
              shadow: "#066AFE",
              icon: markRaw(MapIcon),
              buttonLabel: "Start",
              description: "Base your sales plan on the hierarchy, rules, and assignments from Enterprise Territory Management."
            },
            {
              name: "Role Hierarchy",
              label: "Integrate a role hierarchy into your plan",
              background: "#3A49DA",
              shadow: "#5867E8",
              icon: markRaw(NodesIcon),
              buttonLabel: "Start",
              description: "Create a sales plan using your established role hierarchy and related account assignments."
            },
            {
              name: "Manager Hierarchy",
              label: "Establish a plan with your manager hierarchy",
              background: "#0B5CAB",
              shadow: "#0176D3",
              icon: markRaw(StackIcon),
              buttonLabel: "Start",
              description: "Create a sales plan using a hierarchy based on your user's manager field values and their accounts."
            },
            {
              name: "New sales plan",
              label: "Design a plan from scratch",
              background: "#0B5CAB",
              shadow: "#0176D3",
              buttonLabel: "Start",
              advancedButtonLabel: "Create Segmentation Plan",
              description: "Take your own path and build a sales plan based on your company's unique characteristics.",
              stretched: true
            }
          ],
          showSalesPlanModal: false,
          focusableElements: []
        };
      },
      mounted() {
        SPM.Components.TemplateSelector = this;
        setTimeout(() => this.visible = true, 10);
        this.getFocusableElements();
        this.focusableElements[0].focus();
      },
      methods: {
        async launchTemplate(template, isAdvanced) {
          var _a2, _b, _c, _d, _e;
          this.selectedTemplate = template;
          if (((_a2 = this.selectedTemplate) == null ? void 0 : _a2.name) === "Sales Planning Demo") {
            if (!this.$store.hasDataPipelinesAccess) {
              this.$mitt.emit("toast", { state: "error", message: "To create a plan using sample data, ask your Salesforce admin to assign you permissions to create datasets, or to create the plan for you." });
              return;
            }
            const periodId = (_b = this.$store.periods.find((p2) => new Date(p2.StartDate).getUTCFullYear() === (/* @__PURE__ */ new Date()).getUTCFullYear())) == null ? void 0 : _b.Id;
            const plan = {
              sobjectType: "sfsp__SalesPlan__c",
              Name: "Demo Sales Plan",
              sfsp__Period__c: periodId || "",
              sfsp__Description__c: "A demo sales plan with an example hierarchy, assignment objects, allocation metrics, and reference data",
              AssignmentBehavior__c: "Non-Exclusive",
              sfsp__Type__c: ""
            };
            await SPM.Utils.CRM.upsert({ records: [plan] });
            this.onNewPlan({ plan });
            return;
          }
          if (((_c = this.selectedTemplate) == null ? void 0 : _c.name) === "Role Hierarchy") {
            const roles = await SPM.Utils.Rest.invoke("Query", { query: "SELECT Id FROM UserRole" });
            if (!roles.length) {
              this.$mitt.emit("toast", { state: "error", message: "To use this template, first enable Role Hierarchy and then establish your roles in Salesforce Setup." });
              return;
            }
          }
          SPM.Components.Root.openModal("salesPlan", {
            callback: this.onNewPlan,
            title: ((_d = this.selectedTemplate) == null ? void 0 : _d.name) || "New Sales Plan",
            template: ((_e = this.selectedTemplate) == null ? void 0 : _e.name) || "New Sales Plan",
            isAdvanced
          });
        },
        async onNewPlan({ plan, territoryModelId }) {
          var _a2;
          if (!this.selectedTemplate) {
            SPM.Components.Root.loadPlan(plan.Id);
            this.$emit("close");
            return;
          }
          this.loadingMsg = "Building Hierarchy...";
          const hierarchy = [];
          switch (this.selectedTemplate.name) {
            case "Enterprise Territory Management":
              const territoryMap = (await SPM.Utils.Rest.invoke("Query", {
                query: `
                            SELECT
                                Id, Name, ParentTerritory2.Id, ParentTerritory2.Name,${SPM.etmForecastEnabled ? " ForecastUserId," : ""}
                                (SELECT UserId, User.Name${SPM.etmRolesEnabled ? ", RoleInTerritory2" : ""} FROM UserTerritory2Associations)
                            FROM Territory2
                            WHERE Territory2ModelId = '${territoryModelId}'
                        `
              })).reduce((map2, t) => {
                var _a3, _b;
                const parentId = ((_a3 = t == null ? void 0 : t.ParentTerritory2) == null ? void 0 : _a3.Id) || "All Org";
                if (!map2[parentId]) {
                  map2[parentId] = {
                    Id: parentId,
                    Name: ((_b = t == null ? void 0 : t.ParentTerritory2) == null ? void 0 : _b.Name) || "All Org",
                    children: [],
                    rules: [],
                    assignments: []
                  };
                }
                if (!map2[t.Id]) {
                  map2[t.Id] = {
                    Id: t.Id,
                    Name: t.Name,
                    children: [],
                    rules: [],
                    assignments: []
                  };
                }
                map2[t.Id].ownerId = t.ForecastUserId || "";
                map2[t.Id].users = t.UserTerritory2Associations || [];
                map2[parentId].children.push(map2[t.Id]);
                return map2;
              }, {});
              const ruleTerritoryMap = (await SPM.Utils.Rest.invoke("Query", { query: `SELECT Id, RuleId, Territory2Id FROM RuleTerritory2Association WHERE Territory2.Territory2ModelId = '${territoryModelId}'` })).reduce((map2, rta) => {
                map2[rta.RuleId] = rta.Territory2Id;
                return map2;
              }, {});
              (await SPM.Utils.Rest.invoke("Query", {
                query: `
                            SELECT
                                Id, Territory2ModelId, BooleanFilter, MasterLabel,
                                (SELECT Id, Field, Operation, RuleId, SortOrder, Value FROM ObjectTerritory2AssignmentRuleItems ORDER BY SortOrder ASC)
                            FROM ObjectTerritory2AssignmentRule
                            WHERE Territory2ModelId = '${territoryModelId}' AND IsActive = true
                        `
              })).forEach((rule) => {
                var _a3;
                return (_a3 = territoryMap[ruleTerritoryMap[rule.Id]]) == null ? void 0 : _a3.rules.push(rule);
              });
              (await SPM.Utils.Rest.invoke("Query", {
                query: `
                            SELECT Id, Territory2Id, ObjectId
                            FROM ObjectTerritory2Association
                            WHERE Territory2.Territory2ModelId = '${territoryModelId}' AND AssociationCause = 'Territory2Manual'
                        `
              })).forEach((a) => territoryMap[a.Territory2Id].assignments.push(a));
              hierarchy.push(...((_a2 = territoryMap["All Org"]) == null ? void 0 : _a2.children) || []);
              break;
            case "Manager Hierarchy":
              const managerMap = (await SPM.Utils.Rest.invoke("Query", { query: "SELECT Id, Name, Manager.Id, Manager.Name FROM User" })).reduce((map2, u) => {
                var _a3, _b;
                const managerId = ((_a3 = u == null ? void 0 : u.Manager) == null ? void 0 : _a3.Id) || "All Org";
                if (!map2[managerId]) {
                  map2[managerId] = {
                    Id: managerId,
                    Name: ((_b = u == null ? void 0 : u.Manager) == null ? void 0 : _b.Name) || "All Org",
                    ownerId: managerId,
                    children: []
                  };
                }
                if (!map2[u.Id]) {
                  map2[u.Id] = {
                    Id: u.Id,
                    Name: u.Name,
                    ownerId: u.Id,
                    children: []
                  };
                }
                map2[managerId].children.push(map2[u.Id]);
                return map2;
              }, {});
              hierarchy.push(...managerMap["All Org"].children);
              break;
            case "Role Hierarchy":
              const roleMap = (await SPM.Utils.Rest.invoke("Query", { query: "SELECT Id, Name, ParentRoleId, (SELECT Id, Name FROM Users) FROM UserRole" })).reduce((map2, ur) => {
                var _a3;
                const parentRoleId = ur.ParentRoleId || "All Org";
                if (!map2[parentRoleId]) {
                  map2[parentRoleId] = {
                    Id: parentRoleId,
                    Name: "",
                    children: []
                  };
                }
                map2[ur.Id] = {
                  Id: ur.Id,
                  Name: ur.Name,
                  children: ((_a3 = map2 == null ? void 0 : map2[ur.Id]) == null ? void 0 : _a3.children) || [],
                  users: ur.Users || []
                };
                map2[parentRoleId].children.push(map2[ur.Id]);
                return map2;
              }, {});
              hierarchy.push(...roleMap["All Org"].children);
              break;
            case "Sales Planning Demo":
              hierarchy.push(...DemoHierarchy);
              break;
          }
          const createLevel = async (children) => {
            const nodesToInsert = [];
            children.forEach((child, i2) => {
              nodesToInsert.push({
                sobjectType: "sfsp__SalesNode__c",
                Name: child.Name,
                sfsp__SalesPlan__c: plan.Id,
                sfsp__Parent__c: child.parentNodeId || "",
                sfsp__Priority__c: i2,
                sfsp__Color__c: SPM.Utils.Node.randomColor(),
                sfsp__Owner__c: child.ownerId,
                sfsp__AssignmentBehavior__c: this.selectedTemplate.name === "Enterprise Territory Management" ? "Non-Exclusive" : "Exclusive"
              });
            });
            await SPM.Utils.CRM.upsert({ records: nodesToInsert });
            const nextLevelChildren = children.reduce((arr, child, childIndex) => {
              child.nodeId = nodesToInsert[childIndex].Id;
              child.children.forEach((c) => Object.assign(c, { parentNodeId: nodesToInsert[childIndex].Id }));
              return arr.concat(child.children);
            }, []);
            if (nextLevelChildren.length)
              await createLevel(nextLevelChildren);
          };
          await createLevel(hierarchy);
          if (["Enterprise Territory Management"].includes(this.selectedTemplate.name)) {
            const accountFields = (await SPM.Utils.Rest.invoke("SObject", { sObject: "Account" })).fields;
            const accountFieldMap = {
              Id: { name: "Id", crmName: "Id", label: "Account ID", type: "Text", unique: true },
              Name: { name: "Name", crmName: "Name", label: "Account Name", type: "Text" },
              OwnerId: { name: "OwnerId", crmName: "OwnerId", label: "Owner ID", type: "Text" },
              AnnualRevenue: { name: "AnnualRevenue", crmName: "AnnualRevenue", label: "Annual Revenue", type: "Numeric", scale: 2, precision: 18 },
              BillingLatitude: { name: "BillingLatitude", crmName: "BillingLatitude", label: "Billing Latitude", type: "Latitude", scale: 15, precision: 18 },
              BillingLongitude: { name: "BillingLongitude", crmName: "BillingLongitude", label: "Billing Longitude", type: "Longitude", scale: 15, precision: 18 }
            };
            const rules = [];
            const ruleLogics = [];
            const assignments = [];
            const users = [];
            const generateRules = (children) => {
              children.forEach((child) => {
                child.rules.forEach((rule, ruleIndex) => {
                  rules.push({
                    sobjectType: "sfsp__SalesNodeRule__c",
                    Name: rule.MasterLabel,
                    sfsp__SalesNode__c: child.nodeId,
                    sfsp__SortOrder__c: ruleIndex + 1,
                    sfsp__FilterLogic__c: "custom",
                    sfsp__BooleanFilter__c: rule.BooleanFilter || Array(rule.ObjectTerritory2AssignmentRuleItems.length).fill("").map((item, i2) => i2 + 1).join(" and "),
                    sfsp__SalesNodeRuleItems__r: rule.ObjectTerritory2AssignmentRuleItems.reduce((arr, ruleItem, i2) => {
                      let ruleItemValue = ruleItem.Value;
                      const fieldName = ruleItem.Field.replace("Account.", "");
                      const accountField = accountFields.find((f) => f.name === fieldName);
                      if (!accountField || !accountField.soapType) {
                        return arr;
                      }
                      const soapType = accountField.soapType.split(":")[1];
                      if (soapType.toLowerCase() === "boolean")
                        ruleItemValue = ruleItemValue === "0" ? "false" : "true";
                      if (!accountFieldMap[fieldName]) {
                        accountFieldMap[fieldName] = {
                          name: accountField.name.replaceAll("__", "_"),
                          crmName: accountField.name,
                          label: accountField.label,
                          type: ["string", "id", "boolean"].includes(soapType.toLowerCase()) ? "Text" : "Numeric",
                          soapType,
                          unique: false,
                          precision: accountField.precision || 10,
                          scale: accountField.scale || 2
                        };
                      }
                      return arr.concat([{
                        sobjectType: "sfsp__SalesNodeRuleItem__c",
                        sfsp__Field__c: fieldName.replaceAll("__", "_"),
                        sfsp__Operator__c: SPM.Utils.Rule.RuleItem.ETMOperators[ruleItem.Operation],
                        sfsp__Value__c: ruleItemValue,
                        sfsp__SortOrder__c: i2 + 1
                      }]);
                    }, [])
                  });
                });
                if (child.rules.length) {
                  ruleLogics.push({
                    sobjectType: "sfsp__SalesNode__c",
                    sfsp__RuleLogics__c: Array(child.rules.length).fill().map((item, i2) => i2 + 1).join(" and ")
                  });
                }
                child.assignments.forEach((a) => {
                  assignments.push({
                    sobjectType: "sfsp__SalesNodeAssignment__c",
                    sfsp__SalesNode__c: child.nodeId,
                    sfsp__RecordId__c: a.ObjectId,
                    sfsp__AssignmentType__c: "Manual",
                    sfsp__Status__c: "Active"
                  });
                });
                child.users.forEach((u) => {
                  users.push({
                    sobjectType: "sfsp__SalesNodeUser__c",
                    sfsp__SalesNode__c: child.nodeId,
                    sfsp__Role__c: u.RoleInTerritory2 || "",
                    sfsp__User__c: u.UserId
                  });
                });
                generateRules(child.children);
              });
            };
            generateRules(hierarchy);
            this.loadingMsg = "Creating Assignment Objects...";
            const assignmentObjectsToInsert = [
              {
                name: "Account",
                label: "Account",
                fields: Object.values(accountFieldMap)
              }
            ].map((obj) => ({
              sobjectType: "sfsp__SalesAssignmentObject__c",
              Name: obj.name,
              sfsp__SalesPlan__c: plan.Id,
              sfsp__Label__c: obj.label,
              sfsp__ReferenceFields__c: JSON.stringify(obj.fields)
            }));
            await SPM.Utils.CRM.upsert({ records: assignmentObjectsToInsert });
            const asyncJobs = await SPM.Utils.Apex.invoke("InsertSObjects", [
              assignmentObjectsToInsert.map((obj) => ({
                sobjectType: "sfsp__SalesAsyncJob__c",
                sfsp__MaioEndpoint__c: SPM.maioUrl,
                sfsp__SalesAssignmentObject__c: obj.Id,
                sfsp__Type__c: "Add Assignment Object",
                sfsp__Splunk__c: JSON.stringify({ txnId: this.$store.txnId })
              })),
              true
            ]);
            this.$store.salesAsyncJobs.push(...asyncJobs);
            const jobPromises = asyncJobs.map((job) => SPM.Utils.Apex.invoke("StartJob", [{ job: "BuildAssignmentObject", requestId: job.Id, assignmentObjectId: job.sfsp__SalesAssignmentObject__c, isScratch: SPM.isScratch }]));
            const promiseResponses = await Promise.allSettled(jobPromises);
            promiseResponses.forEach((jobResponse2) => console.log(jobResponse2));
            rules.forEach((r) => r.sfsp__SalesAssignmentObject__c = assignmentObjectsToInsert[0].Id);
            await SPM.Utils.CRM.upsert({ records: rules });
            await SPM.Utils.CRM.upsert({
              records: rules.reduce((arr, rule) => arr.concat(
                rule.sfsp__SalesNodeRuleItems__r.map((ruleItem) => Object.assign(ruleItem, { sfsp__SalesNodeRule__c: rule.Id }))
              ), [])
            });
            ruleLogics.forEach((rl) => {
              const ruleLogics2 = {};
              ruleLogics2[assignmentObjectsToInsert[0].Id] = rl.sfsp__RuleLogics__c;
              rl.sfsp__RuleLogics__c = JSON.stringify(ruleLogics2, 0, 4);
            });
            await SPM.Utils.CRM.upsert({ records: ruleLogics });
            this.loadingMsg = "Assigning Records...";
            assignments.forEach((a) => a.sfsp__SalesAssignmentObject__c = assignmentObjectsToInsert[0].Id);
            await SPM.Utils.CRM.upsert({ records: assignments });
            this.loadingMsg = "Assigning Users...";
            await SPM.Utils.CRM.upsert({ records: users });
          }
          if (["Manager Hierarchy", "Role Hierarchy"].includes(this.selectedTemplate.name)) {
            this.loadingMsg = "Creating Assignment Objects...";
            const assignmentObjectsToInsert = [
              {
                name: "Account",
                label: "Account",
                fields: [
                  { name: "Id", crmName: "Id", label: "Account ID", type: "Text", unique: true },
                  { name: "Name", crmName: "Name", label: "Account Name", type: "Text" },
                  { name: this.selectedTemplate.name === "Manager Hierarchy" ? "OwnerId" : "Owner_UserRole_Id", crmName: this.selectedTemplate.name === "Manager Hierarchy" ? "OwnerId" : "Owner.UserRole.Id", label: "Owner ID", type: "Text" },
                  { name: "Industry", crmName: "Industry", label: "Industry", type: "Text" },
                  { name: "BillingCity", crmName: "BillingCity", label: "Billing City", type: "Text" },
                  { name: "BillingState", crmName: "BillingState", label: "Billing State/Province", type: "Text" },
                  { name: "BillingPostalCode", crmName: "BillingPostalCode", label: "Billing Zip/Postal Code", type: "Text" },
                  { name: "BillingCountry", crmName: "BillingCountry", label: "Billing Country", type: "Text" },
                  { name: "NumberOfEmployees", crmName: "NumberOfEmployees", label: "Employees", type: "Numeric", scale: 2, precision: 10 },
                  { name: "AnnualRevenue", crmName: "AnnualRevenue", label: "Annual Revenue", type: "Numeric", scale: 2, precision: 18 },
                  { name: "BillingLatitude", crmName: "BillingLatitude", label: "Billing Latitude", type: "Latitude", scale: 15, precision: 18 },
                  { name: "BillingLongitude", crmName: "BillingLongitude", label: "Billing Longitude", type: "Longitude", scale: 15, precision: 18 }
                ]
              }
            ].map((obj) => ({
              sobjectType: "sfsp__SalesAssignmentObject__c",
              Name: obj.name,
              sfsp__SalesPlan__c: plan.Id,
              sfsp__Label__c: obj.label,
              sfsp__ReferenceFields__c: JSON.stringify(obj.fields)
            }));
            await SPM.Utils.CRM.upsert({ records: assignmentObjectsToInsert });
            const asyncJobs = await SPM.Utils.Apex.invoke("InsertSObjects", [
              assignmentObjectsToInsert.map((obj) => ({
                sobjectType: "sfsp__SalesAsyncJob__c",
                sfsp__MaioEndpoint__c: SPM.maioUrl,
                sfsp__SalesAssignmentObject__c: obj.Id,
                sfsp__Type__c: "Add Assignment Object",
                sfsp__Splunk__c: JSON.stringify({ txnId: this.$store.txnId })
              })),
              true
            ]);
            this.$store.salesAsyncJobs.push(...asyncJobs);
            const jobPromises = asyncJobs.map((job) => SPM.Utils.Apex.invoke("StartJob", [{ job: "BuildAssignmentObject", version: SPM.version, requestId: job.Id, assignmentObjectId: job.sfsp__SalesAssignmentObject__c, isScratch: SPM.isScratch }]));
            const promiseResponses = await Promise.allSettled(jobPromises);
            promiseResponses.forEach((jobResponse2) => console.log(jobResponse2));
            this.loadingMsg = "Creating Rules...";
            const rules = [];
            const users = [];
            const generateRules = (children, parent) => {
              var _a3;
              const ids = parent ? [parent.Id] : [];
              children.forEach((child) => {
                ids.push(...generateRules(child.children, child) || []);
              });
              if (parent) {
                assignmentObjectsToInsert.forEach((assignmentObject) => {
                  rules.push({
                    sobjectType: "sfsp__SalesNodeRule__c",
                    Name: this.selectedTemplate.name,
                    sfsp__SalesAssignmentObject__c: assignmentObject.Id,
                    sfsp__SalesNode__c: parent.nodeId,
                    sfsp__SortOrder__c: 1,
                    sfsp__FilterLogic__c: "custom",
                    sfsp__BooleanFilter__c: "1",
                    sfsp__SalesNodeRuleItems__r: [{
                      sobjectType: "sfsp__SalesNodeRuleItem__c",
                      sfsp__Field__c: this.selectedTemplate.name === "Manager Hierarchy" ? "OwnerId" : "Owner_UserRole_Id",
                      sfsp__Operator__c: "==",
                      sfsp__Value__c: ids.join(","),
                      sfsp__SortOrder__c: 1
                    }]
                  });
                });
                (_a3 = parent.users) == null ? void 0 : _a3.forEach((u) => {
                  users.push({
                    sobjectType: "sfsp__SalesNodeUser__c",
                    sfsp__SalesNode__c: parent.nodeId,
                    sfsp__Role__c: "",
                    sfsp__User__c: u.Id
                  });
                });
              }
              return ids;
            };
            generateRules(hierarchy);
            await SPM.Utils.CRM.upsert({ records: rules });
            await SPM.Utils.CRM.upsert({
              records: rules.reduce((arr, rule) => arr.concat(
                Object.assign(rule.sfsp__SalesNodeRuleItems__r[0], { sfsp__SalesNodeRule__c: rule.Id })
              ), [])
            });
            this.loadingMsg = "Assigning Users...";
            await SPM.Utils.CRM.upsert({ records: users });
          }
          if (["Sales Planning Demo"].includes(this.selectedTemplate.name)) {
            const nodeMap = hierarchy.reduce(function traverse2(map2, child) {
              map2[child.Name] = child;
              return child.children.length ? child.children.reduce(traverse2, map2) : map2;
            }, {});
            this.loadingMsg = "Creating Allocation Metrics...";
            const quotaMetric = {
              sobjectType: "sfsp__SalesMetric__c",
              Name: "Quota",
              sfsp__Type__c: "Currency",
              sfsp__Description__c: "Quota Allocation",
              sfsp__SalesPlan__c: plan.Id
            };
            await SPM.Utils.CRM.upsert({ records: [quotaMetric] });
            await SPM.Utils.CRM.upsert({
              records: [{
                sobjectType: "sfsp__SalesNodeMetric__c",
                sfsp__SalesPlan__c: plan.Id,
                sfsp__SalesMetric__c: quotaMetric.Id,
                sfsp__Target_Month1__c: 833333,
                sfsp__Target_Month2__c: 833333,
                sfsp__Target_Month3__c: 833333,
                sfsp__Target_Month4__c: 833333,
                sfsp__Target_Month5__c: 833333,
                sfsp__Target_Month6__c: 833333,
                sfsp__Target_Month7__c: 833333,
                sfsp__Target_Month8__c: 833333,
                sfsp__Target_Month9__c: 833333,
                sfsp__Target_Month10__c: 833333,
                sfsp__Target_Month11__c: 833333,
                sfsp__Target_Month12__c: 833337
              }]
            });
            const planBoundaryObject = {
              sobjectType: "sfsp__SalesBoundary__c",
              Name: "United States STATE",
              sfsp__ContainerSet__c: "USA_AB2_22Q4E1",
              sfsp__IncludePoints__c: false,
              sfsp__SalesPlan__c: plan.Id
            };
            await SPM.Utils.CRM.upsert({ records: [planBoundaryObject] });
            const nodeBoundaryObject = {
              sobjectType: "sfsp__SalesNodeBoundary__c",
              Name: "United States STATE",
              sfsp__ContainerSet__c: "USA_AB2_22Q4E1",
              sfsp__Filter__c: "[]",
              sfsp__IncludePoints__c: false,
              sfsp__SalesNode__c: nodeMap["Hardware US"].nodeId,
              sfsp__SalesPlan__c: plan.Id,
              sfsp__SalesBoundary__c: planBoundaryObject.Id
            };
            await SPM.Utils.CRM.upsert({ records: [nodeBoundaryObject] });
            this.loadingMsg = "Creating Assignment Objects...";
            const assignmentObjectsToInsert = [
              {
                name: "Account",
                label: "Account",
                fields: [
                  { name: "Id", crmName: "Id", label: "ID", type: "Text", unique: true },
                  { name: "Name", crmName: "Name", label: "Name", type: "Text" },
                  { name: "Country", crmName: "Country", label: "Country", type: "Text" },
                  { name: "PostalCode", crmName: "PostalCode", label: "Postal Code", type: "Text" },
                  { name: "Industry", crmName: "Industry", label: "Industry", type: "Text" },
                  { name: "Revenue", crmName: "Revenue", label: "Revenue", type: "Numeric", scale: 2, precision: 18 },
                  { name: "Employees", crmName: "Employees", label: "Employees", type: "Numeric", scale: 2, precision: 18 },
                  { name: "Latitude", crmName: "Latitude", label: "Latitude", type: "Latitude", scale: 15, precision: 18 },
                  { name: "Longitude", crmName: "Longitude", label: "Longitude", type: "Longitude", scale: 15, precision: 18 },
                  { name: `${plan.Id}_USA_AB2_22Q4E1`, crmName: `${plan.Id}_USA_AB2_22Q4E1`, label: "United States STATE", type: "Text" }
                ]
              }
            ].map((obj) => ({
              sobjectType: "sfsp__SalesAssignmentObject__c",
              Name: obj.name,
              sfsp__SalesPlan__c: plan.Id,
              sfsp__Label__c: obj.label,
              sfsp__ReferenceFields__c: JSON.stringify(obj.fields)
            }));
            await SPM.Utils.CRM.upsert({ records: assignmentObjectsToInsert });
            DemoAccounts.forEach((a) => {
              a.Id = a.Name;
              if (a.BoundaryId) {
                a[`${plan.Id}_USA_AB2_22Q4E1`] = a.BoundaryId;
                delete a.BoundaryId;
              }
            });
            await Promise.all(assignmentObjectsToInsert.reduce((arr, assignmentObject) => arr.concat(
              SPM.Utils.ExternalData.createManualDataset({ planId: plan.Id, planName: plan.Name, datasetType: "Records", assignmentObject, records: DemoAccounts }),
              SPM.Utils.ExternalData.createManualDataset({ planId: plan.Id, planName: plan.Name, datasetType: "Assignments", assignmentObject })
            ), []));
            const asyncJobs = await SPM.Utils.Apex.invoke("InsertSObjects", [
              assignmentObjectsToInsert.map((assignmentObject) => ({
                sobjectType: "sfsp__SalesAsyncJob__c",
                sfsp__MaioEndpoint__c: SPM.maioUrl,
                sfsp__SalesAssignmentObject__c: assignmentObject.Id,
                sfsp__Type__c: "Update Assignment Object",
                sfsp__Splunk__c: JSON.stringify({ txnId: this.$store.txnId }),
                sfsp__Status__c: "Waiting",
                sfsp__Details__c: "Waiting for dataflow to start..."
              })),
              true
            ]);
            this.$store.salesAsyncJobs.push(...asyncJobs);
            const rules = [];
            const assignments = [];
            const generateRules = (children) => {
              children.forEach((child) => {
                var _a3, _b;
                (_a3 = child.rules) == null ? void 0 : _a3.forEach((rule, ruleIndex) => {
                  rules.push({
                    sobjectType: "sfsp__SalesNodeRule__c",
                    Name: rule.field,
                    sfsp__SalesAssignmentObject__c: assignmentObjectsToInsert[0].Id,
                    sfsp__SalesNode__c: child.nodeId,
                    sfsp__SortOrder__c: ruleIndex + 1,
                    sfsp__FilterLogic__c: "custom",
                    sfsp__BooleanFilter__c: "1",
                    sfsp__SalesNodeRuleItems__r: [{
                      sobjectType: "sfsp__SalesNodeRuleItem__c",
                      sfsp__Field__c: rule.field,
                      sfsp__Operator__c: rule.operator,
                      sfsp__Value__c: rule.value,
                      sfsp__SortOrder__c: 1
                    }]
                  });
                });
                if (child.boundaries) {
                  rules.push({
                    sobjectType: "sfsp__SalesNodeRule__c",
                    Name: "United States STATE",
                    sfsp__SalesNodeBoundary__c: nodeBoundaryObject.Id,
                    sfsp__SalesNode__c: child.nodeId,
                    sfsp__SortOrder__c: 1,
                    sfsp__FilterLogic__c: "custom",
                    sfsp__BooleanFilter__c: "1",
                    sfsp__SalesNodeRuleItems__r: [{
                      sobjectType: "sfsp__SalesNodeRuleItem__c",
                      sfsp__Field__c: `${plan.Id}_USA_AB2_22Q4E1`,
                      sfsp__Operator__c: "==",
                      sfsp__Value__c: child.boundaries.join(","),
                      sfsp__SortOrder__c: 1
                    }]
                  });
                }
                (_b = child.assignments) == null ? void 0 : _b.forEach((recordId) => {
                  assignments.push({
                    sobjectType: "sfsp__SalesNodeAssignment__c",
                    sfsp__SalesNode__c: child.nodeId,
                    sfsp__RecordId__c: recordId,
                    sfsp__AssignmentType__c: "Manual",
                    sfsp__Status__c: "Active"
                  });
                });
                generateRules(child.children);
              });
            };
            generateRules(hierarchy);
            await SPM.Utils.CRM.upsert({ records: rules });
            await SPM.Utils.CRM.upsert({
              records: rules.reduce((arr, rule) => arr.concat(
                rule.sfsp__SalesNodeRuleItems__r.map((ruleItem) => Object.assign(ruleItem, { sfsp__SalesNodeRule__c: rule.Id }))
              ), [])
            });
            this.loadingMsg = "Assigning Records...";
            assignments.forEach((a) => a.sfsp__SalesAssignmentObject__c = assignmentObjectsToInsert[0].Id);
            await SPM.Utils.CRM.upsert({ records: assignments });
          }
          if (this.$store.isManager && !this.$store.isAdmin) {
            await SPM.Utils.Apex.invoke("InsertSObjects", [
              [{
                sobjectType: "sfsp__SalesUserAccess__c",
                sfsp__User__c: SPM.currentUser.Id,
                sfsp__SalesPlan__c: plan.Id,
                sfsp__AccessLevel__c: "Editor"
              }],
              true
            ]);
          }
          SPM.Components.Root.loadPlan(plan.Id);
          this.$mitt.emit("toast", { message: "Plan Created!", duration: 2500 });
          this.$emit("close");
        },
        getFocusableElements() {
          this.focusableElements = [...this.$el.querySelectorAll("a, button, input, textarea, select, details")].filter((el) => !el.hasAttribute("disabled") && el.tabIndex !== -1);
        },
        tab(e) {
          if (!this.focusableElements.length)
            return;
          if (this.focusableElements[this.focusableElements.length - 1] === document.activeElement) {
            e.preventDefault();
            this.focusableElements[0].focus();
          }
        },
        shiftTab(e) {
          if (!this.focusableElements.length)
            return;
          if (this.focusableElements[0] === document.activeElement) {
            e.preventDefault();
            this.focusableElements[this.focusableElements.length - 1].focus();
          }
        }
      }
    };
    const _withScopeId$n = (n) => (pushScopeId("data-v-6fccdc12"), n = n(), popScopeId(), n);
    const _hoisted_1$16 = {
      id: "centered-templates",
      class: "spm-kondo"
    };
    const _hoisted_2$14 = /* @__PURE__ */ _withScopeId$n(() => /* @__PURE__ */ createBaseVNode("div", { class: "page-titles" }, [
      /* @__PURE__ */ createBaseVNode("div", { class: "page-title" }, "Create a Sales Plan"),
      /* @__PURE__ */ createBaseVNode("div", { class: "page-sub-title" }, "Kick-start your sales planning efforts using templates that make the most of your Salesforce data. Or design a sales plan from scratch.")
    ], -1));
    const _hoisted_3$U = { class: "slds-grid slds-m-vertical_medium slds-gutters" };
    function _sfc_render$1b(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_TemplateCard = resolveComponent("TemplateCard");
      return openBlock(), createElementBlock("div", {
        id: "template-selector",
        class: normalizeClass(["slds-grid slds-grid_vertical slds-grid_vertical-align-center slds-p-vertical_small", { visible: $data.visible }]),
        onKeydown: [
          _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => $options.tab && $options.tab(...args), ["exact", "stop"]), ["tab"])),
          _cache[2] || (_cache[2] = withKeys(withModifiers((...args) => $options.shiftTab && $options.shiftTab(...args), ["shift", "stop"]), ["tab"]))
        ]
      }, [
        $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
          description: withCtx(() => [
            createTextVNode(toDisplayString($data.loadingMsg), 1)
          ]),
          _: 1
        })) : createCommentVNode("", true),
        createVNode(_component_ButtonIcon, {
          ref: "closeButton",
          iconCategory: "utility",
          iconName: "close",
          iconSize: "large",
          class: "close-button",
          assistiveText: "Close",
          title: "Close",
          onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
        }, null, 512),
        createBaseVNode("div", _hoisted_1$16, [
          _hoisted_2$14,
          createBaseVNode("div", _hoisted_3$U, [
            (openBlock(true), createElementBlock(Fragment, null, renderList($data.templates.slice(0, 4), (template) => {
              return openBlock(), createElementBlock("div", {
                key: template.name,
                class: "slds-size_1-of-4 slds-col"
              }, [
                createVNode(_component_TemplateCard, {
                  template,
                  onSelectTemplate: $options.launchTemplate
                }, null, 8, ["template", "onSelectTemplate"])
              ]);
            }), 128))
          ]),
          createBaseVNode("div", null, [
            createVNode(_component_TemplateCard, {
              template: $data.templates[4],
              onSelectTemplate: $options.launchTemplate
            }, null, 8, ["template", "onSelectTemplate"])
          ])
        ])
      ], 34);
    }
    const TemplateSelector = /* @__PURE__ */ _export_sfc(_sfc_main$1b, [["render", _sfc_render$1b], ["__scopeId", "data-v-6fccdc12"]]);
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    /*!
     * GSAP 3.12.2
     * https://greensock.com
     *
     * @license Copyright 2008-2023, GreenSock. All rights reserved.
     * Subject to the terms at https://greensock.com/standard-license or for
     * Club GreenSock members, the agreement issued with that membership.
     * @author: Jack Doyle, jack@greensock.com
    */
    var _config = {
      autoSleep: 120,
      force3D: "auto",
      nullTargetWarn: 1,
      units: {
        lineHeight: ""
      }
    }, _defaults = {
      duration: 0.5,
      overwrite: false,
      delay: 0
    }, _suppressOverwrites, _reverting$1, _context, _bigNum$1 = 1e8, _tinyNum = 1 / _bigNum$1, _2PI = Math.PI * 2, _HALF_PI = _2PI / 4, _gsID = 0, _sqrt = Math.sqrt, _cos = Math.cos, _sin = Math.sin, _isString = function _isString2(value) {
      return typeof value === "string";
    }, _isFunction = function _isFunction2(value) {
      return typeof value === "function";
    }, _isNumber = function _isNumber2(value) {
      return typeof value === "number";
    }, _isUndefined = function _isUndefined2(value) {
      return typeof value === "undefined";
    }, _isObject = function _isObject2(value) {
      return typeof value === "object";
    }, _isNotFalse = function _isNotFalse2(value) {
      return value !== false;
    }, _windowExists$1 = function _windowExists2() {
      return typeof window !== "undefined";
    }, _isFuncOrString = function _isFuncOrString2(value) {
      return _isFunction(value) || _isString(value);
    }, _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function() {
    }, _isArray = Array.isArray, _strictNumExp = /(?:-?\.?\d|\.)+/gi, _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g, _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g, _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi, _relExp = /[+-]=-?[.\d]+/, _delimitedValueExp = /[^,'"\[\]\s]+/gi, _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i, _globalTimeline, _win$1, _coreInitted, _doc$1, _globals = {}, _installScope = {}, _coreReady, _install = function _install2(scope) {
      return (_installScope = _merge(scope, _globals)) && gsap;
    }, _missingPlugin = function _missingPlugin2(property, value) {
      return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
    }, _warn = function _warn2(message, suppress) {
      return !suppress && console.warn(message);
    }, _addGlobal = function _addGlobal2(name, obj) {
      return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
    }, _emptyFunc = function _emptyFunc2() {
      return 0;
    }, _startAtRevertConfig = {
      suppressEvents: true,
      isStart: true,
      kill: false
    }, _revertConfigNoKill = {
      suppressEvents: true,
      kill: false
    }, _revertConfig = {
      suppressEvents: true
    }, _reservedProps = {}, _lazyTweens = [], _lazyLookup = {}, _lastRenderedFrame, _plugins = {}, _effects = {}, _nextGCFrame = 30, _harnessPlugins = [], _callbackNames = "", _harness = function _harness2(targets) {
      var target = targets[0], harnessPlugin, i2;
      _isObject(target) || _isFunction(target) || (targets = [targets]);
      if (!(harnessPlugin = (target._gsap || {}).harness)) {
        i2 = _harnessPlugins.length;
        while (i2-- && !_harnessPlugins[i2].targetTest(target)) {
        }
        harnessPlugin = _harnessPlugins[i2];
      }
      i2 = targets.length;
      while (i2--) {
        targets[i2] && (targets[i2]._gsap || (targets[i2]._gsap = new GSCache(targets[i2], harnessPlugin))) || targets.splice(i2, 1);
      }
      return targets;
    }, _getCache = function _getCache2(target) {
      return target._gsap || _harness(toArray(target))[0]._gsap;
    }, _getProperty = function _getProperty2(target, property, v) {
      return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
    }, _forEachName = function _forEachName2(names, func) {
      return (names = names.split(",")).forEach(func) || names;
    }, _round = function _round2(value) {
      return Math.round(value * 1e5) / 1e5 || 0;
    }, _roundPrecise = function _roundPrecise2(value) {
      return Math.round(value * 1e7) / 1e7 || 0;
    }, _parseRelative = function _parseRelative2(start2, value) {
      var operator = value.charAt(0), end2 = parseFloat(value.substr(2));
      start2 = parseFloat(start2);
      return operator === "+" ? start2 + end2 : operator === "-" ? start2 - end2 : operator === "*" ? start2 * end2 : start2 / end2;
    }, _arrayContainsAny = function _arrayContainsAny2(toSearch, toFind) {
      var l = toFind.length, i2 = 0;
      for (; toSearch.indexOf(toFind[i2]) < 0 && ++i2 < l; ) {
      }
      return i2 < l;
    }, _lazyRender = function _lazyRender2() {
      var l = _lazyTweens.length, a = _lazyTweens.slice(0), i2, tween;
      _lazyLookup = {};
      _lazyTweens.length = 0;
      for (i2 = 0; i2 < l; i2++) {
        tween = a[i2];
        tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
      }
    }, _lazySafeRender = function _lazySafeRender2(animation, time, suppressEvents, force) {
      _lazyTweens.length && !_reverting$1 && _lazyRender();
      animation.render(time, suppressEvents, force || _reverting$1 && time < 0 && (animation._initted || animation._startAt));
      _lazyTweens.length && !_reverting$1 && _lazyRender();
    }, _numericIfPossible = function _numericIfPossible2(value) {
      var n = parseFloat(value);
      return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
    }, _passThrough = function _passThrough2(p2) {
      return p2;
    }, _setDefaults = function _setDefaults2(obj, defaults2) {
      for (var p2 in defaults2) {
        p2 in obj || (obj[p2] = defaults2[p2]);
      }
      return obj;
    }, _setKeyframeDefaults = function _setKeyframeDefaults2(excludeDuration) {
      return function(obj, defaults2) {
        for (var p2 in defaults2) {
          p2 in obj || p2 === "duration" && excludeDuration || p2 === "ease" || (obj[p2] = defaults2[p2]);
        }
      };
    }, _merge = function _merge2(base, toMerge) {
      for (var p2 in toMerge) {
        base[p2] = toMerge[p2];
      }
      return base;
    }, _mergeDeep = function _mergeDeep2(base, toMerge) {
      for (var p2 in toMerge) {
        p2 !== "__proto__" && p2 !== "constructor" && p2 !== "prototype" && (base[p2] = _isObject(toMerge[p2]) ? _mergeDeep2(base[p2] || (base[p2] = {}), toMerge[p2]) : toMerge[p2]);
      }
      return base;
    }, _copyExcluding = function _copyExcluding2(obj, excluding) {
      var copy = {}, p2;
      for (p2 in obj) {
        p2 in excluding || (copy[p2] = obj[p2]);
      }
      return copy;
    }, _inheritDefaults = function _inheritDefaults2(vars) {
      var parent = vars.parent || _globalTimeline, func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
      if (_isNotFalse(vars.inherit)) {
        while (parent) {
          func(vars, parent.vars.defaults);
          parent = parent.parent || parent._dp;
        }
      }
      return vars;
    }, _arraysMatch = function _arraysMatch2(a1, a2) {
      var i2 = a1.length, match = i2 === a2.length;
      while (match && i2-- && a1[i2] === a2[i2]) {
      }
      return i2 < 0;
    }, _addLinkedListItem = function _addLinkedListItem2(parent, child, firstProp, lastProp, sortBy) {
      if (firstProp === void 0) {
        firstProp = "_first";
      }
      if (lastProp === void 0) {
        lastProp = "_last";
      }
      var prev = parent[lastProp], t;
      if (sortBy) {
        t = child[sortBy];
        while (prev && prev[sortBy] > t) {
          prev = prev._prev;
        }
      }
      if (prev) {
        child._next = prev._next;
        prev._next = child;
      } else {
        child._next = parent[firstProp];
        parent[firstProp] = child;
      }
      if (child._next) {
        child._next._prev = child;
      } else {
        parent[lastProp] = child;
      }
      child._prev = prev;
      child.parent = child._dp = parent;
      return child;
    }, _removeLinkedListItem = function _removeLinkedListItem2(parent, child, firstProp, lastProp) {
      if (firstProp === void 0) {
        firstProp = "_first";
      }
      if (lastProp === void 0) {
        lastProp = "_last";
      }
      var prev = child._prev, next = child._next;
      if (prev) {
        prev._next = next;
      } else if (parent[firstProp] === child) {
        parent[firstProp] = next;
      }
      if (next) {
        next._prev = prev;
      } else if (parent[lastProp] === child) {
        parent[lastProp] = prev;
      }
      child._next = child._prev = child.parent = null;
    }, _removeFromParent = function _removeFromParent2(child, onlyIfParentHasAutoRemove) {
      child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
      child._act = 0;
    }, _uncache = function _uncache2(animation, child) {
      if (animation && (!child || child._end > animation._dur || child._start < 0)) {
        var a = animation;
        while (a) {
          a._dirty = 1;
          a = a.parent;
        }
      }
      return animation;
    }, _recacheAncestors = function _recacheAncestors2(animation) {
      var parent = animation.parent;
      while (parent && parent.parent) {
        parent._dirty = 1;
        parent.totalDuration();
        parent = parent.parent;
      }
      return animation;
    }, _rewindStartAt = function _rewindStartAt2(tween, totalTime, suppressEvents, force) {
      return tween._startAt && (_reverting$1 ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
    }, _hasNoPausedAncestors = function _hasNoPausedAncestors2(animation) {
      return !animation || animation._ts && _hasNoPausedAncestors2(animation.parent);
    }, _elapsedCycleDuration = function _elapsedCycleDuration2(animation) {
      return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
    }, _animationCycle = function _animationCycle2(tTime, cycleDuration) {
      var whole = Math.floor(tTime /= cycleDuration);
      return tTime && whole === tTime ? whole - 1 : whole;
    }, _parentToChildTotalTime = function _parentToChildTotalTime2(parentTime, child) {
      return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
    }, _setEnd = function _setEnd2(animation) {
      return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
    }, _alignPlayhead = function _alignPlayhead2(animation, totalTime) {
      var parent = animation._dp;
      if (parent && parent.smoothChildTiming && animation._ts) {
        animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
        _setEnd(animation);
        parent._dirty || _uncache(parent, animation);
      }
      return animation;
    }, _postAddChecks = function _postAddChecks2(timeline, child) {
      var t;
      if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {
        t = _parentToChildTotalTime(timeline.rawTime(), child);
        if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
          child.render(t, true);
        }
      }
      if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
        if (timeline._dur < timeline.duration()) {
          t = timeline;
          while (t._dp) {
            t.rawTime() >= 0 && t.totalTime(t._tTime);
            t = t._dp;
          }
        }
        timeline._zTime = -_tinyNum;
      }
    }, _addToTimeline = function _addToTimeline2(timeline, child, position, skipChecks) {
      child.parent && _removeFromParent(child);
      child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
      child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));
      _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
      _isFromOrFromStart(child) || (timeline._recent = child);
      skipChecks || _postAddChecks(timeline, child);
      timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime);
      return timeline;
    }, _scrollTrigger = function _scrollTrigger2(animation, trigger2) {
      return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger2)) && _globals.ScrollTrigger.create(trigger2, animation);
    }, _attemptInitTween = function _attemptInitTween2(tween, time, force, suppressEvents, tTime) {
      _initTween(tween, time, tTime);
      if (!tween._initted) {
        return 1;
      }
      if (!force && tween._pt && !_reverting$1 && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
        _lazyTweens.push(tween);
        tween._lazy = [tTime, suppressEvents];
        return 1;
      }
    }, _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart2(_ref) {
      var parent = _ref.parent;
      return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart2(parent));
    }, _isFromOrFromStart = function _isFromOrFromStart2(_ref2) {
      var data = _ref2.data;
      return data === "isFromStart" || data === "isStart";
    }, _renderZeroDurationTween = function _renderZeroDurationTween2(tween, totalTime, suppressEvents, force) {
      var prevRatio = tween.ratio, ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1, repeatDelay = tween._rDelay, tTime = 0, pt, iteration, prevIteration;
      if (repeatDelay && tween._repeat) {
        tTime = _clamp(0, tween._tDur, totalTime);
        iteration = _animationCycle(tTime, repeatDelay);
        tween._yoyo && iteration & 1 && (ratio = 1 - ratio);
        if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
          prevRatio = 1 - ratio;
          tween.vars.repeatRefresh && tween._initted && tween.invalidate();
        }
      }
      if (ratio !== prevRatio || _reverting$1 || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
        if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
          return;
        }
        prevIteration = tween._zTime;
        tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);
        suppressEvents || (suppressEvents = totalTime && !prevIteration);
        tween.ratio = ratio;
        tween._from && (ratio = 1 - ratio);
        tween._time = 0;
        tween._tTime = tTime;
        pt = tween._pt;
        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }
        totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
        tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
        tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
        if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
          ratio && _removeFromParent(tween, 1);
          if (!suppressEvents && !_reverting$1) {
            _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);
            tween._prom && tween._prom();
          }
        }
      } else if (!tween._zTime) {
        tween._zTime = totalTime;
      }
    }, _findNextPauseTween = function _findNextPauseTween2(animation, prevTime, time) {
      var child;
      if (time > prevTime) {
        child = animation._first;
        while (child && child._start <= time) {
          if (child.data === "isPause" && child._start > prevTime) {
            return child;
          }
          child = child._next;
        }
      } else {
        child = animation._last;
        while (child && child._start >= time) {
          if (child.data === "isPause" && child._start < prevTime) {
            return child;
          }
          child = child._prev;
        }
      }
    }, _setDuration = function _setDuration2(animation, duration, skipUncache, leavePlayhead) {
      var repeat = animation._repeat, dur = _roundPrecise(duration) || 0, totalProgress = animation._tTime / animation._tDur;
      totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
      animation._dur = dur;
      animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
      totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
      animation.parent && _setEnd(animation);
      skipUncache || _uncache(animation.parent, animation);
      return animation;
    }, _onUpdateTotalDuration = function _onUpdateTotalDuration2(animation) {
      return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
    }, _zeroPosition = {
      _start: 0,
      endTime: _emptyFunc,
      totalDuration: _emptyFunc
    }, _parsePosition = function _parsePosition2(animation, position, percentAnimation) {
      var labels = animation.labels, recent = animation._recent || _zeroPosition, clippedDuration = animation.duration() >= _bigNum$1 ? recent.endTime(false) : animation._dur, i2, offset2, isPercent;
      if (_isString(position) && (isNaN(position) || position in labels)) {
        offset2 = position.charAt(0);
        isPercent = position.substr(-1) === "%";
        i2 = position.indexOf("=");
        if (offset2 === "<" || offset2 === ">") {
          i2 >= 0 && (position = position.replace(/=/, ""));
          return (offset2 === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i2 < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
        }
        if (i2 < 0) {
          position in labels || (labels[position] = clippedDuration);
          return labels[position];
        }
        offset2 = parseFloat(position.charAt(i2 - 1) + position.substr(i2 + 1));
        if (isPercent && percentAnimation) {
          offset2 = offset2 / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
        }
        return i2 > 1 ? _parsePosition2(animation, position.substr(0, i2 - 1), percentAnimation) + offset2 : clippedDuration + offset2;
      }
      return position == null ? clippedDuration : +position;
    }, _createTweenType = function _createTweenType2(type, params, timeline) {
      var isLegacy = _isNumber(params[1]), varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1), vars = params[varsIndex], irVars, parent;
      isLegacy && (vars.duration = params[1]);
      vars.parent = timeline;
      if (type) {
        irVars = vars;
        parent = timeline;
        while (parent && !("immediateRender" in irVars)) {
          irVars = parent.vars.defaults || {};
          parent = _isNotFalse(parent.vars.inherit) && parent.parent;
        }
        vars.immediateRender = _isNotFalse(irVars.immediateRender);
        type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];
      }
      return new Tween(params[0], vars, params[varsIndex + 1]);
    }, _conditionalReturn = function _conditionalReturn2(value, func) {
      return value || value === 0 ? func(value) : func;
    }, _clamp = function _clamp2(min2, max2, value) {
      return value < min2 ? min2 : value > max2 ? max2 : value;
    }, getUnit = function getUnit2(value, v) {
      return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
    }, clamp = function clamp2(min2, max2, value) {
      return _conditionalReturn(value, function(v) {
        return _clamp(min2, max2, v);
      });
    }, _slice = [].slice, _isArrayLike = function _isArrayLike2(value, nonEmpty) {
      return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win$1;
    }, _flatten = function _flatten2(ar, leaveStrings, accumulator) {
      if (accumulator === void 0) {
        accumulator = [];
      }
      return ar.forEach(function(value) {
        var _accumulator;
        return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
      }) || accumulator;
    }, toArray = function toArray2(value, scope, leaveStrings) {
      return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc$1).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
    }, selector = function selector2(value) {
      value = toArray(value)[0] || _warn("Invalid scope") || {};
      return function(v) {
        var el = value.current || value.nativeElement || value;
        return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc$1.createElement("div") : value);
      };
    }, shuffle = function shuffle2(a) {
      return a.sort(function() {
        return 0.5 - Math.random();
      });
    }, distribute = function distribute2(v) {
      if (_isFunction(v)) {
        return v;
      }
      var vars = _isObject(v) ? v : {
        each: v
      }, ease = _parseEase(vars.ease), from2 = vars.from || 0, base = parseFloat(vars.base) || 0, cache2 = {}, isDecimal = from2 > 0 && from2 < 1, ratios = isNaN(from2) || isDecimal, axis = vars.axis, ratioX = from2, ratioY = from2;
      if (_isString(from2)) {
        ratioX = ratioY = {
          center: 0.5,
          edges: 0.5,
          end: 1
        }[from2] || 0;
      } else if (!isDecimal && ratios) {
        ratioX = from2[0];
        ratioY = from2[1];
      }
      return function(i2, target, a) {
        var l = (a || vars).length, distances = cache2[l], originX, originY, x, y, d, j, max2, min2, wrapAt;
        if (!distances) {
          wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum$1])[1];
          if (!wrapAt) {
            max2 = -_bigNum$1;
            while (max2 < (max2 = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {
            }
            wrapAt--;
          }
          distances = cache2[l] = [];
          originX = ratios ? Math.min(wrapAt, l) * ratioX - 0.5 : from2 % wrapAt;
          originY = wrapAt === _bigNum$1 ? 0 : ratios ? l * ratioY / wrapAt - 0.5 : from2 / wrapAt | 0;
          max2 = 0;
          min2 = _bigNum$1;
          for (j = 0; j < l; j++) {
            x = j % wrapAt - originX;
            y = originY - (j / wrapAt | 0);
            distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
            d > max2 && (max2 = d);
            d < min2 && (min2 = d);
          }
          from2 === "random" && shuffle(distances);
          distances.max = max2 - min2;
          distances.min = min2;
          distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from2 === "edges" ? -1 : 1);
          distances.b = l < 0 ? base - l : base;
          distances.u = getUnit(vars.amount || vars.each) || 0;
          ease = ease && l < 0 ? _invertEase(ease) : ease;
        }
        l = (distances[i2] - distances.min) / distances.max || 0;
        return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;
      };
    }, _roundModifier = function _roundModifier2(v) {
      var p2 = Math.pow(10, ((v + "").split(".")[1] || "").length);
      return function(raw) {
        var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p2);
        return (n - n % 1) / p2 + (_isNumber(raw) ? 0 : getUnit(raw));
      };
    }, snap = function snap2(snapTo, value) {
      var isArray2 = _isArray(snapTo), radius, is2D;
      if (!isArray2 && _isObject(snapTo)) {
        radius = isArray2 = snapTo.radius || _bigNum$1;
        if (snapTo.values) {
          snapTo = toArray(snapTo.values);
          if (is2D = !_isNumber(snapTo[0])) {
            radius *= radius;
          }
        } else {
          snapTo = _roundModifier(snapTo.increment);
        }
      }
      return _conditionalReturn(value, !isArray2 ? _roundModifier(snapTo) : _isFunction(snapTo) ? function(raw) {
        is2D = snapTo(raw);
        return Math.abs(is2D - raw) <= radius ? is2D : raw;
      } : function(raw) {
        var x = parseFloat(is2D ? raw.x : raw), y = parseFloat(is2D ? raw.y : 0), min2 = _bigNum$1, closest = 0, i2 = snapTo.length, dx, dy;
        while (i2--) {
          if (is2D) {
            dx = snapTo[i2].x - x;
            dy = snapTo[i2].y - y;
            dx = dx * dx + dy * dy;
          } else {
            dx = Math.abs(snapTo[i2] - x);
          }
          if (dx < min2) {
            min2 = dx;
            closest = i2;
          }
        }
        closest = !radius || min2 <= radius ? snapTo[closest] : raw;
        return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
      });
    }, random = function random2(min2, max2, roundingIncrement, returnFunction) {
      return _conditionalReturn(_isArray(min2) ? !max2 : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function() {
        return _isArray(min2) ? min2[~~(Math.random() * min2.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min2 - roundingIncrement / 2 + Math.random() * (max2 - min2 + roundingIncrement * 0.99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
      });
    }, pipe = function pipe2() {
      for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
        functions[_key] = arguments[_key];
      }
      return function(value) {
        return functions.reduce(function(v, f) {
          return f(v);
        }, value);
      };
    }, unitize = function unitize2(func, unit) {
      return function(value) {
        return func(parseFloat(value)) + (unit || getUnit(value));
      };
    }, normalize = function normalize2(min2, max2, value) {
      return mapRange(min2, max2, 0, 1, value);
    }, _wrapArray = function _wrapArray2(a, wrapper, value) {
      return _conditionalReturn(value, function(index) {
        return a[~~wrapper(index)];
      });
    }, wrap = function wrap2(min2, max2, value) {
      var range = max2 - min2;
      return _isArray(min2) ? _wrapArray(min2, wrap2(0, min2.length), max2) : _conditionalReturn(value, function(value2) {
        return (range + (value2 - min2) % range) % range + min2;
      });
    }, wrapYoyo = function wrapYoyo2(min2, max2, value) {
      var range = max2 - min2, total = range * 2;
      return _isArray(min2) ? _wrapArray(min2, wrapYoyo2(0, min2.length - 1), max2) : _conditionalReturn(value, function(value2) {
        value2 = (total + (value2 - min2) % total) % total || 0;
        return min2 + (value2 > range ? total - value2 : value2);
      });
    }, _replaceRandom = function _replaceRandom2(value) {
      var prev = 0, s = "", i2, nums, end2, isArray2;
      while (~(i2 = value.indexOf("random(", prev))) {
        end2 = value.indexOf(")", i2);
        isArray2 = value.charAt(i2 + 7) === "[";
        nums = value.substr(i2 + 7, end2 - i2 - 7).match(isArray2 ? _delimitedValueExp : _strictNumExp);
        s += value.substr(prev, i2 - prev) + random(isArray2 ? nums : +nums[0], isArray2 ? 0 : +nums[1], +nums[2] || 1e-5);
        prev = end2 + 1;
      }
      return s + value.substr(prev, value.length - prev);
    }, mapRange = function mapRange2(inMin, inMax, outMin, outMax, value) {
      var inRange = inMax - inMin, outRange = outMax - outMin;
      return _conditionalReturn(value, function(value2) {
        return outMin + ((value2 - inMin) / inRange * outRange || 0);
      });
    }, interpolate = function interpolate2(start2, end2, progress, mutate) {
      var func = isNaN(start2 + end2) ? 0 : function(p3) {
        return (1 - p3) * start2 + p3 * end2;
      };
      if (!func) {
        var isString2 = _isString(start2), master = {}, p2, i2, interpolators, l, il;
        progress === true && (mutate = 1) && (progress = null);
        if (isString2) {
          start2 = {
            p: start2
          };
          end2 = {
            p: end2
          };
        } else if (_isArray(start2) && !_isArray(end2)) {
          interpolators = [];
          l = start2.length;
          il = l - 2;
          for (i2 = 1; i2 < l; i2++) {
            interpolators.push(interpolate2(start2[i2 - 1], start2[i2]));
          }
          l--;
          func = function func2(p3) {
            p3 *= l;
            var i3 = Math.min(il, ~~p3);
            return interpolators[i3](p3 - i3);
          };
          progress = end2;
        } else if (!mutate) {
          start2 = _merge(_isArray(start2) ? [] : {}, start2);
        }
        if (!interpolators) {
          for (p2 in end2) {
            _addPropTween.call(master, start2, p2, "get", end2[p2]);
          }
          func = function func2(p3) {
            return _renderPropTweens(p3, master) || (isString2 ? start2.p : start2);
          };
        }
      }
      return _conditionalReturn(progress, func);
    }, _getLabelInDirection = function _getLabelInDirection2(timeline, fromTime, backward) {
      var labels = timeline.labels, min2 = _bigNum$1, p2, distance, label;
      for (p2 in labels) {
        distance = labels[p2] - fromTime;
        if (distance < 0 === !!backward && distance && min2 > (distance = Math.abs(distance))) {
          label = p2;
          min2 = distance;
        }
      }
      return label;
    }, _callback = function _callback2(animation, type, executeLazyFirst) {
      var v = animation.vars, callback = v[type], prevContext = _context, context = animation._ctx, params, scope, result;
      if (!callback) {
        return;
      }
      params = v[type + "Params"];
      scope = v.callbackScope || animation;
      executeLazyFirst && _lazyTweens.length && _lazyRender();
      context && (_context = context);
      result = params ? callback.apply(scope, params) : callback.call(scope);
      _context = prevContext;
      return result;
    }, _interrupt = function _interrupt2(animation) {
      _removeFromParent(animation);
      animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting$1);
      animation.progress() < 1 && _callback(animation, "onInterrupt");
      return animation;
    }, _quickTween, _registerPluginQueue = [], _createPlugin = function _createPlugin2(config) {
      if (_windowExists$1() && config) {
        config = !config.name && config["default"] || config;
        var name = config.name, isFunc = _isFunction(config), Plugin = name && !isFunc && config.init ? function() {
          this._props = [];
        } : config, instanceDefaults = {
          init: _emptyFunc,
          render: _renderPropTweens,
          add: _addPropTween,
          kill: _killPropTweensOf,
          modifier: _addPluginModifier,
          rawVars: 0
        }, statics = {
          targetTest: 0,
          get: 0,
          getSetter: _getSetter,
          aliases: {},
          register: 0
        };
        _wake();
        if (config !== Plugin) {
          if (_plugins[name]) {
            return;
          }
          _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));
          _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));
          _plugins[Plugin.prop = name] = Plugin;
          if (config.targetTest) {
            _harnessPlugins.push(Plugin);
            _reservedProps[name] = 1;
          }
          name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin";
        }
        _addGlobal(name, Plugin);
        config.register && config.register(gsap, Plugin, PropTween);
      } else {
        config && _registerPluginQueue.push(config);
      }
    }, _255 = 255, _colorLookup = {
      aqua: [0, _255, _255],
      lime: [0, _255, 0],
      silver: [192, 192, 192],
      black: [0, 0, 0],
      maroon: [128, 0, 0],
      teal: [0, 128, 128],
      blue: [0, 0, _255],
      navy: [0, 0, 128],
      white: [_255, _255, _255],
      olive: [128, 128, 0],
      yellow: [_255, _255, 0],
      orange: [_255, 165, 0],
      gray: [128, 128, 128],
      purple: [128, 0, 128],
      green: [0, 128, 0],
      red: [_255, 0, 0],
      pink: [_255, 192, 203],
      cyan: [0, _255, _255],
      transparent: [_255, _255, _255, 0]
    }, _hue = function _hue2(h2, m1, m2) {
      h2 += h2 < 0 ? 1 : h2 > 1 ? -1 : 0;
      return (h2 * 6 < 1 ? m1 + (m2 - m1) * h2 * 6 : h2 < 0.5 ? m2 : h2 * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h2) * 6 : m1) * _255 + 0.5 | 0;
    }, splitColor = function splitColor2(v, toHSL, forceAlpha) {
      var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0, r, g, b, h2, s, l, max2, min2, d, wasHSL;
      if (!a) {
        if (v.substr(-1) === ",") {
          v = v.substr(0, v.length - 1);
        }
        if (_colorLookup[v]) {
          a = _colorLookup[v];
        } else if (v.charAt(0) === "#") {
          if (v.length < 6) {
            r = v.charAt(1);
            g = v.charAt(2);
            b = v.charAt(3);
            v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
          }
          if (v.length === 9) {
            a = parseInt(v.substr(1, 6), 16);
            return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
          }
          v = parseInt(v.substr(1), 16);
          a = [v >> 16, v >> 8 & _255, v & _255];
        } else if (v.substr(0, 3) === "hsl") {
          a = wasHSL = v.match(_strictNumExp);
          if (!toHSL) {
            h2 = +a[0] % 360 / 360;
            s = +a[1] / 100;
            l = +a[2] / 100;
            g = l <= 0.5 ? l * (s + 1) : l + s - l * s;
            r = l * 2 - g;
            a.length > 3 && (a[3] *= 1);
            a[0] = _hue(h2 + 1 / 3, r, g);
            a[1] = _hue(h2, r, g);
            a[2] = _hue(h2 - 1 / 3, r, g);
          } else if (~v.indexOf("=")) {
            a = v.match(_numExp);
            forceAlpha && a.length < 4 && (a[3] = 1);
            return a;
          }
        } else {
          a = v.match(_strictNumExp) || _colorLookup.transparent;
        }
        a = a.map(Number);
      }
      if (toHSL && !wasHSL) {
        r = a[0] / _255;
        g = a[1] / _255;
        b = a[2] / _255;
        max2 = Math.max(r, g, b);
        min2 = Math.min(r, g, b);
        l = (max2 + min2) / 2;
        if (max2 === min2) {
          h2 = s = 0;
        } else {
          d = max2 - min2;
          s = l > 0.5 ? d / (2 - max2 - min2) : d / (max2 + min2);
          h2 = max2 === r ? (g - b) / d + (g < b ? 6 : 0) : max2 === g ? (b - r) / d + 2 : (r - g) / d + 4;
          h2 *= 60;
        }
        a[0] = ~~(h2 + 0.5);
        a[1] = ~~(s * 100 + 0.5);
        a[2] = ~~(l * 100 + 0.5);
      }
      forceAlpha && a.length < 4 && (a[3] = 1);
      return a;
    }, _colorOrderData = function _colorOrderData2(v) {
      var values = [], c = [], i2 = -1;
      v.split(_colorExp).forEach(function(v2) {
        var a = v2.match(_numWithUnitExp) || [];
        values.push.apply(values, a);
        c.push(i2 += a.length + 1);
      });
      values.c = c;
      return values;
    }, _formatColors = function _formatColors2(s, toHSL, orderMatchData) {
      var result = "", colors = (s + result).match(_colorExp), type = toHSL ? "hsla(" : "rgba(", i2 = 0, c, shell, d, l;
      if (!colors) {
        return s;
      }
      colors = colors.map(function(color) {
        return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
      });
      if (orderMatchData) {
        d = _colorOrderData(s);
        c = orderMatchData.c;
        if (c.join(result) !== d.c.join(result)) {
          shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
          l = shell.length - 1;
          for (; i2 < l; i2++) {
            result += shell[i2] + (~c.indexOf(i2) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
          }
        }
      }
      if (!shell) {
        shell = s.split(_colorExp);
        l = shell.length - 1;
        for (; i2 < l; i2++) {
          result += shell[i2] + colors[i2];
        }
      }
      return result + shell[l];
    }, _colorExp = function() {
      var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b", p2;
      for (p2 in _colorLookup) {
        s += "|" + p2 + "\\b";
      }
      return new RegExp(s + ")", "gi");
    }(), _hslExp = /hsl[a]?\(/, _colorStringFilter = function _colorStringFilter2(a) {
      var combined = a.join(" "), toHSL;
      _colorExp.lastIndex = 0;
      if (_colorExp.test(combined)) {
        toHSL = _hslExp.test(combined);
        a[1] = _formatColors(a[1], toHSL);
        a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));
        return true;
      }
    }, _tickerActive, _ticker = function() {
      var _getTime = Date.now, _lagThreshold = 500, _adjustedLag = 33, _startTime = _getTime(), _lastUpdate = _startTime, _gap = 1e3 / 240, _nextTime = _gap, _listeners2 = [], _id, _req, _raf, _self, _delta, _i, _tick = function _tick2(v) {
        var elapsed = _getTime() - _lastUpdate, manual = v === true, overlap, dispatch, time, frame;
        elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
        _lastUpdate += elapsed;
        time = _lastUpdate - _startTime;
        overlap = time - _nextTime;
        if (overlap > 0 || manual) {
          frame = ++_self.frame;
          _delta = time - _self.time * 1e3;
          _self.time = time = time / 1e3;
          _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
          dispatch = 1;
        }
        manual || (_id = _req(_tick2));
        if (dispatch) {
          for (_i = 0; _i < _listeners2.length; _i++) {
            _listeners2[_i](time, _delta, frame, v);
          }
        }
      };
      _self = {
        time: 0,
        frame: 0,
        tick: function tick() {
          _tick(true);
        },
        deltaRatio: function deltaRatio(fps) {
          return _delta / (1e3 / (fps || 60));
        },
        wake: function wake() {
          if (_coreReady) {
            if (!_coreInitted && _windowExists$1()) {
              _win$1 = _coreInitted = window;
              _doc$1 = _win$1.document || {};
              _globals.gsap = gsap;
              (_win$1.gsapVersions || (_win$1.gsapVersions = [])).push(gsap.version);
              _install(_installScope || _win$1.GreenSockGlobals || !_win$1.gsap && _win$1 || {});
              _raf = _win$1.requestAnimationFrame;
              _registerPluginQueue.forEach(_createPlugin);
            }
            _id && _self.sleep();
            _req = _raf || function(f) {
              return setTimeout(f, _nextTime - _self.time * 1e3 + 1 | 0);
            };
            _tickerActive = 1;
            _tick(2);
          }
        },
        sleep: function sleep() {
          (_raf ? _win$1.cancelAnimationFrame : clearTimeout)(_id);
          _tickerActive = 0;
          _req = _emptyFunc;
        },
        lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
          _lagThreshold = threshold || Infinity;
          _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
        },
        fps: function fps(_fps) {
          _gap = 1e3 / (_fps || 240);
          _nextTime = _self.time * 1e3 + _gap;
        },
        add: function add2(callback, once, prioritize) {
          var func = once ? function(t, d, f, v) {
            callback(t, d, f, v);
            _self.remove(func);
          } : callback;
          _self.remove(callback);
          _listeners2[prioritize ? "unshift" : "push"](func);
          _wake();
          return func;
        },
        remove: function remove2(callback, i2) {
          ~(i2 = _listeners2.indexOf(callback)) && _listeners2.splice(i2, 1) && _i >= i2 && _i--;
        },
        _listeners: _listeners2
      };
      return _self;
    }(), _wake = function _wake2() {
      return !_tickerActive && _ticker.wake();
    }, _easeMap = {}, _customEaseExp = /^[\d.\-M][\d.\-,\s]/, _quotesExp = /["']/g, _parseObjectInString = function _parseObjectInString2(value) {
      var obj = {}, split = value.substr(1, value.length - 3).split(":"), key = split[0], i2 = 1, l = split.length, index, val, parsedVal;
      for (; i2 < l; i2++) {
        val = split[i2];
        index = i2 !== l - 1 ? val.lastIndexOf(",") : val.length;
        parsedVal = val.substr(0, index);
        obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
        key = val.substr(index + 1).trim();
      }
      return obj;
    }, _valueInParentheses = function _valueInParentheses2(value) {
      var open = value.indexOf("(") + 1, close = value.indexOf(")"), nested = value.indexOf("(", open);
      return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
    }, _configEaseFromString = function _configEaseFromString2(name) {
      var split = (name + "").split("("), ease = _easeMap[split[0]];
      return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
    }, _invertEase = function _invertEase2(ease) {
      return function(p2) {
        return 1 - ease(1 - p2);
      };
    }, _propagateYoyoEase = function _propagateYoyoEase2(timeline, isYoyo) {
      var child = timeline._first, ease;
      while (child) {
        if (child instanceof Timeline) {
          _propagateYoyoEase2(child, isYoyo);
        } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
          if (child.timeline) {
            _propagateYoyoEase2(child.timeline, isYoyo);
          } else {
            ease = child._ease;
            child._ease = child._yEase;
            child._yEase = ease;
            child._yoyo = isYoyo;
          }
        }
        child = child._next;
      }
    }, _parseEase = function _parseEase2(ease, defaultEase) {
      return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
    }, _insertEase = function _insertEase2(names, easeIn, easeOut, easeInOut) {
      if (easeOut === void 0) {
        easeOut = function easeOut2(p2) {
          return 1 - easeIn(1 - p2);
        };
      }
      if (easeInOut === void 0) {
        easeInOut = function easeInOut2(p2) {
          return p2 < 0.5 ? easeIn(p2 * 2) / 2 : 1 - easeIn((1 - p2) * 2) / 2;
        };
      }
      var ease = {
        easeIn,
        easeOut,
        easeInOut
      }, lowercaseName;
      _forEachName(names, function(name) {
        _easeMap[name] = _globals[name] = ease;
        _easeMap[lowercaseName = name.toLowerCase()] = easeOut;
        for (var p2 in ease) {
          _easeMap[lowercaseName + (p2 === "easeIn" ? ".in" : p2 === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p2] = ease[p2];
        }
      });
      return ease;
    }, _easeInOutFromOut = function _easeInOutFromOut2(easeOut) {
      return function(p2) {
        return p2 < 0.5 ? (1 - easeOut(1 - p2 * 2)) / 2 : 0.5 + easeOut((p2 - 0.5) * 2) / 2;
      };
    }, _configElastic = function _configElastic2(type, amplitude, period) {
      var p1 = amplitude >= 1 ? amplitude : 1, p2 = (period || (type ? 0.3 : 0.45)) / (amplitude < 1 ? amplitude : 1), p3 = p2 / _2PI * (Math.asin(1 / p1) || 0), easeOut = function easeOut2(p4) {
        return p4 === 1 ? 1 : p1 * Math.pow(2, -10 * p4) * _sin((p4 - p3) * p2) + 1;
      }, ease = type === "out" ? easeOut : type === "in" ? function(p4) {
        return 1 - easeOut(1 - p4);
      } : _easeInOutFromOut(easeOut);
      p2 = _2PI / p2;
      ease.config = function(amplitude2, period2) {
        return _configElastic2(type, amplitude2, period2);
      };
      return ease;
    }, _configBack = function _configBack2(type, overshoot) {
      if (overshoot === void 0) {
        overshoot = 1.70158;
      }
      var easeOut = function easeOut2(p2) {
        return p2 ? --p2 * p2 * ((overshoot + 1) * p2 + overshoot) + 1 : 0;
      }, ease = type === "out" ? easeOut : type === "in" ? function(p2) {
        return 1 - easeOut(1 - p2);
      } : _easeInOutFromOut(easeOut);
      ease.config = function(overshoot2) {
        return _configBack2(type, overshoot2);
      };
      return ease;
    };
    _forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function(name, i2) {
      var power = i2 < 5 ? i2 + 1 : i2;
      _insertEase(name + ",Power" + (power - 1), i2 ? function(p2) {
        return Math.pow(p2, power);
      } : function(p2) {
        return p2;
      }, function(p2) {
        return 1 - Math.pow(1 - p2, power);
      }, function(p2) {
        return p2 < 0.5 ? Math.pow(p2 * 2, power) / 2 : 1 - Math.pow((1 - p2) * 2, power) / 2;
      });
    });
    _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
    _insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
    (function(n, c) {
      var n1 = 1 / c, n2 = 2 * n1, n3 = 2.5 * n1, easeOut = function easeOut2(p2) {
        return p2 < n1 ? n * p2 * p2 : p2 < n2 ? n * Math.pow(p2 - 1.5 / c, 2) + 0.75 : p2 < n3 ? n * (p2 -= 2.25 / c) * p2 + 0.9375 : n * Math.pow(p2 - 2.625 / c, 2) + 0.984375;
      };
      _insertEase("Bounce", function(p2) {
        return 1 - easeOut(1 - p2);
      }, easeOut);
    })(7.5625, 2.75);
    _insertEase("Expo", function(p2) {
      return p2 ? Math.pow(2, 10 * (p2 - 1)) : 0;
    });
    _insertEase("Circ", function(p2) {
      return -(_sqrt(1 - p2 * p2) - 1);
    });
    _insertEase("Sine", function(p2) {
      return p2 === 1 ? 1 : -_cos(p2 * _HALF_PI) + 1;
    });
    _insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
    _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
      config: function config(steps, immediateStart) {
        if (steps === void 0) {
          steps = 1;
        }
        var p1 = 1 / steps, p2 = steps + (immediateStart ? 0 : 1), p3 = immediateStart ? 1 : 0, max2 = 1 - _tinyNum;
        return function(p4) {
          return ((p2 * _clamp(0, max2, p4) | 0) + p3) * p1;
        };
      }
    };
    _defaults.ease = _easeMap["quad.out"];
    _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function(name) {
      return _callbackNames += name + "," + name + "Params,";
    });
    var GSCache = function GSCache2(target, harness) {
      this.id = _gsID++;
      target._gsap = this;
      this.target = target;
      this.harness = harness;
      this.get = harness ? harness.get : _getProperty;
      this.set = harness ? harness.getSetter : _getSetter;
    };
    var Animation = /* @__PURE__ */ function() {
      function Animation2(vars) {
        this.vars = vars;
        this._delay = +vars.delay || 0;
        if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
          this._rDelay = vars.repeatDelay || 0;
          this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
        }
        this._ts = 1;
        _setDuration(this, +vars.duration, 1, 1);
        this.data = vars.data;
        if (_context) {
          this._ctx = _context;
          _context.data.push(this);
        }
        _tickerActive || _ticker.wake();
      }
      var _proto = Animation2.prototype;
      _proto.delay = function delay(value) {
        if (value || value === 0) {
          this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
          this._delay = value;
          return this;
        }
        return this._delay;
      };
      _proto.duration = function duration(value) {
        return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
      };
      _proto.totalDuration = function totalDuration(value) {
        if (!arguments.length) {
          return this._tDur;
        }
        this._dirty = 0;
        return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
      };
      _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
        _wake();
        if (!arguments.length) {
          return this._tTime;
        }
        var parent = this._dp;
        if (parent && parent.smoothChildTiming && this._ts) {
          _alignPlayhead(this, _totalTime);
          !parent._dp || parent.parent || _postAddChecks(parent, this);
          while (parent && parent.parent) {
            if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
              parent.totalTime(parent._tTime, true);
            }
            parent = parent.parent;
          }
          if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
            _addToTimeline(this._dp, this, this._start - this._delay);
          }
        }
        if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
          this._ts || (this._pTime = _totalTime);
          _lazySafeRender(this, _totalTime, suppressEvents);
        }
        return this;
      };
      _proto.time = function time(value, suppressEvents) {
        return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;
      };
      _proto.totalProgress = function totalProgress(value, suppressEvents) {
        return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
      };
      _proto.progress = function progress(value, suppressEvents) {
        return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
      };
      _proto.iteration = function iteration(value, suppressEvents) {
        var cycleDuration = this.duration() + this._rDelay;
        return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
      };
      _proto.timeScale = function timeScale(value) {
        if (!arguments.length) {
          return this._rts === -_tinyNum ? 0 : this._rts;
        }
        if (this._rts === value) {
          return this;
        }
        var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;
        this._rts = +value || 0;
        this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;
        this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), true);
        _setEnd(this);
        return _recacheAncestors(this);
      };
      _proto.paused = function paused(value) {
        if (!arguments.length) {
          return this._ps;
        }
        if (this._ps !== value) {
          this._ps = value;
          if (value) {
            this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());
            this._ts = this._act = 0;
          } else {
            _wake();
            this._ts = this._rts;
            this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));
          }
        }
        return this;
      };
      _proto.startTime = function startTime(value) {
        if (arguments.length) {
          this._start = value;
          var parent = this.parent || this._dp;
          parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
          return this;
        }
        return this._start;
      };
      _proto.endTime = function endTime(includeRepeats) {
        return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
      };
      _proto.rawTime = function rawTime(wrapRepeats) {
        var parent = this.parent || this._dp;
        return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
      };
      _proto.revert = function revert(config) {
        if (config === void 0) {
          config = _revertConfig;
        }
        var prevIsReverting = _reverting$1;
        _reverting$1 = config;
        if (this._initted || this._startAt) {
          this.timeline && this.timeline.revert(config);
          this.totalTime(-0.01, config.suppressEvents);
        }
        this.data !== "nested" && config.kill !== false && this.kill();
        _reverting$1 = prevIsReverting;
        return this;
      };
      _proto.globalTime = function globalTime(rawTime) {
        var animation = this, time = arguments.length ? rawTime : animation.rawTime();
        while (animation) {
          time = animation._start + time / (animation._ts || 1);
          animation = animation._dp;
        }
        return !this.parent && this._sat ? this._sat.vars.immediateRender ? -Infinity : this._sat.globalTime(rawTime) : time;
      };
      _proto.repeat = function repeat(value) {
        if (arguments.length) {
          this._repeat = value === Infinity ? -2 : value;
          return _onUpdateTotalDuration(this);
        }
        return this._repeat === -2 ? Infinity : this._repeat;
      };
      _proto.repeatDelay = function repeatDelay(value) {
        if (arguments.length) {
          var time = this._time;
          this._rDelay = value;
          _onUpdateTotalDuration(this);
          return time ? this.time(time) : this;
        }
        return this._rDelay;
      };
      _proto.yoyo = function yoyo(value) {
        if (arguments.length) {
          this._yoyo = value;
          return this;
        }
        return this._yoyo;
      };
      _proto.seek = function seek(position, suppressEvents) {
        return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
      };
      _proto.restart = function restart(includeDelay, suppressEvents) {
        return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
      };
      _proto.play = function play(from2, suppressEvents) {
        from2 != null && this.seek(from2, suppressEvents);
        return this.reversed(false).paused(false);
      };
      _proto.reverse = function reverse(from2, suppressEvents) {
        from2 != null && this.seek(from2 || this.totalDuration(), suppressEvents);
        return this.reversed(true).paused(false);
      };
      _proto.pause = function pause(atTime, suppressEvents) {
        atTime != null && this.seek(atTime, suppressEvents);
        return this.paused(true);
      };
      _proto.resume = function resume() {
        return this.paused(false);
      };
      _proto.reversed = function reversed(value) {
        if (arguments.length) {
          !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));
          return this;
        }
        return this._rts < 0;
      };
      _proto.invalidate = function invalidate() {
        this._initted = this._act = 0;
        this._zTime = -_tinyNum;
        return this;
      };
      _proto.isActive = function isActive() {
        var parent = this.parent || this._dp, start2 = this._start, rawTime;
        return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start2 && rawTime < this.endTime(true) - _tinyNum);
      };
      _proto.eventCallback = function eventCallback(type, callback, params) {
        var vars = this.vars;
        if (arguments.length > 1) {
          if (!callback) {
            delete vars[type];
          } else {
            vars[type] = callback;
            params && (vars[type + "Params"] = params);
            type === "onUpdate" && (this._onUpdate = callback);
          }
          return this;
        }
        return vars[type];
      };
      _proto.then = function then(onFulfilled) {
        var self2 = this;
        return new Promise(function(resolve2) {
          var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough, _resolve = function _resolve2() {
            var _then = self2.then;
            self2.then = null;
            _isFunction(f) && (f = f(self2)) && (f.then || f === self2) && (self2.then = _then);
            resolve2(f);
            self2.then = _then;
          };
          if (self2._initted && self2.totalProgress() === 1 && self2._ts >= 0 || !self2._tTime && self2._ts < 0) {
            _resolve();
          } else {
            self2._prom = _resolve;
          }
        });
      };
      _proto.kill = function kill() {
        _interrupt(this);
      };
      return Animation2;
    }();
    _setDefaults(Animation.prototype, {
      _time: 0,
      _start: 0,
      _end: 0,
      _tTime: 0,
      _tDur: 0,
      _dirty: 0,
      _repeat: 0,
      _yoyo: false,
      parent: null,
      _initted: false,
      _rDelay: 0,
      _ts: 1,
      _dp: 0,
      ratio: 0,
      _zTime: -_tinyNum,
      _prom: 0,
      _ps: false,
      _rts: 1
    });
    var Timeline = /* @__PURE__ */ function(_Animation) {
      _inheritsLoose(Timeline2, _Animation);
      function Timeline2(vars, position) {
        var _this;
        if (vars === void 0) {
          vars = {};
        }
        _this = _Animation.call(this, vars) || this;
        _this.labels = {};
        _this.smoothChildTiming = !!vars.smoothChildTiming;
        _this.autoRemoveChildren = !!vars.autoRemoveChildren;
        _this._sort = _isNotFalse(vars.sortChildren);
        _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
        vars.reversed && _this.reverse();
        vars.paused && _this.paused(true);
        vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
        return _this;
      }
      var _proto2 = Timeline2.prototype;
      _proto2.to = function to2(targets, vars, position) {
        _createTweenType(0, arguments, this);
        return this;
      };
      _proto2.from = function from2(targets, vars, position) {
        _createTweenType(1, arguments, this);
        return this;
      };
      _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
        _createTweenType(2, arguments, this);
        return this;
      };
      _proto2.set = function set2(targets, vars, position) {
        vars.duration = 0;
        vars.parent = this;
        _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
        vars.immediateRender = !!vars.immediateRender;
        new Tween(targets, vars, _parsePosition(this, position), 1);
        return this;
      };
      _proto2.call = function call(callback, params, position) {
        return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
      };
      _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
        vars.duration = duration;
        vars.stagger = vars.stagger || stagger;
        vars.onComplete = onCompleteAll;
        vars.onCompleteParams = onCompleteAllParams;
        vars.parent = this;
        new Tween(targets, vars, _parsePosition(this, position));
        return this;
      };
      _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
        vars.runBackwards = 1;
        _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
        return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
      };
      _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
        toVars.startAt = fromVars;
        _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
        return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
      };
      _proto2.render = function render(totalTime, suppressEvents, force) {
        var prevTime = this._time, tDur = this._dirty ? this.totalDuration() : this._tDur, dur = this._dur, tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime), crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur), time, child, next, iteration, cycleDuration, prevPaused, pauseTween, timeScale, prevStart, prevIteration, yoyo, isYoyo;
        this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
        if (tTime !== this._tTime || force || crossingStart) {
          if (prevTime !== this._time && dur) {
            tTime += this._time - prevTime;
            totalTime += this._time - prevTime;
          }
          time = tTime;
          prevStart = this._start;
          timeScale = this._ts;
          prevPaused = !timeScale;
          if (crossingStart) {
            dur || (prevTime = this._zTime);
            (totalTime || !suppressEvents) && (this._zTime = totalTime);
          }
          if (this._repeat) {
            yoyo = this._yoyo;
            cycleDuration = dur + this._rDelay;
            if (this._repeat < -1 && totalTime < 0) {
              return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
            }
            time = _roundPrecise(tTime % cycleDuration);
            if (tTime === tDur) {
              iteration = this._repeat;
              time = dur;
            } else {
              iteration = ~~(tTime / cycleDuration);
              if (iteration && iteration === tTime / cycleDuration) {
                time = dur;
                iteration--;
              }
              time > dur && (time = dur);
            }
            prevIteration = _animationCycle(this._tTime, cycleDuration);
            !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration);
            if (yoyo && iteration & 1) {
              time = dur - time;
              isYoyo = 1;
            }
            if (iteration !== prevIteration && !this._lock) {
              var rewinding = yoyo && prevIteration & 1, doesWrap = rewinding === (yoyo && iteration & 1);
              iteration < prevIteration && (rewinding = !rewinding);
              prevTime = rewinding ? 0 : tTime % dur ? dur : tTime;
              this._lock = 1;
              this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
              this._tTime = tTime;
              !suppressEvents && this.parent && _callback(this, "onRepeat");
              this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
              if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
                return this;
              }
              dur = this._dur;
              tDur = this._tDur;
              if (doesWrap) {
                this._lock = 2;
                prevTime = rewinding ? dur : -1e-4;
                this.render(prevTime, true);
                this.vars.repeatRefresh && !isYoyo && this.invalidate();
              }
              this._lock = 0;
              if (!this._ts && !prevPaused) {
                return this;
              }
              _propagateYoyoEase(this, isYoyo);
            }
          }
          if (this._hasPause && !this._forcing && this._lock < 2) {
            pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
            if (pauseTween) {
              tTime -= time - (time = pauseTween._start);
            }
          }
          this._tTime = tTime;
          this._time = time;
          this._act = !timeScale;
          if (!this._initted) {
            this._onUpdate = this.vars.onUpdate;
            this._initted = 1;
            this._zTime = totalTime;
            prevTime = 0;
          }
          if (!prevTime && time && !suppressEvents && !iteration) {
            _callback(this, "onStart");
            if (this._tTime !== tTime) {
              return this;
            }
          }
          if (time >= prevTime && totalTime >= 0) {
            child = this._first;
            while (child) {
              next = child._next;
              if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
                if (child.parent !== this) {
                  return this.render(totalTime, suppressEvents, force);
                }
                child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
                if (time !== this._time || !this._ts && !prevPaused) {
                  pauseTween = 0;
                  next && (tTime += this._zTime = -_tinyNum);
                  break;
                }
              }
              child = next;
            }
          } else {
            child = this._last;
            var adjustedTime = totalTime < 0 ? totalTime : time;
            while (child) {
              next = child._prev;
              if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
                if (child.parent !== this) {
                  return this.render(totalTime, suppressEvents, force);
                }
                child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting$1 && (child._initted || child._startAt));
                if (time !== this._time || !this._ts && !prevPaused) {
                  pauseTween = 0;
                  next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);
                  break;
                }
              }
              child = next;
            }
          }
          if (pauseTween && !suppressEvents) {
            this.pause();
            pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
            if (this._ts) {
              this._start = prevStart;
              _setEnd(this);
              return this.render(totalTime, suppressEvents, force);
            }
          }
          this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
          if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) {
            if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) {
              if (!this._lock) {
                (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);
                if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
                  _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);
                  this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
                }
              }
            }
          }
        }
        return this;
      };
      _proto2.add = function add2(child, position) {
        var _this2 = this;
        _isNumber(position) || (position = _parsePosition(this, position, child));
        if (!(child instanceof Animation)) {
          if (_isArray(child)) {
            child.forEach(function(obj) {
              return _this2.add(obj, position);
            });
            return this;
          }
          if (_isString(child)) {
            return this.addLabel(child, position);
          }
          if (_isFunction(child)) {
            child = Tween.delayedCall(0, child);
          } else {
            return this;
          }
        }
        return this !== child ? _addToTimeline(this, child, position) : this;
      };
      _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
        if (nested === void 0) {
          nested = true;
        }
        if (tweens === void 0) {
          tweens = true;
        }
        if (timelines === void 0) {
          timelines = true;
        }
        if (ignoreBeforeTime === void 0) {
          ignoreBeforeTime = -_bigNum$1;
        }
        var a = [], child = this._first;
        while (child) {
          if (child._start >= ignoreBeforeTime) {
            if (child instanceof Tween) {
              tweens && a.push(child);
            } else {
              timelines && a.push(child);
              nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
            }
          }
          child = child._next;
        }
        return a;
      };
      _proto2.getById = function getById(id) {
        var animations = this.getChildren(1, 1, 1), i2 = animations.length;
        while (i2--) {
          if (animations[i2].vars.id === id) {
            return animations[i2];
          }
        }
      };
      _proto2.remove = function remove2(child) {
        if (_isString(child)) {
          return this.removeLabel(child);
        }
        if (_isFunction(child)) {
          return this.killTweensOf(child);
        }
        _removeLinkedListItem(this, child);
        if (child === this._recent) {
          this._recent = this._last;
        }
        return _uncache(this);
      };
      _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
        if (!arguments.length) {
          return this._tTime;
        }
        this._forcing = 1;
        if (!this._dp && this._ts) {
          this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
        }
        _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);
        this._forcing = 0;
        return this;
      };
      _proto2.addLabel = function addLabel(label, position) {
        this.labels[label] = _parsePosition(this, position);
        return this;
      };
      _proto2.removeLabel = function removeLabel(label) {
        delete this.labels[label];
        return this;
      };
      _proto2.addPause = function addPause(position, callback, params) {
        var t = Tween.delayedCall(0, callback || _emptyFunc, params);
        t.data = "isPause";
        this._hasPause = 1;
        return _addToTimeline(this, t, _parsePosition(this, position));
      };
      _proto2.removePause = function removePause(position) {
        var child = this._first;
        position = _parsePosition(this, position);
        while (child) {
          if (child._start === position && child.data === "isPause") {
            _removeFromParent(child);
          }
          child = child._next;
        }
      };
      _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
        var tweens = this.getTweensOf(targets, onlyActive), i2 = tweens.length;
        while (i2--) {
          _overwritingTween !== tweens[i2] && tweens[i2].kill(targets, props);
        }
        return this;
      };
      _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
        var a = [], parsedTargets = toArray(targets), child = this._first, isGlobalTime = _isNumber(onlyActive), children;
        while (child) {
          if (child instanceof Tween) {
            if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
              a.push(child);
            }
          } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
            a.push.apply(a, children);
          }
          child = child._next;
        }
        return a;
      };
      _proto2.tweenTo = function tweenTo(position, vars) {
        vars = vars || {};
        var tl = this, endTime = _parsePosition(tl, position), _vars = vars, startAt = _vars.startAt, _onStart = _vars.onStart, onStartParams = _vars.onStartParams, immediateRender = _vars.immediateRender, initted, tween = Tween.to(tl, _setDefaults({
          ease: vars.ease || "none",
          lazy: false,
          immediateRender: false,
          time: endTime,
          overwrite: "auto",
          duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
          onStart: function onStart() {
            tl.pause();
            if (!initted) {
              var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
              tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
              initted = 1;
            }
            _onStart && _onStart.apply(tween, onStartParams || []);
          }
        }, vars));
        return immediateRender ? tween.render(0) : tween;
      };
      _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
        return this.tweenTo(toPosition, _setDefaults({
          startAt: {
            time: _parsePosition(this, fromPosition)
          }
        }, vars));
      };
      _proto2.recent = function recent() {
        return this._recent;
      };
      _proto2.nextLabel = function nextLabel(afterTime) {
        if (afterTime === void 0) {
          afterTime = this._time;
        }
        return _getLabelInDirection(this, _parsePosition(this, afterTime));
      };
      _proto2.previousLabel = function previousLabel(beforeTime) {
        if (beforeTime === void 0) {
          beforeTime = this._time;
        }
        return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
      };
      _proto2.currentLabel = function currentLabel(value) {
        return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
      };
      _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
        if (ignoreBeforeTime === void 0) {
          ignoreBeforeTime = 0;
        }
        var child = this._first, labels = this.labels, p2;
        while (child) {
          if (child._start >= ignoreBeforeTime) {
            child._start += amount;
            child._end += amount;
          }
          child = child._next;
        }
        if (adjustLabels) {
          for (p2 in labels) {
            if (labels[p2] >= ignoreBeforeTime) {
              labels[p2] += amount;
            }
          }
        }
        return _uncache(this);
      };
      _proto2.invalidate = function invalidate(soft) {
        var child = this._first;
        this._lock = 0;
        while (child) {
          child.invalidate(soft);
          child = child._next;
        }
        return _Animation.prototype.invalidate.call(this, soft);
      };
      _proto2.clear = function clear2(includeLabels) {
        if (includeLabels === void 0) {
          includeLabels = true;
        }
        var child = this._first, next;
        while (child) {
          next = child._next;
          this.remove(child);
          child = next;
        }
        this._dp && (this._time = this._tTime = this._pTime = 0);
        includeLabels && (this.labels = {});
        return _uncache(this);
      };
      _proto2.totalDuration = function totalDuration(value) {
        var max2 = 0, self2 = this, child = self2._last, prevStart = _bigNum$1, prev, start2, parent;
        if (arguments.length) {
          return self2.timeScale((self2._repeat < 0 ? self2.duration() : self2.totalDuration()) / (self2.reversed() ? -value : value));
        }
        if (self2._dirty) {
          parent = self2.parent;
          while (child) {
            prev = child._prev;
            child._dirty && child.totalDuration();
            start2 = child._start;
            if (start2 > prevStart && self2._sort && child._ts && !self2._lock) {
              self2._lock = 1;
              _addToTimeline(self2, child, start2 - child._delay, 1)._lock = 0;
            } else {
              prevStart = start2;
            }
            if (start2 < 0 && child._ts) {
              max2 -= start2;
              if (!parent && !self2._dp || parent && parent.smoothChildTiming) {
                self2._start += start2 / self2._ts;
                self2._time -= start2;
                self2._tTime -= start2;
              }
              self2.shiftChildren(-start2, false, -Infinity);
              prevStart = 0;
            }
            child._end > max2 && child._ts && (max2 = child._end);
            child = prev;
          }
          _setDuration(self2, self2 === _globalTimeline && self2._time > max2 ? self2._time : max2, 1, 1);
          self2._dirty = 0;
        }
        return self2._tDur;
      };
      Timeline2.updateRoot = function updateRoot(time) {
        if (_globalTimeline._ts) {
          _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
          _lastRenderedFrame = _ticker.frame;
        }
        if (_ticker.frame >= _nextGCFrame) {
          _nextGCFrame += _config.autoSleep || 120;
          var child = _globalTimeline._first;
          if (!child || !child._ts) {
            if (_config.autoSleep && _ticker._listeners.length < 2) {
              while (child && !child._ts) {
                child = child._next;
              }
              child || _ticker.sleep();
            }
          }
        }
      };
      return Timeline2;
    }(Animation);
    _setDefaults(Timeline.prototype, {
      _lock: 0,
      _hasPause: 0,
      _forcing: 0
    });
    var _addComplexStringPropTween = function _addComplexStringPropTween2(target, prop, start2, end2, setter, stringFilter, funcParam) {
      var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter), index = 0, matchIndex = 0, result, startNums, color, endNum, chunk, startNum, hasRandom, a;
      pt.b = start2;
      pt.e = end2;
      start2 += "";
      end2 += "";
      if (hasRandom = ~end2.indexOf("random(")) {
        end2 = _replaceRandom(end2);
      }
      if (stringFilter) {
        a = [start2, end2];
        stringFilter(a, target, prop);
        start2 = a[0];
        end2 = a[1];
      }
      startNums = start2.match(_complexStringNumExp) || [];
      while (result = _complexStringNumExp.exec(end2)) {
        endNum = result[0];
        chunk = end2.substring(index, result.index);
        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(") {
          color = 1;
        }
        if (endNum !== startNums[matchIndex++]) {
          startNum = parseFloat(startNums[matchIndex - 1]) || 0;
          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
            m: color && color < 4 ? Math.round : 0
          };
          index = _complexStringNumExp.lastIndex;
        }
      }
      pt.c = index < end2.length ? end2.substring(index, end2.length) : "";
      pt.fp = funcParam;
      if (_relExp.test(end2) || hasRandom) {
        pt.e = 0;
      }
      this._pt = pt;
      return pt;
    }, _addPropTween = function _addPropTween2(target, prop, start2, end2, index, targets, modifier, stringFilter, funcParam, optional) {
      _isFunction(end2) && (end2 = end2(index || 0, target, targets));
      var currentValue = target[prop], parsedStart = start2 !== "get" ? start2 : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](), setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc, pt;
      if (_isString(end2)) {
        if (~end2.indexOf("random(")) {
          end2 = _replaceRandom(end2);
        }
        if (end2.charAt(1) === "=") {
          pt = _parseRelative(parsedStart, end2) + (getUnit(parsedStart) || 0);
          if (pt || pt === 0) {
            end2 = pt;
          }
        }
      }
      if (!optional || parsedStart !== end2 || _forceAllPropTweens) {
        if (!isNaN(parsedStart * end2) && end2 !== "") {
          pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end2 - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
          funcParam && (pt.fp = funcParam);
          modifier && pt.modifier(modifier, this, target);
          return this._pt = pt;
        }
        !currentValue && !(prop in target) && _missingPlugin(prop, end2);
        return _addComplexStringPropTween.call(this, target, prop, parsedStart, end2, setter, stringFilter || _config.stringFilter, funcParam);
      }
    }, _processVars = function _processVars2(vars, index, target, targets, tween) {
      _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
      if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
        return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
      }
      var copy = {}, p2;
      for (p2 in vars) {
        copy[p2] = _parseFuncOrString(vars[p2], tween, index, target, targets);
      }
      return copy;
    }, _checkPlugin = function _checkPlugin2(property, vars, tween, index, target, targets) {
      var plugin, pt, ptLookup, i2;
      if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
        tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
        if (tween !== _quickTween) {
          ptLookup = tween._ptLookup[tween._targets.indexOf(target)];
          i2 = plugin._props.length;
          while (i2--) {
            ptLookup[plugin._props[i2]] = pt;
          }
        }
      }
      return plugin;
    }, _overwritingTween, _forceAllPropTweens, _initTween = function _initTween2(tween, time, tTime) {
      var vars = tween.vars, ease = vars.ease, startAt = vars.startAt, immediateRender = vars.immediateRender, lazy = vars.lazy, onUpdate = vars.onUpdate, onUpdateParams = vars.onUpdateParams, callbackScope = vars.callbackScope, runBackwards = vars.runBackwards, yoyoEase = vars.yoyoEase, keyframes = vars.keyframes, autoRevert = vars.autoRevert, dur = tween._dur, prevStartAt = tween._startAt, targets = tween._targets, parent = tween.parent, fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets, autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites, tl = tween.timeline, cleanVars, i2, p2, pt, target, hasPriority, gsData, harness, plugin, ptLookup, index, harnessVars, overwritten;
      tl && (!keyframes || !ease) && (ease = "none");
      tween._ease = _parseEase(ease, _defaults.ease);
      tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
      if (yoyoEase && tween._yoyo && !tween._repeat) {
        yoyoEase = tween._yEase;
        tween._yEase = tween._ease;
        tween._ease = yoyoEase;
      }
      tween._from = !tl && !!vars.runBackwards;
      if (!tl || keyframes && !vars.stagger) {
        harness = targets[0] ? _getCache(targets[0]).harness : 0;
        harnessVars = harness && vars[harness.prop];
        cleanVars = _copyExcluding(vars, _reservedProps);
        if (prevStartAt) {
          prevStartAt._zTime < 0 && prevStartAt.progress(1);
          time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig);
          prevStartAt._lazy = 0;
        }
        if (startAt) {
          _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
            data: "isStart",
            overwrite: false,
            parent,
            immediateRender: true,
            lazy: !prevStartAt && _isNotFalse(lazy),
            startAt: null,
            delay: 0,
            onUpdate,
            onUpdateParams,
            callbackScope,
            stagger: 0
          }, startAt)));
          tween._startAt._dp = 0;
          tween._startAt._sat = tween;
          time < 0 && (_reverting$1 || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill);
          if (immediateRender) {
            if (dur && time <= 0 && tTime <= 0) {
              time && (tween._zTime = time);
              return;
            }
          }
        } else if (runBackwards && dur) {
          if (!prevStartAt) {
            time && (immediateRender = false);
            p2 = _setDefaults({
              overwrite: false,
              data: "isFromStart",
              //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
              lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
              immediateRender,
              //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
              stagger: 0,
              parent
              //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
            }, cleanVars);
            harnessVars && (p2[harness.prop] = harnessVars);
            _removeFromParent(tween._startAt = Tween.set(targets, p2));
            tween._startAt._dp = 0;
            tween._startAt._sat = tween;
            time < 0 && (_reverting$1 ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
            tween._zTime = time;
            if (!immediateRender) {
              _initTween2(tween._startAt, _tinyNum, _tinyNum);
            } else if (!time) {
              return;
            }
          }
        }
        tween._pt = tween._ptCache = 0;
        lazy = dur && _isNotFalse(lazy) || lazy && !dur;
        for (i2 = 0; i2 < targets.length; i2++) {
          target = targets[i2];
          gsData = target._gsap || _harness(targets)[i2]._gsap;
          tween._ptLookup[i2] = ptLookup = {};
          _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();
          index = fullTargets === targets ? i2 : fullTargets.indexOf(target);
          if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
            tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
            plugin._props.forEach(function(name) {
              ptLookup[name] = pt;
            });
            plugin.priority && (hasPriority = 1);
          }
          if (!harness || harnessVars) {
            for (p2 in cleanVars) {
              if (_plugins[p2] && (plugin = _checkPlugin(p2, cleanVars, tween, index, target, fullTargets))) {
                plugin.priority && (hasPriority = 1);
              } else {
                ptLookup[p2] = pt = _addPropTween.call(tween, target, p2, "get", cleanVars[p2], index, fullTargets, 0, vars.stringFilter);
              }
            }
          }
          tween._op && tween._op[i2] && tween.kill(target, tween._op[i2]);
          if (autoOverwrite && tween._pt) {
            _overwritingTween = tween;
            _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));
            overwritten = !tween.parent;
            _overwritingTween = 0;
          }
          tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
        }
        hasPriority && _sortPropTweensByPriority(tween);
        tween._onInit && tween._onInit(tween);
      }
      tween._onUpdate = onUpdate;
      tween._initted = (!tween._op || tween._pt) && !overwritten;
      keyframes && time <= 0 && tl.render(_bigNum$1, true, true);
    }, _updatePropTweens = function _updatePropTweens2(tween, property, value, start2, startIsRelative, ratio, time) {
      var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property], pt, rootPT, lookup2, i2;
      if (!ptCache) {
        ptCache = tween._ptCache[property] = [];
        lookup2 = tween._ptLookup;
        i2 = tween._targets.length;
        while (i2--) {
          pt = lookup2[i2][property];
          if (pt && pt.d && pt.d._pt) {
            pt = pt.d._pt;
            while (pt && pt.p !== property && pt.fp !== property) {
              pt = pt._next;
            }
          }
          if (!pt) {
            _forceAllPropTweens = 1;
            tween.vars[property] = "+=0";
            _initTween(tween, time);
            _forceAllPropTweens = 0;
            return 1;
          }
          ptCache.push(pt);
        }
      }
      i2 = ptCache.length;
      while (i2--) {
        rootPT = ptCache[i2];
        pt = rootPT._pt || rootPT;
        pt.s = (start2 || start2 === 0) && !startIsRelative ? start2 : pt.s + (start2 || 0) + ratio * pt.c;
        pt.c = value - pt.s;
        rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e));
        rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));
      }
    }, _addAliasesToVars = function _addAliasesToVars2(targets, vars) {
      var harness = targets[0] ? _getCache(targets[0]).harness : 0, propertyAliases = harness && harness.aliases, copy, p2, i2, aliases2;
      if (!propertyAliases) {
        return vars;
      }
      copy = _merge({}, vars);
      for (p2 in propertyAliases) {
        if (p2 in copy) {
          aliases2 = propertyAliases[p2].split(",");
          i2 = aliases2.length;
          while (i2--) {
            copy[aliases2[i2]] = copy[p2];
          }
        }
      }
      return copy;
    }, _parseKeyframe = function _parseKeyframe2(prop, obj, allProps, easeEach) {
      var ease = obj.ease || easeEach || "power1.inOut", p2, a;
      if (_isArray(obj)) {
        a = allProps[prop] || (allProps[prop] = []);
        obj.forEach(function(value, i2) {
          return a.push({
            t: i2 / (obj.length - 1) * 100,
            v: value,
            e: ease
          });
        });
      } else {
        for (p2 in obj) {
          a = allProps[p2] || (allProps[p2] = []);
          p2 === "ease" || a.push({
            t: parseFloat(prop),
            v: obj[p2],
            e: ease
          });
        }
      }
    }, _parseFuncOrString = function _parseFuncOrString2(value, tween, i2, target, targets) {
      return _isFunction(value) ? value.call(tween, i2, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
    }, _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert", _staggerPropsToSkip = {};
    _forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function(name) {
      return _staggerPropsToSkip[name] = 1;
    });
    var Tween = /* @__PURE__ */ function(_Animation2) {
      _inheritsLoose(Tween2, _Animation2);
      function Tween2(targets, vars, position, skipInherit) {
        var _this3;
        if (typeof vars === "number") {
          position.duration = vars;
          vars = position;
          position = null;
        }
        _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
        var _this3$vars = _this3.vars, duration = _this3$vars.duration, delay = _this3$vars.delay, immediateRender = _this3$vars.immediateRender, stagger = _this3$vars.stagger, overwrite = _this3$vars.overwrite, keyframes = _this3$vars.keyframes, defaults2 = _this3$vars.defaults, scrollTrigger = _this3$vars.scrollTrigger, yoyoEase = _this3$vars.yoyoEase, parent = vars.parent || _globalTimeline, parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets), tl, i2, copy, l, p2, curTarget, staggerFunc, staggerVarsToMerge;
        _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
        _this3._ptLookup = [];
        _this3._overwrite = overwrite;
        if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
          vars = _this3.vars;
          tl = _this3.timeline = new Timeline({
            data: "nested",
            defaults: defaults2 || {},
            targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
          });
          tl.kill();
          tl.parent = tl._dp = _assertThisInitialized(_this3);
          tl._start = 0;
          if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
            l = parsedTargets.length;
            staggerFunc = stagger && distribute(stagger);
            if (_isObject(stagger)) {
              for (p2 in stagger) {
                if (~_staggerTweenProps.indexOf(p2)) {
                  staggerVarsToMerge || (staggerVarsToMerge = {});
                  staggerVarsToMerge[p2] = stagger[p2];
                }
              }
            }
            for (i2 = 0; i2 < l; i2++) {
              copy = _copyExcluding(vars, _staggerPropsToSkip);
              copy.stagger = 0;
              yoyoEase && (copy.yoyoEase = yoyoEase);
              staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
              curTarget = parsedTargets[i2];
              copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i2, curTarget, parsedTargets);
              copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i2, curTarget, parsedTargets) || 0) - _this3._delay;
              if (!stagger && l === 1 && copy.delay) {
                _this3._delay = delay = copy.delay;
                _this3._start += delay;
                copy.delay = 0;
              }
              tl.to(curTarget, copy, staggerFunc ? staggerFunc(i2, curTarget, parsedTargets) : 0);
              tl._ease = _easeMap.none;
            }
            tl.duration() ? duration = delay = 0 : _this3.timeline = 0;
          } else if (keyframes) {
            _inheritDefaults(_setDefaults(tl.vars.defaults, {
              ease: "none"
            }));
            tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
            var time = 0, a, kf, v;
            if (_isArray(keyframes)) {
              keyframes.forEach(function(frame) {
                return tl.to(parsedTargets, frame, ">");
              });
              tl.duration();
            } else {
              copy = {};
              for (p2 in keyframes) {
                p2 === "ease" || p2 === "easeEach" || _parseKeyframe(p2, keyframes[p2], copy, keyframes.easeEach);
              }
              for (p2 in copy) {
                a = copy[p2].sort(function(a2, b) {
                  return a2.t - b.t;
                });
                time = 0;
                for (i2 = 0; i2 < a.length; i2++) {
                  kf = a[i2];
                  v = {
                    ease: kf.e,
                    duration: (kf.t - (i2 ? a[i2 - 1].t : 0)) / 100 * duration
                  };
                  v[p2] = kf.v;
                  tl.to(parsedTargets, v, time);
                  time += v.duration;
                }
              }
              tl.duration() < duration && tl.to({}, {
                duration: duration - tl.duration()
              });
            }
          }
          duration || _this3.duration(duration = tl.duration());
        } else {
          _this3.timeline = 0;
        }
        if (overwrite === true && !_suppressOverwrites) {
          _overwritingTween = _assertThisInitialized(_this3);
          _globalTimeline.killTweensOf(parsedTargets);
          _overwritingTween = 0;
        }
        _addToTimeline(parent, _assertThisInitialized(_this3), position);
        vars.reversed && _this3.reverse();
        vars.paused && _this3.paused(true);
        if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
          _this3._tTime = -_tinyNum;
          _this3.render(Math.max(0, -delay) || 0);
        }
        scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
        return _this3;
      }
      var _proto3 = Tween2.prototype;
      _proto3.render = function render(totalTime, suppressEvents, force) {
        var prevTime = this._time, tDur = this._tDur, dur = this._dur, isNegative = totalTime < 0, tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime, time, pt, iteration, cycleDuration, prevIteration, isYoyo, ratio, timeline, yoyoEase;
        if (!dur) {
          _renderZeroDurationTween(this, totalTime, suppressEvents, force);
        } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {
          time = tTime;
          timeline = this.timeline;
          if (this._repeat) {
            cycleDuration = dur + this._rDelay;
            if (this._repeat < -1 && isNegative) {
              return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
            }
            time = _roundPrecise(tTime % cycleDuration);
            if (tTime === tDur) {
              iteration = this._repeat;
              time = dur;
            } else {
              iteration = ~~(tTime / cycleDuration);
              if (iteration && iteration === tTime / cycleDuration) {
                time = dur;
                iteration--;
              }
              time > dur && (time = dur);
            }
            isYoyo = this._yoyo && iteration & 1;
            if (isYoyo) {
              yoyoEase = this._yEase;
              time = dur - time;
            }
            prevIteration = _animationCycle(this._tTime, cycleDuration);
            if (time === prevTime && !force && this._initted) {
              this._tTime = tTime;
              return this;
            }
            if (iteration !== prevIteration) {
              timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);
              if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
                this._lock = force = 1;
                this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
              }
            }
          }
          if (!this._initted) {
            if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
              this._tTime = 0;
              return this;
            }
            if (prevTime !== this._time) {
              return this;
            }
            if (dur !== this._dur) {
              return this.render(totalTime, suppressEvents, force);
            }
          }
          this._tTime = tTime;
          this._time = time;
          if (!this._act && this._ts) {
            this._act = 1;
            this._lazy = 0;
          }
          this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
          if (this._from) {
            this.ratio = ratio = 1 - ratio;
          }
          if (time && !prevTime && !suppressEvents && !iteration) {
            _callback(this, "onStart");
            if (this._tTime !== tTime) {
              return this;
            }
          }
          pt = this._pt;
          while (pt) {
            pt.r(ratio, pt.d);
            pt = pt._next;
          }
          timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);
          if (this._onUpdate && !suppressEvents) {
            isNegative && _rewindStartAt(this, totalTime, suppressEvents, force);
            _callback(this, "onUpdate");
          }
          this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
          if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
            isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
            (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);
            if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
              _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);
              this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
            }
          }
        }
        return this;
      };
      _proto3.targets = function targets() {
        return this._targets;
      };
      _proto3.invalidate = function invalidate(soft) {
        (!soft || !this.vars.runBackwards) && (this._startAt = 0);
        this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
        this._ptLookup = [];
        this.timeline && this.timeline.invalidate(soft);
        return _Animation2.prototype.invalidate.call(this, soft);
      };
      _proto3.resetTo = function resetTo(property, value, start2, startIsRelative) {
        _tickerActive || _ticker.wake();
        this._ts || this.play();
        var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts), ratio;
        this._initted || _initTween(this, time);
        ratio = this._ease(time / this._dur);
        if (_updatePropTweens(this, property, value, start2, startIsRelative, ratio, time)) {
          return this.resetTo(property, value, start2, startIsRelative);
        }
        _alignPlayhead(this, 0);
        this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
        return this.render(0);
      };
      _proto3.kill = function kill(targets, vars) {
        if (vars === void 0) {
          vars = "all";
        }
        if (!targets && (!vars || vars === "all")) {
          this._lazy = this._pt = 0;
          return this.parent ? _interrupt(this) : this;
        }
        if (this.timeline) {
          var tDur = this.timeline.totalDuration();
          this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);
          this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);
          return this;
        }
        var parsedTargets = this._targets, killingTargets = targets ? toArray(targets) : parsedTargets, propTweenLookup = this._ptLookup, firstPT = this._pt, overwrittenProps, curLookup, curOverwriteProps, props, p2, pt, i2;
        if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
          vars === "all" && (this._pt = 0);
          return _interrupt(this);
        }
        overwrittenProps = this._op = this._op || [];
        if (vars !== "all") {
          if (_isString(vars)) {
            p2 = {};
            _forEachName(vars, function(name) {
              return p2[name] = 1;
            });
            vars = p2;
          }
          vars = _addAliasesToVars(parsedTargets, vars);
        }
        i2 = parsedTargets.length;
        while (i2--) {
          if (~killingTargets.indexOf(parsedTargets[i2])) {
            curLookup = propTweenLookup[i2];
            if (vars === "all") {
              overwrittenProps[i2] = vars;
              props = curLookup;
              curOverwriteProps = {};
            } else {
              curOverwriteProps = overwrittenProps[i2] = overwrittenProps[i2] || {};
              props = vars;
            }
            for (p2 in props) {
              pt = curLookup && curLookup[p2];
              if (pt) {
                if (!("kill" in pt.d) || pt.d.kill(p2) === true) {
                  _removeLinkedListItem(this, pt, "_pt");
                }
                delete curLookup[p2];
              }
              if (curOverwriteProps !== "all") {
                curOverwriteProps[p2] = 1;
              }
            }
          }
        }
        this._initted && !this._pt && firstPT && _interrupt(this);
        return this;
      };
      Tween2.to = function to2(targets, vars) {
        return new Tween2(targets, vars, arguments[2]);
      };
      Tween2.from = function from2(targets, vars) {
        return _createTweenType(1, arguments);
      };
      Tween2.delayedCall = function delayedCall(delay, callback, params, scope) {
        return new Tween2(callback, 0, {
          immediateRender: false,
          lazy: false,
          overwrite: false,
          delay,
          onComplete: callback,
          onReverseComplete: callback,
          onCompleteParams: params,
          onReverseCompleteParams: params,
          callbackScope: scope
        });
      };
      Tween2.fromTo = function fromTo(targets, fromVars, toVars) {
        return _createTweenType(2, arguments);
      };
      Tween2.set = function set2(targets, vars) {
        vars.duration = 0;
        vars.repeatDelay || (vars.repeat = 0);
        return new Tween2(targets, vars);
      };
      Tween2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
        return _globalTimeline.killTweensOf(targets, props, onlyActive);
      };
      return Tween2;
    }(Animation);
    _setDefaults(Tween.prototype, {
      _targets: [],
      _lazy: 0,
      _startAt: 0,
      _op: 0,
      _onInit: 0
    });
    _forEachName("staggerTo,staggerFrom,staggerFromTo", function(name) {
      Tween[name] = function() {
        var tl = new Timeline(), params = _slice.call(arguments, 0);
        params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
        return tl[name].apply(tl, params);
      };
    });
    var _setterPlain = function _setterPlain2(target, property, value) {
      return target[property] = value;
    }, _setterFunc = function _setterFunc2(target, property, value) {
      return target[property](value);
    }, _setterFuncWithParam = function _setterFuncWithParam2(target, property, value, data) {
      return target[property](data.fp, value);
    }, _setterAttribute = function _setterAttribute2(target, property, value) {
      return target.setAttribute(property, value);
    }, _getSetter = function _getSetter2(target, property) {
      return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
    }, _renderPlain = function _renderPlain2(ratio, data) {
      return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1e6) / 1e6, data);
    }, _renderBoolean = function _renderBoolean2(ratio, data) {
      return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
    }, _renderComplexString = function _renderComplexString2(ratio, data) {
      var pt = data._pt, s = "";
      if (!ratio && data.b) {
        s = data.b;
      } else if (ratio === 1 && data.e) {
        s = data.e;
      } else {
        while (pt) {
          s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 1e4) / 1e4) + s;
          pt = pt._next;
        }
        s += data.c;
      }
      data.set(data.t, data.p, s, data);
    }, _renderPropTweens = function _renderPropTweens2(ratio, data) {
      var pt = data._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
    }, _addPluginModifier = function _addPluginModifier2(modifier, tween, target, property) {
      var pt = this._pt, next;
      while (pt) {
        next = pt._next;
        pt.p === property && pt.modifier(modifier, tween, target);
        pt = next;
      }
    }, _killPropTweensOf = function _killPropTweensOf2(property) {
      var pt = this._pt, hasNonDependentRemaining, next;
      while (pt) {
        next = pt._next;
        if (pt.p === property && !pt.op || pt.op === property) {
          _removeLinkedListItem(this, pt, "_pt");
        } else if (!pt.dep) {
          hasNonDependentRemaining = 1;
        }
        pt = next;
      }
      return !hasNonDependentRemaining;
    }, _setterWithModifier = function _setterWithModifier2(target, property, value, data) {
      data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
    }, _sortPropTweensByPriority = function _sortPropTweensByPriority2(parent) {
      var pt = parent._pt, next, pt2, first, last;
      while (pt) {
        next = pt._next;
        pt2 = first;
        while (pt2 && pt2.pr > pt.pr) {
          pt2 = pt2._next;
        }
        if (pt._prev = pt2 ? pt2._prev : last) {
          pt._prev._next = pt;
        } else {
          first = pt;
        }
        if (pt._next = pt2) {
          pt2._prev = pt;
        } else {
          last = pt;
        }
        pt = next;
      }
      parent._pt = first;
    };
    var PropTween = /* @__PURE__ */ function() {
      function PropTween2(next, target, prop, start2, change, renderer2, data, setter, priority) {
        this.t = target;
        this.s = start2;
        this.c = change;
        this.p = prop;
        this.r = renderer2 || _renderPlain;
        this.d = data || this;
        this.set = setter || _setterPlain;
        this.pr = priority || 0;
        this._next = next;
        if (next) {
          next._prev = this;
        }
      }
      var _proto4 = PropTween2.prototype;
      _proto4.modifier = function modifier(func, tween, target) {
        this.mSet = this.mSet || this.set;
        this.set = _setterWithModifier;
        this.m = func;
        this.mt = target;
        this.tween = tween;
      };
      return PropTween2;
    }();
    _forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function(name) {
      return _reservedProps[name] = 1;
    });
    _globals.TweenMax = _globals.TweenLite = Tween;
    _globals.TimelineLite = _globals.TimelineMax = Timeline;
    _globalTimeline = new Timeline({
      sortChildren: false,
      defaults: _defaults,
      autoRemoveChildren: true,
      id: "root",
      smoothChildTiming: true
    });
    _config.stringFilter = _colorStringFilter;
    var _media = [], _listeners = {}, _emptyArray = [], _lastMediaTime = 0, _contextID = 0, _dispatch = function _dispatch2(type) {
      return (_listeners[type] || _emptyArray).map(function(f) {
        return f();
      });
    }, _onMediaChange = function _onMediaChange2() {
      var time = Date.now(), matches = [];
      if (time - _lastMediaTime > 2) {
        _dispatch("matchMediaInit");
        _media.forEach(function(c) {
          var queries = c.queries, conditions = c.conditions, match, p2, anyMatch, toggled;
          for (p2 in queries) {
            match = _win$1.matchMedia(queries[p2]).matches;
            match && (anyMatch = 1);
            if (match !== conditions[p2]) {
              conditions[p2] = match;
              toggled = 1;
            }
          }
          if (toggled) {
            c.revert();
            anyMatch && matches.push(c);
          }
        });
        _dispatch("matchMediaRevert");
        matches.forEach(function(c) {
          return c.onMatch(c);
        });
        _lastMediaTime = time;
        _dispatch("matchMedia");
      }
    };
    var Context = /* @__PURE__ */ function() {
      function Context2(func, scope) {
        this.selector = scope && selector(scope);
        this.data = [];
        this._r = [];
        this.isReverted = false;
        this.id = _contextID++;
        func && this.add(func);
      }
      var _proto5 = Context2.prototype;
      _proto5.add = function add2(name, func, scope) {
        if (_isFunction(name)) {
          scope = func;
          func = name;
          name = _isFunction;
        }
        var self2 = this, f = function f2() {
          var prev = _context, prevSelector = self2.selector, result;
          prev && prev !== self2 && prev.data.push(self2);
          scope && (self2.selector = selector(scope));
          _context = self2;
          result = func.apply(self2, arguments);
          _isFunction(result) && self2._r.push(result);
          _context = prev;
          self2.selector = prevSelector;
          self2.isReverted = false;
          return result;
        };
        self2.last = f;
        return name === _isFunction ? f(self2) : name ? self2[name] = f : f;
      };
      _proto5.ignore = function ignore(func) {
        var prev = _context;
        _context = null;
        func(this);
        _context = prev;
      };
      _proto5.getTweens = function getTweens() {
        var a = [];
        this.data.forEach(function(e) {
          return e instanceof Context2 ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
        });
        return a;
      };
      _proto5.clear = function clear2() {
        this._r.length = this.data.length = 0;
      };
      _proto5.kill = function kill(revert, matchMedia) {
        var _this4 = this;
        if (revert) {
          var tweens = this.getTweens();
          this.data.forEach(function(t) {
            if (t.data === "isFlip") {
              t.revert();
              t.getChildren(true, true, false).forEach(function(tween) {
                return tweens.splice(tweens.indexOf(tween), 1);
              });
            }
          });
          tweens.map(function(t) {
            return {
              g: t.globalTime(0),
              t
            };
          }).sort(function(a, b) {
            return b.g - a.g || -Infinity;
          }).forEach(function(o) {
            return o.t.revert(revert);
          });
          this.data.forEach(function(e) {
            return !(e instanceof Tween) && e.revert && e.revert(revert);
          });
          this._r.forEach(function(f) {
            return f(revert, _this4);
          });
          this.isReverted = true;
        } else {
          this.data.forEach(function(e) {
            return e.kill && e.kill();
          });
        }
        this.clear();
        if (matchMedia) {
          var i2 = _media.length;
          while (i2--) {
            _media[i2].id === this.id && _media.splice(i2, 1);
          }
        }
      };
      _proto5.revert = function revert(config) {
        this.kill(config || {});
      };
      return Context2;
    }();
    var MatchMedia = /* @__PURE__ */ function() {
      function MatchMedia2(scope) {
        this.contexts = [];
        this.scope = scope;
      }
      var _proto6 = MatchMedia2.prototype;
      _proto6.add = function add2(conditions, func, scope) {
        _isObject(conditions) || (conditions = {
          matches: conditions
        });
        var context = new Context(0, scope || this.scope), cond = context.conditions = {}, mq, p2, active;
        _context && !context.selector && (context.selector = _context.selector);
        this.contexts.push(context);
        func = context.add("onMatch", func);
        context.queries = conditions;
        for (p2 in conditions) {
          if (p2 === "all") {
            active = 1;
          } else {
            mq = _win$1.matchMedia(conditions[p2]);
            if (mq) {
              _media.indexOf(context) < 0 && _media.push(context);
              (cond[p2] = mq.matches) && (active = 1);
              mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
            }
          }
        }
        active && func(context);
        return this;
      };
      _proto6.revert = function revert(config) {
        this.kill(config || {});
      };
      _proto6.kill = function kill(revert) {
        this.contexts.forEach(function(c) {
          return c.kill(revert, true);
        });
      };
      return MatchMedia2;
    }();
    var _gsap = {
      registerPlugin: function registerPlugin() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        args.forEach(function(config) {
          return _createPlugin(config);
        });
      },
      timeline: function timeline(vars) {
        return new Timeline(vars);
      },
      getTweensOf: function getTweensOf(targets, onlyActive) {
        return _globalTimeline.getTweensOf(targets, onlyActive);
      },
      getProperty: function getProperty(target, property, unit, uncache) {
        _isString(target) && (target = toArray(target)[0]);
        var getter = _getCache(target || {}).get, format2 = unit ? _passThrough : _numericIfPossible;
        unit === "native" && (unit = "");
        return !target ? target : !property ? function(property2, unit2, uncache2) {
          return format2((_plugins[property2] && _plugins[property2].get || getter)(target, property2, unit2, uncache2));
        } : format2((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
      },
      quickSetter: function quickSetter(target, property, unit) {
        target = toArray(target);
        if (target.length > 1) {
          var setters = target.map(function(t) {
            return gsap.quickSetter(t, property, unit);
          }), l = setters.length;
          return function(value) {
            var i2 = l;
            while (i2--) {
              setters[i2](value);
            }
          };
        }
        target = target[0] || {};
        var Plugin = _plugins[property], cache2 = _getCache(target), p2 = cache2.harness && (cache2.harness.aliases || {})[property] || property, setter = Plugin ? function(value) {
          var p3 = new Plugin();
          _quickTween._pt = 0;
          p3.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
          p3.render(1, p3);
          _quickTween._pt && _renderPropTweens(1, _quickTween);
        } : cache2.set(target, p2);
        return Plugin ? setter : function(value) {
          return setter(target, p2, unit ? value + unit : value, cache2, 1);
        };
      },
      quickTo: function quickTo(target, property, vars) {
        var _merge2;
        var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = "+=0.1", _merge2.paused = true, _merge2), vars || {})), func = function func2(value, start2, startIsRelative) {
          return tween.resetTo(property, value, start2, startIsRelative);
        };
        func.tween = tween;
        return func;
      },
      isTweening: function isTweening(targets) {
        return _globalTimeline.getTweensOf(targets, true).length > 0;
      },
      defaults: function defaults2(value) {
        value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
        return _mergeDeep(_defaults, value || {});
      },
      config: function config(value) {
        return _mergeDeep(_config, value || {});
      },
      registerEffect: function registerEffect(_ref3) {
        var name = _ref3.name, effect2 = _ref3.effect, plugins = _ref3.plugins, defaults2 = _ref3.defaults, extendTimeline = _ref3.extendTimeline;
        (plugins || "").split(",").forEach(function(pluginName) {
          return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
        });
        _effects[name] = function(targets, vars, tl) {
          return effect2(toArray(targets), _setDefaults(vars || {}, defaults2), tl);
        };
        if (extendTimeline) {
          Timeline.prototype[name] = function(targets, vars, position) {
            return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
          };
        }
      },
      registerEase: function registerEase(name, ease) {
        _easeMap[name] = _parseEase(ease);
      },
      parseEase: function parseEase(ease, defaultEase) {
        return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
      },
      getById: function getById(id) {
        return _globalTimeline.getById(id);
      },
      exportRoot: function exportRoot(vars, includeDelayedCalls) {
        if (vars === void 0) {
          vars = {};
        }
        var tl = new Timeline(vars), child, next;
        tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
        _globalTimeline.remove(tl);
        tl._dp = 0;
        tl._time = tl._tTime = _globalTimeline._time;
        child = _globalTimeline._first;
        while (child) {
          next = child._next;
          if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
            _addToTimeline(tl, child, child._start - child._delay);
          }
          child = next;
        }
        _addToTimeline(_globalTimeline, tl, 0);
        return tl;
      },
      context: function context(func, scope) {
        return func ? new Context(func, scope) : _context;
      },
      matchMedia: function matchMedia(scope) {
        return new MatchMedia(scope);
      },
      matchMediaRefresh: function matchMediaRefresh() {
        return _media.forEach(function(c) {
          var cond = c.conditions, found, p2;
          for (p2 in cond) {
            if (cond[p2]) {
              cond[p2] = false;
              found = 1;
            }
          }
          found && c.revert();
        }) || _onMediaChange();
      },
      addEventListener: function addEventListener2(type, callback) {
        var a = _listeners[type] || (_listeners[type] = []);
        ~a.indexOf(callback) || a.push(callback);
      },
      removeEventListener: function removeEventListener2(type, callback) {
        var a = _listeners[type], i2 = a && a.indexOf(callback);
        i2 >= 0 && a.splice(i2, 1);
      },
      utils: {
        wrap,
        wrapYoyo,
        distribute,
        random,
        snap,
        normalize,
        getUnit,
        clamp,
        splitColor,
        toArray,
        selector,
        mapRange,
        pipe,
        unitize,
        interpolate,
        shuffle
      },
      install: _install,
      effects: _effects,
      ticker: _ticker,
      updateRoot: Timeline.updateRoot,
      plugins: _plugins,
      globalTimeline: _globalTimeline,
      core: {
        PropTween,
        globals: _addGlobal,
        Tween,
        Timeline,
        Animation,
        getCache: _getCache,
        _removeLinkedListItem,
        reverting: function reverting() {
          return _reverting$1;
        },
        context: function context(toAdd) {
          if (toAdd && _context) {
            _context.data.push(toAdd);
            toAdd._ctx = _context;
          }
          return _context;
        },
        suppressOverwrites: function suppressOverwrites(value) {
          return _suppressOverwrites = value;
        }
      }
    };
    _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function(name) {
      return _gsap[name] = Tween[name];
    });
    _ticker.add(Timeline.updateRoot);
    _quickTween = _gsap.to({}, {
      duration: 0
    });
    var _getPluginPropTween = function _getPluginPropTween2(plugin, prop) {
      var pt = plugin._pt;
      while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
        pt = pt._next;
      }
      return pt;
    }, _addModifiers = function _addModifiers2(tween, modifiers) {
      var targets = tween._targets, p2, i2, pt;
      for (p2 in modifiers) {
        i2 = targets.length;
        while (i2--) {
          pt = tween._ptLookup[i2][p2];
          if (pt && (pt = pt.d)) {
            if (pt._pt) {
              pt = _getPluginPropTween(pt, p2);
            }
            pt && pt.modifier && pt.modifier(modifiers[p2], tween, targets[i2], p2);
          }
        }
      }
    }, _buildModifierPlugin = function _buildModifierPlugin2(name, modifier) {
      return {
        name,
        rawVars: 1,
        //don't pre-process function-based values or "random()" strings.
        init: function init(target, vars, tween) {
          tween._onInit = function(tween2) {
            var temp, p2;
            if (_isString(vars)) {
              temp = {};
              _forEachName(vars, function(name2) {
                return temp[name2] = 1;
              });
              vars = temp;
            }
            if (modifier) {
              temp = {};
              for (p2 in vars) {
                temp[p2] = modifier(vars[p2]);
              }
              vars = temp;
            }
            _addModifiers(tween2, vars);
          };
        }
      };
    };
    var gsap = _gsap.registerPlugin({
      name: "attr",
      init: function init(target, vars, tween, index, targets) {
        var p2, pt, v;
        this.tween = tween;
        for (p2 in vars) {
          v = target.getAttribute(p2) || "";
          pt = this.add(target, "setAttribute", (v || 0) + "", vars[p2], index, targets, 0, 0, p2);
          pt.op = p2;
          pt.b = v;
          this._props.push(p2);
        }
      },
      render: function render(ratio, data) {
        var pt = data._pt;
        while (pt) {
          _reverting$1 ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d);
          pt = pt._next;
        }
      }
    }, {
      name: "endArray",
      init: function init(target, value) {
        var i2 = value.length;
        while (i2--) {
          this.add(target, i2, target[i2] || 0, value[i2], 0, 0, 0, 0, 0, 1);
        }
      }
    }, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap;
    Tween.version = Timeline.version = gsap.version = "3.12.2";
    _coreReady = 1;
    _windowExists$1() && _wake();
    _easeMap.Power0;
    _easeMap.Power1;
    _easeMap.Power2;
    _easeMap.Power3;
    _easeMap.Power4;
    _easeMap.Linear;
    _easeMap.Quad;
    _easeMap.Cubic;
    _easeMap.Quart;
    _easeMap.Quint;
    _easeMap.Strong;
    _easeMap.Elastic;
    _easeMap.Back;
    _easeMap.SteppedEase;
    _easeMap.Bounce;
    _easeMap.Sine;
    _easeMap.Expo;
    _easeMap.Circ;
    /*!
     * CSSPlugin 3.12.2
     * https://greensock.com
     *
     * Copyright 2008-2023, GreenSock. All rights reserved.
     * Subject to the terms at https://greensock.com/standard-license or for
     * Club GreenSock members, the agreement issued with that membership.
     * @author: Jack Doyle, jack@greensock.com
    */
    var _win, _doc, _docElement, _pluginInitted, _tempDiv, _recentSetterPlugin, _reverting, _windowExists = function _windowExists2() {
      return typeof window !== "undefined";
    }, _transformProps = {}, _RAD2DEG = 180 / Math.PI, _DEG2RAD = Math.PI / 180, _atan2 = Math.atan2, _bigNum = 1e8, _capsExp = /([A-Z])/g, _horizontalExp = /(left|right|width|margin|padding|x)/i, _complexExp = /[\s,\(]\S/, _propertyAliases = {
      autoAlpha: "opacity,visibility",
      scale: "scaleX,scaleY",
      alpha: "opacity"
    }, _renderCSSProp = function _renderCSSProp2(ratio, data) {
      return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1e4) / 1e4 + data.u, data);
    }, _renderPropWithEnd = function _renderPropWithEnd2(ratio, data) {
      return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 1e4) / 1e4 + data.u, data);
    }, _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning2(ratio, data) {
      return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 1e4) / 1e4 + data.u : data.b, data);
    }, _renderRoundedCSSProp = function _renderRoundedCSSProp2(ratio, data) {
      var value = data.s + data.c * ratio;
      data.set(data.t, data.p, ~~(value + (value < 0 ? -0.5 : 0.5)) + data.u, data);
    }, _renderNonTweeningValue = function _renderNonTweeningValue2(ratio, data) {
      return data.set(data.t, data.p, ratio ? data.e : data.b, data);
    }, _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd2(ratio, data) {
      return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
    }, _setterCSSStyle = function _setterCSSStyle2(target, property, value) {
      return target.style[property] = value;
    }, _setterCSSProp = function _setterCSSProp2(target, property, value) {
      return target.style.setProperty(property, value);
    }, _setterTransform = function _setterTransform2(target, property, value) {
      return target._gsap[property] = value;
    }, _setterScale = function _setterScale2(target, property, value) {
      return target._gsap.scaleX = target._gsap.scaleY = value;
    }, _setterScaleWithRender = function _setterScaleWithRender2(target, property, value, data, ratio) {
      var cache2 = target._gsap;
      cache2.scaleX = cache2.scaleY = value;
      cache2.renderTransform(ratio, cache2);
    }, _setterTransformWithRender = function _setterTransformWithRender2(target, property, value, data, ratio) {
      var cache2 = target._gsap;
      cache2[property] = value;
      cache2.renderTransform(ratio, cache2);
    }, _transformProp = "transform", _transformOriginProp = _transformProp + "Origin", _saveStyle = function _saveStyle2(property, isNotCSS) {
      var _this = this;
      var target = this.target, style = target.style;
      if (property in _transformProps && style) {
        this.tfm = this.tfm || {};
        if (property !== "transform") {
          property = _propertyAliases[property] || property;
          ~property.indexOf(",") ? property.split(",").forEach(function(a) {
            return _this.tfm[a] = _get(target, a);
          }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property);
        } else {
          return _propertyAliases.transform.split(",").forEach(function(p2) {
            return _saveStyle2.call(_this, p2, isNotCSS);
          });
        }
        if (this.props.indexOf(_transformProp) >= 0) {
          return;
        }
        if (target._gsap.svg) {
          this.svgo = target.getAttribute("data-svg-origin");
          this.props.push(_transformOriginProp, isNotCSS, "");
        }
        property = _transformProp;
      }
      (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
    }, _removeIndependentTransforms = function _removeIndependentTransforms2(style) {
      if (style.translate) {
        style.removeProperty("translate");
        style.removeProperty("scale");
        style.removeProperty("rotate");
      }
    }, _revertStyle = function _revertStyle2() {
      var props = this.props, target = this.target, style = target.style, cache2 = target._gsap, i2, p2;
      for (i2 = 0; i2 < props.length; i2 += 3) {
        props[i2 + 1] ? target[props[i2]] = props[i2 + 2] : props[i2 + 2] ? style[props[i2]] = props[i2 + 2] : style.removeProperty(props[i2].substr(0, 2) === "--" ? props[i2] : props[i2].replace(_capsExp, "-$1").toLowerCase());
      }
      if (this.tfm) {
        for (p2 in this.tfm) {
          cache2[p2] = this.tfm[p2];
        }
        if (cache2.svg) {
          cache2.renderTransform();
          target.setAttribute("data-svg-origin", this.svgo || "");
        }
        i2 = _reverting();
        if ((!i2 || !i2.isStart) && !style[_transformProp]) {
          _removeIndependentTransforms(style);
          cache2.uncache = 1;
        }
      }
    }, _getStyleSaver = function _getStyleSaver2(target, properties) {
      var saver = {
        target,
        props: [],
        revert: _revertStyle,
        save: _saveStyle
      };
      target._gsap || gsap.core.getCache(target);
      properties && properties.split(",").forEach(function(p2) {
        return saver.save(p2);
      });
      return saver;
    }, _supports3D, _createElement = function _createElement2(type, ns) {
      var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type);
      return e.style ? e : _doc.createElement(type);
    }, _getComputedProperty = function _getComputedProperty2(target, property, skipPrefixFallback) {
      var cs = getComputedStyle(target);
      return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty2(target, _checkPropPrefix(property) || property, 1) || "";
    }, _prefixes = "O,Moz,ms,Ms,Webkit".split(","), _checkPropPrefix = function _checkPropPrefix2(property, element, preferPrefix) {
      var e = element || _tempDiv, s = e.style, i2 = 5;
      if (property in s && !preferPrefix) {
        return property;
      }
      property = property.charAt(0).toUpperCase() + property.substr(1);
      while (i2-- && !(_prefixes[i2] + property in s)) {
      }
      return i2 < 0 ? null : (i2 === 3 ? "ms" : i2 >= 0 ? _prefixes[i2] : "") + property;
    }, _initCore = function _initCore2() {
      if (_windowExists() && window.document) {
        _win = window;
        _doc = _win.document;
        _docElement = _doc.documentElement;
        _tempDiv = _createElement("div") || {
          style: {}
        };
        _createElement("div");
        _transformProp = _checkPropPrefix(_transformProp);
        _transformOriginProp = _transformProp + "Origin";
        _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0";
        _supports3D = !!_checkPropPrefix("perspective");
        _reverting = gsap.core.reverting;
        _pluginInitted = 1;
      }
    }, _getBBoxHack = function _getBBoxHack2(swapIfPossible) {
      var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"), oldParent = this.parentNode, oldSibling = this.nextSibling, oldCSS = this.style.cssText, bbox;
      _docElement.appendChild(svg);
      svg.appendChild(this);
      this.style.display = "block";
      if (swapIfPossible) {
        try {
          bbox = this.getBBox();
          this._gsapBBox = this.getBBox;
          this.getBBox = _getBBoxHack2;
        } catch (e) {
        }
      } else if (this._gsapBBox) {
        bbox = this._gsapBBox();
      }
      if (oldParent) {
        if (oldSibling) {
          oldParent.insertBefore(this, oldSibling);
        } else {
          oldParent.appendChild(this);
        }
      }
      _docElement.removeChild(svg);
      this.style.cssText = oldCSS;
      return bbox;
    }, _getAttributeFallbacks = function _getAttributeFallbacks2(target, attributesArray) {
      var i2 = attributesArray.length;
      while (i2--) {
        if (target.hasAttribute(attributesArray[i2])) {
          return target.getAttribute(attributesArray[i2]);
        }
      }
    }, _getBBox = function _getBBox2(target) {
      var bounds;
      try {
        bounds = target.getBBox();
      } catch (error) {
        bounds = _getBBoxHack.call(target, true);
      }
      bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));
      return bounds && !bounds.width && !bounds.x && !bounds.y ? {
        x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
        y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
        width: 0,
        height: 0
      } : bounds;
    }, _isSVG = function _isSVG2(e) {
      return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
    }, _removeProperty = function _removeProperty2(target, property) {
      if (property) {
        var style = target.style;
        if (property in _transformProps && property !== _transformOriginProp) {
          property = _transformProp;
        }
        if (style.removeProperty) {
          if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
            property = "-" + property;
          }
          style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
        } else {
          style.removeAttribute(property);
        }
      }
    }, _addNonTweeningPT = function _addNonTweeningPT2(plugin, target, property, beginning, end2, onlySetAtEnd) {
      var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
      plugin._pt = pt;
      pt.b = beginning;
      pt.e = end2;
      plugin._props.push(property);
      return pt;
    }, _nonConvertibleUnits = {
      deg: 1,
      rad: 1,
      turn: 1
    }, _nonStandardLayouts = {
      grid: 1,
      flex: 1
    }, _convertToUnit = function _convertToUnit2(target, property, value, unit) {
      var curValue = parseFloat(value) || 0, curUnit = (value + "").trim().substr((curValue + "").length) || "px", style = _tempDiv.style, horizontal = _horizontalExp.test(property), isRootSVG = target.tagName.toLowerCase() === "svg", measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"), amount = 100, toPixels = unit === "px", toPercent = unit === "%", px, parent, cache2, isSVG;
      if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
        return curValue;
      }
      curUnit !== "px" && !toPixels && (curValue = _convertToUnit2(target, property, value, "px"));
      isSVG = target.getCTM && _isSVG(target);
      if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
        px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
        return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
      }
      style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
      parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;
      if (isSVG) {
        parent = (target.ownerSVGElement || {}).parentNode;
      }
      if (!parent || parent === _doc || !parent.appendChild) {
        parent = _doc.body;
      }
      cache2 = parent._gsap;
      if (cache2 && toPercent && cache2.width && horizontal && cache2.time === _ticker.time && !cache2.uncache) {
        return _round(curValue / cache2.width * amount);
      } else {
        (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
        parent === target && (style.position = "static");
        parent.appendChild(_tempDiv);
        px = _tempDiv[measureProperty];
        parent.removeChild(_tempDiv);
        style.position = "absolute";
        if (horizontal && toPercent) {
          cache2 = _getCache(parent);
          cache2.time = _ticker.time;
          cache2.width = parent[measureProperty];
        }
      }
      return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
    }, _get = function _get2(target, property, unit, uncache) {
      var value;
      _pluginInitted || _initCore();
      if (property in _propertyAliases && property !== "transform") {
        property = _propertyAliases[property];
        if (~property.indexOf(",")) {
          property = property.split(",")[0];
        }
      }
      if (_transformProps[property] && property !== "transform") {
        value = _parseTransform(target, uncache);
        value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
      } else {
        value = target.style[property];
        if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
          value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0);
        }
      }
      return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
    }, _tweenComplexCSSString = function _tweenComplexCSSString2(target, prop, start2, end2) {
      if (!start2 || start2 === "none") {
        var p2 = _checkPropPrefix(prop, target, 1), s = p2 && _getComputedProperty(target, p2, 1);
        if (s && s !== start2) {
          prop = p2;
          start2 = s;
        } else if (prop === "borderColor") {
          start2 = _getComputedProperty(target, "borderTopColor");
        }
      }
      var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString), index = 0, matchIndex = 0, a, result, startValues, startNum, color, startValue, endValue, endNum, chunk, endUnit, startUnit, endValues;
      pt.b = start2;
      pt.e = end2;
      start2 += "";
      end2 += "";
      if (end2 === "auto") {
        target.style[prop] = end2;
        end2 = _getComputedProperty(target, prop) || end2;
        target.style[prop] = start2;
      }
      a = [start2, end2];
      _colorStringFilter(a);
      start2 = a[0];
      end2 = a[1];
      startValues = start2.match(_numWithUnitExp) || [];
      endValues = end2.match(_numWithUnitExp) || [];
      if (endValues.length) {
        while (result = _numWithUnitExp.exec(end2)) {
          endValue = result[0];
          chunk = end2.substring(index, result.index);
          if (color) {
            color = (color + 1) % 5;
          } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
            color = 1;
          }
          if (endValue !== (startValue = startValues[matchIndex++] || "")) {
            startNum = parseFloat(startValue) || 0;
            startUnit = startValue.substr((startNum + "").length);
            endValue.charAt(1) === "=" && (endValue = _parseRelative(startNum, endValue) + startUnit);
            endNum = parseFloat(endValue);
            endUnit = endValue.substr((endNum + "").length);
            index = _numWithUnitExp.lastIndex - endUnit.length;
            if (!endUnit) {
              endUnit = endUnit || _config.units[prop] || startUnit;
              if (index === end2.length) {
                end2 += endUnit;
                pt.e += endUnit;
              }
            }
            if (startUnit !== endUnit) {
              startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
            }
            pt._pt = {
              _next: pt._pt,
              p: chunk || matchIndex === 1 ? chunk : ",",
              //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
              s: startNum,
              c: endNum - startNum,
              m: color && color < 4 || prop === "zIndex" ? Math.round : 0
            };
          }
        }
        pt.c = index < end2.length ? end2.substring(index, end2.length) : "";
      } else {
        pt.r = prop === "display" && end2 === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
      }
      _relExp.test(end2) && (pt.e = 0);
      this._pt = pt;
      return pt;
    }, _keywordToPercent = {
      top: "0%",
      bottom: "100%",
      left: "0%",
      right: "100%",
      center: "50%"
    }, _convertKeywordsToPercentages = function _convertKeywordsToPercentages2(value) {
      var split = value.split(" "), x = split[0], y = split[1] || "50%";
      if (x === "top" || x === "bottom" || y === "left" || y === "right") {
        value = x;
        x = y;
        y = value;
      }
      split[0] = _keywordToPercent[x] || x;
      split[1] = _keywordToPercent[y] || y;
      return split.join(" ");
    }, _renderClearProps = function _renderClearProps2(ratio, data) {
      if (data.tween && data.tween._time === data.tween._dur) {
        var target = data.t, style = target.style, props = data.u, cache2 = target._gsap, prop, clearTransforms, i2;
        if (props === "all" || props === true) {
          style.cssText = "";
          clearTransforms = 1;
        } else {
          props = props.split(",");
          i2 = props.length;
          while (--i2 > -1) {
            prop = props[i2];
            if (_transformProps[prop]) {
              clearTransforms = 1;
              prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
            }
            _removeProperty(target, prop);
          }
        }
        if (clearTransforms) {
          _removeProperty(target, _transformProp);
          if (cache2) {
            cache2.svg && target.removeAttribute("transform");
            _parseTransform(target, 1);
            cache2.uncache = 1;
            _removeIndependentTransforms(style);
          }
        }
      }
    }, _specialProps = {
      clearProps: function clearProps(plugin, target, property, endValue, tween) {
        if (tween.data !== "isFromStart") {
          var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
          pt.u = endValue;
          pt.pr = -10;
          pt.tween = tween;
          plugin._props.push(property);
          return 1;
        }
      }
      /* className feature (about 0.4kb gzipped).
      , className(plugin, target, property, endValue, tween) {
      	let _renderClassName = (ratio, data) => {
      			data.css.render(ratio, data.css);
      			if (!ratio || ratio === 1) {
      				let inline = data.rmv,
      					target = data.t,
      					p;
      				target.setAttribute("class", ratio ? data.e : data.b);
      				for (p in inline) {
      					_removeProperty(target, p);
      				}
      			}
      		},
      		_getAllStyles = (target) => {
      			let styles = {},
      				computed = getComputedStyle(target),
      				p;
      			for (p in computed) {
      				if (isNaN(p) && p !== "cssText" && p !== "length") {
      					styles[p] = computed[p];
      				}
      			}
      			_setDefaults(styles, _parseTransform(target, 1));
      			return styles;
      		},
      		startClassList = target.getAttribute("class"),
      		style = target.style,
      		cssText = style.cssText,
      		cache = target._gsap,
      		classPT = cache.classPT,
      		inlineToRemoveAtEnd = {},
      		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
      		changingVars = {},
      		startVars = _getAllStyles(target),
      		transformRelated = /(transform|perspective)/i,
      		endVars, p;
      	if (classPT) {
      		classPT.r(1, classPT.d);
      		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
      	}
      	target.setAttribute("class", data.e);
      	endVars = _getAllStyles(target, true);
      	target.setAttribute("class", startClassList);
      	for (p in endVars) {
      		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
      			changingVars[p] = endVars[p];
      			if (!style[p] && style[p] !== "0") {
      				inlineToRemoveAtEnd[p] = 1;
      			}
      		}
      	}
      	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
      	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
      		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
      	}
      	_parseTransform(target, true); //to clear the caching of transforms
      	data.css = new gsap.plugins.css();
      	data.css.init(target, changingVars, tween);
      	plugin._props.push(...data.css._props);
      	return 1;
      }
      */
    }, _identity2DMatrix = [1, 0, 0, 1, 0, 0], _rotationalProperties = {}, _isNullTransform = function _isNullTransform2(value) {
      return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
    }, _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray2(target) {
      var matrixString = _getComputedProperty(target, _transformProp);
      return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
    }, _getMatrix = function _getMatrix2(target, force2D) {
      var cache2 = target._gsap || _getCache(target), style = target.style, matrix = _getComputedTransformMatrixAsArray(target), parent, nextSibling, temp, addedToDOM;
      if (cache2.svg && target.getAttribute("transform")) {
        temp = target.transform.baseVal.consolidate().matrix;
        matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
        return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
      } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache2.svg) {
        temp = style.display;
        style.display = "block";
        parent = target.parentNode;
        if (!parent || !target.offsetParent) {
          addedToDOM = 1;
          nextSibling = target.nextElementSibling;
          _docElement.appendChild(target);
        }
        matrix = _getComputedTransformMatrixAsArray(target);
        temp ? style.display = temp : _removeProperty(target, "display");
        if (addedToDOM) {
          nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
        }
      }
      return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
    }, _applySVGOrigin = function _applySVGOrigin2(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
      var cache2 = target._gsap, matrix = matrixArray || _getMatrix(target, true), xOriginOld = cache2.xOrigin || 0, yOriginOld = cache2.yOrigin || 0, xOffsetOld = cache2.xOffset || 0, yOffsetOld = cache2.yOffset || 0, a = matrix[0], b = matrix[1], c = matrix[2], d = matrix[3], tx = matrix[4], ty = matrix[5], originSplit = origin.split(" "), xOrigin = parseFloat(originSplit[0]) || 0, yOrigin = parseFloat(originSplit[1]) || 0, bounds, determinant, x, y;
      if (!originIsAbsolute) {
        bounds = _getBBox(target);
        xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
        yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
      } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
        x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
        y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
        xOrigin = x;
        yOrigin = y;
      }
      if (smooth || smooth !== false && cache2.smooth) {
        tx = xOrigin - xOriginOld;
        ty = yOrigin - yOriginOld;
        cache2.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
        cache2.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
      } else {
        cache2.xOffset = cache2.yOffset = 0;
      }
      cache2.xOrigin = xOrigin;
      cache2.yOrigin = yOrigin;
      cache2.smooth = !!smooth;
      cache2.origin = origin;
      cache2.originIsAbsolute = !!originIsAbsolute;
      target.style[_transformOriginProp] = "0px 0px";
      if (pluginToAddPropTweensTo) {
        _addNonTweeningPT(pluginToAddPropTweensTo, cache2, "xOrigin", xOriginOld, xOrigin);
        _addNonTweeningPT(pluginToAddPropTweensTo, cache2, "yOrigin", yOriginOld, yOrigin);
        _addNonTweeningPT(pluginToAddPropTweensTo, cache2, "xOffset", xOffsetOld, cache2.xOffset);
        _addNonTweeningPT(pluginToAddPropTweensTo, cache2, "yOffset", yOffsetOld, cache2.yOffset);
      }
      target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
    }, _parseTransform = function _parseTransform2(target, uncache) {
      var cache2 = target._gsap || new GSCache(target);
      if ("x" in cache2 && !uncache && !cache2.uncache) {
        return cache2;
      }
      var style = target.style, invertedScaleX = cache2.scaleX < 0, px = "px", deg = "deg", cs = getComputedStyle(target), origin = _getComputedProperty(target, _transformOriginProp) || "0", x, y, z, scaleX, scaleY, rotation, rotationX, rotationY, skewX, skewY, perspective, xOrigin, yOrigin, matrix, angle, cos, sin, a, b, c, d, a12, a22, t1, t2, t3, a13, a23, a33, a42, a43, a32;
      x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
      scaleX = scaleY = 1;
      cache2.svg = !!(target.getCTM && _isSVG(target));
      if (cs.translate) {
        if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
          style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
        }
        style.scale = style.rotate = style.translate = "none";
      }
      matrix = _getMatrix(target, cache2.svg);
      if (cache2.svg) {
        if (cache2.uncache) {
          t2 = target.getBBox();
          origin = cache2.xOrigin - t2.x + "px " + (cache2.yOrigin - t2.y) + "px";
          t1 = "";
        } else {
          t1 = !uncache && target.getAttribute("data-svg-origin");
        }
        _applySVGOrigin(target, t1 || origin, !!t1 || cache2.originIsAbsolute, cache2.smooth !== false, matrix);
      }
      xOrigin = cache2.xOrigin || 0;
      yOrigin = cache2.yOrigin || 0;
      if (matrix !== _identity2DMatrix) {
        a = matrix[0];
        b = matrix[1];
        c = matrix[2];
        d = matrix[3];
        x = a12 = matrix[4];
        y = a22 = matrix[5];
        if (matrix.length === 6) {
          scaleX = Math.sqrt(a * a + b * b);
          scaleY = Math.sqrt(d * d + c * c);
          rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;
          skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
          skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
          if (cache2.svg) {
            x -= xOrigin - (xOrigin * a + yOrigin * c);
            y -= yOrigin - (xOrigin * b + yOrigin * d);
          }
        } else {
          a32 = matrix[6];
          a42 = matrix[7];
          a13 = matrix[8];
          a23 = matrix[9];
          a33 = matrix[10];
          a43 = matrix[11];
          x = matrix[12];
          y = matrix[13];
          z = matrix[14];
          angle = _atan2(a32, a33);
          rotationX = angle * _RAD2DEG;
          if (angle) {
            cos = Math.cos(-angle);
            sin = Math.sin(-angle);
            t1 = a12 * cos + a13 * sin;
            t2 = a22 * cos + a23 * sin;
            t3 = a32 * cos + a33 * sin;
            a13 = a12 * -sin + a13 * cos;
            a23 = a22 * -sin + a23 * cos;
            a33 = a32 * -sin + a33 * cos;
            a43 = a42 * -sin + a43 * cos;
            a12 = t1;
            a22 = t2;
            a32 = t3;
          }
          angle = _atan2(-c, a33);
          rotationY = angle * _RAD2DEG;
          if (angle) {
            cos = Math.cos(-angle);
            sin = Math.sin(-angle);
            t1 = a * cos - a13 * sin;
            t2 = b * cos - a23 * sin;
            t3 = c * cos - a33 * sin;
            a43 = d * sin + a43 * cos;
            a = t1;
            b = t2;
            c = t3;
          }
          angle = _atan2(b, a);
          rotation = angle * _RAD2DEG;
          if (angle) {
            cos = Math.cos(angle);
            sin = Math.sin(angle);
            t1 = a * cos + b * sin;
            t2 = a12 * cos + a22 * sin;
            b = b * cos - a * sin;
            a22 = a22 * cos - a12 * sin;
            a = t1;
            a12 = t2;
          }
          if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
            rotationX = rotation = 0;
            rotationY = 180 - rotationY;
          }
          scaleX = _round(Math.sqrt(a * a + b * b + c * c));
          scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
          angle = _atan2(a12, a22);
          skewX = Math.abs(angle) > 2e-4 ? angle * _RAD2DEG : 0;
          perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
        }
        if (cache2.svg) {
          t1 = target.getAttribute("transform");
          cache2.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
          t1 && target.setAttribute("transform", t1);
        }
      }
      if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
        if (invertedScaleX) {
          scaleX *= -1;
          skewX += rotation <= 0 ? 180 : -180;
          rotation += rotation <= 0 ? 180 : -180;
        } else {
          scaleY *= -1;
          skewX += skewX <= 0 ? 180 : -180;
        }
      }
      uncache = uncache || cache2.uncache;
      cache2.x = x - ((cache2.xPercent = x && (!uncache && cache2.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache2.xPercent / 100 : 0) + px;
      cache2.y = y - ((cache2.yPercent = y && (!uncache && cache2.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache2.yPercent / 100 : 0) + px;
      cache2.z = z + px;
      cache2.scaleX = _round(scaleX);
      cache2.scaleY = _round(scaleY);
      cache2.rotation = _round(rotation) + deg;
      cache2.rotationX = _round(rotationX) + deg;
      cache2.rotationY = _round(rotationY) + deg;
      cache2.skewX = skewX + deg;
      cache2.skewY = skewY + deg;
      cache2.transformPerspective = perspective + px;
      if (cache2.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
        style[_transformOriginProp] = _firstTwoOnly(origin);
      }
      cache2.xOffset = cache2.yOffset = 0;
      cache2.force3D = _config.force3D;
      cache2.renderTransform = cache2.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
      cache2.uncache = 0;
      return cache2;
    }, _firstTwoOnly = function _firstTwoOnly2(value) {
      return (value = value.split(" "))[0] + " " + value[1];
    }, _addPxTranslate = function _addPxTranslate2(target, start2, value) {
      var unit = getUnit(start2);
      return _round(parseFloat(start2) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
    }, _renderNon3DTransforms = function _renderNon3DTransforms2(ratio, cache2) {
      cache2.z = "0px";
      cache2.rotationY = cache2.rotationX = "0deg";
      cache2.force3D = 0;
      _renderCSSTransforms(ratio, cache2);
    }, _zeroDeg = "0deg", _zeroPx = "0px", _endParenthesis = ") ", _renderCSSTransforms = function _renderCSSTransforms2(ratio, cache2) {
      var _ref = cache2 || this, xPercent = _ref.xPercent, yPercent = _ref.yPercent, x = _ref.x, y = _ref.y, z = _ref.z, rotation = _ref.rotation, rotationY = _ref.rotationY, rotationX = _ref.rotationX, skewX = _ref.skewX, skewY = _ref.skewY, scaleX = _ref.scaleX, scaleY = _ref.scaleY, transformPerspective = _ref.transformPerspective, force3D = _ref.force3D, target = _ref.target, zOrigin = _ref.zOrigin, transforms = "", use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true;
      if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
        var angle = parseFloat(rotationY) * _DEG2RAD, a13 = Math.sin(angle), a33 = Math.cos(angle), cos;
        angle = parseFloat(rotationX) * _DEG2RAD;
        cos = Math.cos(angle);
        x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
        y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
        z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
      }
      if (transformPerspective !== _zeroPx) {
        transforms += "perspective(" + transformPerspective + _endParenthesis;
      }
      if (xPercent || yPercent) {
        transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
      }
      if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
        transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
      }
      if (rotation !== _zeroDeg) {
        transforms += "rotate(" + rotation + _endParenthesis;
      }
      if (rotationY !== _zeroDeg) {
        transforms += "rotateY(" + rotationY + _endParenthesis;
      }
      if (rotationX !== _zeroDeg) {
        transforms += "rotateX(" + rotationX + _endParenthesis;
      }
      if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
        transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
      }
      if (scaleX !== 1 || scaleY !== 1) {
        transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
      }
      target.style[_transformProp] = transforms || "translate(0, 0)";
    }, _renderSVGTransforms = function _renderSVGTransforms2(ratio, cache2) {
      var _ref2 = cache2 || this, xPercent = _ref2.xPercent, yPercent = _ref2.yPercent, x = _ref2.x, y = _ref2.y, rotation = _ref2.rotation, skewX = _ref2.skewX, skewY = _ref2.skewY, scaleX = _ref2.scaleX, scaleY = _ref2.scaleY, target = _ref2.target, xOrigin = _ref2.xOrigin, yOrigin = _ref2.yOrigin, xOffset = _ref2.xOffset, yOffset = _ref2.yOffset, forceCSS = _ref2.forceCSS, tx = parseFloat(x), ty = parseFloat(y), a11, a21, a12, a22, temp;
      rotation = parseFloat(rotation);
      skewX = parseFloat(skewX);
      skewY = parseFloat(skewY);
      if (skewY) {
        skewY = parseFloat(skewY);
        skewX += skewY;
        rotation += skewY;
      }
      if (rotation || skewX) {
        rotation *= _DEG2RAD;
        skewX *= _DEG2RAD;
        a11 = Math.cos(rotation) * scaleX;
        a21 = Math.sin(rotation) * scaleX;
        a12 = Math.sin(rotation - skewX) * -scaleY;
        a22 = Math.cos(rotation - skewX) * scaleY;
        if (skewX) {
          skewY *= _DEG2RAD;
          temp = Math.tan(skewX - skewY);
          temp = Math.sqrt(1 + temp * temp);
          a12 *= temp;
          a22 *= temp;
          if (skewY) {
            temp = Math.tan(skewY);
            temp = Math.sqrt(1 + temp * temp);
            a11 *= temp;
            a21 *= temp;
          }
        }
        a11 = _round(a11);
        a21 = _round(a21);
        a12 = _round(a12);
        a22 = _round(a22);
      } else {
        a11 = scaleX;
        a22 = scaleY;
        a21 = a12 = 0;
      }
      if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
        tx = _convertToUnit(target, "x", x, "px");
        ty = _convertToUnit(target, "y", y, "px");
      }
      if (xOrigin || yOrigin || xOffset || yOffset) {
        tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
        ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
      }
      if (xPercent || yPercent) {
        temp = target.getBBox();
        tx = _round(tx + xPercent / 100 * temp.width);
        ty = _round(ty + yPercent / 100 * temp.height);
      }
      temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
      target.setAttribute("transform", temp);
      forceCSS && (target.style[_transformProp] = temp);
    }, _addRotationalPropTween = function _addRotationalPropTween2(plugin, target, property, startNum, endValue) {
      var cap = 360, isString2 = _isString(endValue), endNum = parseFloat(endValue) * (isString2 && ~endValue.indexOf("rad") ? _RAD2DEG : 1), change = endNum - startNum, finalValue = startNum + change + "deg", direction, pt;
      if (isString2) {
        direction = endValue.split("_")[1];
        if (direction === "short") {
          change %= cap;
          if (change !== change % (cap / 2)) {
            change += change < 0 ? cap : -cap;
          }
        }
        if (direction === "cw" && change < 0) {
          change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
        } else if (direction === "ccw" && change > 0) {
          change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
        }
      }
      plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
      pt.e = finalValue;
      pt.u = "deg";
      plugin._props.push(property);
      return pt;
    }, _assign = function _assign2(target, source) {
      for (var p2 in source) {
        target[p2] = source[p2];
      }
      return target;
    }, _addRawTransformPTs = function _addRawTransformPTs2(plugin, transforms, target) {
      var startCache = _assign({}, target._gsap), exclude = "perspective,force3D,transformOrigin,svgOrigin", style = target.style, endCache, p2, startValue, endValue, startNum, endNum, startUnit, endUnit;
      if (startCache.svg) {
        startValue = target.getAttribute("transform");
        target.setAttribute("transform", "");
        style[_transformProp] = transforms;
        endCache = _parseTransform(target, 1);
        _removeProperty(target, _transformProp);
        target.setAttribute("transform", startValue);
      } else {
        startValue = getComputedStyle(target)[_transformProp];
        style[_transformProp] = transforms;
        endCache = _parseTransform(target, 1);
        style[_transformProp] = startValue;
      }
      for (p2 in _transformProps) {
        startValue = startCache[p2];
        endValue = endCache[p2];
        if (startValue !== endValue && exclude.indexOf(p2) < 0) {
          startUnit = getUnit(startValue);
          endUnit = getUnit(endValue);
          startNum = startUnit !== endUnit ? _convertToUnit(target, p2, startValue, endUnit) : parseFloat(startValue);
          endNum = parseFloat(endValue);
          plugin._pt = new PropTween(plugin._pt, endCache, p2, startNum, endNum - startNum, _renderCSSProp);
          plugin._pt.u = endUnit || 0;
          plugin._props.push(p2);
        }
      }
      _assign(endCache, startCache);
    };
    _forEachName("padding,margin,Width,Radius", function(name, index) {
      var t = "Top", r = "Right", b = "Bottom", l = "Left", props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function(side) {
        return index < 2 ? name + side : "border" + side + name;
      });
      _specialProps[index > 1 ? "border" + name : name] = function(plugin, target, property, endValue, tween) {
        var a, vars;
        if (arguments.length < 4) {
          a = props.map(function(prop) {
            return _get(plugin, prop, property);
          });
          vars = a.join(" ");
          return vars.split(a[0]).length === 5 ? a[0] : vars;
        }
        a = (endValue + "").split(" ");
        vars = {};
        props.forEach(function(prop, i2) {
          return vars[prop] = a[i2] = a[i2] || a[(i2 - 1) / 2 | 0];
        });
        plugin.init(target, vars, tween);
      };
    });
    var CSSPlugin = {
      name: "css",
      register: _initCore,
      targetTest: function targetTest(target) {
        return target.style && target.nodeType;
      },
      init: function init(target, vars, tween, index, targets) {
        var props = this._props, style = target.style, startAt = tween.vars.startAt, startValue, endValue, endNum, startNum, type, specialProp, p2, startUnit, endUnit, relative, isTransformRelated, transformPropTween, cache2, smooth, hasPriority, inlineProps;
        _pluginInitted || _initCore();
        this.styles = this.styles || _getStyleSaver(target);
        inlineProps = this.styles.props;
        this.tween = tween;
        for (p2 in vars) {
          if (p2 === "autoRound") {
            continue;
          }
          endValue = vars[p2];
          if (_plugins[p2] && _checkPlugin(p2, vars, tween, index, target, targets)) {
            continue;
          }
          type = typeof endValue;
          specialProp = _specialProps[p2];
          if (type === "function") {
            endValue = endValue.call(tween, index, target, targets);
            type = typeof endValue;
          }
          if (type === "string" && ~endValue.indexOf("random(")) {
            endValue = _replaceRandom(endValue);
          }
          if (specialProp) {
            specialProp(this, target, p2, endValue, tween) && (hasPriority = 1);
          } else if (p2.substr(0, 2) === "--") {
            startValue = (getComputedStyle(target).getPropertyValue(p2) + "").trim();
            endValue += "";
            _colorExp.lastIndex = 0;
            if (!_colorExp.test(startValue)) {
              startUnit = getUnit(startValue);
              endUnit = getUnit(endValue);
            }
            endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p2, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
            this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p2);
            props.push(p2);
            inlineProps.push(p2, 0, style[p2]);
          } else if (type !== "undefined") {
            if (startAt && p2 in startAt) {
              startValue = typeof startAt[p2] === "function" ? startAt[p2].call(tween, index, target, targets) : startAt[p2];
              _isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
              getUnit(startValue + "") || (startValue += _config.units[p2] || getUnit(_get(target, p2)) || "");
              (startValue + "").charAt(1) === "=" && (startValue = _get(target, p2));
            } else {
              startValue = _get(target, p2);
            }
            startNum = parseFloat(startValue);
            relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
            relative && (endValue = endValue.substr(2));
            endNum = parseFloat(endValue);
            if (p2 in _propertyAliases) {
              if (p2 === "autoAlpha") {
                if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
                  startNum = 0;
                }
                inlineProps.push("visibility", 0, style.visibility);
                _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
              }
              if (p2 !== "scale" && p2 !== "transform") {
                p2 = _propertyAliases[p2];
                ~p2.indexOf(",") && (p2 = p2.split(",")[0]);
              }
            }
            isTransformRelated = p2 in _transformProps;
            if (isTransformRelated) {
              this.styles.save(p2);
              if (!transformPropTween) {
                cache2 = target._gsap;
                cache2.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);
                smooth = vars.smoothOrigin !== false && cache2.smooth;
                transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache2.renderTransform, cache2, 0, -1);
                transformPropTween.dep = 1;
              }
              if (p2 === "scale") {
                this._pt = new PropTween(this._pt, cache2, "scaleY", cache2.scaleY, (relative ? _parseRelative(cache2.scaleY, relative + endNum) : endNum) - cache2.scaleY || 0, _renderCSSProp);
                this._pt.u = 0;
                props.push("scaleY", p2);
                p2 += "X";
              } else if (p2 === "transformOrigin") {
                inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
                endValue = _convertKeywordsToPercentages(endValue);
                if (cache2.svg) {
                  _applySVGOrigin(target, endValue, 0, smooth, 0, this);
                } else {
                  endUnit = parseFloat(endValue.split(" ")[2]) || 0;
                  endUnit !== cache2.zOrigin && _addNonTweeningPT(this, cache2, "zOrigin", cache2.zOrigin, endUnit);
                  _addNonTweeningPT(this, style, p2, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
                }
                continue;
              } else if (p2 === "svgOrigin") {
                _applySVGOrigin(target, endValue, 1, smooth, 0, this);
                continue;
              } else if (p2 in _rotationalProperties) {
                _addRotationalPropTween(this, cache2, p2, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);
                continue;
              } else if (p2 === "smoothOrigin") {
                _addNonTweeningPT(this, cache2, "smooth", cache2.smooth, endValue);
                continue;
              } else if (p2 === "force3D") {
                cache2[p2] = endValue;
                continue;
              } else if (p2 === "transform") {
                _addRawTransformPTs(this, endValue, target);
                continue;
              }
            } else if (!(p2 in style)) {
              p2 = _checkPropPrefix(p2) || p2;
            }
            if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p2 in style) {
              startUnit = (startValue + "").substr((startNum + "").length);
              endNum || (endNum = 0);
              endUnit = getUnit(endValue) || (p2 in _config.units ? _config.units[p2] : startUnit);
              startUnit !== endUnit && (startNum = _convertToUnit(target, p2, startValue, endUnit));
              this._pt = new PropTween(this._pt, isTransformRelated ? cache2 : style, p2, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p2 === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
              this._pt.u = endUnit || 0;
              if (startUnit !== endUnit && endUnit !== "%") {
                this._pt.b = startValue;
                this._pt.r = _renderCSSPropWithBeginning;
              }
            } else if (!(p2 in style)) {
              if (p2 in target) {
                this.add(target, p2, startValue || target[p2], relative ? relative + endValue : endValue, index, targets);
              } else if (p2 !== "parseTransform") {
                _missingPlugin(p2, endValue);
                continue;
              }
            } else {
              _tweenComplexCSSString.call(this, target, p2, startValue, relative ? relative + endValue : endValue);
            }
            isTransformRelated || (p2 in style ? inlineProps.push(p2, 0, style[p2]) : inlineProps.push(p2, 1, startValue || target[p2]));
            props.push(p2);
          }
        }
        hasPriority && _sortPropTweensByPriority(this);
      },
      render: function render(ratio, data) {
        if (data.tween._time || !_reverting()) {
          var pt = data._pt;
          while (pt) {
            pt.r(ratio, pt.d);
            pt = pt._next;
          }
        } else {
          data.styles.revert();
        }
      },
      get: _get,
      aliases: _propertyAliases,
      getSetter: function getSetter(target, property, plugin) {
        var p2 = _propertyAliases[property];
        p2 && p2.indexOf(",") < 0 && (property = p2);
        return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
      },
      core: {
        _removeProperty,
        _getMatrix
      }
    };
    gsap.utils.checkPrefix = _checkPropPrefix;
    gsap.core.getStyleSaver = _getStyleSaver;
    (function(positionAndScale, rotation, others, aliases2) {
      var all = _forEachName(positionAndScale + "," + rotation + "," + others, function(name) {
        _transformProps[name] = 1;
      });
      _forEachName(rotation, function(name) {
        _config.units[name] = "deg";
        _rotationalProperties[name] = 1;
      });
      _propertyAliases[all[13]] = positionAndScale + "," + rotation;
      _forEachName(aliases2, function(name) {
        var split = name.split(":");
        _propertyAliases[split[1]] = all[split[0]];
      });
    })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
    _forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function(name) {
      _config.units[name] = "px";
    });
    gsap.registerPlugin(CSSPlugin);
    var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap;
    gsapWithCSS.core.Tween;
    const _sfc_main$1a = {
      name: "NumberAnimator",
      props: {
        value: {
          type: Number,
          default: 0
        },
        duration: {
          type: Number,
          default: 0.5
        },
        formatType: {
          type: String,
          default: ""
        }
      },
      data() {
        return {
          displayValue: Math.ceil(this.value),
          tweenValue: this.value
        };
      },
      computed: {
        formatted() {
          return this.formatType ? SPM.app.config.globalProperties.$F(this.formatType, this.displayValue) : this.displayValue;
        }
      },
      watch: {
        value() {
          gsapWithCSS.to(this, {
            tweenValue: Math.ceil(this.value),
            duration: this.duration,
            onUpdate: () => {
              this.displayValue = Math.round(this.tweenValue);
            },
            onComplete: () => {
              this.displayValue = Math.round(this.value);
            }
          });
        }
      }
    };
    function _sfc_render$1a(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("span", null, toDisplayString($options.formatted), 1);
    }
    const NumberAnimator = /* @__PURE__ */ _export_sfc(_sfc_main$1a, [["render", _sfc_render$1a]]);
    const _sfc_main$19 = {
      name: "ProgressBar",
      props: {
        assistiveText: {
          type: String,
          default: ""
        },
        color: {
          type: String,
          default: ""
        },
        description: {
          type: String,
          required: true
        },
        radius: Boolean,
        thickness: {
          type: String,
          default: "medium"
        },
        value: {
          type: Number,
          default: 0
        },
        vertical: Boolean
      },
      data() {
        return {
          progressBarId: getGUID()
        };
      },
      computed: {
        themeClasses() {
          const classes = [`slds-progress-bar_${this.$props.thickness}`];
          if (this.$props.radius)
            classes.push("slds-progress-bar_circular");
          if (this.$props.vertical)
            classes.push("slds-progress-bar_vertical");
          return classes;
        },
        progressBarStyle() {
          const orientationStyleProperty = this.$props.vertical ? "height" : "width";
          const style = { [orientationStyleProperty]: `${Math.min(100, this.$props.value)}%` };
          if (this.$props.color)
            style.backgroundColor = this.$props.color;
          return style;
        },
        computedAssistiveText() {
          return this.$props.assistiveText || `Progress: ${this.$props.value}%`;
        }
      }
    };
    const _hoisted_1$15 = ["aria-valuenow", "aria-label"];
    const _hoisted_2$13 = { class: "slds-assistive-text" };
    function _sfc_render$19(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["slds-progress-bar", $options.themeClasses]),
        "aria-valuemin": "0",
        "aria-valuemax": "100",
        "aria-valuenow": _ctx.$props.value,
        "aria-label": _ctx.$props.description,
        role: "progressbar"
      }, [
        createBaseVNode("span", {
          class: normalizeClass(["slds-progress-bar__value", { "slds-progress-bar__value_success": !_ctx.$props.color && _ctx.$props.value >= 100 }]),
          style: normalizeStyle($options.progressBarStyle)
        }, [
          createBaseVNode("span", _hoisted_2$13, toDisplayString($options.computedAssistiveText), 1)
        ], 6)
      ], 10, _hoisted_1$15);
    }
    const ProgressBar = /* @__PURE__ */ _export_sfc(_sfc_main$19, [["render", _sfc_render$19]]);
    const _sfc_main$18 = {
      name: "Cleanup",
      components: {
        Card,
        NumberAnimator,
        ProgressBar,
        Spinner
      },
      data() {
        return {
          isLoading: false,
          cleanupProgress: 0,
          currentCleanupJob: null
        };
      },
      created() {
        this.isLoading = true;
        this.cleanupDataClick().then(() => {
          this.isLoading = false;
        });
      },
      methods: {
        async startDelete() {
          SPM.Components.Root.openModal("confirm", {
            title: "Permanently Delete",
            description: "This will permanently delete your Sales Planning data.\n\rThis action cannot be undone.",
            icon: {
              category: "utility",
              name: "warning",
              text: "Permanently delete sales plans",
              size: "large"
            },
            confirmButton: {
              label: "Delete",
              type: "destructive"
            },
            cancelButton: {
              label: "Cancel",
              type: "neutral"
            },
            callback: async () => {
              this.cleanupDataClick(true);
            }
          });
        },
        async cleanupDataClick(startNewJob) {
          this.currentCleanupJob = await SPM.Utils.Apex.invoke("GetCleanupBatchJob", [!!startNewJob]);
          if (this.currentCleanupJob != null) {
            const jobIds = [];
            Object.keys(this.currentCleanupJob).forEach((key) => {
              if (key !== "Status" && this.currentCleanupJob[key]) {
                jobIds.push(this.currentCleanupJob[key]);
              }
            });
            let progress = 0;
            if (jobIds.length > 0) {
              const jobsStatus = await SPM.Utils.Apex.invoke("Query", [`SELECT Id, Status, JobItemsProcessed, TotalJobItems FROM AsyncApexJob where id in ('${jobIds.join("','")}')`]);
              jobsStatus.forEach((job) => {
                if (job.Status === "Completed") {
                  progress += 50;
                } else {
                  if (job.TotalJobItems > 0) {
                    progress += job.JobItemsProcessed / job.TotalJobItems * 50;
                  }
                }
              });
            }
            this.cleanupProgress = Math.round(progress * 100) / 100;
            setTimeout(() => {
              this.cleanupDataClick();
            }, 3e3);
          }
        }
      }
    };
    const _hoisted_1$14 = { class: "slds-grid slds-grid_vertical-align-center slds-p-horizontal_small slds-p-vertical_medium" };
    const _hoisted_2$12 = /* @__PURE__ */ createBaseVNode("div", { class: "slds-grow slds-m-right_medium" }, [
      /* @__PURE__ */ createBaseVNode("div", { style: { "font-weight": "bold" } }, "Deleted Data"),
      /* @__PURE__ */ createBaseVNode("div", null, "Cleanup all your previously deleted Sales Planning Data")
    ], -1);
    const _hoisted_3$T = { key: 1 };
    const _hoisted_4$M = {
      key: 2,
      id: "currentAuthInfo",
      class: "slds-grid slds-grid_vertical-align-end slds-grid_vertical"
    };
    const _hoisted_5$I = { style: { "width": "100%" } };
    function _sfc_render$18(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_NumberAnimator = resolveComponent("NumberAnimator");
      const _component_ProgressBar = resolveComponent("ProgressBar");
      const _component_Card = resolveComponent("Card");
      return openBlock(), createBlock(_component_Card, {
        class: "slds-m-left_medium slds-m-right_x-large slds-p-horizontal_small",
        style: { "margin-right": "4rem" }
      }, {
        body: withCtx(() => [
          createBaseVNode("div", _hoisted_1$14, [
            $data.isLoading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
            _hoisted_2$12,
            !$data.currentCleanupJob ? (openBlock(), createElementBlock("div", _hoisted_3$T, [
              createBaseVNode("div", null, [
                createBaseVNode("button", {
                  id: "deleteData",
                  class: "slds-button slds-button_text-destructive",
                  onClick: _cache[0] || (_cache[0] = (...args) => $options.startDelete && $options.startDelete(...args))
                }, " Permanently Delete... ")
              ])
            ])) : (openBlock(), createElementBlock("div", _hoisted_4$M, [
              createBaseVNode("div", _hoisted_5$I, [
                createBaseVNode("div", null, [
                  createTextVNode("Permanently deleting... "),
                  createBaseVNode("strong", null, [
                    createVNode(_component_NumberAnimator, {
                      formatType: "Numeric",
                      value: $data.cleanupProgress
                    }, null, 8, ["value"]),
                    createTextVNode("%")
                  ])
                ]),
                createVNode(_component_ProgressBar, {
                  class: "slds-m-vertical_x-small",
                  description: "Permanently deleting...",
                  value: $data.cleanupProgress,
                  thickness: "large",
                  radius: ""
                }, null, 8, ["value"])
              ])
            ]))
          ])
        ]),
        _: 1
      });
    }
    const Cleanup = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["render", _sfc_render$18]]);
    const _sfc_main$17 = {
      name: "LegacySalesPlanning",
      components: {
        Card,
        Checkbox
      },
      data() {
        return {
          enabled: SPM.betaFlags.SP_AllowV1Plans
        };
      },
      watch: {
        async enabled() {
          SPM.betaFlags.SP_AllowV1Plans = this.enabled;
          await SPM.Utils.Apex.invoke("SetSetting", ["SP_AllowV1Plans", this.enabled]);
        }
      }
    };
    const _hoisted_1$13 = { class: "slds-grid slds-grid_vertical-align-center slds-p-horizontal_small slds-p-vertical_medium" };
    const _hoisted_2$11 = /* @__PURE__ */ createBaseVNode("div", { class: "slds-grow slds-m-right_medium" }, [
      /* @__PURE__ */ createBaseVNode("div", { style: { "font-weight": "bold" } }, "Legacy Sales Planning"),
      /* @__PURE__ */ createBaseVNode("div", null, "Allow users to create legacy sales plans")
    ], -1);
    function _sfc_render$17(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_Card = resolveComponent("Card");
      return openBlock(), createBlock(_component_Card, null, {
        body: withCtx(() => [
          createBaseVNode("div", _hoisted_1$13, [
            _hoisted_2$11,
            createVNode(_component_Checkbox, {
              modelValue: $data.enabled,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.enabled = $event),
              labels: { name: "Legacy Sales Planning" },
              hideLabel: "",
              slide: "",
              showStateLabels: ""
            }, null, 8, ["modelValue"])
          ])
        ]),
        _: 1
      });
    }
    const LegacySalesPlanning = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["render", _sfc_render$17]]);
    const Setup_vue_vue_type_style_index_0_lang = "";
    const _sfc_main$16 = {
      name: "Setup",
      components: {
        ButtonIcon,
        Card,
        Cleanup,
        LegacySalesPlanning,
        Spinner
      },
      props: ["showClose"],
      emits: ["close"],
      data() {
        return {
          packageVersion: "",
          authExists: false,
          authorizedOAuthUser: "",
          isLoading: false,
          hasError: false
        };
      },
      computed: {
        isAuthorized: {
          get() {
            return this.authExists;
          },
          set(value) {
            this.authExists = value;
            if (!this.authExists) {
              this.authorizedOAuthUser = "";
            }
          }
        }
      },
      created() {
        this.loadAuthorizationInformation();
        this.loadVersionInformation();
      },
      methods: {
        async authorize() {
          this.isLoading = true;
          try {
            const urlInfo = await SPM.Utils.Apex.invoke("GetAuthRedirectURL");
            if (urlInfo) {
              const authUrl = SPM.Utils.Str.htmlDecode(urlInfo.authUrl);
              window.open(authUrl);
              setTimeout(() => {
                this.loadAuthorizationInformation();
              }, 5e3);
            }
          } catch ({ error }) {
            this.hasError = true;
            this.$mitt.emit("toast", { message: "Error", subMessage: error.message, state: "error" });
          }
          this.isLoading = false;
        },
        async deauthorize() {
          this.isLoading = true;
          try {
            const response = await SPM.Utils.Apex.invoke("RevokeOrgAuthorization");
            if (response.success) {
              this.$mitt.emit("toast", { message: "Authorization was removed." });
              this.loadAuthorizationInformation();
            }
          } catch ({ error }) {
            this.hasError = true;
            this.$mitt.emit("toast", { message: "Error", subMessage: error.message, state: "error" });
          }
          this.isLoading = false;
        },
        async loadAuthorizationInformation() {
          this.isLoading = true;
          try {
            const authInfo = await SPM.Utils.Apex.invoke("GetAuthorizationInfo");
            if (authInfo) {
              this.isAuthorized = authInfo.authExists;
              if (this.isAuthorized) {
                this.authorizedOAuthUser = authInfo.data.user.username;
              }
            }
          } catch ({ error }) {
            console.log(error);
            this.hasError = true;
            this.$mitt.emit("toast", { message: "Error", subMessage: error.message, state: "error" });
          }
          this.isLoading = false;
        },
        async loadVersionInformation() {
          try {
            const { records: packages } = await SPM.Utils.Rest.invoke("ToolingQuery", "SELECT SubscriberPackage.NamespacePrefix, SubscriberPackageVersion.MajorVersion, SubscriberPackageVersion.MinorVersion, SubscriberPackageVersion.PatchVersion, SubscriberPackageVersion.BuildNumber FROM InstalledSubscriberPackage");
            const { MajorVersion, MinorVersion, PatchVersion, BuildNumber } = packages.find((p2) => p2.SubscriberPackage.NamespacePrefix === SPM.packageNamespace).SubscriberPackageVersion;
            this.packageVersion = `v${MajorVersion}.${MinorVersion}.${PatchVersion}.${BuildNumber}`;
          } catch (err) {
          }
        },
        closeSetup() {
          if (this.authExists) {
            SPM.Components.Root.page = SPM.Components.Root.planId ? "PlanOverview" : "Home";
          } else {
            SPM.Components.Root.page = $store.isAdmin ? "SetupError" : "SetupErrorNonAdmin";
          }
          this.$emit("close");
        }
      }
    };
    const _hoisted_1$12 = { style: { "background": "#f4f4f5", "height": "100%" } };
    const _hoisted_2$10 = { class: "spm-kondo slds-grid slds-grid_vertical slds-p-around_large" };
    const _hoisted_3$S = /* @__PURE__ */ createBaseVNode("div", { class: "main-title" }, "Setup", -1);
    const _hoisted_4$L = { class: "sub-title" };
    const _hoisted_5$H = { class: "slds-grid slds-grid_vertical-align-center slds-p-horizontal_small slds-p-vertical_medium" };
    const _hoisted_6$B = /* @__PURE__ */ createBaseVNode("div", { class: "slds-grow slds-m-right_medium" }, [
      /* @__PURE__ */ createBaseVNode("div", { style: { "font-weight": "bold" } }, "External Authorization"),
      /* @__PURE__ */ createBaseVNode("div", null, "Authorize Sales Planning to access external services needed to support product functionality")
    ], -1);
    const _hoisted_7$w = {
      key: 1,
      id: "currentAuthInfo",
      class: "slds-grid slds-grid_vertical-align-end slds-grid_vertical"
    };
    const _hoisted_8$u = { class: "slds-text-align_right slds-text-color_weak slds-p-top_medium" };
    const _hoisted_9$s = /* @__PURE__ */ createBaseVNode("div", null, " Current Authorized User ", -1);
    const _hoisted_10$n = {
      id: "currentAuthName",
      class: "slds-m-bottom_small"
    };
    const _hoisted_11$k = { key: 2 };
    const _hoisted_12$g = { id: "authorizeOAuth" };
    const _hoisted_13$g = ["disabled"];
    function _sfc_render$16(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Card = resolveComponent("Card");
      const _component_Cleanup = resolveComponent("Cleanup");
      const _component_LegacySalesPlanning = resolveComponent("LegacySalesPlanning");
      return openBlock(), createElementBlock("div", _hoisted_1$12, [
        $props.showClose ? (openBlock(), createBlock(_component_ButtonIcon, {
          key: 0,
          iconCategory: "utility",
          iconName: "close",
          iconSize: "large",
          class: "close-button",
          assistiveText: "Close",
          title: "Close",
          onClick: $options.closeSetup
        }, null, 8, ["onClick"])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_2$10, [
          createBaseVNode("div", null, [
            _hoisted_3$S,
            createBaseVNode("div", _hoisted_4$L, "Sales Planning " + toDisplayString($data.packageVersion), 1)
          ])
        ]),
        createVNode(_component_Card, {
          class: "slds-m-left_medium slds-m-right_x-large slds-p-horizontal_small",
          style: { "margin-right": "4rem" }
        }, {
          body: withCtx(() => [
            createBaseVNode("div", _hoisted_5$H, [
              $data.isLoading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
              _hoisted_6$B,
              $options.isAuthorized ? (openBlock(), createElementBlock("div", _hoisted_7$w, [
                createBaseVNode("div", null, [
                  createBaseVNode("button", {
                    id: "deauthorizeOAuthUser",
                    class: "slds-button slds-button_text-destructive",
                    onClick: _cache[0] || (_cache[0] = (...args) => $options.deauthorize && $options.deauthorize(...args))
                  }, " Deauthorize ")
                ]),
                createBaseVNode("div", _hoisted_8$u, [
                  _hoisted_9$s,
                  createBaseVNode("div", _hoisted_10$n, toDisplayString($data.authorizedOAuthUser), 1)
                ])
              ])) : (openBlock(), createElementBlock("div", _hoisted_11$k, [
                createBaseVNode("div", _hoisted_12$g, [
                  createBaseVNode("button", {
                    id: "authorizeOAuthIO",
                    disabled: $data.hasError,
                    class: "slds-button slds-button_neutral",
                    onClick: _cache[1] || (_cache[1] = (...args) => $options.authorize && $options.authorize(...args))
                  }, " Authorize ", 8, _hoisted_13$g)
                ])
              ]))
            ])
          ]),
          _: 1
        }),
        createVNode(_component_Cleanup, {
          class: "slds-m-left_medium slds-m-right_x-large slds-p-horizontal_small",
          style: { "margin-right": "4rem" }
        }),
        createVNode(_component_LegacySalesPlanning, {
          class: "slds-m-left_medium slds-m-right_x-large slds-p-horizontal_small",
          style: { "margin-right": "4rem" }
        })
      ]);
    }
    const Setup = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["render", _sfc_render$16]]);
    const _sfc_main$15 = {
      name: "DuelingPicklist",
      components: {
        ButtonIcon,
        Icon
      },
      props: ["labels", "fields"],
      computed: {
        availableFields() {
          return this.fields.filter((f) => !f.selected);
        },
        selectedFields() {
          return this.fields.filter((f) => f.selected).sort((a, b) => {
            if (a.order < b.order)
              return -1;
            if (a.order > b.order)
              return 1;
            return 0;
          }).map((f, i2) => Object.assign(f, { order: i2 + 1 }));
        }
      },
      methods: {
        moveToSelected() {
          this.availableFields.filter((f) => f.active).forEach((f) => {
            if (f.locked)
              return;
            f.selected = true;
            f.active = false;
            f.order = this.selectedFields.length + 1;
          });
        },
        moveToAvailable() {
          this.selectedFields.filter((f) => f.active).forEach((f) => {
            f.selected = false;
            f.active = false;
          });
          this.selectedFields.forEach((f, i2) => f.order = i2 + 1);
        },
        moveUp() {
          this.selectedFields.forEach((f, i2) => {
            if (f.active && f.order > 1) {
              this.selectedFields[i2 - 1].order += 1;
              f.order -= 1;
            }
          });
        },
        moveDown() {
          this.selectedFields.forEach((f, i2) => {
            if (f.active && f.order < this.selectedFields.length) {
              this.selectedFields[i2 + 1].order -= 1;
              f.order += 1;
            }
          });
        }
      }
    };
    const _hoisted_1$11 = { key: 0 };
    const _hoisted_2$$ = { class: "slds-form-element__label" };
    const _hoisted_3$R = { class: "slds-dueling-list" };
    const _hoisted_4$K = { class: "slds-dueling-list__column slds-size_5-of-12" };
    const _hoisted_5$G = {
      class: "slds-form-element__label",
      style: { "position": "relative" }
    };
    const _hoisted_6$A = { style: { "position": "absolute", "top": "0", "right": "0" } };
    const _hoisted_7$v = {
      class: "slds-dueling-list__options",
      style: { "width": "auto" }
    };
    const _hoisted_8$t = {
      "aria-multiselectable": "true",
      class: "slds-listbox slds-listbox_vertical",
      role: "listbox"
    };
    const _hoisted_9$r = ["onClick"];
    const _hoisted_10$m = ["aria-selected", "aria-disabled"];
    const _hoisted_11$j = { class: "slds-media__body slds-grid" };
    const _hoisted_12$f = ["title"];
    const _hoisted_13$f = ["title"];
    const _hoisted_14$e = {
      key: 2,
      class: "slds-icon_container slds-current-color"
    };
    const _hoisted_15$d = { class: "slds-dueling-list__column" };
    const _hoisted_16$b = { class: "slds-dueling-list__column slds-size_5-of-12" };
    const _hoisted_17$a = { class: "slds-form-element__label" };
    const _hoisted_18$a = {
      class: "slds-dueling-list__options",
      style: { "width": "auto" }
    };
    const _hoisted_19$a = {
      "aria-multiselectable": "true",
      class: "slds-listbox slds-listbox_vertical",
      role: "listbox"
    };
    const _hoisted_20$a = ["onClick"];
    const _hoisted_21$8 = ["aria-selected", "aria-disabled"];
    const _hoisted_22$7 = { class: "slds-media__body" };
    const _hoisted_23$7 = ["title"];
    const _hoisted_24$7 = {
      key: 0,
      class: "slds-icon_container slds-current-color"
    };
    const _hoisted_25$6 = { class: "slds-dueling-list__column" };
    function _sfc_render$15(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2, _b, _c;
      const _component_Icon = resolveComponent("Icon");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      return openBlock(), createElementBlock("div", null, [
        ((_a2 = $props.labels) == null ? void 0 : _a2.name) ? (openBlock(), createElementBlock("div", _hoisted_1$11, [
          createBaseVNode("label", _hoisted_2$$, [
            createBaseVNode("strong", null, toDisplayString($props.labels.name), 1)
          ])
        ])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_3$R, [
          createBaseVNode("div", _hoisted_4$K, [
            createBaseVNode("span", _hoisted_5$G, [
              createTextVNode(toDisplayString(((_b = $props.labels) == null ? void 0 : _b.available) || "Available") + " ", 1),
              createBaseVNode("div", _hoisted_6$A, [
                createBaseVNode("button", {
                  class: "slds-button slds-m-around_none",
                  onClick: _cache[0] || (_cache[0] = ($event) => {
                    $props.fields.forEach((f, i2) => {
                      if (!f.locked)
                        f.selected = true;
                      f.active = false;
                      f.order = i2 + 1;
                    });
                  })
                }, "Select All"),
                createTextVNode(" | "),
                createBaseVNode("button", {
                  class: "slds-button slds-m-around_none",
                  onClick: _cache[1] || (_cache[1] = ($event) => {
                    $props.fields.filter((f) => !f.locked).forEach((f) => {
                      f.selected = false;
                      f.active = false;
                      f.locked = f.message ? true : false;
                    });
                  })
                }, "None")
              ])
            ]),
            createBaseVNode("div", _hoisted_7$v, [
              createBaseVNode("ul", _hoisted_8$t, [
                (openBlock(true), createElementBlock(Fragment, null, renderList($options.availableFields, (field, i2) => {
                  return openBlock(), createElementBlock("li", {
                    key: i2,
                    role: "presentation",
                    class: "slds-listbox__item",
                    onClick: ($event) => field.active = !field.active && !field.locked
                  }, [
                    createBaseVNode("div", {
                      class: normalizeClass(["slds-listbox__option slds-listbox__option_plain slds-media slds-media_small slds-media_inline", { active: field.active }]),
                      "aria-selected": field.active,
                      role: "option",
                      "aria-disabled": field.locked
                    }, [
                      createBaseVNode("span", _hoisted_11$j, [
                        field.locked ? (openBlock(), createElementBlock("span", {
                          key: 0,
                          class: "slds-truncate",
                          title: `${field.message}`
                        }, toDisplayString(field.label), 9, _hoisted_12$f)) : (openBlock(), createElementBlock("span", {
                          key: 1,
                          class: "slds-truncate",
                          title: field.label
                        }, toDisplayString(field.label), 9, _hoisted_13$f)),
                        field.locked ? (openBlock(), createElementBlock("span", _hoisted_14$e, [
                          createVNode(_component_Icon, {
                            category: "utility",
                            name: "warning",
                            size: "x-small",
                            class: "slds-media__figure slds-media__figure_reverse"
                          })
                        ])) : createCommentVNode("", true)
                      ]),
                      renderSlot(_ctx.$slots, "fieldEnd", normalizeProps(guardReactiveProps({ field })))
                    ], 10, _hoisted_10$m)
                  ], 8, _hoisted_9$r);
                }), 128))
              ])
            ])
          ]),
          createBaseVNode("div", _hoisted_15$d, [
            createVNode(_component_ButtonIcon, {
              assistiveText: "Move Selection to Second Category",
              iconCategory: "utility",
              iconName: "right",
              title: "Move Selection to Second Category",
              variant: "container",
              onClick: $options.moveToSelected
            }, null, 8, ["onClick"]),
            createVNode(_component_ButtonIcon, {
              assistiveText: "Move Selection to First Category",
              iconCategory: "utility",
              iconName: "left",
              title: "Move Selection to First Category",
              variant: "container",
              onClick: $options.moveToAvailable
            }, null, 8, ["onClick"])
          ]),
          createBaseVNode("div", _hoisted_16$b, [
            createBaseVNode("span", _hoisted_17$a, toDisplayString(((_c = $props.labels) == null ? void 0 : _c.selected) || "Selected"), 1),
            createBaseVNode("div", _hoisted_18$a, [
              createBaseVNode("ul", _hoisted_19$a, [
                (openBlock(true), createElementBlock(Fragment, null, renderList($options.selectedFields, (field, i2) => {
                  return openBlock(), createElementBlock("li", {
                    key: i2,
                    role: "presentation",
                    class: "slds-listbox__item",
                    onClick: ($event) => field.active = !field.active && !field.locked
                  }, [
                    createBaseVNode("div", {
                      class: normalizeClass(["slds-listbox__option slds-listbox__option_plain slds-media slds-media_small slds-media_inline", { active: field.active }]),
                      "aria-selected": field.active,
                      "aria-disabled": field.locked,
                      role: "option"
                    }, [
                      createBaseVNode("span", _hoisted_22$7, [
                        createBaseVNode("span", {
                          class: "slds-truncate",
                          title: field.label
                        }, toDisplayString(field.label), 9, _hoisted_23$7)
                      ]),
                      field.locked ? (openBlock(), createElementBlock("span", _hoisted_24$7, [
                        createVNode(_component_Icon, {
                          category: "utility",
                          name: "lock",
                          size: "x-small",
                          class: "slds-media__figure slds-media__figure_reverse"
                        })
                      ])) : createCommentVNode("", true),
                      renderSlot(_ctx.$slots, "fieldEnd", normalizeProps(guardReactiveProps({ field })))
                    ], 10, _hoisted_21$8)
                  ], 8, _hoisted_20$a);
                }), 128))
              ])
            ])
          ]),
          createBaseVNode("div", _hoisted_25$6, [
            createVNode(_component_ButtonIcon, {
              assistiveText: "Move Selection Up",
              iconCategory: "utility",
              iconName: "up",
              title: "Move Selection Up",
              variant: "container",
              onClick: $options.moveUp
            }, null, 8, ["onClick"]),
            createVNode(_component_ButtonIcon, {
              assistiveText: "Move Selection Down",
              iconCategory: "utility",
              iconName: "down",
              title: "Move Selection Down",
              variant: "container",
              onClick: $options.moveDown
            }, null, 8, ["onClick"])
          ])
        ])
      ]);
    }
    const DuelingPicklist = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["render", _sfc_render$15]]);
    const DataSourceModal_vue_vue_type_style_index_0_scoped_906a8bb3_lang = "";
    const _sfc_main$14 = {
      name: "DataSourceModal",
      components: {
        Spinner,
        Modal,
        Picklist,
        TextInput,
        ExpandableSection,
        DuelingPicklist
      },
      props: ["dataSource"],
      emits: ["save", "close"],
      data() {
        return {
          isLoading: true,
          datasetOptions: [
            {
              options: async (searchTerm) => {
                const datasets = await SPM.Utils.Rest.invoke("GetDatasets", { alias: searchTerm, hasCurrentOnly: false });
                return datasets;
              }
            }
          ],
          datasetId: "",
          datasetFields: [],
          idField: "",
          idFieldErrors: [],
          nameField: "",
          nameFieldErrors: [],
          // advanced
          showDeleteConfirmation: false
        };
      },
      computed: {
        textDatasetFields() {
          return this.datasetFields.filter((f) => f.dataType === "Text");
        },
        selectedFields() {
          const fields = this.datasetFields.filter((f) => f.selected).sort(({ order: a }, { order: b }) => a === b ? 0 : a > b ? 1 : -1);
          if (fields.find((f) => f.isId) && fields.find((f) => f.isName)) {
            const nameField = SPM.Utils.Arr.splice(fields, (f) => f.isName)[0];
            SPM.Utils.Arr.splice(fields, (f) => f.isId);
            fields.unshift({ isIdName: true, label: nameField.label });
          }
          return fields;
        }
      },
      watch: {
        idField: "handleFieldChange",
        nameField: "handleFieldChange"
      },
      async mounted() {
        SPM.Components.DataSourceModal = this;
        if (this.dataSource.sfsp__SourceId__c) {
          const dataset = await SPM.Utils.Rest.invoke("GetDataset", { id: this.dataSource.sfsp__SourceId__c });
          this.datasetId = this.dataSource.sfsp__SourceId__c;
          this.$nextTick(() => this.$refs.dataset.input = dataset.label);
          await this.onSelectDataset(dataset, { referenceFields: JSON.parse(this.dataSource.sfsp__ReferenceFields__c) });
        }
        this.isLoading = false;
      },
      methods: {
        async onSelectDataset(dataset, { referenceFields = [] } = {}) {
          var _a2, _b;
          const datasetMetadata = await SPM.Utils.Rest.invoke("GetDatasetMetadata", { url: dataset.currentVersionUrl });
          this.datasetFields = [
            ...datasetMetadata.dimensions.map((d) => Object.assign(d, { dataType: "Text" })),
            ...datasetMetadata.measures.map((m) => Object.assign(m, { dataType: "Numeric" }))
          ].map((f, i2) => {
            const referenceField = referenceFields.find((rf) => rf.id === f.field);
            return {
              id: f.field,
              label: f.label,
              dataType: f.dataType,
              selected: !!referenceField,
              locked: !!(referenceField == null ? void 0 : referenceField.isId) || !!(referenceField == null ? void 0 : referenceField.isName) || this.containsInvalidValue(f.field),
              isId: !!(referenceField == null ? void 0 : referenceField.isId),
              isName: !!(referenceField == null ? void 0 : referenceField.isName),
              order: i2 + 1,
              active: false,
              message: this.containsInvalidValue(f.field) ? "API field name contains invalid character" : null
            };
          });
          this.idField = ((_a2 = this.datasetFields.find((f) => f.isId)) == null ? void 0 : _a2.id) || "";
          this.nameField = ((_b = this.datasetFields.find((f) => f.isName)) == null ? void 0 : _b.id) || "";
          this.dataSource.Name = this.dataSource.Name || dataset.label;
        },
        handleFieldChange(newValue, oldValue) {
          if (this.containsInvalidValue(newValue) || this.containsInvalidValue(oldValue))
            return;
          this.syncFieldStates();
        },
        containsInvalidValue(value) {
          if (value == null ? void 0 : value.includes("."))
            return true;
          return false;
        },
        syncFieldStates() {
          this.datasetFields.forEach((f) => {
            f.isId = f.id === this.idField;
            f.isName = f.id === this.nameField;
            f.locked = f.isId || f.isName;
            if (f.message) {
              f.selected = false;
              f.active = false;
              f.locked = true;
            } else if (f.locked && !f.selected) {
              f.selected = true;
              f.active = false;
            }
          });
        },
        selectIdField(field) {
          if (this.containsInvalidValue(field.id)) {
            this.idFieldErrors.push("API field name contains invalid character");
            field.selected = false;
            return;
          }
          this.idField = field.id;
        },
        selectNameField(field) {
          if (this.containsInvalidValue(field.id)) {
            this.nameFieldErrors.push("API field name contains invalid character");
            field.selected = false;
            return;
          }
          this.nameField = field.id;
        },
        async save() {
          if (this.nameFieldErrors.length || this.idFieldErrors.length) {
            this.$store.toast({ state: "error", message: "Fix errors, then save your work." });
            return;
          }
          if (this.datasetFields.length === 0) {
            this.$store.toast({ state: "error", message: "Select a dataset, then save your work." });
            return;
          }
          if (!this.datasetFields.find((f) => f.isId)) {
            this.$store.toast({ state: "error", message: "Select an ID field, then save your work." });
            return;
          }
          this.isLoading = true;
          Object.assign(this.dataSource, {
            sfsp__SourceId__c: this.datasetId,
            sfsp__ReferenceFields__c: JSON.stringify(this.datasetFields.filter((f) => f.selected).map((f) => ({
              id: f.id,
              label: f.label,
              dataType: f.dataType,
              isId: f.isId,
              isName: f.isName
            })), 0, 4)
          });
          await SPM.Utils.CRM.upsert({ records: [this.dataSource] });
          this.$emit("save", this.dataSource);
          this.$emit("close");
        },
        async deleteDataSource() {
          this.isLoading = true;
          await SPM.Utils.CRM.delete({ records: [this.dataSource] });
          SPM.Utils.Arr.splice(SPM.Components.DataSources.dataSources, (ds) => ds === this.dataSource);
          this.$emit("close");
        }
      }
    };
    const _withScopeId$m = (n) => (pushScopeId("data-v-906a8bb3"), n = n(), popScopeId(), n);
    const _hoisted_1$10 = { class: "slds-grid" };
    const _hoisted_2$_ = { class: "slds-size_1-of-2" };
    const _hoisted_3$Q = { style: { "width": "80%" } };
    const _hoisted_4$J = { class: "slds-size_1-of-2 slds-p-left_large" };
    const _hoisted_5$F = /* @__PURE__ */ _withScopeId$m(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-title_bold" }, "Record Preview", -1));
    const _hoisted_6$z = {
      class: "slds-m-top_small",
      style: { "overflow": "auto" }
    };
    const _hoisted_7$u = { class: "spm-table slds-table slds-table_bordered slds-table_col-bordered" };
    const _hoisted_8$s = {
      key: 0,
      class: "slds-text-link"
    };
    const _hoisted_9$q = { key: 1 };
    const _hoisted_10$l = { class: "slds-grid" };
    const _hoisted_11$i = { class: "slds-col_bump-left" };
    function _sfc_render$14(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Picklist = resolveComponent("Picklist");
      const _component_TextInput = resolveComponent("TextInput");
      const _component_DuelingPicklist = resolveComponent("DuelingPicklist");
      const _component_ExpandableSection = resolveComponent("ExpandableSection");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        title: $props.dataSource.Name,
        size: "large",
        footless: $data.isLoading,
        onClose: _cache[11] || (_cache[11] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          $data.isLoading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
          createBaseVNode("div", _hoisted_1$10, [
            createBaseVNode("div", _hoisted_2$_, [
              createBaseVNode("div", _hoisted_3$Q, [
                createVNode(_component_Picklist, {
                  ref: "dataset",
                  modelValue: $data.datasetId,
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.datasetId = $event),
                  labels: { name: "Dataset" },
                  options: $data.datasetOptions,
                  titleKey: "label",
                  filterable: "",
                  onSelectedOption: $options.onSelectDataset
                }, null, 8, ["modelValue", "options", "onSelectedOption"]),
                createVNode(_component_TextInput, {
                  modelValue: $props.dataSource.Name,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $props.dataSource.Name = $event),
                  labels: { name: "Data Source Name" }
                }, null, 8, ["modelValue"]),
                createVNode(_component_Picklist, {
                  modelValue: $data.idField,
                  "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.idField = $event),
                  labels: { name: "Record ID" },
                  options: $options.textDatasetFields,
                  titleKey: "label",
                  filterable: "",
                  required: "",
                  errors: $data.idFieldErrors,
                  onSelectedOption: $options.selectIdField,
                  onClear: _cache[3] || (_cache[3] = ($event) => $data.idFieldErrors = [])
                }, null, 8, ["modelValue", "options", "errors", "onSelectedOption"]),
                createVNode(_component_Picklist, {
                  modelValue: $data.nameField,
                  "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.nameField = $event),
                  labels: { name: "Record Name " },
                  options: $data.datasetFields,
                  titleKey: "label",
                  filterable: "",
                  errors: $data.nameFieldErrors,
                  onSelectedOption: $options.selectNameField,
                  onClear: _cache[5] || (_cache[5] = ($event) => $data.nameFieldErrors = [])
                }, null, 8, ["modelValue", "options", "errors", "onSelectedOption"])
              ]),
              createVNode(_component_DuelingPicklist, {
                class: "slds-m-top_small",
                fields: $data.datasetFields
              }, null, 8, ["fields"])
            ]),
            createBaseVNode("div", _hoisted_4$J, [
              _hoisted_5$F,
              createBaseVNode("div", _hoisted_6$z, [
                createBaseVNode("table", _hoisted_7$u, [
                  createBaseVNode("thead", null, [
                    createBaseVNode("tr", null, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList($options.selectedFields, (field) => {
                        return openBlock(), createElementBlock("th", {
                          key: field.id
                        }, toDisplayString(field.label), 1);
                      }), 128))
                    ])
                  ]),
                  createBaseVNode("tbody", null, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(Array(3).fill(), (sampleRow, i2) => {
                      return openBlock(), createElementBlock("tr", { key: i2 }, [
                        (openBlock(true), createElementBlock(Fragment, null, renderList($options.selectedFields, (field) => {
                          return openBlock(), createElementBlock("td", {
                            key: field.id
                          }, [
                            field.isIdName ? (openBlock(), createElementBlock("span", _hoisted_8$s, toDisplayString(field.label), 1)) : (openBlock(), createElementBlock("span", _hoisted_9$q, toDisplayString(field.dataType === "Text" ? `Sample ${i2 + 1}` : "1,234"), 1))
                          ]);
                        }), 128))
                      ]);
                    }), 128))
                  ])
                ])
              ])
            ])
          ]),
          $props.dataSource.Id ? (openBlock(), createBlock(_component_ExpandableSection, {
            key: 1,
            title: "Advanced Options",
            collapsedOnLoad: "",
            transparent: "",
            class: "slds-m-top_large"
          }, {
            default: withCtx(() => {
              var _a2, _b;
              return [
                $data.showDeleteConfirmation ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  createTextVNode(" This will delete the data source configuration and cannot be undone. There are currently " + toDisplayString(((_b = (_a2 = $props.dataSource) == null ? void 0 : _a2.sfsp__SalesPlans__r) == null ? void 0 : _b.length) || 0) + " plans using it. Are you sure? ", 1),
                  createBaseVNode("button", {
                    class: "slds-button slds-button_neutral",
                    onClick: _cache[6] || (_cache[6] = ($event) => $data.showDeleteConfirmation = false)
                  }, "Cancel"),
                  createBaseVNode("button", {
                    class: "slds-button slds-button_brand",
                    onClick: _cache[7] || (_cache[7] = (...args) => $options.deleteDataSource && $options.deleteDataSource(...args))
                  }, "Yes, I'm Sure")
                ], 64)) : (openBlock(), createElementBlock("button", {
                  key: 1,
                  class: "slds-button slds-button_destructive",
                  onClick: _cache[8] || (_cache[8] = ($event) => $data.showDeleteConfirmation = true)
                }, "Delete"))
              ];
            }),
            _: 1
          })) : createCommentVNode("", true)
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_10$l, [
            createBaseVNode("div", _hoisted_11$i, [
              createBaseVNode("button", {
                class: "slds-button slds-button_neutral",
                onClick: _cache[9] || (_cache[9] = ($event) => _ctx.$emit("close"))
              }, "Cancel"),
              createBaseVNode("button", {
                class: "slds-button slds-button_brand",
                onClick: _cache[10] || (_cache[10] = (...args) => $options.save && $options.save(...args))
              }, "Save")
            ])
          ])
        ]),
        _: 1
      }, 8, ["title", "footless"]);
    }
    const DataSourceModal$1 = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["render", _sfc_render$14], ["__scopeId", "data-v-906a8bb3"]]);
    const DataSources_vue_vue_type_style_index_0_scoped_c71b20d0_lang = "";
    const _sfc_main$13 = {
      name: "DataSources",
      components: {
        Button: SLDSButton,
        Spinner,
        DataSourceModal: DataSourceModal$1
      },
      data() {
        return {
          isLoading: true,
          dataSource: {},
          dataSources: []
        };
      },
      computed: {
        filteredDataSources() {
          const term = SPM.Components.Home.searchTerm.toLowerCase();
          return this.dataSources.filter((ds) => !term || ds.Name.toLowerCase().includes(term));
        }
      },
      async mounted() {
        SPM.Components.DataSources = this;
        this.dataSources = await SPM.Utils.Apex.invoke("Query", ["SELECT Id, Name, CreatedDate, sfsp__SourceId__c, sfsp__ReferenceFields__c, (SELECT Id FROM sfsp__SalesPlans__r) FROM sfsp__SalesDataSource__c"]);
        this.dataSources.forEach((d) => d._referenceFields = JSON.parse(d.sfsp__ReferenceFields__c || "[]"));
        this.isLoading = false;
      },
      methods: {
        onNewDataSource() {
          this.dataSource = {
            _key: getGUID(),
            sobjectType: "sfsp__SalesDataSource__c",
            Name: ""
          };
        },
        onEditDataSource(dataSource) {
          this.dataSource = Object.assign(dataSource, {
            _key: getGUID()
          });
        },
        onSaveDataSource(dataSource) {
          if (!this.dataSources.includes(dataSource))
            this.dataSources.push(dataSource);
          dataSource._referenceFields = JSON.parse(dataSource.sfsp__ReferenceFields__c || "[]");
        }
      }
    };
    const _withScopeId$l = (n) => (pushScopeId("data-v-c71b20d0"), n = n(), popScopeId(), n);
    const _hoisted_1$$ = {
      class: "spm-home-table slds-size_2-of-3 slds-grow slds-m-right_medium slds-is-relative",
      style: { "background": "#FFF", "border-radius": "14px", "min-height": "100px", "max-height": "calc(100% - 1.5rem)", "overflow-y": "auto" }
    };
    const _hoisted_2$Z = {
      key: 1,
      style: { "position": "sticky", "top": "0" }
    };
    const _hoisted_3$P = {
      class: "slds-grid slds-grid_vertical-align-center slds-grid_align-spread slds-p-horizontal_large slds-p-vertical_small",
      style: { "background": "#FFF" }
    };
    const _hoisted_4$I = /* @__PURE__ */ _withScopeId$l(() => /* @__PURE__ */ createBaseVNode("span", { class: "spm-home-table-title" }, "Data Sources Management", -1));
    const _hoisted_5$E = {
      key: 0,
      class: "slds-p-around_large"
    };
    const _hoisted_6$y = /* @__PURE__ */ _withScopeId$l(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-title" }, "Get started by creating a new Data Source!", -1));
    const _hoisted_7$t = [
      _hoisted_6$y
    ];
    const _hoisted_8$r = {
      key: 1,
      class: "slds-grid slds-p-around_medium spm-home-table-header",
      style: { "background": "#f4f4f5" }
    };
    const _hoisted_9$p = /* @__PURE__ */ createStaticVNode('<div class="slds-size_2-of-6" data-v-c71b20d0>Data Source Name</div><div class="slds-size_1-of-6" data-v-c71b20d0>Location</div><div class="slds-size_1-of-6" data-v-c71b20d0>Created On</div><div class="slds-size_1-of-6" data-v-c71b20d0>Columns</div><div class="slds-size_1-of-6" data-v-c71b20d0>Plans</div>', 5);
    const _hoisted_14$d = [
      _hoisted_9$p
    ];
    const _hoisted_15$c = { class: "slds-size_2-of-6" };
    const _hoisted_16$a = ["onClick"];
    const _hoisted_17$9 = { class: "slds-size_1-of-6" };
    const _hoisted_18$9 = ["href"];
    const _hoisted_19$9 = { class: "slds-size_1-of-6" };
    const _hoisted_20$9 = { class: "slds-size_1-of-6" };
    const _hoisted_21$7 = { class: "slds-size_1-of-6" };
    function _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Button = resolveComponent("Button");
      const _component_DataSourceModal = resolveComponent("DataSourceModal");
      return openBlock(), createElementBlock("div", _hoisted_1$$, [
        $data.isLoading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : (openBlock(), createElementBlock("div", _hoisted_2$Z, [
          createBaseVNode("div", _hoisted_3$P, [
            _hoisted_4$I,
            createVNode(_component_Button, {
              iconCategory: "utility",
              iconName: "add",
              variant: "base",
              label: "Add Data Source",
              class: "slds-legacy-button",
              style: { "padding": "0" },
              onClick: $options.onNewDataSource
            }, null, 8, ["onClick"])
          ]),
          $data.dataSources.length === 0 ? (openBlock(), createElementBlock("div", _hoisted_5$E, _hoisted_7$t)) : (openBlock(), createElementBlock("div", _hoisted_8$r, _hoisted_14$d))
        ])),
        (openBlock(true), createElementBlock(Fragment, null, renderList($options.filteredDataSources, (source) => {
          var _a2;
          return openBlock(), createElementBlock("div", {
            key: source.Id,
            class: "slds-grid slds-grid_vertical-align-center slds-p-around_medium spm-home-table-body",
            style: { "border-bottom": "1px solid #F3F3F3" }
          }, [
            createBaseVNode("div", _hoisted_15$c, [
              createBaseVNode("a", {
                href: "#",
                onClick: withModifiers(($event) => $options.onEditDataSource(source), ["prevent"])
              }, toDisplayString(source.Name), 9, _hoisted_16$a)
            ]),
            createBaseVNode("div", _hoisted_17$9, [
              createBaseVNode("a", {
                href: `/${source.sfsp__SourceId__c}`,
                target: "_blank"
              }, "CRMA", 8, _hoisted_18$9)
            ]),
            createBaseVNode("div", _hoisted_19$9, toDisplayString(_ctx.$F("DateTime", source.CreatedDate, { month: "short", day: "numeric", year: "numeric" })), 1),
            createBaseVNode("div", _hoisted_20$9, toDisplayString(source._referenceFields.length), 1),
            createBaseVNode("div", _hoisted_21$7, toDisplayString(((_a2 = source.sfsp__SalesPlans__r) == null ? void 0 : _a2.length) || 0), 1)
          ]);
        }), 128)),
        $data.dataSource._key ? (openBlock(), createBlock(_component_DataSourceModal, {
          key: $data.dataSource._key,
          dataSource: $data.dataSource,
          onSave: $options.onSaveDataSource,
          onClose: _cache[0] || (_cache[0] = ($event) => $data.dataSource = {})
        }, null, 8, ["dataSource", "onSave"])) : createCommentVNode("", true)
      ]);
    }
    const DataSources = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["render", _sfc_render$13], ["__scopeId", "data-v-c71b20d0"]]);
    const _sfc_main$12 = {
      name: "NoPlans"
    };
    const _hoisted_1$_ = {
      class: "slds-grid slds-grid_vertical-align-center slds-grid_align-center",
      style: { "height": "100%" }
    };
    const _hoisted_2$Y = /* @__PURE__ */ createStaticVNode('<div class="slds-illustration slds-illustration_small"><svg class="slds-illustration__svg" viewBox="0 0 454 213" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-70.000000, -94.000000)"><g><g transform="translate(124.500000, 222.000000)"><g fill="#FFFFFF"><path vector-effect="non-scaling-stroke" d="M18.9209988,1.95433401 L33.259296,51.443436 C33.5666778,52.5043744 32.9557995,53.613617 31.8948612,53.9209988 C31.7139843,53.9734036 31.5266126,54 31.3382972,54 L2.6617028,54 C1.5571333,54 0.661702805,53.1045695 0.661702805,52 C0.661702805,51.8116846 0.688299176,51.6243129 0.74070397,51.443436 L15.0790012,1.95433401 C15.386383,0.893395645 16.4956256,0.282517358 17.556564,0.589899164 C18.2152102,0.780726338 18.7301717,1.29568777 18.9209988,1.95433401 Z"></path></g><g class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><polygon vector-effect="non-scaling-stroke" stroke-linejoin="round" points="17 0.323943662 34 54 -1.81721305e-12 54"></polygon><path vector-effect="non-scaling-stroke" d="M17,4.6953125 C17,43.0456294 17,62.6471919 17,63.5 C17,62.6471919 17,43.0456294 17,4.6953125 Z"></path><path vector-effect="non-scaling-stroke" d="M17,29.3239437 C22.3333333,35.7851611 25,39.1184944 25,39.3239437 C25,39.1184944 22.3333333,35.7851611 17,29.3239437 Z" stroke-linejoin="round" transform="translate(21.000000, 34.323944) scale(-1, 1) translate(-21.000000, -34.323944) "></path></g></g><g transform="translate(145.000000, 194.000000)"><g transform="translate(1.000000, 0.000000)" fill="#FFFFFF"><path vector-effect="non-scaling-stroke" d="M25.6478873,0 L50.879042,84.4273253 C51.1953215,85.4856452 50.5937789,86.5999782 49.535459,86.9162577 C49.3496374,86.9717906 49.1567264,87 48.9627843,87 L2.33299037,87 C1.22842087,87 0.332990367,86.1045695 0.332990367,85 C0.332990367,84.8060578 0.361199757,84.6131469 0.416732643,84.4273253 L25.6478873,0 Z"></path></g><g class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><polygon vector-effect="non-scaling-stroke" stroke-linejoin="round" points="26.5 0 52.5 87 0.5 87"></polygon><path vector-effect="non-scaling-stroke" d="M26.5,2.58642578 C26.5,61.0261034 26.5,90.9972948 26.5,92.5 C26.5,90.9972948 26.5,61.0261034 26.5,2.58642578 Z"></path><path vector-effect="non-scaling-stroke" d="M15.6478873,42 C22.314554,49.078692 25.6478873,52.7453587 25.6478873,53 C25.6478873,52.7453587 22.314554,49.078692 15.6478873,42 Z" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M27.6478873,68 C36.9812207,57.078692 41.6478873,51.7453587 41.6478873,52 C41.6478873,51.7453587 36.9812207,57.078692 27.6478873,68 Z" stroke-linejoin="round"></path></g></g><g transform="translate(404.500000, 245.000000) scale(-1, 1) translate(-404.500000, -245.000000) translate(348.000000, 226.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-linejoin="round" stroke-width="3"><polyline vector-effect="non-scaling-stroke" points="0 38 47.5 0 80.5 26"></polyline><polyline vector-effect="non-scaling-stroke" points="71 17 80.5 9 113 36"></polyline></g><g transform="translate(72.000000, 262.500000)"><path vector-effect="non-scaling-stroke" d="M153.962142,26.4644491 C151.225735,20.0143094 144.944776,15.5029106 137.633892,15.5029106 C135.619663,15.5029106 133.683612,15.8453541 131.878328,16.4764392 C128.451481,11.1704266 122.567406,7.66985447 115.883789,7.66985447 C109.491267,7.66985447 103.830159,10.8721423 100.350851,15.7935668 C98.9589956,14.968161 97.3423157,14.4956341 95.6177606,14.4956341 C94.1083143,14.4956341 92.6815102,14.8576334 91.4157672,15.5014039 C87.9975328,6.58722215 79.5098304,0.275259875 69.5804557,0.275259875 C60.4632836,0.275259875 52.5615782,5.59684366 48.6837305,13.3681823 C46.3912034,12.266973 43.8314865,11.6515593 41.1312741,11.6515593 C32.4373504,11.6515593 25.1998844,18.0312998 23.6476214,26.4644491 L153.962142,26.4644491 Z" class="slds-illustration__fill-secondary"></path><path vector-effect="non-scaling-stroke" d="M13,25 L143,25" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M0,25 L450,25" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round"></path></g><g transform="translate(344.000000, 247.000000)"><g transform="translate(0.293436, 0.054545)"><path vector-effect="non-scaling-stroke" d="M165.428708,41.9454545 L0.0995432562,41.9454545 C0.0336614956,41.2089487 0,40.4630069 0,39.7090909 C0,26.2132599 10.7866531,15.2727273 24.0926641,15.2727273 C27.7492016,15.2727273 31.215485,16.0989227 34.3199502,17.5772977 C39.5712028,7.14424616 50.271428,0 62.6175975,0 C76.0636257,0 87.5573893,8.47383452 92.1862485,20.441159 C93.9002755,19.5768947 95.8324059,19.0909091 97.8764479,19.0909091 C100.211783,19.0909091 102.401037,19.7252784 104.285841,20.8333889 C108.997403,14.2263569 116.663488,9.92727273 125.320028,9.92727273 C138.043441,9.92727273 148.627152,19.2146805 150.834755,31.4671412 C151.487388,31.3631046 152.156394,31.3090909 152.837838,31.3090909 C159.117096,31.3090909 164.340238,35.8953699 165.428708,41.9454545 Z" class="slds-illustration__fill-secondary"></path><path vector-effect="non-scaling-stroke" d="M32.7065637,40.4454545 L173.706564,40.4454545" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round"></path></g></g><g transform="translate(105.000000, 189.000000)"><g transform="translate(106.000000, 48.000000)" fill="#FFFFFF"><polygon vector-effect="non-scaling-stroke" points="121.5 14.5 158.5 14.5 158.5 0.5 47.5 0.5 47.5 14.5 93.5 14.5 93.5 35.5 121.5 35.5 121.5 14.5"></polygon><rect x="0" y="0" width="48" height="14"></rect></g><g transform="translate(106.000000, 62.000000)" class="slds-illustration__fill-secondary"><polygon vector-effect="non-scaling-stroke" points="93.3109375 0.456640625 93.3109375 21.6722656 120.925 21.6722656 121.823047 1.13242188 158.5 0.456640625 158.5 54.5 48.5 54.5 48.5 0.693359375"></polygon><rect x="0.5" y="0.5" width="48" height="54"></rect></g><g><rect class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" x="154.5" y="48.5" width="110" height="68"></rect><polygon vector-effect="non-scaling-stroke" class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" points="264.5 62.5 264.5 48.5 154.5 48.5 154.5 62.5 199.5 62.5 199.5 83.5 227.5 83.5 227.5 62.5"></polygon><path vector-effect="non-scaling-stroke" d="M96.5,7.5 L96.5,7.5 C109.754834,7.5 120.5,18.245166 120.5,31.5 L120.5,41.5 L72.5,41.5 L72.5,31.5 C72.5,18.245166 83.245166,7.5 96.5,7.5 Z" class="slds-illustration__fill-secondary" transform="translate(96.500000, 24.500000) scale(-1, 1) rotate(90.000000) translate(-96.500000, -24.500000) "></path><path vector-effect="non-scaling-stroke" d="M105.624512,4.97216797 C94.4226888,4.50244141 85.9366862,9.85058594 80.1665039,21.0166016 C79.8051287,21.7159073 79.4687138,22.3615749 79.1572595,22.9536042 L80.1089196,17.7968272 C80.4778395,16.9245818 81.0906215,15.4885626 81.9472656,13.4887695 C86.7151693,7.81103516 89.2679036,4.97216797 89.6054688,4.97216797 C89.9430339,4.97216797 92.2714844,3.71272786 96.5908203,1.19384766 L101.309082,0.447753906 L105.624512,0.447753906 L105.624512,4.97216797 Z" fill="#FFFFFF"></path><path vector-effect="non-scaling-stroke" d="M96.5,7.5 L96.5,7.5 C109.754834,7.5 120.5,18.245166 120.5,31.5 L120.5,41.5 L72.5,41.5 L72.5,31.5 C72.5,18.245166 83.245166,7.5 96.5,7.5 Z" class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" transform="translate(96.500000, 24.500000) scale(-1, 1) rotate(90.000000) translate(-96.500000, -24.500000) "></path><rect class="slds-illustration__fill-secondary" x="106.5" y="0.5" width="110" height="48"></rect><rect class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" x="106.5" y="0.5" width="110" height="48"></rect><rect class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" x="106.5" y="62.5" width="48" height="54"></rect><rect class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" x="106.5" y="48.5" width="48" height="14"></rect><path vector-effect="non-scaling-stroke" d="M219,66 C219,68.765 216.765,71 214,71 C211.235,71 209,68.765 209,66 C209,63.235 211.235,61 214,61 C216.765,61 219,63.235 219,66 Z" class="slds-illustration__fill-primary"></path><path vector-effect="non-scaling-stroke" d="M214,69 L214,74" class="slds-illustration__stroke-primary" stroke-width="4" stroke-linecap="round"></path><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="164" cy="72" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="164" cy="107" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="255" cy="72" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="255" cy="107" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="145" cy="72" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="145" cy="107" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="116" cy="72" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="116" cy="107" r="3"></circle><path vector-effect="non-scaling-stroke" d="M289.928751,96.2971422 L298,116.518658 L280,116.518658 L288.071249,96.2971422 C288.275982,95.784207 288.857768,95.5343604 289.370703,95.7390942 C289.625359,95.8407378 289.827108,96.0424867 289.928751,96.2971422 Z" class="slds-illustration__fill-primary"></path><path vector-effect="non-scaling-stroke" d="M300.428751,103.813271 L305.5,116.518658 L293.5,116.518658 L298.571249,103.813271 C298.775982,103.300336 299.357768,103.050489 299.870703,103.255223 C300.125359,103.356867 300.327108,103.558616 300.428751,103.813271 Z" class="slds-illustration__fill-primary"></path><path vector-effect="non-scaling-stroke" d="M93.4287513,96.2971422 L101.5,116.518658 L83.5,116.518658 L91.5712487,96.2971422 C91.7759825,95.784207 92.3577681,95.5343604 92.8707033,95.7390942 C93.1253588,95.8407378 93.3271077,96.0424867 93.4287513,96.2971422 Z" class="slds-illustration__fill-primary" transform="translate(92.500000, 106.517446) scale(-1, 1) translate(-92.500000, -106.517446) "></path><path vector-effect="non-scaling-stroke" d="M76.9287513,103.813271 L82,116.518658 L70,116.518658 L75.0712487,103.813271 C75.2759825,103.300336 75.8577681,103.050489 76.3707033,103.255223 C76.6253588,103.356867 76.8271077,103.558616 76.9287513,103.813271 Z" class="slds-illustration__fill-primary" transform="translate(76.000000, 110.275510) scale(-1, 1) translate(-76.000000, -110.275510) "></path><path vector-effect="non-scaling-stroke" d="M360,116.5 L372,116.5" class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M0,116.5 L350,116.5" class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path></g></g><g transform="translate(160.000000, 126.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(271.000000, 95.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(402.000000, 164.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><g transform="translate(31.713442, 25.088326) rotate(-15.000000) translate(-31.713442, -25.088326) translate(4.713442, 6.588326)"><path vector-effect="non-scaling-stroke" d="M31.0360707,3.43528591 C31.0360707,3.43528591 40.5802283,0.671893051 42.6488424,10.6908663" transform="translate(36.842457, 6.888440) rotate(41.000000) translate(-36.842457, -6.888440) "></path><path vector-effect="non-scaling-stroke" d="M40.4282002,10.1797377 C40.4282002,10.1797377 49.9723578,7.4163448 52.0409719,17.435318" transform="translate(46.234586, 13.632892) scale(-1, 1) rotate(-41.000000) translate(-46.234586, -13.632892) "></path><path vector-effect="non-scaling-stroke" d="M0.730284783,29.5865514 C0.730284783,29.5865514 10.2744424,26.8231586 12.3430565,36.8421318"></path><path vector-effect="non-scaling-stroke" d="M12.7302848,29.5865514 C12.7302848,29.5865514 22.2744424,26.8231586 24.3430565,36.8421318" transform="translate(18.536671, 33.039705) scale(-1, 1) translate(-18.536671, -33.039705) "></path></g></g></g></g></g></svg><div class="slds-text-longform"><h3 class="slds-text-heading_medium">No Sales Plans</h3><p class="slds-text-body_regular">You have not been invited to any Sales Plans.</p></div></div>', 1);
    const _hoisted_3$O = [
      _hoisted_2$Y
    ];
    function _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", _hoisted_1$_, _hoisted_3$O);
    }
    const NoPlans = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["render", _sfc_render$12]]);
    const Home_vue_vue_type_style_index_0_scoped_7a4dcd8f_lang = "";
    const Home_vue_vue_type_style_index_1_lang = "";
    const _sfc_main$11 = {
      name: "AppHome",
      components: {
        SLDSButton,
        ButtonIcon,
        Icon,
        ActivityHistory,
        ActivityHistoryOptionsPopover,
        TemplateSelector,
        Setup,
        DataSources,
        NoPlans,
        TextInput
      },
      emits: ["load-plan", "open-segment"],
      data() {
        return {
          openTemplateSelector: false,
          renderSetup: false,
          plans: [],
          // history
          isActivityHistoryEmpty: false,
          renderFilterPopover: false,
          history: HistoryTypes.ALL,
          sort: SortTypes.NEWEST,
          currentTab: "",
          searchTerm: "",
          segmentsList: [],
          loading: true
        };
      },
      computed: {
        renderNoAccess() {
          return !this.$store.isAdmin && !this.$store.isManager && this.$store.plans.length === 0 && this.filteredSegments.length === 0;
        },
        showSalesPlansTab() {
          var _a2;
          return this.$store.isAdmin || this.$store.isManager || ((_a2 = this.$store.userAccessRecords) == null ? void 0 : _a2.length) > 0 || this.$store.plans.length > 0;
        },
        filteredSegments() {
          if (!this.searchTerm) {
            return this.segmentsList;
          }
          return this.segmentsList.filter((segment) => segment.Name.toLowerCase().includes(this.searchTerm.toLowerCase()));
        },
        filteredPlans() {
          if (!this.searchTerm) {
            return this.$store.plans;
          }
          return this.$store.plans.filter((plan) => plan.Name.toLowerCase().includes(this.searchTerm.toLowerCase()));
        },
        historySegments() {
          return this.currentTab === "Segments" ? this.segmentsList : [];
        }
      },
      created() {
        SPM.Components.Home = this;
        this.currentUserId = SPM.currentUser.Id;
      },
      async mounted() {
        SPM.Utils.Splunk.sendLog({ logName: "spmEPT", logPayload: { pageName: "Home" } });
        this.currentTab = !SPM.isAdmin && !SPM.isManager && !this.$store.userAccessRecords.filter((plan) => !plan.sfsp__SalesNode__c).length > 0 ? "Segments" : "Sales Plans";
        await this.getSegments();
        this.loading = false;
      },
      methods: {
        createPlan() {
          if (SPM.betaFlags.SP_AllowV1Plans) {
            this.openTemplateSelector = true;
          } else {
            SPM.Components.Root.openModal("salesPlan", {
              title: "New sales plan",
              isAdvanced: true,
              callback: async ({ plan }) => {
                if (this.$store.isManager && !this.$store.isAdmin) {
                  await SPM.Utils.Apex.invoke("InsertSObjects", [
                    [{
                      sobjectType: "sfsp__SalesUserAccess__c",
                      sfsp__User__c: SPM.currentUser.Id,
                      sfsp__SalesPlan__c: plan.Id,
                      sfsp__AccessLevel__c: "Editor"
                    }],
                    true
                  ]);
                }
                SPM.Components.Root.loadPlan(plan.Id);
                this.$mitt.emit("toast", { message: "Plan Created!", duration: 2500 });
              }
            });
          }
        },
        openSalesPlanModal() {
          SPM.Components.Root.openModal("salesPlan", {
            callback: ({ plan }) => {
              SPM.Components.Root.loadPlan(plan.Id);
              this.$mitt.emit("toast", { message: "Plan Created!", duration: 2500 });
            }
          });
        },
        // history
        applyFilters({ history, sort }) {
          this.renderFilterPopover = false;
          this.history = history;
          this.sort = sort;
        },
        changeTab(tab) {
          this.searchTerm = "";
          this.currentTab = tab;
        },
        async getSegments() {
          const segmentsInfo = await SPM.Utils.Apex.invoke("Query", [`
                SELECT
                    Id,
                    Name,
                    CreatedById,
                    CreatedBy.Name,
                    CreatedBy.SmallPhotoUrl,
                    CreatedDate,
                    sfsp__SalesPlan__c,
                    sfsp__SalesPlan__r.sfsp__Type__c,
                    sfsp__SalesPlan__r.Name
                FROM sfsp__SalesNode__c
                WHERE sfsp__SalesPlan__r.sfsp__Type__c = 'Segmentation'
                    AND sfsp__SalesPlan__r.sfsp__Status__c != 'Deleted'
                    AND Id IN (SELECT sfsp__SalesNode__c FROM sfsp__SalesUserAccess__c WHERE sfsp__User__c = '${SPM.currentUser.Id}')
            `]);
          this.segmentsList = segmentsInfo;
        }
      }
    };
    const _withScopeId$k = (n) => (pushScopeId("data-v-7a4dcd8f"), n = n(), popScopeId(), n);
    const _hoisted_1$Z = {
      key: 3,
      id: "kondo-container",
      class: "spm-kondo slds-grid slds-grid_vertical slds-p-around_large",
      style: { "min-width": "1024px", "height": "100%", "background": "#f4f4f5" }
    };
    const _hoisted_2$X = { class: "slds-grid slds-grid_align-spread slds-grid_vertical-align-center slds-m-vertical_medium" };
    const _hoisted_3$N = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { style: { "font-size": "40px", "line-height": "48px", "font-weight": "274", "color": "#042339" } }, "Sales Planning", -1));
    const _hoisted_4$H = { class: "toolbar slds-m-bottom_medium slds-grid" };
    const _hoisted_5$D = {
      id: "salesplan-tabs",
      class: "slds-col slds-size_1-of-3"
    };
    const _hoisted_6$x = {
      class: "sp-tabs slds-grid",
      style: { "height": "55px" }
    };
    const _hoisted_7$s = { class: "search-bar slds-col slds-size_1-of-3 slds-grid_vertical-align-end slds-grid slds-grid_align-end" };
    const _hoisted_8$q = {
      class: "search-container",
      style: { "width": "228px" }
    };
    const _hoisted_9$o = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "search-bar slds-col slds-size_1-of-3" }, null, -1));
    const _hoisted_10$k = {
      class: "slds-grid slds-grid_vertical-align-start",
      style: { "height": "100%", "overflow": "hidden" }
    };
    const _hoisted_11$h = {
      key: 0,
      class: "slds-grow slds-m-right_medium spm-home-table slds-size_2-of-3",
      style: { "background": "#FFF", "border-radius": "14px", "max-height": "calc(100% - 1.5rem)", "overflow-y": "auto" }
    };
    const _hoisted_12$e = {
      key: 0,
      class: "slds-p-around_large"
    };
    const _hoisted_13$e = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-heading_medium" }, "No Sales Plans", -1));
    const _hoisted_14$c = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-title" }, "Get started by creating a new Sales Plan!", -1));
    const _hoisted_15$b = [
      _hoisted_13$e,
      _hoisted_14$c
    ];
    const _hoisted_16$9 = {
      key: 1,
      class: "slds-grid slds-p-around_medium spm-home-table-header",
      style: { "border-bottom": "1px solid #E5E5E5", "background": "inherit", "position": "sticky", "top": "0" }
    };
    const _hoisted_17$8 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-size_3-of-6" }, "Plan", -1));
    const _hoisted_18$8 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-size_1-of-6" }, "Fiscal Year", -1));
    const _hoisted_19$8 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-size_1-of-6" }, "Created By", -1));
    const _hoisted_20$8 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-size_1-of-6" }, "Created On", -1));
    const _hoisted_21$6 = [
      _hoisted_17$8,
      _hoisted_18$8,
      _hoisted_19$8,
      _hoisted_20$8
    ];
    const _hoisted_22$6 = { class: "slds-size_3-of-6" };
    const _hoisted_23$6 = ["onClick"];
    const _hoisted_24$6 = { class: "slds-size_1-of-6" };
    const _hoisted_25$5 = { class: "slds-size_1-of-6" };
    const _hoisted_26$2 = ["src"];
    const _hoisted_27$2 = ["href"];
    const _hoisted_28$2 = { class: "slds-size_1-of-6" };
    const _hoisted_29$2 = {
      key: 1,
      class: "slds-grow slds-m-right_medium spm-home-table spm-segments-table slds-size_2-of-3",
      style: { "background": "#FFF", "border-radius": "14px", "max-height": "calc(100% - 1.5rem)", "overflow-y": "auto" }
    };
    const _hoisted_30$2 = {
      key: 0,
      class: "slds-p-around_large"
    };
    const _hoisted_31$2 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-heading_medium" }, "No Segments", -1));
    const _hoisted_32$2 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-title" }, "You have not been invited to any Segments!", -1));
    const _hoisted_33$2 = [
      _hoisted_31$2,
      _hoisted_32$2
    ];
    const _hoisted_34$1 = {
      key: 1,
      class: "slds-grid slds-p-around_medium spm-home-table-header",
      style: { "border-bottom": "1px solid #E5E5E5", "background": "inherit", "position": "sticky", "top": "0" }
    };
    const _hoisted_35$1 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-size_2-of-6" }, "Segment", -1));
    const _hoisted_36$1 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-size_2-of-6" }, "Plan", -1));
    const _hoisted_37$1 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-size_1-of-6" }, "Created By", -1));
    const _hoisted_38$1 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-size_1-of-6" }, "Created On", -1));
    const _hoisted_39 = [
      _hoisted_35$1,
      _hoisted_36$1,
      _hoisted_37$1,
      _hoisted_38$1
    ];
    const _hoisted_40 = { class: "slds-size_2-of-6" };
    const _hoisted_41 = ["onClick"];
    const _hoisted_42 = { class: "slds-size_2-of-6" };
    const _hoisted_43 = { class: "slds-size_1-of-6" };
    const _hoisted_44 = ["src"];
    const _hoisted_45 = ["href"];
    const _hoisted_46 = { class: "slds-size_1-of-6" };
    const _hoisted_47 = {
      id: "history-feed",
      class: "slds-scrollable_none slds-p-around_medium slds-is-relative slds-grid slds-grid_vertical slds-col",
      style: { "background": "#FFF", "border-radius": "14px", "max-height": "calc(100% - 1.5rem)" }
    };
    const _hoisted_48 = { class: "slds-grid slds-grid_vertical-align-center slds-grid_align-spread slds-m-bottom_small slds-m-right_medium" };
    const _hoisted_49 = /* @__PURE__ */ _withScopeId$k(() => /* @__PURE__ */ createBaseVNode("span", { style: { "font-size": "20px", "line-height": "20px", "color": "#042339" } }, "History", -1));
    function _sfc_render$11(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_TemplateSelector = resolveComponent("TemplateSelector");
      const _component_Setup = resolveComponent("Setup");
      const _component_NoPlans = resolveComponent("NoPlans");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Icon = resolveComponent("Icon");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_TextInput = resolveComponent("TextInput");
      const _component_DataSources = resolveComponent("DataSources");
      const _component_ActivityHistory = resolveComponent("ActivityHistory");
      const _component_ActivityHistoryOptionsPopover = resolveComponent("ActivityHistoryOptionsPopover");
      return $data.openTemplateSelector ? (openBlock(), createBlock(_component_TemplateSelector, {
        key: 0,
        onClose: _cache[0] || (_cache[0] = ($event) => $data.openTemplateSelector = false)
      })) : $data.renderSetup ? (openBlock(), createBlock(_component_Setup, {
        key: 1,
        showClose: $data.renderSetup,
        onClose: _cache[1] || (_cache[1] = ($event) => $data.renderSetup = false)
      }, null, 8, ["showClose"])) : !$data.loading && $options.renderNoAccess ? (openBlock(), createBlock(_component_NoPlans, {
        key: 2,
        id: "noPlans"
      })) : !$data.loading ? (openBlock(), createElementBlock("div", _hoisted_1$Z, [
        createBaseVNode("div", _hoisted_2$X, [
          _hoisted_3$N,
          createBaseVNode("div", null, [
            _ctx.$store.isAdmin ? (openBlock(), createBlock(_component_SLDSButton, {
              key: 0,
              id: "setup",
              variant: "base",
              label: "Setup",
              onClick: _cache[2] || (_cache[2] = ($event) => $data.renderSetup = true)
            })) : createCommentVNode("", true),
            _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_SLDSButton, {
              key: 1,
              id: "create-plan",
              label: "Create Plan",
              onClick: $options.createPlan
            }, null, 8, ["onClick"])) : createCommentVNode("", true)
          ])
        ]),
        createBaseVNode("div", _hoisted_4$H, [
          createBaseVNode("div", _hoisted_5$D, [
            createBaseVNode("div", _hoisted_6$x, [
              $options.showSalesPlansTab ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(["slds-p-around_medium nagivation-tab", { "selected": $data.currentTab === "Sales Plans" }]),
                onClick: _cache[3] || (_cache[3] = ($event) => $options.changeTab("Sales Plans"))
              }, "Sales Plans", 2)) : createCommentVNode("", true),
              createBaseVNode("div", {
                class: normalizeClass(["slds-p-around_medium nagivation-tab", { "selected": $data.currentTab === "Segments" }]),
                onClick: _cache[4] || (_cache[4] = ($event) => $options.changeTab("Segments"))
              }, "Segments", 2),
              _ctx.$store.isAdmin ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(["slds-p-around_medium nagivation-tab", { "selected": $data.currentTab === "Data Sources" }]),
                onClick: _cache[5] || (_cache[5] = ($event) => $options.changeTab("Data Sources"))
              }, "Data Sources", 2)) : createCommentVNode("", true)
            ])
          ]),
          createBaseVNode("div", _hoisted_7$s, [
            createBaseVNode("div", _hoisted_8$q, [
              createVNode(_component_TextInput, {
                id: "search-term",
                modelValue: $data.searchTerm,
                "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.searchTerm = $event),
                class: "slds-input-has-icon slds-input-has-icon_left-right slds-grow search-box",
                labels: { placeholder: "Search..." }
              }, {
                extend: withCtx(() => [
                  createVNode(_component_Icon, {
                    category: "utility",
                    name: "search",
                    iconClass: ["slds-input__icon", "slds-input__icon_left"]
                  }),
                  createVNode(_component_ButtonIcon, {
                    iconCategory: "utility",
                    iconName: "clear",
                    assistiveText: "Clear",
                    iconClass: ["slds-button__icon", "slds-icon-text-light"],
                    class: "slds-button slds-button_icon slds-input__icon slds-input__icon_right",
                    title: "Clear",
                    onClick: _cache[6] || (_cache[6] = ($event) => $data.searchTerm = "")
                  })
                ]),
                _: 1
              }, 8, ["modelValue", "labels"])
            ])
          ]),
          _hoisted_9$o
        ]),
        createBaseVNode("div", _hoisted_10$k, [
          $data.currentTab === "Sales Plans" ? (openBlock(), createElementBlock("div", _hoisted_11$h, [
            _ctx.$store.plans.length === 0 ? (openBlock(), createElementBlock("div", _hoisted_12$e, _hoisted_15$b)) : (openBlock(), createElementBlock("div", _hoisted_16$9, _hoisted_21$6)),
            (openBlock(true), createElementBlock(Fragment, null, renderList($options.filteredPlans, (plan) => {
              var _a2;
              return openBlock(), createElementBlock("div", {
                key: plan.Id,
                class: "slds-grid slds-grid_vertical-align-center slds-p-around_medium spm-home-table-body",
                style: { "border-bottom": "1px solid #F3F3F3" }
              }, [
                createBaseVNode("div", _hoisted_22$6, [
                  createBaseVNode("a", {
                    href: "#",
                    onClick: withModifiers(($event) => _ctx.$emit("load-plan", plan.Id), ["prevent"])
                  }, toDisplayString(plan.Name), 9, _hoisted_23$6),
                  createBaseVNode("div", null, toDisplayString(plan.sfsp__Description__c || ""), 1)
                ]),
                createBaseVNode("div", _hoisted_24$6, toDisplayString(((_a2 = _ctx.$store.periods.find((p2) => p2.Id === plan.sfsp__Period__c)) == null ? void 0 : _a2.FullyQualifiedLabel) || ""), 1),
                createBaseVNode("div", _hoisted_25$5, [
                  createBaseVNode("img", {
                    src: plan.CreatedBy.SmallPhotoUrl,
                    style: { "width": "23px", "height": "23px", "border-radius": "182px", "margin-right": "12px" }
                  }, null, 8, _hoisted_26$2),
                  createBaseVNode("a", {
                    href: `/${plan.CreatedById}`,
                    target: "_blank"
                  }, toDisplayString(plan.CreatedBy.Name), 9, _hoisted_27$2)
                ]),
                createBaseVNode("div", _hoisted_28$2, toDisplayString(_ctx.$F("DateTime", plan.CreatedDate, { month: "short", day: "numeric", year: "numeric" })), 1)
              ]);
            }), 128))
          ])) : createCommentVNode("", true),
          $data.currentTab === "Segments" ? (openBlock(), createElementBlock("div", _hoisted_29$2, [
            $data.segmentsList.length === 0 ? (openBlock(), createElementBlock("div", _hoisted_30$2, _hoisted_33$2)) : (openBlock(), createElementBlock("div", _hoisted_34$1, _hoisted_39)),
            (openBlock(true), createElementBlock(Fragment, null, renderList($options.filteredSegments, (plan) => {
              return openBlock(), createElementBlock("div", {
                key: plan.Id,
                class: "slds-grid slds-grid_vertical-align-center slds-p-around_medium spm-home-table-body",
                style: { "border-bottom": "1px solid #F3F3F3" }
              }, [
                createBaseVNode("div", _hoisted_40, [
                  createBaseVNode("a", {
                    href: "#",
                    onClick: withModifiers(($event) => _ctx.$emit("open-segment", plan.Id), ["prevent"])
                  }, toDisplayString(plan.Name), 9, _hoisted_41),
                  createBaseVNode("div", null, toDisplayString(plan.sfsp__Description__c || ""), 1)
                ]),
                createBaseVNode("div", _hoisted_42, toDisplayString(plan.sfsp__SalesPlan__r.Name), 1),
                createBaseVNode("div", _hoisted_43, [
                  createBaseVNode("img", {
                    src: plan.CreatedBy.SmallPhotoUrl,
                    style: { "width": "23px", "height": "23px", "border-radius": "182px", "margin-right": "12px" }
                  }, null, 8, _hoisted_44),
                  createBaseVNode("a", {
                    href: `/${plan.CreatedById}`,
                    target: "_blank"
                  }, toDisplayString(plan.CreatedBy.Name), 9, _hoisted_45)
                ]),
                createBaseVNode("div", _hoisted_46, toDisplayString(_ctx.$F("DateTime", plan.CreatedDate, { month: "short", day: "numeric", year: "numeric" })), 1)
              ]);
            }), 128))
          ])) : createCommentVNode("", true),
          $data.currentTab === "Data Sources" ? (openBlock(), createBlock(_component_DataSources, { key: 2 })) : createCommentVNode("", true),
          createBaseVNode("div", _hoisted_47, [
            createBaseVNode("div", _hoisted_48, [
              _hoisted_49,
              createVNode(_component_ButtonIcon, {
                assistiveText: "Filter",
                disabled: $data.isActivityHistoryEmpty,
                iconCategory: "utility",
                iconName: "automate",
                iconClass: ["history-settings-icon"],
                size: "small",
                title: "Filter",
                onClick: _cache[8] || (_cache[8] = ($event) => $data.renderFilterPopover = true)
              }, null, 8, ["disabled"])
            ]),
            !$data.loading ? (openBlock(), createBlock(_component_ActivityHistory, {
              key: 0,
              ref: "activityHistory",
              history: $data.history,
              embedLinks: "",
              userId: _ctx.currentUserId,
              sort: $data.sort,
              segmentsOnly: $data.currentTab === "Segments",
              segments: $options.historySegments,
              class: "slds-m-top_small",
              style: { "margin-right": "12px" },
              onInitialized: _cache[9] || (_cache[9] = ($event) => $data.isActivityHistoryEmpty = _ctx.$refs.activityHistory.empty)
            }, null, 8, ["history", "userId", "sort", "segmentsOnly", "segments"])) : createCommentVNode("", true),
            $data.renderFilterPopover ? (openBlock(), createBlock(_component_ActivityHistoryOptionsPopover, {
              key: 1,
              history: $data.history,
              sort: $data.sort,
              kondo: "",
              onApply: $options.applyFilters,
              onClose: _cache[10] || (_cache[10] = ($event) => $data.renderFilterPopover = false)
            }, null, 8, ["history", "sort", "onApply"])) : createCommentVNode("", true)
          ])
        ])
      ])) : createCommentVNode("", true);
    }
    const Home = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["render", _sfc_render$11], ["__scopeId", "data-v-7a4dcd8f"]]);
    const Accordion_vue_vue_type_style_index_0_scoped_e441840d_lang = "";
    const _sfc_main$10 = {
      name: "Accordion",
      props: {
        bordered: Boolean,
        exclusive: Boolean
      },
      provide() {
        return {
          provideRegister: this.register,
          provideUnregister: this.unregister,
          provideOnOpen: this.onOpen
        };
      },
      data() {
        return {
          childMap: /* @__PURE__ */ new Map()
        };
      },
      methods: {
        register({ id, close }) {
          this.childMap.set(id, close);
        },
        unregister(id) {
          this.childMap.delete(id);
        },
        onOpen(id) {
          if (!this.$props.exclusive)
            return;
          this.childMap.forEach((close, _id) => {
            if (id !== _id) {
              close();
            }
          });
        }
      }
    };
    function _sfc_render$10(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("ul", {
        class: normalizeClass(["slds-accordion", { "accordion-ul-bordered": _ctx.$props.bordered }])
      }, [
        renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ], 2);
    }
    const Accordion = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["render", _sfc_render$10], ["__scopeId", "data-v-e441840d"]]);
    const _sfc_main$$ = {
      name: "AccordionItem",
      components: {
        Button: SLDSButton
      },
      emits: ["close", "open"],
      props: {
        disabled: Boolean,
        open: Boolean,
        renderImmediately: Boolean,
        unrenderOnClose: Boolean,
        alwaysShowOverflow: Boolean,
        title: {
          type: String,
          required: true
        }
      },
      inject: ["provideRegister", "provideUnregister", "provideOnOpen"],
      data() {
        return {
          isOpen: this.$props.open,
          guid: getGUID(),
          render: this.$props.renderImmediately || this.$props.open
        };
      },
      created() {
        this.provideRegister({
          id: this.guid,
          close: () => {
            if (this.$props.unrenderOnClose) {
              this.render = false;
            }
            this.isOpen = false;
            this.$emit("close");
          }
        });
      },
      unmounted() {
        this.provideUnregister(this.guid);
      },
      methods: {
        doOpen() {
          if (!this.isOpen) {
            this.onClick();
          }
        },
        onClick() {
          this.isOpen = !this.isOpen;
          if (this.isOpen) {
            this.render = true;
            this.$emit("open");
            this.provideOnOpen(this.guid);
          } else {
            if (this.$props.unrenderOnClose) {
              this.render = false;
            }
            this.$emit("close");
          }
        }
      }
    };
    const _hoisted_1$Y = { class: "slds-accordion__list-item" };
    const _hoisted_2$W = { class: "slds-accordion__summary" };
    const _hoisted_3$M = { class: "slds-accordion__summary-heading" };
    const _hoisted_4$G = { class: "slds-accordion__summary-content" };
    const _hoisted_5$C = {
      key: 1,
      class: "slds-accordion__summary-content slds-m-left_x-small"
    };
    const _hoisted_6$w = ["hidden", "id"];
    function _sfc_render$$(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Button = resolveComponent("Button");
      return openBlock(), createElementBlock("li", _hoisted_1$Y, [
        createBaseVNode("section", {
          class: normalizeClass(["slds-accordion__section", { "slds-is-open": $data.isOpen }])
        }, [
          createBaseVNode("div", _hoisted_2$W, [
            createBaseVNode("h2", _hoisted_3$M, [
              !_ctx.$props.disabled ? (openBlock(), createBlock(_component_Button, {
                key: 0,
                "aria-controls": $data.guid,
                "aria-expanded": $data.isOpen,
                iconCategory: "utility",
                iconClass: "slds-accordion__summary-action-icon",
                iconName: "switch",
                id: `${$props.title.replaceAll(" ", "-").toLowerCase()}-expanded-${$data.isOpen}`,
                class: "slds-button_reset slds-accordion__summary-action",
                variant: "base",
                onClick: $options.onClick
              }, {
                default: withCtx(() => [
                  createBaseVNode("span", _hoisted_4$G, toDisplayString($props.title), 1)
                ]),
                _: 1
              }, 8, ["aria-controls", "aria-expanded", "id", "onClick"])) : (openBlock(), createElementBlock("span", _hoisted_5$C, toDisplayString($props.title), 1))
            ]),
            $data.isOpen || _ctx.$props.alwaysShowOverflow ? renderSlot(_ctx.$slots, "overflow", { key: 0 }) : createCommentVNode("", true)
          ]),
          $data.render ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: "slds-accordion__content",
            hidden: $data.isOpen ? null : "",
            id: $data.guid
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 8, _hoisted_6$w)) : createCommentVNode("", true)
        ], 2)
      ]);
    }
    const AccordionItem = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["render", _sfc_render$$]]);
    const _sfc_main$_ = {
      name: "ActivityHistoryAccordionItem",
      components: {
        AccordionItem,
        ActivityHistory,
        ActivityHistoryOptionsPopover,
        ButtonIcon
      },
      props: ["embedLinks", "parentId", "userId"],
      data() {
        return {
          isActivityHistoryEmpty: false,
          renderFilterPopover: false,
          history: HistoryTypes.ALL,
          sort: SortTypes.NEWEST
        };
      },
      methods: {
        applyFilters({ history, sort }) {
          this.renderFilterPopover = false;
          this.history = history;
          this.sort = sort;
        },
        onInitialized() {
          this.isActivityHistoryEmpty = this.$refs.activityHistory.empty;
        }
      }
    };
    function _sfc_render$_(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_ActivityHistory = resolveComponent("ActivityHistory");
      const _component_ActivityHistoryOptionsPopover = resolveComponent("ActivityHistoryOptionsPopover");
      const _component_AccordionItem = resolveComponent("AccordionItem");
      return openBlock(), createBlock(_component_AccordionItem, {
        title: "History",
        class: "slds-is-relative",
        unrenderOnClose: "",
        onClose: _cache[2] || (_cache[2] = ($event) => $data.renderFilterPopover = false)
      }, {
        overflow: withCtx(() => [
          createVNode(_component_ButtonIcon, {
            assistiveText: "Filter",
            disabled: $data.isActivityHistoryEmpty,
            iconCategory: "utility",
            iconName: "settings",
            size: "x-small",
            title: "Filter",
            variant: "border-filled",
            onClick: _cache[0] || (_cache[0] = ($event) => $data.renderFilterPopover = true)
          }, null, 8, ["disabled"])
        ]),
        default: withCtx(() => [
          createVNode(_component_ActivityHistory, {
            ref: "activityHistory",
            history: $data.history,
            embedLinks: _ctx.$props.embedLinks,
            parentId: _ctx.$props.parentId,
            userId: _ctx.$props.userId,
            sort: $data.sort,
            class: "slds-m-top_small",
            onInitialized: $options.onInitialized
          }, null, 8, ["history", "embedLinks", "parentId", "userId", "sort", "onInitialized"]),
          $data.renderFilterPopover ? (openBlock(), createBlock(_component_ActivityHistoryOptionsPopover, {
            key: 0,
            history: $data.history,
            sort: $data.sort,
            onApply: $options.applyFilters,
            onClose: _cache[1] || (_cache[1] = ($event) => $data.renderFilterPopover = false)
          }, null, 8, ["history", "sort", "onApply"])) : createCommentVNode("", true)
        ]),
        _: 1
      });
    }
    const ActivityHistoryAccordionItem = /* @__PURE__ */ _export_sfc(_sfc_main$_, [["render", _sfc_render$_]]);
    const Views = Object.freeze({
      TEMPLATES: "templates",
      LIST: "list",
      CRM: "crm",
      CSV: "csv"
    });
    const PlanningElements_vue_vue_type_style_index_0_scoped_9048cf30_lang = "";
    const _sfc_main$Z = {
      name: "PlanningElements",
      components: {
        Accordion,
        AccordionItem,
        ActionMenu,
        ActionMenuItem,
        Layout,
        LayoutItem,
        SLDSButton
      },
      created() {
        SPM.Components.PlanningElements = this;
        this.$mitt.on("add-new-metric", (options) => this.onNewMetric(options));
        this.$mitt.on("add-new-assignment-object", (options) => this.onNewAssignmentObject(options));
      },
      unmounted() {
        this.$mitt.off("add-new-metric", this.onNewMetric);
        this.$mitt.off("add-new-assignment-object", this.onNewAssignmentObject);
      },
      methods: {
        onNewMetric({ allowTemplateCards = true }) {
          SPM.Components.Root.openModal("allocationMetrics", {
            allowTemplateCards,
            callback: (metric, addAnother) => {
              this.$store.toast({ message: `Allocation Metric "${metric.Name}" was created.`, duration: 2500, state: "success" });
              this.refreshHierarchyActivity({ type: "create", metric });
              if (addAnother) {
                this.onNewMetric({ allowTemplateCards: false });
              }
              this.$refs["metrics-accordion-item"].doOpen();
            },
            kondo: true
          });
        },
        onEditMetric(metric) {
          SPM.Components.Root.openModal("allocationMetrics", {
            callback: (metric2) => {
              this.$store.toast({ message: `Allocation Metric "${metric2.Name}" was updated.`, duration: 2500, state: "success" });
              this.refreshHierarchyActivity({ type: "update", metric: metric2 });
            },
            metric
          });
        },
        onDeleteMetric(metric) {
          SPM.Components.Root.openModal("confirmDelete", {
            delete: async () => {
              const result = {};
              try {
                const salesNodeMetricToDelete = this.$store.plan.sfsp__SalesNodeMetrics__r.find((node) => node.sfsp__SalesMetric__c === metric.Id);
                const response = await SPM.Utils.Apex.invoke("UpsertSObjects", [
                  [
                    {
                      Id: metric.Id,
                      sfsp__SalesPlan__c: ""
                    },
                    {
                      Id: salesNodeMetricToDelete.Id,
                      sfsp__SalesPlan__c: ""
                    }
                  ],
                  true
                ]);
                result.success = response.length === 2;
                await insertActivities([{
                  name: metric.Name,
                  parentId: this.$store.plan.Id,
                  recordType: ActivityRecordTypes.METRIC,
                  subtype: ActivitySubtypes.DELETE,
                  type: ActivityTypes.MANAGEMENT
                }]);
              } catch (ex) {
                this.$store.toast({ message: `Allocation Metric "${metric.Name}" was not deleted.`, duration: null, state: "error" });
                result.error = ex.message;
                throw ex;
              }
              return result;
            },
            callback: () => {
              this.$store.toast({ message: `Allocation Metric "${metric.Name}" was deleted.`, duration: 2500 });
              this.refreshHierarchyActivity({ type: "delete", metric });
            },
            loadingMsg: "Deleting Allocation Metric...",
            textContent: `Are you sure you want to delete metric <strong>${SPM.Utils.Str.sanitizeHTML(metric.Name)}</strong>? This action cannot be undone.`,
            title: "Delete Metric"
          });
        },
        onDeleteAssignmentObject(assignmentObject) {
          SPM.Components.Root.openModal("confirmDelete", {
            delete: async () => {
              const result = {};
              try {
                const response = await SPM.Utils.Apex.invoke("UpsertSObjects", [
                  [
                    {
                      Id: assignmentObject.Id,
                      sfsp__SalesPlan__c: ""
                    }
                  ],
                  true
                ]);
                result.success = response.length === 1;
                await insertActivities([{
                  description: `Deleted Assignment Object ${assignmentObject.Name} from plan ${this.$store.plan.Name}`,
                  name: assignmentObject.Name,
                  parentId: this.$store.plan.Id,
                  recordType: ActivityRecordTypes.ASSIGNMENT,
                  subtype: ActivitySubtypes.DELETE,
                  type: ActivityTypes.MANAGEMENT
                }]);
              } catch (ex) {
                this.$store.toast({ message: `Assignment Object "${assignmentObject.Name}" was not deleted.`, duration: null, state: "error" });
                result.error = ex.message;
                throw ex;
              }
              return result;
            },
            callback: () => {
              this.refreshHierarchyActivity({ type: "delete", assignmentObject });
            },
            loadingMsg: "Deleting Assignment Object...",
            textContent: `Are you sure you want to delete assignment object <strong>${SPM.Utils.Str.sanitizeHTML(assignmentObject.Name)}</strong>? This action cannot be undone.`,
            title: `Remove ${assignmentObject.Name}`
          });
        },
        onDeleteBoundary(boundary) {
          SPM.Components.Root.openModal("confirmDelete", {
            delete: async () => {
              const result = {};
              try {
                const boundaryObjectIdsToDelete = [];
                const salesBoundaries = await SPM.Utils.Rest.invoke("Query", { query: `SELECT Id FROM sfsp__SalesBoundary__c WHERE Id = '${boundary.Id}'` });
                if (salesBoundaries.length)
                  boundaryObjectIdsToDelete.push(...salesBoundaries);
                const salesNodesBoundaries = await SPM.Utils.Rest.invoke("Query", { query: `SELECT Id FROM sfsp__SalesNodeBoundary__c WHERE sfsp__SalesBoundary__c = '${boundary.Id}' OR Id = '${boundary.Id}'` });
                if (salesNodesBoundaries.length)
                  boundaryObjectIdsToDelete.push(...salesNodesBoundaries);
                const salesNodesBoundariesRules = salesNodesBoundaries.length ? await SPM.Utils.Rest.invoke("Query", { query: `SELECT Id FROM sfsp__SalesNodeRule__c WHERE sfsp__SalesNodeBoundary__c IN (${salesNodesBoundaries.map((sb) => `'${sb.Id}'`).join(", ")})` }) : [];
                if (salesNodesBoundariesRules.length)
                  boundaryObjectIdsToDelete.push(...salesNodesBoundariesRules);
                await SPM.Utils.CRM.delete({ records: boundaryObjectIdsToDelete });
                result.success = true;
                await insertActivities([{
                  description: `Deleted Boundary ${boundary.Name} from plan ${this.$store.plan.Name}`,
                  name: boundary.Name,
                  parentId: this.$store.plan.Id,
                  recordType: ActivityRecordTypes.ASSIGNMENT,
                  subtype: ActivitySubtypes.DELETE,
                  type: ActivityTypes.MANAGEMENT
                }]);
              } catch (ex) {
                this.$store.toast({ message: `Boundary "${boundary.Name}" was not deleted.`, duration: null, state: "error" });
                result.error = ex.message;
                throw ex;
              }
              return result;
            },
            callback: () => {
              this.$store.toast({ message: `Boundary "${boundary.Name}" was deleted.`, duration: 2500 });
              this.refreshHierarchyActivity({ type: "delete", boundary });
            },
            loadingMsg: "Deleting Boundary...",
            textContent: `You are removing boundary <strong>${boundary.Name}</strong> and will no longer be available for use in this Sales Plan. Boundary-based assignment rules and their current assignments may be altered or lost. This action cannot be undone.`,
            title: `Remove ${boundary.Name}`
          });
        },
        onImportHierarchy() {
          if (this.$store.rootNode.children.length > 0)
            return;
          SPM.Components.Root.openModal("importHierarchy");
        },
        onManageHierarchyReferenceData() {
          const planId = this.$store.plan.Id;
          SPM.Components.Root.openModal("hierarchyReferenceData", { planId });
        },
        onManageReferenceData(assignmentObject) {
          SPM.Components.Root.openModal("referenceData", {
            assignmentObject,
            view: Views.LIST,
            callback: async (assignment, addAnother) => {
              this.refreshHierarchyActivity({ type: "update", assignmentObject: assignment });
            }
          });
        },
        onNewAssignmentObject({ modalView = Views.TEMPLATES }) {
          SPM.Components.Root.openModal("referenceData", {
            callback: async (assignment, addAnother) => {
              this.refreshHierarchyActivity({ type: "create", assignmentObject: assignment });
              if (addAnother) {
                this.onNewAssignmentObject({ modalView: Views.CRM });
              }
              this.$refs["assignment-accordion-item"].doOpen();
            },
            view: modalView,
            kondo: true
          });
        },
        onRefreshAssignmentObject() {
          SPM.Components.Root.openModal("refreshAssignmentObject", {
            callback: async (assignmentObjects) => {
              assignmentObjects.forEach((obj) => {
                const assignmentObject = this.$store.plan.sfsp__SalesAssignmentObjects__r.find((o) => o.Id === obj.Id);
                this.refreshHierarchyActivity({ type: "update", assignmentObject });
              });
            }
          });
        },
        onManageBoundaries() {
          SPM.Components.Root.openModal("geoBoundaries", {
            plan: this.$store.plan,
            node: this.$store.rootNode,
            callback: async (boundaryRecords) => {
              try {
                if (this.$store.salesAsyncJobs.length > 0) {
                  await SPM.Utils.Async.forEachParallel(this.$store.plan.sfsp__SalesAssignmentObjects__r, async (a) => {
                    const options = { type: "load", assignmentObject: a };
                    await SPM.Utils.CRMA.checkDatasets(a, options);
                  }, 5);
                }
                this.$store.salesBoundaries.push(...boundaryRecords);
                const existingNodeBoundariesToUpdate = [];
                try {
                  const nodeBoundaryObjects = SPM.Utils.Node.getBoundaryObjects({ node: this.$store.rootNode, nodeMap: this.$store.nodeMap, includeDescendants: true });
                  for (const boundary of boundaryRecords) {
                    existingNodeBoundariesToUpdate.push(
                      ...nodeBoundaryObjects.filter((b) => b.containerSetId === boundary.sfsp__ContainerSet__c && b.includesPoints === boundary.sfsp__IncludePoints__c).map((e) => ({
                        Id: e.id,
                        sfsp__SalesBoundary__c: boundary.Id
                      }))
                    );
                  }
                  await SPM.Utils.CRM.upsert({ records: existingNodeBoundariesToUpdate });
                } catch (e) {
                  this.$store.toast({ message: "Issue converting existing node boundaries to plan managed boundaries.", state: "warning", duration: null });
                }
                this.$store.toast({ message: "Boundaries were successfully updated", duration: 2500 });
                if (existingNodeBoundariesToUpdate.length) {
                  this.refreshHierarchyActivity({ type: "update", boundary: boundaryRecords });
                }
              } catch (e) {
                this.$store.toast({ message: "Boundaries failed to update", state: "error", duration: null });
              }
            }
          });
        },
        async refreshHierarchyActivity(options) {
          this.$mitt.emit("refresh-activity-history");
          this.$mitt.emit("refresh-hierarchy-table", options);
        }
      }
    };
    function _sfc_render$Z(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ActionMenuItem = resolveComponent("ActionMenuItem");
      const _component_ActionMenu = resolveComponent("ActionMenu");
      const _component_AccordionItem = resolveComponent("AccordionItem");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_LayoutItem = resolveComponent("LayoutItem");
      const _component_Layout = resolveComponent("Layout");
      const _component_Accordion = resolveComponent("Accordion");
      return openBlock(), createBlock(_component_Accordion, {
        class: "slds-box slds-m-vertical_small slds-p-around_none",
        exclusive: ""
      }, {
        default: withCtx(() => [
          createVNode(_component_AccordionItem, {
            ref: "hierarcy-accordion-item",
            alwaysShowOverflow: "",
            disabled: "",
            title: "Hierarchy"
          }, {
            overflow: withCtx(() => [
              createVNode(_component_ActionMenu, {
                id: "hierarchy-overflow-actions",
                buttonIconSize: "x-small"
              }, {
                default: withCtx(() => [
                  _ctx.$store.isEditor ? (openBlock(), createBlock(_component_ActionMenuItem, {
                    key: 0,
                    disabled: _ctx.$store.rootNode.children.length > 0,
                    label: "Import",
                    onClick: $options.onImportHierarchy
                  }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true),
                  createVNode(_component_ActionMenuItem, {
                    label: _ctx.$store.isEditor ? "Manage Reference Data" : "View Reference Data",
                    onClick: $options.onManageHierarchyReferenceData
                  }, null, 8, ["label", "onClick"])
                ]),
                _: 1
              })
            ]),
            _: 1
          }, 512),
          createVNode(_component_AccordionItem, {
            id: "assignment-objects",
            ref: "assignment-accordion-item",
            alwaysShowOverflow: "",
            title: `Assignment Objects (${_ctx.$store.plan.sfsp__SalesAssignmentObjects__r.length})`,
            disabled: _ctx.$store.plan.sfsp__SalesAssignmentObjects__r.length === 0
          }, {
            overflow: withCtx(() => [
              _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_SLDSButton, {
                key: 0,
                class: normalizeClass({ "slds-m-right_x-small": _ctx.$store.plan.sfsp__SalesAssignmentObjects__r.length }),
                id: "add-assignment-object-button",
                label: "Add",
                disabled: _ctx.$store.salesAsyncJobs.some((a) => a.sfsp__Type__c === "Add Geo Boundaries"),
                style: { "line-height": "1rem" },
                variant: "base",
                onClick: $options.onNewAssignmentObject
              }, null, 8, ["class", "disabled", "onClick"])) : createCommentVNode("", true),
              (_ctx.$store.isAdmin || _ctx.$store.isManager) && _ctx.$store.plan.sfsp__SalesAssignmentObjects__r.length ? (openBlock(), createBlock(_component_ActionMenu, {
                key: 1,
                id: "assignment-object-menu",
                buttonIconSize: "x-small"
              }, {
                default: withCtx(() => [
                  createVNode(_component_ActionMenuItem, {
                    disabled: _ctx.$store.salesAsyncJobs.length > 0,
                    label: "Refresh Data",
                    onClick: $options.onRefreshAssignmentObject
                  }, null, 8, ["disabled", "onClick"])
                ]),
                _: 1
              })) : createCommentVNode("", true)
            ]),
            default: withCtx(() => [
              createVNode(_component_Layout, { vertical: "" }, {
                default: withCtx(() => [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$store.plan.sfsp__SalesAssignmentObjects__r, (assignmentObject) => {
                    return openBlock(), createBlock(_component_Layout, {
                      key: assignmentObject.Id,
                      class: "slds-p-vertical_xx-small",
                      spread: ""
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_LayoutItem, {
                          id: `${assignmentObject.sfsp__Label__c.replaceAll(" ", "-").toLowerCase()}-object`,
                          class: "slds-truncate slds-p-right_medium",
                          style: { "font-weight": "300" }
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(assignmentObject.sfsp__Label__c), 1)
                          ]),
                          _: 2
                        }, 1032, ["id"]),
                        createVNode(_component_ActionMenu, {
                          id: `manage-${assignmentObject.sfsp__Label__c.replaceAll(" ", "-").toLowerCase()}-object`,
                          buttonIconSize: "x-small"
                        }, {
                          default: withCtx(() => [
                            createVNode(_component_ActionMenuItem, {
                              label: _ctx.$store.isEditor ? "Manage Reference Fields" : "View Reference Fields",
                              onClick: ($event) => $options.onManageReferenceData(assignmentObject)
                            }, null, 8, ["label", "onClick"]),
                            _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_ActionMenuItem, {
                              key: 0,
                              label: "Remove Assignment Object",
                              disabled: _ctx.$store.salesAsyncJobs.some((a) => a.sfsp__SalesAssignmentObject__c === assignmentObject.Id),
                              class: "spm-action-menu-item-delete",
                              onClick: ($event) => $options.onDeleteAssignmentObject(assignmentObject)
                            }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true)
                          ]),
                          _: 2
                        }, 1032, ["id"])
                      ]),
                      _: 2
                    }, 1024);
                  }), 128))
                ]),
                _: 1
              })
            ]),
            _: 1
          }, 8, ["title", "disabled"]),
          createVNode(_component_AccordionItem, {
            id: "boundaries_accordion_item",
            ref: "boundaries-accordion-item",
            alwaysShowOverflow: "",
            title: `Boundaries (${_ctx.$store.salesBoundaries.length})`,
            disabled: _ctx.$store.salesBoundaries.length === 0
          }, {
            overflow: withCtx(() => [
              _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_SLDSButton, {
                key: 0,
                id: "boundary_manage_btn",
                label: "Add",
                disabled: _ctx.$store.salesAsyncJobs.length > 0 || _ctx.$store.plan.sfsp__SalesAssignmentObjects__r.length === 0,
                style: { "line-height": "1rem" },
                variant: "base",
                onClick: $options.onManageBoundaries
              }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true)
            ]),
            default: withCtx(() => [
              createVNode(_component_Layout, { vertical: "" }, {
                default: withCtx(() => [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$store.salesBoundaries, (boundary) => {
                    return openBlock(), createBlock(_component_Layout, {
                      id: `${boundary.sfsp__ContainerSet__c}`,
                      key: boundary.id,
                      class: "slds-p-vertical_xx-small",
                      spread: ""
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_LayoutItem, {
                          class: "slds-truncate slds-p-right_medium",
                          style: { "font-weight": "300" }
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(boundary.Name), 1)
                          ]),
                          _: 2
                        }, 1024),
                        _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_ActionMenu, {
                          key: 0,
                          buttonIconSize: "x-small"
                        }, {
                          default: withCtx(() => [
                            createVNode(_component_ActionMenuItem, {
                              label: "Delete",
                              class: "spm-action-menu-item-delete",
                              onClick: ($event) => $options.onDeleteBoundary(boundary)
                            }, null, 8, ["onClick"])
                          ]),
                          _: 2
                        }, 1024)) : createCommentVNode("", true)
                      ]),
                      _: 2
                    }, 1032, ["id"]);
                  }), 128))
                ]),
                _: 1
              })
            ]),
            _: 1
          }, 8, ["title", "disabled"]),
          createVNode(_component_AccordionItem, {
            id: "allocation-metrics",
            ref: "metrics-accordion-item",
            alwaysShowOverflow: "",
            title: `Allocation Metrics (${_ctx.$store.plan.sfsp__SalesMetrics__r.length})`,
            disabled: _ctx.$store.plan.sfsp__SalesMetrics__r.length === 0
          }, {
            overflow: withCtx(() => [
              _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_SLDSButton, {
                key: 0,
                id: "add-metric",
                disabled: _ctx.$store.plan.sfsp__SalesMetrics__r.length >= 5,
                label: "Add",
                style: { "line-height": "1rem" },
                variant: "base",
                onClick: $options.onNewMetric
              }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true)
            ]),
            default: withCtx(() => [
              createVNode(_component_Layout, { vertical: "" }, {
                default: withCtx(() => [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$store.plan.sfsp__SalesMetrics__r, (metric) => {
                    return openBlock(), createBlock(_component_Layout, {
                      key: metric.Id,
                      class: "slds-p-vertical_xx-small",
                      spread: ""
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_LayoutItem, {
                          id: `${metric.Name.toLowerCase()}-metric`,
                          class: "slds-truncate slds-p-right_medium",
                          style: { "font-weight": "300" }
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(metric.Name), 1)
                          ]),
                          _: 2
                        }, 1032, ["id"]),
                        _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_ActionMenu, {
                          key: 0,
                          id: `manage-${metric.Name.toLowerCase()}-metric`,
                          buttonIconSize: "x-small"
                        }, {
                          default: withCtx(() => [
                            createVNode(_component_ActionMenuItem, {
                              label: "Edit",
                              onClick: ($event) => $options.onEditMetric(metric)
                            }, null, 8, ["onClick"]),
                            createVNode(_component_ActionMenuItem, {
                              label: "Delete",
                              class: "spm-action-menu-item-delete",
                              onClick: ($event) => $options.onDeleteMetric(metric)
                            }, null, 8, ["onClick"])
                          ]),
                          _: 2
                        }, 1032, ["id"])) : createCommentVNode("", true)
                      ]),
                      _: 2
                    }, 1024);
                  }), 128))
                ]),
                _: 1
              })
            ]),
            _: 1
          }, 8, ["title", "disabled"])
        ]),
        _: 1
      });
    }
    const PlanningElements = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["render", _sfc_render$Z], ["__scopeId", "data-v-9048cf30"]]);
    const LeftPanel_vue_vue_type_style_index_0_scoped_f26981ad_lang = "";
    const _sfc_main$Y = {
      name: "OverviewLeftPanel",
      components: {
        // slds
        ActionMenu,
        ActionMenuItem,
        Card,
        SLDSButton,
        // local
        Accordion,
        AccordionItem,
        ActivityHistoryAccordionItem,
        PlanningElements
      },
      computed: {
        computedPeriodLabel() {
          const period = this.$store.periods.find((p2) => p2.Id === this.$store.plan.sfsp__Period__c);
          if (!period)
            return "";
          return `${period.FullyQualifiedLabel} (${this.$F("DateTime", new Date(period.StartDate), { month: "short", year: "numeric" })} - ${this.$F("DateTime", new Date(period.EndDate), { month: "short", year: "numeric" })})`;
        }
      },
      created() {
        SPM.Components.LeftPanel = this;
        this.currentUserId = SPM.currentUser.Id;
      },
      methods: {
        openShareModal() {
          SPM.Components.Root.openModal("sharePlan", {
            callback: ({ invitedToastMsg, updatedToastMsg, removedToastMsg, sharedWithRecords }) => {
              if (invitedToastMsg)
                this.$mitt.emit("toast", { message: invitedToastMsg, duration: 2500 });
              if (updatedToastMsg)
                this.$mitt.emit("toast", { message: updatedToastMsg, duration: 2500 });
              if (removedToastMsg)
                this.$mitt.emit("toast", { message: removedToastMsg, duration: 2500 });
              this.$mitt.emit("refresh-hierarchy-table", { sharedWithRecords });
              this.$mitt.emit("refresh-activity-history");
            }
          });
        },
        openEditModal() {
          SPM.Components.Root.openModal("salesPlan", {
            edit: true,
            callback: ({ plan }) => {
              this.$mitt.emit("toast", { message: `${plan.Name} successfully updated.`, duration: 2500 });
              this.$store.$patch({ plan: { ...this.$store.plan, ...plan } });
              this.$mitt.emit("refresh-activity-history");
            }
          });
        },
        openDeleteConfirmModal() {
          SPM.Components.Root.openModal("confirmDelete", {
            delete: async () => {
              const result = {};
              try {
                const response = await SPM.Utils.Apex.invoke("UpsertSObjects", [
                  [{
                    Id: this.$store.plan.Id,
                    sfsp__Status__c: "Deleted"
                  }],
                  true
                ]);
                result.success = response.length === 1;
                await insertActivities([{
                  name: this.$store.plan.Name,
                  parentId: this.$store.plan.Id,
                  recordType: ActivityRecordTypes.PLAN,
                  subtype: ActivitySubtypes.DELETE,
                  type: ActivityTypes.MANAGEMENT
                }]);
              } catch (ex) {
                result.error = ex.message;
                throw ex;
              }
              return result;
            },
            callback: () => {
              const { Name } = this.$store.plan;
              SPM.Components.Root.loadPlan("", () => {
                this.$mitt.emit("toast", { message: `${Name} successfully deleted.`, duration: 2500 });
              });
            },
            textContent: `Are you sure you want to delete plan <strong>${SPM.Utils.Str.sanitizeHTML(this.$store.plan.Name)}</strong>? All plan data, planning elements and associated scenarios will be deleted for all users. This action cannot be undone.`,
            title: "Delete Plan"
          });
        }
      }
    };
    const _hoisted_1$X = ["title"];
    const _hoisted_2$V = {
      key: 0,
      id: "plan-period"
    };
    const _hoisted_3$L = {
      class: "slds-p-around_medium slds-grid slds-grid_vertical",
      style: { "word-wrap": "break-word" }
    };
    const _hoisted_4$F = {
      key: 0,
      id: "plan-description",
      class: "slds-p-bottom_medium"
    };
    const _hoisted_5$B = { key: 1 };
    function _sfc_render$Y(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ActionMenuItem = resolveComponent("ActionMenuItem");
      const _component_ActionMenu = resolveComponent("ActionMenu");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_PlanningElements = resolveComponent("PlanningElements");
      const _component_AccordionItem = resolveComponent("AccordionItem");
      const _component_ActivityHistoryAccordionItem = resolveComponent("ActivityHistoryAccordionItem");
      const _component_Accordion = resolveComponent("Accordion");
      const _component_Card = resolveComponent("Card");
      return openBlock(), createBlock(_component_Card, { class: "spm-left-panel" }, {
        title: withCtx(() => [
          createBaseVNode("h2", {
            id: "plan-name",
            class: "slds-text-heading_large slds-truncate",
            title: _ctx.$store.plan.Name
          }, toDisplayString(_ctx.$store.plan.Name), 9, _hoisted_1$X),
          $options.computedPeriodLabel ? (openBlock(), createElementBlock("div", _hoisted_2$V, toDisplayString($options.computedPeriodLabel), 1)) : createCommentVNode("", true)
        ]),
        "header-content": withCtx(() => [
          _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_ActionMenu, {
            key: 0,
            buttonIconSize: "small",
            showMoreLabel: "Plan Actions",
            style: { "margin-top": "0.5rem" }
          }, {
            default: withCtx(() => [
              createVNode(_component_ActionMenuItem, {
                label: "Edit Details",
                onClick: $options.openEditModal
              }, null, 8, ["onClick"]),
              createVNode(_component_ActionMenuItem, {
                label: "Delete Plan",
                onClick: $options.openDeleteConfirmModal
              }, null, 8, ["onClick"])
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ]),
        body: withCtx(() => {
          var _a2;
          return [
            createBaseVNode("div", _hoisted_3$L, [
              ((_a2 = _ctx.$store.plan.sfsp__Description__c) == null ? void 0 : _a2.length) > 0 ? (openBlock(), createElementBlock("span", _hoisted_4$F, toDisplayString(_ctx.$store.plan.sfsp__Description__c), 1)) : createCommentVNode("", true),
              _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createElementBlock("span", _hoisted_5$B, [
                createVNode(_component_SLDSButton, {
                  id: "openShareModal",
                  label: "Share Plan",
                  variant: "neutral",
                  disabled: !_ctx.$store.hasSalesPlanningTemplateApp,
                  onClick: $options.openShareModal
                }, null, 8, ["disabled", "onClick"])
              ])) : createCommentVNode("", true)
            ]),
            createVNode(_component_Accordion, {
              bordered: "",
              exclusive: ""
            }, {
              default: withCtx(() => [
                createVNode(_component_AccordionItem, {
                  title: "Planning Elements",
                  open: ""
                }, {
                  default: withCtx(() => [
                    createVNode(_component_PlanningElements)
                  ]),
                  _: 1
                }),
                createVNode(_component_ActivityHistoryAccordionItem, {
                  parentId: _ctx.$store.plan.Id,
                  userId: _ctx.currentUserId
                }, null, 8, ["parentId", "userId"])
              ]),
              _: 1
            })
          ];
        }),
        _: 1
      });
    }
    const LeftPanel = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["render", _sfc_render$Y], ["__scopeId", "data-v-f26981ad"]]);
    const _sfc_main$X = {
      name: "DataTableRow",
      components: {
        ActionMenu,
        ActionMenuItem,
        Badge,
        ButtonIcon,
        Checkbox,
        ConditionalWrapper,
        Icon
      },
      inject: [
        "rootProps",
        "rootEmit"
      ],
      props: [
        "childIndex",
        "depth",
        "parentRef",
        "row"
      ],
      data() {
        return {
          indexOfColumnBeingEdited: null
        };
      },
      methods: {
        handleRowToggleClick() {
          if (this.$props.row.loading)
            return;
          if (this.$props.row.loaded === false) {
            this.rootEmit("load-row", this.$props.row);
            return;
          }
          this.$props.row.expanded = !this.$props.row.expanded;
        },
        handleCellEdit(event, index) {
          this.indexOfColumnBeingEdited = index;
          const cell = event.path.find((el) => ["td", "th"].includes(el.localName) && el.className.includes("slds-cell-edit"));
          this.$nextTick(() => cell.querySelector("input").focus());
        },
        handleRowAction(action) {
          this.rootEmit(
            "row-action",
            {
              action,
              ...this.$props
            }
          );
        },
        updateCellValue(e) {
          const cellValue = e.path[0].value;
          this.$props.row.data[this.indexOfColumnBeingEdited].value = cellValue;
          this.rootEmit("update-cell", { value: cellValue, row: this.$props.row, columnIndex: this.indexOfColumnBeingEdited });
          this.$nextTick(() => {
            if (!this.$props.row.data[this.indexOfColumnBeingEdited].error)
              this.indexOfColumnBeingEdited = null;
          });
        },
        resetEditMode() {
          this.indexOfColumnBeingEdited = null;
        }
      }
    };
    const _hoisted_1$W = ["aria-selected", "aria-level"];
    const _hoisted_2$U = {
      key: 0,
      class: "slds-text-align_center slds-cell_action-mode",
      role: "gridcell"
    };
    const _hoisted_3$K = ["title"];
    const _hoisted_4$E = {
      key: 0,
      "aria-describedby": "dialog-body-id-1",
      class: "slds-popover slds-popover slds-popover_edit",
      role: "dialog",
      style: { "position": "absolute", "top": "0px", "left": "0.0625rem" }
    };
    const _hoisted_5$A = {
      id: "dialog-body-id-1",
      class: "slds-popover__body"
    };
    const _hoisted_6$v = { class: "slds-media" };
    const _hoisted_7$r = { class: "slds-media__body" };
    const _hoisted_8$p = ["for"];
    const _hoisted_9$n = { class: "slds-assistive-text" };
    const _hoisted_10$j = { class: "slds-form-element__control slds-grow" };
    const _hoisted_11$g = ["id", "value"];
    const _hoisted_12$d = {
      key: 0,
      class: "slds-form-element__help"
    };
    const _hoisted_13$d = {
      key: 1,
      class: "slds-cell_action-mode",
      role: "gridcell"
    };
    function _sfc_render$X(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Badge = resolveComponent("Badge");
      const _component_Icon = resolveComponent("Icon");
      const _component_ConditionalWrapper = resolveComponent("ConditionalWrapper");
      const _component_ActionMenuItem = resolveComponent("ActionMenuItem");
      const _component_ActionMenu = resolveComponent("ActionMenu");
      return !$props.row.hidden ? (openBlock(), createElementBlock("tr", {
        ref: "row",
        key: _ctx.$props.row.id,
        "aria-selected": $options.rootProps.multiselectable ? _ctx.$props.row.selected || "false" : null,
        "aria-level": _ctx.$props.depth ? _ctx.$props.depth : null,
        class: normalizeClass([{
          "slds-is-selected": _ctx.$props.row.selected,
          "slds-is-edited": _ctx.$props.row.dirty,
          ...($props.row.class || []).reduce((map2, className) => {
            map2[className] = true;
            return map2;
          }, {})
        }, "slds-hint-parent"])
      }, [
        $options.rootProps.multiselectable ? (openBlock(), createElementBlock("td", _hoisted_2$U, [
          createVNode(_component_Checkbox, {
            modelValue: _ctx.$props.row.selected,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.$props.row.selected = $event),
            labels: { name: `Select item ${_ctx.$props.childIndex + 1}` },
            hideLabel: "",
            onClick: _cache[1] || (_cache[1] = withModifiers((e) => _ctx.$emit("select-row", { e, row: $props.row }), ["prevent"]))
          }, null, 8, ["modelValue", "labels"])
        ])) : createCommentVNode("", true),
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.row.data, (data, i2) => {
          var _a3, _b, _c, _d, _e, _f;
          return openBlock(), createBlock(resolveDynamicComponent(i2 === 0 ? "th" : "td"), {
            key: `'Root' + ${i2}`,
            "data-label": (_a3 = $options.rootProps.columns[i2]) == null ? void 0 : _a3.name,
            class: normalizeClass({
              "slds-tree__item": i2 === 0 && $options.rootProps.tree,
              "slds-cell-edit": (_b = $options.rootProps) == null ? void 0 : _b.editableColumnIndices.includes(i2),
              "slds-is-edited": data == null ? void 0 : data.dirty,
              "slds-has-error": data == null ? void 0 : data.error,
              "slds-text-align_center": ((_c = $options.rootProps.columns[i2]) == null ? void 0 : _c.alignment) === "center",
              "slds-text-align_left": ((_d = $options.rootProps.columns[i2]) == null ? void 0 : _d.alignment) === "left" || ((_e = $options.rootProps.columns[i2]) == null ? void 0 : _e.alignment) === void 0,
              "slds-text-align_right": ((_f = $options.rootProps.columns[i2]) == null ? void 0 : _f.alignment) === "right"
            }),
            role: i2 > 0 && $options.rootProps.tree ? "gridcell" : null,
            scope: i2 === 0 ? "row" : null
          }, {
            default: withCtx(() => {
              var _a4;
              return [
                createVNode(_component_ConditionalWrapper, {
                  class: normalizeClass(["slds-grid slds-grid_align-spread", { "slds-grow": i2 === 0 }]),
                  element: "span",
                  style: { "width": "100%" },
                  active: (_a4 = $options.rootProps) == null ? void 0 : _a4.editableColumnIndices.includes(i2)
                }, {
                  default: withCtx(() => {
                    var _a5, _b2;
                    return [
                      createVNode(_component_ConditionalWrapper, {
                        element: "span",
                        class: "slds-grid slds-truncate",
                        active: i2 === 0 && ((_a5 = $options.rootProps) == null ? void 0 : _a5.editableColumnIndices.includes(i2))
                      }, {
                        default: withCtx(() => {
                          var _a6;
                          return [
                            $options.rootProps.tree && i2 === 0 ? (openBlock(), createBlock(_component_ButtonIcon, {
                              key: 0,
                              name: "expand-node-tree",
                              variant: "bare",
                              iconCategory: "utility",
                              iconName: _ctx.$props.row.loading ? "spinner" : _ctx.$props.row.expanded ? "chevrondown" : "chevronright",
                              size: "x-small",
                              class: normalizeClass(["slds-m-right_x-small", { "slds-is-disabled": _ctx.$props.row.loaded !== false && !((_a6 = _ctx.$props.row.children) == null ? void 0 : _a6.length) }]),
                              tabindex: "-1",
                              title: `Expand ${(data == null ? void 0 : data.type) === "anchor" ? data.value : data}`,
                              assistiveText: `Expand ${(data == null ? void 0 : data.type) === "anchor" ? data.value : data}`,
                              onClick: $options.handleRowToggleClick
                            }, null, 8, ["iconName", "class", "title", "assistiveText", "onClick"])) : createCommentVNode("", true),
                            (data == null ? void 0 : data.type) === "custom" ? renderSlot(_ctx.$slots, "cell", mergeProps({
                              key: 1,
                              column: $options.rootProps.columns[i2],
                              columnIndex: i2,
                              data
                            }, { ..._ctx.$props, $row: this })) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                              (data == null ? void 0 : data.type) === "badge" ? (openBlock(), createBlock(_component_Badge, {
                                key: 0,
                                theme: data.theme,
                                content: data.value
                              }, null, 8, ["theme", "content"])) : typeof data === "boolean" ? (openBlock(), createBlock(_component_Icon, {
                                key: 1,
                                category: "utility",
                                name: "check",
                                size: "xx-small"
                              })) : (openBlock(), createElementBlock("div", {
                                key: 2,
                                title: (data == null ? void 0 : data.type) === "anchor" ? data.value : data,
                                class: "slds-truncate"
                              }, [
                                createVNode(_component_ConditionalWrapper, mergeProps({
                                  tabindex: "-1",
                                  element: "a"
                                }, (data == null ? void 0 : data.attrs) || {}, {
                                  active: (data == null ? void 0 : data.type) === "anchor"
                                }), {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString((data == null ? void 0 : data.type) === "anchor" ? data.value : data), 1)
                                  ]),
                                  _: 2
                                }, 1040, ["active"])
                              ], 8, _hoisted_3$K))
                            ], 64))
                          ];
                        }),
                        _: 2
                      }, 1032, ["active"]),
                      ((_b2 = $options.rootProps) == null ? void 0 : _b2.editableColumnIndices.includes(i2)) ? (openBlock(), createBlock(_component_ButtonIcon, {
                        key: 0,
                        variant: "bare",
                        iconCategory: "utility",
                        iconClass: "slds-button__icon_hint slds-button__icon_edit",
                        iconName: data.locked ? "lock" : "edit",
                        size: "x-small",
                        class: "slds-cell-edit__button slds-m-left_x-small",
                        title: `Edit ${$options.rootProps.columns[i2].name} of ${(data == null ? void 0 : data.type) === "anchor" ? data.value : data}`,
                        assistiveText: `Edit ${$options.rootProps.columns[i2].name} of ${(data == null ? void 0 : data.type) === "anchor" ? data.value : data}`,
                        disabled: data.locked,
                        onClick: ($event) => $options.handleCellEdit($event, i2)
                      }, null, 8, ["iconName", "title", "assistiveText", "disabled", "onClick"])) : createCommentVNode("", true)
                    ];
                  }),
                  _: 2
                }, 1032, ["class", "active"]),
                i2 === $data.indexOfColumnBeingEdited ? (openBlock(), createElementBlock("section", _hoisted_4$E, [
                  createBaseVNode("div", _hoisted_5$A, [
                    createBaseVNode("div", _hoisted_6$v, [
                      createBaseVNode("div", _hoisted_7$r, [
                        createBaseVNode("div", {
                          class: normalizeClass(["slds-form-element slds-grid slds-wrap", { "slds-has-error": data.error }])
                        }, [
                          createBaseVNode("label", {
                            class: "slds-form-element__label slds-form-element__label_edit slds-no-flex",
                            for: `${$options.rootProps.columns[i2].name}-${i2}`
                          }, [
                            createBaseVNode("span", _hoisted_9$n, toDisplayString($options.rootProps.columns[i2].name), 1)
                          ], 8, _hoisted_8$p),
                          createBaseVNode("div", _hoisted_10$j, [
                            createBaseVNode("input", {
                              id: `${$options.rootProps.columns[i2].name}-${i2}`,
                              class: "slds-input",
                              type: "text",
                              value: data.value,
                              onBlur: _cache[2] || (_cache[2] = (...args) => $options.resetEditMode && $options.resetEditMode(...args)),
                              onKeydown: [
                                _cache[3] || (_cache[3] = withKeys(withModifiers((...args) => $options.resetEditMode && $options.resetEditMode(...args), ["stop"]), ["esc"])),
                                _cache[4] || (_cache[4] = withKeys(withModifiers(($event) => $options.updateCellValue($event), ["stop"]), ["enter"]))
                              ]
                            }, null, 40, _hoisted_11$g)
                          ]),
                          data.error ? (openBlock(), createElementBlock("div", _hoisted_12$d, toDisplayString(data.error), 1)) : createCommentVNode("", true)
                        ], 2)
                      ])
                    ])
                  ])
                ])) : createCommentVNode("", true)
              ];
            }),
            _: 2
          }, 1032, ["data-label", "class", "role", "scope"]);
        }), 128)),
        ((_a2 = _ctx.$props.row.actions) == null ? void 0 : _a2.length) ? (openBlock(), createElementBlock("td", _hoisted_13$d, [
          createVNode(_component_ActionMenu, { buttonIconSize: "x-small" }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.row.actions, (action, i2) => {
                return openBlock(), createBlock(_component_ActionMenuItem, {
                  key: i2,
                  label: action.label,
                  onClick: ($event) => $options.handleRowAction(action)
                }, null, 8, ["label", "onClick"]);
              }), 128))
            ]),
            _: 1
          })
        ])) : createCommentVNode("", true)
      ], 10, _hoisted_1$W)) : createCommentVNode("", true);
    }
    const Row = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["render", _sfc_render$X]]);
    const Node = {
      name: "DataTableTreeNode",
      components: {
        Row
      },
      props: [
        "depth",
        "parentRef",
        "row",
        "childIndex"
      ],
      render() {
        const children = [
          h(
            Row,
            {
              ...this.$props
            },
            {
              cell: (propsData) => this.$slots.cell ? this.$slots.cell(propsData) : null
            }
          )
        ];
        if (this.$props.row.children && this.$props.row.expanded) {
          this.$props.row.children.forEach((row, childIndex) => children.push(
            h(
              Node,
              {
                childIndex,
                depth: this.$props.depth + 1,
                parentRef: this.$props.row,
                row
              },
              {
                cell: (propsData) => this.$slots.cell ? this.$slots.cell(propsData) : null
              }
            )
          ));
        }
        return [children];
      }
    };
    const Tree$2 = {
      name: "DataTableTree",
      components: {
        Node
      },
      props: ["rows"],
      render() {
        const _default = this.$slots.default ? this.$slots.default() : null;
        return this.$props.rows.map((row, childIndex) => h(
          Node,
          {
            childIndex,
            depth: 0,
            parentRef: null,
            row
          },
          {
            cell: (propsData) => this.$slots.cell ? this.$slots.cell(propsData) : null
          }
        )).concat(_default);
      }
    };
    const TreeGroup = {
      name: "DataTableTreeGroup",
      components: {
        ActionMenu,
        ActionMenuItem,
        Checkbox
      },
      props: ["rows"],
      inject: ["rootEmit", "rootProps"],
      emits: ["select-row"],
      data() {
        return {
          maxDepth: 0
        };
      },
      watch: {
        rows: {
          handler() {
            this.maxDepth = 0;
          },
          deep: true
        }
      },
      render() {
        let renderingRow = false;
        const $rows = [];
        const traverse2 = (row, $row = h("tr", []), depth = 0) => {
          var _a2, _b, _c;
          let rowspan = 0;
          let $th;
          if ((_a2 = row.children) == null ? void 0 : _a2.length) {
            ++depth;
            if (depth > this.maxDepth) {
              this.maxDepth = depth;
            }
            if (!renderingRow) {
              renderingRow = true;
            }
            $th = h(
              "th",
              {
                class: row.selected || row.indeterminate ? "spm-data-table-selected-cell" : null,
                style: {
                  "background-color": "#f9f9fa",
                  "vertical-align": "top"
                }
              },
              [row.data[0]]
            );
            if (this.rootProps.multiselectable) {
              if (typeof row.selected === "undefined") {
                row.selected = false;
              }
              if (typeof row.indeterminate === "undefined") {
                row.indeterminate = false;
              }
              $th.children = [
                h(
                  "div",
                  { class: "slds-grid slds-grid_vertical-align-center" },
                  [
                    h(
                      Checkbox,
                      {
                        class: "slds-m-right_small",
                        disabled: row.disabled,
                        hideLabel: true,
                        indeterminate: row.indeterminate,
                        modelValue: row.selected,
                        onClick: withModifiers((e) => this.$emit("select-row", { row, e }), ["prevent"])
                      }
                    ),
                    h("div", [row.data[0]])
                  ]
                )
              ];
            }
            if (this.$slots.groupActions) {
              $th.children[0].children.push(this.$slots.groupActions({ row }));
            }
            $row.children.push($th);
            for (let i2 = 0; i2 < row.children.length; i2++) {
              if (!renderingRow) {
                $row = h("tr", []);
                renderingRow = true;
              }
              const { rowspan: aggregratedRowSpan } = traverse2(row.children[i2], $row, depth);
              rowspan += aggregratedRowSpan;
            }
            const $subtotal = h("tr", { class: "spm-subtotal-row" }, []);
            for (let i2 = 1; i2 < row.data.length; i2++) {
              $subtotal.children.push(
                h("td", { class: "spm-subtotal-cell" }, [row.data[i2]])
              );
            }
            $subtotal.children.unshift(
              h("th", { colspan: this.maxDepth - depth + 1 }, [
                h("span", { class: "spm-subtotal-cell" }, ["Subtotal"])
              ])
            );
            if ((_b = row.actions) == null ? void 0 : _b.length) {
              $subtotal.children.push(h("td"));
            }
            $th.props.rowspan = rowspan + 1;
            $rows.push($subtotal);
          } else {
            if (!renderingRow) {
              $row = h("tr", []);
            }
            const $th2 = h(
              "th",
              {
                class: row.selected || row.indeterminate ? "spm-data-table-selected-cell" : null,
                style: { "vertical-align": "top" }
              },
              [row.data[0]]
            );
            if (this.rootProps.multiselectable) {
              if (typeof row.selected === "undefined") {
                row.selected = false;
              }
              $th2.children = [
                h(
                  "div",
                  { class: "slds-grid slds-grid_vertical-align-center" },
                  [
                    h(
                      Checkbox,
                      {
                        disabled: row.disabled,
                        hideLabel: true,
                        class: "slds-m-right_small",
                        modelValue: row.selected,
                        onClick: withModifiers((e) => this.$emit("select-row", { row, e }), ["prevent"])
                      }
                    ),
                    h("div", [row.data[0]])
                  ]
                )
              ];
            }
            if (this.$slots.groupActions) {
              $th2.children[0].children.push(this.$slots.groupActions({ row }));
            }
            $row.children.push($th2);
            for (let i2 = 0; i2 < this.maxDepth - depth; i2++) {
              $row.children.push(h("td", ["-"]));
            }
            for (let i2 = 1; i2 < row.data.length; i2++) {
              $row.children.push(
                h("td", [row.data[i2]])
              );
            }
            if ((_c = row.actions) == null ? void 0 : _c.length) {
              $row.children.push(
                h(
                  "td",
                  {
                    class: "slds-cell_action-mode",
                    role: "gridcell"
                  },
                  [
                    h(
                      ActionMenu,
                      { buttonIconSize: "x-small" },
                      {
                        default: () => row.actions.map((action, index) => h(
                          ActionMenuItem,
                          {
                            key: index,
                            label: action.label,
                            click: this.onRowAction.bind(this, action, row)
                          }
                        ))
                      }
                    )
                  ]
                )
              );
            }
            renderingRow = false;
            $rows.push($row);
          }
          return {
            depth,
            rowspan: rowspan + 1
          };
        };
        this.$props.rows.forEach((row) => {
          traverse2(row);
        });
        return $rows;
      },
      methods: {
        onRowAction(action, row) {
          this.rootEmit(
            "row-action",
            {
              action,
              row
            }
          );
        }
      }
    };
    const DataTable_vue_vue_type_style_index_0_scoped_8116ab47_lang = "";
    const DataTable_vue_vue_type_style_index_1_lang = "";
    const __default__ = {
      name: "DataTable",
      components: {
        ActionMenu,
        ActionMenuItem,
        Checkbox,
        Icon,
        Layout,
        LayoutItem,
        Row,
        Tree: Tree$2,
        TreeGroup
      },
      provide() {
        return {
          rootProps: this.$props,
          rootEmit: (...args) => {
            this.$emit(args[0], ...args.slice(1));
          }
        };
      },
      props: {
        actions: Boolean,
        ariaLabel: {
          type: String,
          default: ""
        },
        bordered: Boolean,
        bufferCells: Boolean,
        columns: {
          type: Array,
          required: true
        },
        columnsBordered: Boolean,
        editableColumnIndices: {
          type: Array,
          default: () => []
        },
        fixed: Boolean,
        hideHeader: Boolean,
        sortable: Boolean,
        multiselectable: Boolean,
        resizable: Boolean,
        // TODO: Explore making a copy of this array to avoid directly manipulating rows
        rows: {
          type: Array,
          required: true
        },
        noRowHover: Boolean,
        selectAll: Boolean,
        fullHeader: Boolean,
        contentHeader: Boolean,
        summaryFooter: Boolean,
        summaryHeader: Boolean,
        tree: Boolean,
        treeGroup: Boolean,
        virtual: Boolean
      },
      emits: [
        "column-action",
        "row-action",
        "select-column",
        "select-row",
        "load-row",
        "update-cell",
        "column-sorted"
      ],
      data() {
        return {
          lastSelectedRow: null,
          selectAllState: "none",
          selectAllId: getGUID(),
          columnResizer: {},
          sortDirection: "",
          sortedColumnIndex: null,
          // virtual props
          rowHeight: 0,
          containerHeight: 0,
          visibleRowsStartIndex: 0
        };
      },
      computed: {
        computedRole() {
          if (this.$props.tree)
            return "treegrid";
          if (this.$props.multiselectable)
            return "grid";
          return null;
        },
        visibleRows() {
          return this.$props.virtual ? this.rows.slice(this.visibleRowsStartIndex, this.visibleRowsStartIndex + 200) : this.rows;
        },
        tableContainerPaddingTop() {
          return this.visibleRowsStartIndex * this.rowHeight;
        },
        tableContainerPaddingBottom() {
          return (this.rows.length - this.visibleRows.length) * this.rowHeight - this.tableContainerPaddingTop;
        },
        hasSelectableColumns() {
          return this.$props.columns.some((column) => column.selectable);
        },
        verticalHeaderCellPadding() {
          return this.$props.summaryHeader && this.hasSelectableColumns ? "0.75rem" : "0.5rem";
        },
        selectedPseudoElementTop() {
          return !this.hasSelectableColumns || !this.$props.summaryHeader ? "-4px" : 0;
        },
        selectedBorderRadius() {
          return this.$props.summaryHeader ? 0 : "2px";
        },
        selectedColumnBackgroundColor() {
          var _a2, _b;
          return ((_b = (_a2 = this.columns.find((c) => c.selected)) == null ? void 0 : _a2.icon) == null ? void 0 : _b.color) || "blue";
        }
      },
      watch: {
        "$props.rows": {
          handler(rows) {
            if (rows.length) {
              this.initColumnResizer();
              if (this.virtual) {
                this.$nextTick(() => {
                  this.rowHeight = this.$refs["row-0"][0].$refs.row.offsetHeight;
                  this.containerHeight = this.$refs.tableContainer.offsetHeight;
                });
              }
            }
            this.updateSelectAllState();
          },
          immediate: true
        }
      },
      methods: {
        async initColumnResizer() {
          if (!this.$props.resizable)
            return;
          await this.$nextTick();
          this.columnResizer = new ColumnResizer(this.$refs.table, {
            disable: !this.$props.resizable,
            innerGripHtml: "<div class='rangeGrip'></div>",
            removePadding: false,
            minWidth: 48
          });
        },
        async onSelectRow({ e, row }) {
          var _a2;
          const rowsToUpdate = [row];
          if (e.shiftKey && this.lastSelectedRow) {
            const rowsToConsider = ((_a2 = row == null ? void 0 : row.parent) == null ? void 0 : _a2.children) || this.rows;
            let selectedRowIndex = rowsToConsider.findIndex((r) => r === row);
            let currentIndex = rowsToConsider.findIndex((r) => r === this.lastSelectedRow);
            while (currentIndex !== -1 && currentIndex !== selectedRowIndex) {
              rowsToUpdate.push(rowsToConsider[currentIndex]);
              currentIndex += currentIndex > selectedRowIndex ? -1 : 1;
            }
          }
          this.lastSelectedRow = row;
          const newSelectionState = !row.selected && !row.indeterminate;
          rowsToUpdate.forEach((r) => {
            r.selected = newSelectionState;
            r.indeterminate = false;
            (function traverse2(child) {
              var _a3;
              (_a3 = child == null ? void 0 : child.children) == null ? void 0 : _a3.forEach((descendant) => {
                descendant.indeterminate = false;
                descendant.selected = newSelectionState;
                traverse2(descendant);
              });
            })(r);
          });
          let parent = row.parent;
          while (parent) {
            let hasSelected = false;
            let hasUnselected = false;
            parent.children.some((child) => {
              if (child.selected || child.indeterminate)
                hasSelected = true;
              if (!child.selected || child.indeterminate)
                hasUnselected = true;
              if (hasSelected && hasUnselected)
                return true;
            });
            parent.indeterminate = hasSelected && hasUnselected;
            parent.selected = hasSelected && !hasUnselected;
            parent = parent.parent;
          }
          this.updateSelectAllState();
          SPM.Utils.Browser.clearSelection();
        },
        onSelectAll() {
          const newSelectionState = this.selectAllState === "none";
          this.rows.forEach((row) => row.selected = newSelectionState);
          this.updateSelectAllState();
        },
        updateSelectAllState() {
          let hasSelected = false;
          let hasUnselected = false;
          this.rows.some((row) => {
            if (row.selected || row.indeterminate)
              hasSelected = true;
            if (!row.selected || row.indeterminate)
              hasUnselected = true;
            if (hasSelected && hasUnselected)
              return true;
          });
          this.selectAllState = hasSelected ? hasUnselected ? "some" : "all" : "none";
        },
        onScroll() {
          if (!this.$props.virtual)
            return;
          if (!this.$refs.tableContainer)
            return;
          const significantDrift = Math.abs(this.$refs.tableContainer.scrollTop - (this.lastScrollTop || 0)) > this.rowHeight * 20;
          if (!significantDrift)
            return;
          this.lastScrollTop = this.$refs.tableContainer.scrollTop;
          this.visibleRowsStartIndex = Math.max(0, Math.floor(this.$refs.tableContainer.scrollTop / this.rowHeight) - 100);
        },
        onColumnSort(columnIndex) {
          this.sortedColumnIndex = columnIndex;
          if (!this.sortDirection || this.sortDirection === "descending") {
            this.sortDirection = "ascending";
          } else {
            this.sortDirection = "descending";
          }
          this.$emit("column-sorted", columnIndex, this.sortDirection);
        },
        getListeners(column, columnIndex) {
          const base = { ...column.listeners || {} };
          if (column.selectable) {
            base.click = [base.click];
          }
          return base;
        }
      }
    };
    const __injectCSSVars__ = () => {
      useCssVars((_ctx) => ({
        "78c6120a": _ctx.selectedPseudoElementTop,
        "5f55835e": _ctx.selectedBorderRadius,
        "9aac58e8": _ctx.selectedColumnBackgroundColor,
        "72948518": _ctx.verticalHeaderCellPadding
      }));
    };
    const __setup__ = __default__.setup;
    __default__.setup = __setup__ ? (props, ctx) => {
      __injectCSSVars__();
      return __setup__(props, ctx);
    } : __injectCSSVars__;
    const _sfc_main$W = __default__;
    const _withScopeId$j = (n) => (pushScopeId("data-v-8116ab47"), n = n(), popScopeId(), n);
    const _hoisted_1$V = ["aria-multiselectable", "aria-label", "role"];
    const _hoisted_2$T = { key: 0 };
    const _hoisted_3$J = ["colspan"];
    const _hoisted_4$D = { key: 1 };
    const _hoisted_5$z = ["colspan"];
    const _hoisted_6$u = {
      key: 2,
      class: "summary-header"
    };
    const _hoisted_7$q = { key: 0 };
    const _hoisted_8$o = { key: 0 };
    const _hoisted_9$m = { class: "column-header slds-line-height_reset" };
    const _hoisted_10$i = {
      key: 0,
      class: "slds-text-align_center slds-cell_action-mode",
      scope: "col",
      style: { "padding": "0" }
    };
    const _hoisted_11$f = ["id"];
    const _hoisted_12$c = { class: "slds-th__action slds-th__action_form" };
    const _hoisted_13$c = ["id", "aria-sort"];
    const _hoisted_14$b = ["onClick"];
    const _hoisted_15$a = /* @__PURE__ */ _withScopeId$j(() => /* @__PURE__ */ createBaseVNode("span", { class: "slds-assistive-text" }, "Sort by: ", -1));
    const _hoisted_16$8 = { class: "slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate" };
    const _hoisted_17$7 = ["title"];
    const _hoisted_18$7 = {
      class: "slds-assistive-text",
      "aria-live": "polite",
      "aria-atomic": "true"
    };
    const _hoisted_19$7 = { class: "slds-truncate" };
    const _hoisted_20$7 = {
      key: 1,
      class: "slds-cell_action-mode",
      scope: "col"
    };
    const _hoisted_21$5 = /* @__PURE__ */ _withScopeId$j(() => /* @__PURE__ */ createBaseVNode("div", {
      class: "slds-truncate slds-assistive-text",
      title: "Actions"
    }, " Actions ", -1));
    const _hoisted_22$5 = [
      _hoisted_21$5
    ];
    const _hoisted_23$5 = {
      slot: "text-data",
      "slot-scope": "slotProps"
    };
    const _hoisted_24$5 = {
      key: 3,
      class: "summary-footer"
    };
    const _hoisted_25$4 = { key: 0 };
    function _sfc_render$W(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_Icon = resolveComponent("Icon");
      const _component_ActionMenuItem = resolveComponent("ActionMenuItem");
      const _component_ActionMenu = resolveComponent("ActionMenu");
      const _component_LayoutItem = resolveComponent("LayoutItem");
      const _component_Layout = resolveComponent("Layout");
      const _component_Tree = resolveComponent("Tree");
      const _component_TreeGroup = resolveComponent("TreeGroup");
      const _component_Row = resolveComponent("Row");
      return openBlock(), createElementBlock("div", {
        ref: "tableContainer",
        class: normalizeClass(["slds-scrollable slds-grow", { virtual: _ctx.$props.virtual }]),
        onScroll: _cache[0] || (_cache[0] = (...args) => $options.onScroll && $options.onScroll(...args))
      }, [
        _ctx.$props.virtual ? (openBlock(), createElementBlock("div", {
          key: 0,
          style: normalizeStyle({ height: `${$options.tableContainerPaddingTop}px` })
        }, null, 4)) : createCommentVNode("", true),
        createBaseVNode("table", {
          ref: "table",
          "aria-multiselectable": _ctx.$props.multiselectable,
          class: normalizeClass(["spm-table slds-table", {
            "slds-table_edit": _ctx.$props.editableColumnIndices.length,
            "slds-table_bordered": _ctx.$props.bordered,
            "slds-table_col-bordered": _ctx.$props.columnsBordered,
            "slds-table_header-hidden": _ctx.$props.hideHeader,
            "slds-table_cell-buffer": _ctx.$props.bufferCells,
            "slds-tree slds-table_tree": _ctx.$props.tree,
            "slds-table_resizable-cols slds-table_fixed-layout": _ctx.$props.resizable,
            "slds-no-row-hover": _ctx.$props.treeGroup || _ctx.$props.noRowHover,
            "slds-table_fixed-layout": _ctx.$props.fixed
          }]),
          "aria-label": _ctx.$props.ariaLabel,
          role: $options.computedRole
        }, [
          createBaseVNode("thead", {
            class: normalizeClass({ "slds-assistive-text": _ctx.$props.hideHeader })
          }, [
            _ctx.$props.fullHeader ? (openBlock(), createElementBlock("tr", _hoisted_2$T, [
              createBaseVNode("th", {
                class: normalizeClass([{ "slds-is-resizable": _ctx.$props.resizable }, "slds-line-height_reset"]),
                scope: "col",
                style: { "padding": "0", "background-color": "#fff", "font-weight": "400" },
                colspan: _ctx.$props.columns.length
              }, [
                renderSlot(_ctx.$slots, "header-content-full", {}, void 0, true)
              ], 10, _hoisted_3$J)
            ])) : createCommentVNode("", true),
            _ctx.$props.contentHeader ? (openBlock(), createElementBlock("tr", _hoisted_4$D, [
              createBaseVNode("th", {
                class: normalizeClass([{ "slds-is-resizable": _ctx.$props.resizable }, "slds-line-height_reset"]),
                scope: "col",
                style: { "padding": "0", "background-color": "#fff" },
                colspan: "1"
              }, [
                renderSlot(_ctx.$slots, "header-content-left", {}, void 0, true)
              ], 2),
              createBaseVNode("th", {
                class: normalizeClass([{ "slds-is-resizable": _ctx.$props.resizable }, "slds-line-height_reset"]),
                scope: "col",
                style: { "padding": "0", "background-color": "#fff" },
                colspan: _ctx.$props.columns.length - 1
              }, [
                renderSlot(_ctx.$slots, "header-content-right", {}, void 0, true)
              ], 10, _hoisted_5$z)
            ])) : createCommentVNode("", true),
            _ctx.$props.summaryHeader ? (openBlock(), createElementBlock("tr", _hoisted_6$u, [
              renderSlot(_ctx.$slots, "summaryHeaderRow", {}, () => [
                _ctx.$props.multiselectable && !_ctx.$props.treeGroup ? (openBlock(), createElementBlock("td", _hoisted_7$q)) : createCommentVNode("", true),
                (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.columns, (column, i2) => {
                  var _a2, _b, _c, _d;
                  return openBlock(), createElementBlock("td", {
                    key: i2,
                    class: normalizeClass({
                      "slds-text-align_left": ((_a2 = _ctx.$props.columns[i2]) == null ? void 0 : _a2.alignment) === "left" || ((_b = _ctx.$props.columns[i2]) == null ? void 0 : _b.alignment) === void 0,
                      "slds-text-align_right": ((_c = _ctx.$props.columns[i2]) == null ? void 0 : _c.alignment) === "right",
                      "slds-text-align_center": ((_d = _ctx.$props.columns[i2]) == null ? void 0 : _d.alignment) === "center"
                    }),
                    style: normalizeStyle(column.style || {}),
                    scope: "col"
                  }, [
                    renderSlot(_ctx.$slots, "summaryHeader", {
                      column,
                      columnIndex: i2
                    }, void 0, true)
                  ], 6);
                }), 128))
              ], true),
              _ctx.$props.actions ? (openBlock(), createElementBlock("td", _hoisted_8$o)) : createCommentVNode("", true)
            ])) : createCommentVNode("", true),
            createBaseVNode("tr", _hoisted_9$m, [
              _ctx.$props.multiselectable && !_ctx.$props.treeGroup ? (openBlock(), createElementBlock("th", _hoisted_10$i, [
                createBaseVNode("span", {
                  id: $data.selectAllId,
                  class: "slds-assistive-text"
                }, "Choose a row", 8, _hoisted_11$f),
                createBaseVNode("div", _hoisted_12$c, [
                  createVNode(_component_Checkbox, {
                    modelValue: $data.selectAllState === "all",
                    indeterminate: $data.selectAllState === "some",
                    ariaLabeledBy: $data.selectAllId,
                    labels: { name: "Select All" },
                    hideLabel: "",
                    onClick: withModifiers($options.onSelectAll, ["prevent"])
                  }, null, 8, ["modelValue", "indeterminate", "ariaLabeledBy", "onClick"])
                ])
              ])) : createCommentVNode("", true),
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.columns, (column, columnIndex) => {
                return openBlock(), createElementBlock("th", mergeProps({
                  key: column.id,
                  id: column.id.replaceAll(" ", "-"),
                  class: [{
                    "slds-is-resizable": _ctx.$props.resizable,
                    "selected-column": column.selected,
                    "selectable-column": column.selectable,
                    "slds-is-sortable": _ctx.$props.sortable && !column.hideSorting,
                    "slds-is-sorted": _ctx.$props.sortable && $data.sortedColumnIndex === columnIndex && !column.hideSorting,
                    "slds-is-sorted_asc": _ctx.$props.sortable && $data.sortedColumnIndex === columnIndex && $data.sortDirection === "ascending" && !column.hideSorting,
                    "slds-is-sorted_desc": _ctx.$props.sortable && $data.sortedColumnIndex === columnIndex && $data.sortDirection === "descending" && !column.hideSorting
                  }, "table-header"],
                  "aria-sort": _ctx.$props.sortable && $data.sortedColumnIndex === columnIndex ? $data.sortDirection : null,
                  scope: "col"
                }, toHandlers($options.getListeners(column, columnIndex), true)), [
                  (column == null ? void 0 : column.type) === "custom" ? renderSlot(_ctx.$slots, "header", {
                    key: 0,
                    column,
                    columnIndex
                  }, void 0, true) : _ctx.$props.sortable ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createBaseVNode("a", {
                      class: "slds-th__action slds-text-link_reset",
                      href: "#",
                      role: "button",
                      tabindex: "0",
                      onClick: ($event) => $options.onColumnSort(columnIndex)
                    }, [
                      _hoisted_15$a,
                      createBaseVNode("div", _hoisted_16$8, [
                        createBaseVNode("span", {
                          class: "slds-truncate",
                          title: column.name
                        }, toDisplayString(column.name), 9, _hoisted_17$7),
                        createVNode(_component_Icon, {
                          category: "utility",
                          name: "arrowdown",
                          iconClass: ["slds-icon-text-default", "slds-is-sortable__icon"]
                        })
                      ])
                    ], 8, _hoisted_14$b),
                    createBaseVNode("span", _hoisted_18$7, "Sorted " + toDisplayString($data.sortDirection), 1)
                  ], 64)) : (openBlock(), createBlock(_component_Layout, {
                    key: 2,
                    title: column.name,
                    verticalAlign: "center"
                  }, {
                    default: withCtx(() => [
                      column.icon ? (openBlock(), createBlock(_component_Icon, mergeProps({ key: 0 }, { size: "x-small", ...column.icon }, { class: "slds-m-right_x-small" }), null, 16)) : createCommentVNode("", true),
                      createBaseVNode("span", _hoisted_19$7, toDisplayString(column.name), 1),
                      column.actions ? (openBlock(), createBlock(_component_LayoutItem, {
                        key: 1,
                        alignmentBump: "left",
                        flexibility: "no-flex",
                        class: "slds-p-left_x-small"
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_ActionMenu, { buttonIconSize: "xx-small" }, {
                            default: withCtx(() => [
                              (openBlock(true), createElementBlock(Fragment, null, renderList(column.actions, (action, i2) => {
                                return openBlock(), createBlock(_component_ActionMenuItem, {
                                  key: i2,
                                  label: action.label,
                                  onClick: ($event) => _ctx.$emit("column-action", { action, column, columnIndex }, $event)
                                }, null, 8, ["label", "onClick"]);
                              }), 128))
                            ]),
                            _: 2
                          }, 1024)
                        ]),
                        _: 2
                      }, 1024)) : createCommentVNode("", true)
                    ]),
                    _: 2
                  }, 1032, ["title"]))
                ], 16, _hoisted_13$c);
              }), 128)),
              _ctx.$props.actions ? (openBlock(), createElementBlock("th", _hoisted_20$7, _hoisted_22$5)) : createCommentVNode("", true)
            ])
          ], 2),
          createBaseVNode("tbody", null, [
            _ctx.$props.tree ? (openBlock(), createBlock(_component_Tree, {
              key: 0,
              rows: _ctx.$props.rows
            }, {
              cell: withCtx((propsData) => [
                renderSlot(_ctx.$slots, "cell", normalizeProps(guardReactiveProps({ ...propsData })), void 0, true)
              ]),
              _: 3
            }, 8, ["rows"])) : _ctx.$props.treeGroup ? (openBlock(), createBlock(_component_TreeGroup, {
              key: 1,
              rows: _ctx.$props.rows,
              onSelectRow: $options.onSelectRow
            }, {
              groupActions: withCtx((propsData) => [
                renderSlot(_ctx.$slots, "groupActions", normalizeProps(guardReactiveProps({ ...propsData })), void 0, true)
              ]),
              _: 3
            }, 8, ["rows", "onSelectRow"])) : (openBlock(true), createElementBlock(Fragment, { key: 2 }, renderList($options.visibleRows, (row, index) => {
              return openBlock(), createBlock(_component_Row, {
                ref_for: true,
                ref: `row-${index}`,
                key: row.id,
                row,
                index,
                onSelectRow: $options.onSelectRow
              }, {
                cell: withCtx((propsData) => [
                  renderSlot(_ctx.$slots, "cell", normalizeProps(guardReactiveProps({ ...propsData })), void 0, true)
                ]),
                default: withCtx(() => [
                  createBaseVNode("template", _hoisted_23$5, [
                    renderSlot(_ctx.$slots, "text-data", normalizeProps(guardReactiveProps(_ctx.slotProps)), void 0, true)
                  ])
                ]),
                _: 2
              }, 1032, ["row", "index", "onSelectRow"]);
            }), 128)),
            _ctx.$props.summaryFooter ? (openBlock(), createElementBlock("tr", _hoisted_24$5, [
              _ctx.$props.multiselectable ? (openBlock(), createElementBlock("td", _hoisted_25$4)) : createCommentVNode("", true),
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.columns, (column, i2) => {
                var _a2, _b, _c, _d;
                return openBlock(), createElementBlock("td", {
                  key: i2,
                  class: normalizeClass({
                    "slds-text-align_left": ((_a2 = _ctx.$props.columns[i2]) == null ? void 0 : _a2.alignment) === "left" || ((_b = _ctx.$props.columns[i2]) == null ? void 0 : _b.alignment) === void 0,
                    "slds-text-align_right": ((_c = _ctx.$props.columns[i2]) == null ? void 0 : _c.alignment) === "right",
                    "slds-text-align_center": ((_d = _ctx.$props.columns[i2]) == null ? void 0 : _d.alignment) === "center"
                  }),
                  scope: "col"
                }, [
                  renderSlot(_ctx.$slots, "summaryFooter", {
                    column,
                    columnIndex: i2
                  }, void 0, true)
                ], 2);
              }), 128))
            ])) : createCommentVNode("", true)
          ])
        ], 10, _hoisted_1$V),
        _ctx.$props.virtual ? (openBlock(), createElementBlock("div", {
          key: 1,
          style: normalizeStyle({ height: `${$options.tableContainerPaddingBottom}px` })
        }, null, 4)) : createCommentVNode("", true)
      ], 34);
    }
    const DataTable = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["render", _sfc_render$W], ["__scopeId", "data-v-8116ab47"]]);
    const _sfc_main$V = {
      name: "HierarchyEmptyState"
    };
    const _hoisted_1$U = {
      class: "slds-illustration__svg",
      viewBox: "0 0 396 245",
      "aria-hidden": "true",
      xmlns: "http://www.w3.org/2000/svg"
    };
    const _hoisted_2$S = /* @__PURE__ */ createStaticVNode('<defs><rect x="77" y="47" width="20" height="28"></rect></defs><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-114.000000, -78.000000)"><g><g transform="translate(124.000000, 154.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(339.000000, 107.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(151.000000, 296.500000)"><g transform="translate(10.339768, 0.275260)"></g><path vector-effect="non-scaling-stroke" d="M140.962142,26.4644491 C138.225735,20.0143094 131.944776,15.5029106 124.633892,15.5029106 C122.619663,15.5029106 120.683612,15.8453541 118.878328,16.4764392 C115.451481,11.1704266 109.567406,7.66985447 102.883789,7.66985447 C96.4912675,7.66985447 90.8301585,10.8721423 87.3508511,15.7935668 C85.9589956,14.968161 84.3423157,14.4956341 82.6177606,14.4956341 C81.1083143,14.4956341 79.6815102,14.8576334 78.4157672,15.5014039 C74.9975328,6.58722215 66.5098304,0.275259875 56.5804557,0.275259875 C47.4632836,0.275259875 39.5615782,5.59684366 35.6837305,13.3681823 C33.3912034,12.266973 30.8314865,11.6515593 28.1312741,11.6515593 C19.4373504,11.6515593 12.1998844,18.0312998 10.6476214,26.4644491 L140.962142,26.4644491 Z" class="slds-illustration__fill-secondary"></path><path vector-effect="non-scaling-stroke" d="M0,25 L130,25" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round"></path></g><g transform="translate(320.000000, 281.000000)"><g transform="translate(0.293436, 0.054545)"><path vector-effect="non-scaling-stroke" d="M165.428708,41.9454545 L0.0995432562,41.9454545 C0.0336614956,41.2089487 0,40.4630069 0,39.7090909 C0,26.2132599 10.7866531,15.2727273 24.0926641,15.2727273 C27.7492016,15.2727273 31.215485,16.0989227 34.3199502,17.5772977 C39.5712028,7.14424616 50.271428,0 62.6175975,0 C76.0636257,0 87.5573893,8.47383452 92.1862485,20.441159 C93.9002755,19.5768947 95.8324059,19.0909091 97.8764479,19.0909091 C100.211783,19.0909091 102.401037,19.7252784 104.285841,20.8333889 C108.997403,14.2263569 116.663488,9.92727273 125.320028,9.92727273 C138.043441,9.92727273 148.627152,19.2146805 150.834755,31.4671412 C151.487388,31.3631046 152.156394,31.3090909 152.837838,31.3090909 C159.117096,31.3090909 164.340238,35.8953699 165.428708,41.9454545 Z" class="slds-illustration__fill-secondary"></path><path vector-effect="non-scaling-stroke" d="M32.7065637,40.4454545 L173.706564,40.4454545" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round"></path></g></g><g transform="translate(116.000000, 80.000000)"><g transform="translate(106.000000, 4.000000)"><g><use class="slds-illustration__fill-secondary" fill-rule="evenodd" xlink:href="#path-1"></use><rect class="slds-illustration__stroke-primary" stroke-width="3" x="78.5" y="48.5" width="17" height="25"></rect></g><rect class="slds-illustration__fill-secondary" x="72" y="30" width="30" height="22" rx="2"></rect><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" cx="87" cy="150" r="87"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-width="6" stroke-linecap="round" stroke-linejoin="round" cx="87.5" cy="23.5" r="23.5"></circle></g><g transform="translate(112.000000, 35.000000)" fill="#FFFFFF"><circle vector-effect="non-scaling-stroke" cx="81" cy="119" r="73"></circle><rect x="67" y="0" width="28" height="4"></rect><path vector-effect="non-scaling-stroke" d="M0.180175781,90.2270508 C0.778808594,89.5117187 11.3666992,64.2470703 30.4042969,52.2089844 C49.4418945,40.1708984 64.3725586,35.2084961 85.1640625,36.3398437 C105.955566,37.4711914 122.305176,44.8969727 133.487793,53.7832031 C144.67041,62.6694336 156.910645,77.7836914 163.28125,93.7817383 C167.52832,104.447103 164.678548,96.9777018 154.731934,71.3735352 L134.561523,50.390625 L106.423828,35.831543 L83.5615234,32.3847656 L61.4130859,34.121582 L40.7431641,41.5869141 L21.2519531,54.597168 L6.90820313,73.0634766 C2.02376302,84.9827474 -0.21891276,90.7039388 0.180175781,90.2270508 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M178.5,49.7801039 C170.984351,44.9862617 166,36.5752096 166,27 C166,12.0883118 178.088312,0 193,0 C207.911688,0 220,12.0883118 220,27 C220,36.5752096 215.015649,44.9862617 207.5,49.7801039 L207.5,55.5 C207.5,56.0522847 207.052285,56.5 206.5,56.5 L179.5,56.5 C178.947715,56.5 178.5,56.0522847 178.5,55.5 L178.5,49.7801039 Z"></path><path vector-effect="non-scaling-stroke" d="M178.5,40.7750367 C175.091592,37.1883928 173,32.3384551 173,27 C173,15.954305 181.954305,7 193,7 C204.045695,7 213,15.954305 213,27 C213,32.3384551 210.908408,37.1883928 207.5,40.7750367 L207.5,35.5 C207.5,34.9477153 207.052285,34.5 206.5,34.5 L179.5,34.5 C178.947715,34.5 178.5,34.9477153 178.5,35.5 L178.5,40.7750367 Z"></path><path vector-effect="non-scaling-stroke" d="M179.5,34.5 L206.5,34.5 C207.052285,34.5 207.5,34.9477153 207.5,35.5 L207.5,55.5 C207.5,56.0522847 207.052285,56.5 206.5,56.5 L179.5,56.5 C178.947715,56.5 178.5,56.0522847 178.5,55.5 L178.5,35.5 C178.5,34.9477153 178.947715,34.5 179.5,34.5 Z" stroke-linecap="round" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M184.5,56.5 L184.5,67.356737 C187.353249,67.1189178 190.206393,67 193.059326,67 C195.900065,67 198.713659,67.1179036 201.5,67.3537468 L201.5,56.5 L184.5,56.5 Z"></path><path vector-effect="non-scaling-stroke" d="M27,241.5 L392,241.5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M0,241.5 L20,241.5" stroke-linecap="round"></path><circle vector-effect="non-scaling-stroke" cx="193" cy="154" r="87"></circle><circle vector-effect="non-scaling-stroke" cx="193" cy="154" r="73"></circle></g></g><g transform="translate(252.000000, 178.000000)"><g transform="translate(2.000000, 1.000000)"><circle vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-width="6" cx="55" cy="55" r="41"></circle><polygon vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" points="55 0 62 16 48 16"></polygon><polygon vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" transform="translate(55.000000, 102.000000) scale(1, -1) translate(-55.000000, -102.000000) " points="55 94 62 110 48 110"></polygon><polygon vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" transform="translate(102.000000, 55.000000) scale(1, -1) rotate(90.000000) translate(-102.000000, -55.000000) " points="102 47 109 63 95 63"></polygon><polygon vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" transform="translate(8.000000, 55.000000) scale(-1, -1) rotate(90.000000) translate(-8.000000, -55.000000) " points="8 47 15 63 1 63"></polygon><polygon vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" transform="translate(78.371087, 79.079086) scale(1, -1) rotate(45.000000) translate(-78.371087, -79.079086) " points="78.3710872 47.4827561 96.4223693 110.675417 60.3198052 110.675417"></polygon></g><g class="slds-illustration__fill-primary"><polygon vector-effect="non-scaling-stroke" transform="translate(35.687128, 35.395128) scale(-1, 1) rotate(45.000000) translate(-35.687128, -35.395128) " points="35.6871284 3.79879726 53.7384105 66.9914578 17.6358464 66.9914578"></polygon><ellipse cx="58" cy="58.0018766" rx="9" ry="9.00187656"></ellipse></g><g transform="translate(49.000000, 49.000000)" stroke="#FFFFFF" stroke-width="3"><ellipse cx="9" cy="9.00187656" rx="9" ry="9.00187656"></ellipse></g></g><g transform="translate(436.500000, 259.500000)"><g class="slds-illustration__fill-secondary"><path vector-effect="non-scaling-stroke" d="M18.9209988,1.95433401 L33.259296,51.443436 C33.5666778,52.5043744 32.9557995,53.613617 31.8948612,53.9209988 C31.7139843,53.9734036 31.5266126,54 31.3382972,54 L2.6617028,54 C1.5571333,54 0.661702805,53.1045695 0.661702805,52 C0.661702805,51.8116846 0.688299176,51.6243129 0.74070397,51.443436 L15.0790012,1.95433401 C15.386383,0.893395645 16.4956256,0.282517358 17.556564,0.589899164 C18.2152102,0.780726338 18.7301717,1.29568777 18.9209988,1.95433401 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-linecap="round" stroke-width="3"><polygon vector-effect="non-scaling-stroke" stroke-linejoin="round" points="17 0.323943662 34 54 -1.81721305e-12 54"></polygon><path vector-effect="non-scaling-stroke" d="M17,4.6953125 C17,43.0456294 17,62.6471919 17,63.5 C17,62.6471919 17,43.0456294 17,4.6953125 Z"></path><path vector-effect="non-scaling-stroke" d="M17,29.3239437 C22.3333333,35.7851611 25,39.1184944 25,39.3239437 C25,39.1184944 22.3333333,35.7851611 17,29.3239437 Z" stroke-linejoin="round" transform="translate(21.000000, 34.323944) scale(-1, 1) translate(-21.000000, -34.323944) "></path></g></g><g transform="translate(393.000000, 226.500000)"><g transform="translate(1.000000, 0.000000)" class="slds-illustration__fill-secondary"><path vector-effect="non-scaling-stroke" d="M25.6478873,0 L50.879042,84.4273253 C51.1953215,85.4856452 50.5937789,86.5999782 49.535459,86.9162577 C49.3496374,86.9717906 49.1567264,87 48.9627843,87 L2.33299037,87 C1.22842087,87 0.332990367,86.1045695 0.332990367,85 C0.332990367,84.8060578 0.361199757,84.6131469 0.416732643,84.4273253 L25.6478873,0 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-linecap="round" stroke-width="3"><polygon vector-effect="non-scaling-stroke" stroke-linejoin="round" points="26.5 0 52.5 87 0.5 87"></polygon><path vector-effect="non-scaling-stroke" d="M26.5,3.58642578 C26.5,64.0261034 26.5,94.9972948 26.5,96.5 C26.5,94.9972948 26.5,64.0261034 26.5,3.58642578 Z"></path><path vector-effect="non-scaling-stroke" d="M15.6478873,42 C22.9812207,49.078692 26.6478873,52.7453587 26.6478873,53 C26.6478873,52.7453587 22.9812207,49.078692 15.6478873,42 Z" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M27.6478873,68 C36.9812207,57.078692 41.6478873,51.7453587 41.6478873,52 C41.6478873,51.7453587 36.9812207,57.078692 27.6478873,68 Z" stroke-linejoin="round"></path></g></g><g transform="translate(182.500000, 259.500000)"><g class="slds-illustration__fill-secondary"><path vector-effect="non-scaling-stroke" d="M18.9209988,1.95433401 L33.259296,51.443436 C33.5666778,52.5043744 32.9557995,53.613617 31.8948612,53.9209988 C31.7139843,53.9734036 31.5266126,54 31.3382972,54 L2.6617028,54 C1.5571333,54 0.661702805,53.1045695 0.661702805,52 C0.661702805,51.8116846 0.688299176,51.6243129 0.74070397,51.443436 L15.0790012,1.95433401 C15.386383,0.893395645 16.4956256,0.282517358 17.556564,0.589899164 C18.2152102,0.780726338 18.7301717,1.29568777 18.9209988,1.95433401 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-width="3"><polygon vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" points="17 0.323943662 34 54 -1.81721305e-12 54"></polygon><path vector-effect="non-scaling-stroke" d="M17,4.32394366 C17,42.2551731 17,61.6471919 17,62.5 C17,61.6471919 17,42.2551731 17,4.32394366 Z"></path><path vector-effect="non-scaling-stroke" d="M17,32.3239437 C23.6666667,39.4518278 27,43.1184944 27,43.3239437 C27,43.1184944 23.6666667,39.4518278 17,32.3239437 Z" stroke-linecap="round" stroke-linejoin="round" transform="translate(22.000000, 37.823944) scale(-1, 1) translate(-22.000000, -37.823944) "></path></g></g><g transform="translate(129.000000, 209.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><g transform="translate(27.848898, 30.021465) rotate(-15.000000) translate(-27.848898, -30.021465) translate(5.848898, 5.021465)"><path vector-effect="non-scaling-stroke" d="M1.73977935,3.49433365 C1.73977935,3.49433365 11.283937,0.730940796 13.3525511,10.749914" transform="translate(7.546165, 6.947488) rotate(41.000000) translate(-7.546165, -6.947488) "></path><path vector-effect="non-scaling-stroke" d="M11.1319089,10.2387854 C11.1319089,10.2387854 20.6760665,7.47539254 22.7446806,17.4943658" transform="translate(16.938295, 13.691939) scale(-1, 1) rotate(-41.000000) translate(-16.938295, -13.691939) "></path><path vector-effect="non-scaling-stroke" d="M19.7302848,42.5865514 C19.7302848,42.5865514 29.2744424,39.8231586 31.3430565,49.8421318"></path><path vector-effect="non-scaling-stroke" d="M31.7302848,42.5865514 C31.7302848,42.5865514 41.2744424,39.8231586 43.3430565,49.8421318" transform="translate(37.536671, 46.039705) scale(-1, 1) translate(-37.536671, -46.039705) "></path></g></g></g></g></g>', 2);
    const _hoisted_4$C = [
      _hoisted_2$S
    ];
    function _sfc_render$V(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1$U, _hoisted_4$C);
    }
    const HierarchyEmptyState = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["render", _sfc_render$V]]);
    const Hierarchy_vue_vue_type_style_index_0_scoped_8d0d21b9_lang = "";
    const _sfc_main$U = {
      name: "Hierarchy",
      components: {
        ActionMenu,
        ActionMenuItem,
        Button: SLDSButton,
        ButtonIcon,
        DataTable,
        HierarchyEmptyState,
        Layout,
        Spinner,
        Tooltip
      },
      data() {
        return {
          columns: [],
          loadingMsg: "Loading plan...",
          rows: [],
          nodeMap: {
            "All Org": {
              id: "All Org",
              name: "All Org",
              level: 0,
              metrics: []
            }
          },
          allowHierarchyEmptyState: true,
          allowAssignmentEmptyState: true,
          allowAllocationEmptyState: true
        };
      },
      computed: {
        showTableEmptyState() {
          return this.$store.rootNode.childCount === 0 && !this.$store.plan.sfsp__SalesMetrics__r.length && !this.$store.assignmentObjects.length;
        },
        showHierarchyEmptyState() {
          return this.allowHierarchyEmptyState && this.$store.rootNode.childCount === 0;
        },
        showAssignmentEmptyState() {
          return !this.$store.assignmentObjects.filter((a) => a.recordsDataset.dimensions).length && this.allowAssignmentEmptyState;
        },
        showSharedWith() {
          return this.$store.hasSalesPlanningTemplateApp && this.$store.isEditor;
        }
      },
      created() {
        this.$mitt.on("refresh-hierarchy-table", (options) => this.refresh(options));
        this.$store.buildAssignmentObjects();
      },
      unmounted() {
        this.$mitt.off("refresh-hierarchy-table", this.refresh);
      },
      async mounted() {
        SPM.Components.Hierarchy = this;
        await this.init();
        this.loadingMsg = "";
      },
      methods: {
        async init() {
          try {
            this.$store.nodeMap = {};
            await this.loadRootNode();
            this.$store.maxLevel = await SPM.Utils.Node.getMaxLevel({
              planId: this.$store.plan.Id,
              nodeIds: (this.$store.rootNode.children || []).map((node) => node.id),
              currentLevel: this.$store.rootNode.level + 1
            });
            this.loadingMsg = "Loading Datasets...";
            this.loadTable();
            await SPM.Utils.Async.forEachParallel(this.$store.plan.sfsp__SalesAssignmentObjects__r, async (a) => {
              const options = { type: "load", assignmentObject: a };
              if (this.$store.salesAsyncJobs.some((j) => j.sfsp__SalesAssignmentObject__c === a.Id)) {
                SPM.Utils.CRMA.checkDatasets(a, options, () => this.loadColumn(options));
              } else {
                await SPM.Utils.CRMA.checkDatasets(a, options, () => this.loadColumn(options));
              }
            }, 5);
          } catch (ex) {
            SPM.$store.toast({ message: ex.message, state: "error" });
          } finally {
            this.loadingMsg = "";
          }
        },
        async loadRow(parentRow) {
          parentRow.loading = true;
          const node = this.$store.nodeMap[parentRow.id];
          await this.$store.loadScope({ parentNodeIds: [node.id] });
          SPM.Utils.Node.buildRows({ parentRow, childNodes: node.children, lazy: true, includeBoundaries: false });
          parentRow.loading = false;
          SPM.Utils.Node.calculateValues(this.rows);
        },
        openImportHierarchyModal() {
          SPM.Components.Root.openModal("importHierarchy");
        },
        async refresh(options) {
          if (options.metric) {
            const updateNodeMetrics = (state) => {
              const traverseRootNodeMetric = (childRows) => {
                const nextChildren = [];
                childRows.forEach((c) => {
                  state.nodeMap[c.id].metrics = state.plan.sfsp__SalesMetrics__r.map(
                    (metric2) => ({
                      ...SPM.Utils.NodeMetric.Defaults,
                      sfsp__SalesMetric__c: metric2.Id,
                      sfsp__SalesPlan__c: state.plan.Id
                    })
                  );
                  if (!c.children)
                    return;
                  nextChildren.push(...c.children);
                });
                if (nextChildren.length > 0) {
                  traverseRootNodeMetric(nextChildren);
                }
              };
              Object.keys(state.nodeMap).forEach((key) => {
                state.nodeMap[key].metrics = state.plan.sfsp__SalesMetrics__r.map(
                  (metric2) => ({
                    ...SPM.Utils.NodeMetric.Defaults,
                    sfsp__SalesMetric__c: metric2.Id,
                    sfsp__SalesPlan__c: state.plan.Id
                  })
                );
              });
              traverseRootNodeMetric(state.rootNode.children);
              state.nodeMap[state.rootNode.id].metrics = state.plan.sfsp__SalesMetrics__r.map((metric2) => {
                const nodeMetric = state.plan.sfsp__SalesNodeMetrics__r.find((m) => m.sfsp__SalesMetric__c === metric2.Id);
                return {
                  ...SPM.Utils.NodeMetric.Defaults,
                  sfsp__SalesMetric__c: metric2.Id,
                  sfsp__SalesPlan__c: state.plan.Id,
                  ...nodeMetric || {}
                };
              });
            };
            const metric = options.metric;
            this.$store.$patch((state) => {
              switch (options.type) {
                case "create":
                  state.plan.sfsp__SalesMetrics__r.push(metric);
                  updateNodeMetrics(state);
                  state.hasChanged = true;
                  break;
                case "update":
                  const metricIndex = state.plan.sfsp__SalesMetrics__r.findIndex((m) => m.Id === metric.Id);
                  state.plan.sfsp__SalesMetrics__r.splice(metricIndex, 1, metric);
                  updateNodeMetrics(state);
                  state.hasChanged = true;
                  break;
                case "delete":
                  const metricIndexDelete = state.plan.sfsp__SalesMetrics__r.findIndex((m) => m.Id === metric.Id);
                  const salesNodeMetricIndex = this.$store.plan.sfsp__SalesNodeMetrics__r.findIndex((node) => node.sfsp__SalesMetric__c === metric.Id);
                  state.plan.sfsp__SalesMetrics__r.splice(metricIndexDelete, 1);
                  state.plan.sfsp__SalesNodeMetrics__r.splice(salesNodeMetricIndex, 1);
                  updateNodeMetrics(state);
                  state.hasChanged = true;
                  break;
              }
            });
            this.loadColumn(options);
          } else if (options.assignmentObject) {
            const assignmentObject = options.assignmentObject;
            this.$store.$patch((state) => {
              switch (options.type) {
                case "create":
                  state.plan.sfsp__SalesAssignmentObjects__r.push(assignmentObject);
                  state.assignmentObjects.push(this.$store.buildAssignmentObjects(assignmentObject));
                  state.hasChanged = true;
                  break;
                case "update":
                  const assignmentObjectIndex = state.plan.sfsp__SalesAssignmentObjects__r.findIndex((o) => o.Id === assignmentObject.Id);
                  const assignIndex = state.assignmentObjects.findIndex((o) => o.id === assignmentObject.Id);
                  const updatedAssignmentObject = this.$store.buildAssignmentObjects(assignmentObject);
                  updatedAssignmentObject.asyncJob = state.assignmentObjects[assignIndex].asyncJob;
                  state.plan.sfsp__SalesAssignmentObjects__r.splice(assignmentObjectIndex, 1, assignmentObject);
                  state.assignmentObjects.splice(assignIndex, 1, updatedAssignmentObject);
                  state.hasChanged = true;
                  break;
                case "delete":
                  const assignmentObjectIndexDelete = state.plan.sfsp__SalesAssignmentObjects__r.findIndex((o) => o.Id === assignmentObject.Id);
                  const assignmentObjectIndexDelete2 = state.assignmentObjects.findIndex((o) => o.id === assignmentObject.Id);
                  state.plan.sfsp__SalesAssignmentObjects__r.splice(assignmentObjectIndexDelete, 1);
                  state.assignmentObjects.splice(assignmentObjectIndexDelete2, 1);
                  state.hasChanged = true;
                  break;
              }
              SPM.Utils.CRMA.checkDatasets(options.assignmentObject, options, () => this.loadColumn(options));
            });
          } else if (options.boundary) {
            const updateBoundary = (boundary) => {
              const deleteNodeBoundary = (node) => {
                const existNodeBoundaryIndex = node.boundaries.findIndex((f) => f.Id === boundary.Id || f.sfsp__SalesBoundary__c === boundary.Id);
                if (existNodeBoundaryIndex > -1)
                  node.boundaries.splice(existNodeBoundaryIndex, 1);
                const existNodeRuleBoundaryIndex = node.rules.findIndex((f) => f.sfsp__SalesNodeBoundary__c === boundary.Id);
                if (existNodeRuleBoundaryIndex > -1)
                  node.rules.splice(existNodeRuleBoundaryIndex, 1);
              };
              const updateNodeBoundary = (node) => {
                const existNodeBoundary = node.boundaries.find((f) => f.Id === boundary.Id || f.sfsp__SalesBoundary__c === boundary.Id || f.sfsp__ContainerSet__c === boundary.sfsp__ContainerSet__c && f.sfsp__IncludePoints__c === boundary.sfsp__IncludePoints__c);
                if (existNodeBoundary) {
                  const lookupSalesBoundary = {
                    sfsp__SalesBoundary__c: boundary.Id,
                    sfsp__SalesBoundary__r: {
                      Name: boundary.Name,
                      sfsp__SalesPlan__c: boundary.sfsp__SalesPlan__c,
                      sfsp__ContainerSet__c: boundary.sfsp__ContainerSet__c,
                      sfsp__IncludePoints__c: boundary.sfsp__IncludePoints__c
                    }
                  };
                  Object.assign(existNodeBoundary, { ...lookupSalesBoundary });
                }
              };
              const traverseRootNodeBoundaries = (childRows) => {
                const nextChildren = [];
                childRows.forEach((c) => {
                  switch (options.type) {
                    case "update":
                      updateNodeBoundary(c);
                      break;
                    case "delete":
                      deleteNodeBoundary(c);
                      break;
                  }
                  if (!c.children)
                    return;
                  nextChildren.push(...c.children);
                });
                if (nextChildren.length > 0) {
                  traverseRootNodeBoundaries(nextChildren);
                }
              };
              this.$store.$patch((state) => {
                switch (options.type) {
                  case "create":
                    state.hasChanged = true;
                    break;
                  case "update":
                    Object.keys(state.nodeMap).forEach((key) => {
                      updateNodeBoundary(state.nodeMap[key]);
                      traverseRootNodeBoundaries(state.rootNode.children);
                    });
                    state.hasChanged = true;
                    break;
                  case "delete":
                    const storeBoundaryIndex = state.salesBoundaries.findIndex((f) => f.Id === boundary.Id || f.sfsp__SalesBoundary__c === boundary.Id);
                    if (storeBoundaryIndex > -1)
                      state.salesBoundaries.splice(storeBoundaryIndex, 1);
                    Object.keys(state.nodeMap).forEach((key) => {
                      deleteNodeBoundary(state.nodeMap[key]);
                    });
                    traverseRootNodeBoundaries(state.rootNode.children);
                    state.hasChanged = true;
                    break;
                }
              });
            };
            Array.isArray(options.boundary) ? (options.boundary || []).forEach((b) => {
              updateBoundary(b);
            }) : updateBoundary(options.boundary);
            const traverseRows = (tableRows) => {
              const nextRows = [];
              tableRows.forEach((row) => {
                row.data.filter((f) => f.format === "Assignment").forEach((r) => r.state = "loading");
                if (!row.children)
                  return;
                nextRows.push(...row.children);
              });
              if (nextRows.length > 0) {
                traverseRows(nextRows);
              }
            };
            traverseRows(this.rows);
            SPM.Utils.Node.calculateValues(this.rows);
          } else if (options.sharedWithRecords) {
            this.$store.$patch((state) => {
              Object.values(state.nodeMap).forEach((node) => node.accessRecords = []);
              const sharedWithRecords = options.sharedWithRecords;
              if (sharedWithRecords.length > 0) {
                sharedWithRecords.forEach((r) => {
                  var _a2;
                  (_a2 = state.nodeMap[r.nodeId]) == null ? void 0 : _a2.accessRecords.push(r);
                });
              }
              state.hasChanged = true;
            });
          }
          this.loadingMsg = "";
        },
        async loadRootNode() {
          var _a2;
          this.loadingMsg = "Analyzing Hierarchy...";
          if (this.$store.branch.id === "All Org" && !this.$store.nodeMap["All Org"]) {
            const planNodeBoundaries2 = await SPM.Utils.Rest.invoke("Query", { query: `SELECT Id, Name, sfsp__SalesNode__c, sfsp__ContainerSet__c, sfsp__Filter__c, sfsp__IncludePoints__c, sfsp__SalesBoundary__c, sfsp__SalesBoundary__r.Name, sfsp__SalesBoundary__r.sfsp__ContainerSet__c, sfsp__SalesBoundary__r.sfsp__IncludePoints__c, sfsp__SalesBoundary__r.sfsp__SalesPlan__c FROM sfsp__SalesNodeBoundary__c WHERE sfsp__SalesPlan__c = '${this.$store.plan.Id}' AND sfsp__SalesNode__c = ''` });
            this.$store.nodeMap["All Org"] = {
              id: "All Org",
              name: "All Org",
              color: "#2C7ED0",
              ownerId: this.$store.plan.sfsp__Owner__c || "",
              ownerName: ((_a2 = this.$store.plan.sfsp__Owner__r) == null ? void 0 : _a2.Name) || "",
              assignmentBehavior: this.$store.plan.sfsp__AssignmentBehavior__c || "Exclusive",
              level: 0,
              metrics: this.$store.plan.sfsp__SalesMetrics__r.map((metric) => {
                const nodeMetric = this.$store.plan.sfsp__SalesNodeMetrics__r.find((m) => m.sfsp__SalesMetric__c === metric.Id);
                return {
                  ...SPM.Utils.NodeMetric.Defaults,
                  sfsp__SalesMetric__c: metric.Id,
                  ...nodeMetric || {}
                };
              }),
              users: this.$store.plan.sfsp__SalesPlanUsers__r || [],
              accessRecords: this.$store.plan.sfsp__SalesUserAccess__r.filter((ua) => !ua.sfsp__SalesNode__c && !this.$store.availableAdminIds.has(ua.sfsp__User__c) && !this.$store.availableManagerIds.has(ua.sfsp__User__c)).map(({ sfsp__User__r, sfsp__User__c }) => ({ name: sfsp__User__r.Name, userId: sfsp__User__c, nodeId: "All Org" })) || [],
              rules: [],
              ruleLogics: {},
              previewRuleLogics: {},
              assignments: [],
              boundaries: planNodeBoundaries2,
              siblingIds: [],
              olderSiblingIds: []
            };
            await this.$store.loadScope({ parentNodeIds: [""] });
          } else {
            await this.$store.loadScope({ rootNodeId: this.$store.branch.id });
            await this.$store.loadAncestors({ nodeId: this.$store.branch.id });
          }
          await this.$store.loadScope({ parentNodeIds: [""] });
          this.loadingMsg = "Loading Boundaries...";
          const planBoundaries = await SPM.Utils.Rest.invoke("Query", { query: `SELECT Id, Name, sfsp__ContainerSet__c, sfsp__IncludePoints__c, sfsp__SalesPlan__c FROM sfsp__SalesBoundary__c WHERE sfsp__SalesPlan__c = '${this.$store.plan.Id}'` });
          this.$store.$patch({ salesBoundaries: planBoundaries });
          const planNodeBoundaries = await SPM.Utils.Rest.invoke("Query", { query: `SELECT Id, sfsp__ContainerSet__c FROM sfsp__SalesNodeBoundary__c WHERE sfsp__SalesPlan__c = '${this.$store.plan.Id}' AND sfsp__SalesBoundary__c = ''` });
          const setBoundaryContainers = [...new Set(planNodeBoundaries.map((b) => ({ sfsp__ContainerSet__c: b.sfsp__ContainerSet__c }))), ...new Set(planBoundaries.map((b) => ({ sfsp__ContainerSet__c: b.sfsp__ContainerSet__c })))];
          SPM.Utils.Async.forEachParallel(setBoundaryContainers, async (boundaryObject) => {
            await this.$store.loadContainers({ containerSetId: boundaryObject.sfsp__ContainerSet__c });
          }, 5);
          this.$store.rootNode = this.$store.nodeMap[this.$store.branch.id];
          this.$store.scope = this.$store.rootNode.level + 1;
        },
        async loadColumn(column) {
          const traverseRows = ({ tableRows, index, remove: remove2, updateIndex, value, metric }) => {
            const nextRows = [];
            tableRows.forEach((row) => {
              const node = this.$store.nodeMap[row.id];
              if (remove2) {
                row.data.splice(index, 1);
              } else {
                if (metric) {
                  const findMetric = node.metrics.find((m) => m.sfsp__SalesMetric__c === metric.Id);
                  const monthKeys = [...Object.keys(findMetric)].filter((name) => name.startsWith("sfsp__Target_Month"));
                  value = {
                    id: metric.Id,
                    format: "Allocation",
                    type: "custom",
                    dataType: metric.sfsp__Type__c,
                    value: monthKeys.reduce((agg, field) => agg + findMetric[field], 0),
                    columnName: metric.Name
                  };
                } else {
                  value = { ...value };
                }
                row.data.splice(index, updateIndex, value);
              }
              if (!row.children)
                return;
              nextRows.push(...row.children);
            });
            if (nextRows.length > 0) {
              traverseRows({ tableRows: nextRows, index, remove: remove2, updateIndex, value, metric });
            }
          };
          let updateColumnIndex = this.columns.findIndex((c) => (column == null ? void 0 : column.assignmentObject) && c.id === (column == null ? void 0 : column.assignmentObject.Id) || (column == null ? void 0 : column.metric) && c.id === (column == null ? void 0 : column.metric.Id));
          const spliceUpdate = updateColumnIndex !== -1 ? 1 : 0;
          let lastAssignmentIndex = this.columns.findLastIndex((a) => a.type === "assignment");
          const hierarchyCols = this.showSharedWith ? 2 : 1;
          lastAssignmentIndex = lastAssignmentIndex === -1 ? hierarchyCols : spliceUpdate === 1 ? updateColumnIndex : lastAssignmentIndex + 1;
          let lastMetricIndex = this.columns.findLastIndex((m) => m.type === "metric");
          lastMetricIndex = lastMetricIndex === -1 ? lastAssignmentIndex + hierarchyCols : spliceUpdate === 1 ? updateColumnIndex : lastMetricIndex + 1;
          const storeColumnIndex = (column == null ? void 0 : column.metric) ? this.$store.plan.sfsp__SalesMetrics__r.findIndex((m) => m.Id === column.metric.Id) : this.$store.assignmentObjects.findIndex((a) => a.id === column.assignmentObject.Id);
          const storeAdjustedIndex = (column == null ? void 0 : column.metric) ? storeColumnIndex + lastAssignmentIndex : storeColumnIndex + hierarchyCols;
          updateColumnIndex = column.type === "delete" ? updateColumnIndex : (column == null ? void 0 : column.metric) ? Math.min(storeAdjustedIndex, lastMetricIndex) : Math.min(storeAdjustedIndex, lastAssignmentIndex);
          if (column.type === "delete" && updateColumnIndex > -1) {
            this.columns.splice(updateColumnIndex, 1);
            traverseRows({ tableRows: this.rows, index: updateColumnIndex, remove: true });
          }
          if (column.type === "update" || column.type === "create" || column.type === "load") {
            if (column == null ? void 0 : column.assignmentObject) {
              const assignmentObject = this.$store.assignmentObjects.find((a) => a.id === column.assignmentObject.Id);
              this.columns.splice(updateColumnIndex, spliceUpdate, { id: assignmentObject.id, name: assignmentObject.label, type: "assignment" });
              const newRowValue = {
                id: assignmentObject.id,
                format: "Assignment",
                type: "custom",
                state: "loading",
                value: assignmentObject.totalCount,
                columnName: assignmentObject.name
              };
              traverseRows({ tableRows: this.rows, index: updateColumnIndex, remove: false, updateIndex: spliceUpdate, value: newRowValue });
            } else if (column == null ? void 0 : column.metric) {
              const metricRecord = this.$store.plan.sfsp__SalesMetrics__r.find((m) => m.Id === column.metric.Id);
              this.columns.splice(updateColumnIndex, spliceUpdate, { id: metricRecord.Id, name: metricRecord.Name, type: "metric" });
              traverseRows({ tableRows: this.rows, index: updateColumnIndex, remove: false, updateIndex: spliceUpdate, value: 0, metric: metricRecord });
            }
          }
          SPM.Utils.Node.calculateValues(this.rows);
        },
        loadTable() {
          if (!this.$store.rootNode)
            return this.rows = [];
          this.columns = [
            { id: "name", name: "Name" },
            // assignments
            ...this.$store.assignmentObjects.filter((obj) => obj.recordsDataset.dimensions).map((o) => ({ id: o.id, name: o.label, type: "assignment" })),
            // metrics
            ...this.$store.plan.sfsp__SalesMetrics__r.map((m) => ({ id: m.Id, name: m.Name, type: "metric" }))
          ];
          this.rows = [{
            id: this.$store.rootNode.id,
            name: this.$store.rootNode.name,
            data: [
              { id: "Name", format: "Name", type: "custom", node: this.$store.rootNode },
              ...this.$store.assignmentObjects.filter((obj) => obj.recordsDataset.dimensions).map((assignment) => ({
                id: assignment.id,
                format: "Assignment",
                type: "custom",
                state: "loading",
                value: assignment.totalCount,
                columnName: assignment.name
              })),
              ...this.$store.rootNode.metrics.map((metric) => {
                const salesMetric = this.$store.plan.sfsp__SalesMetrics__r.find((m) => m.Id === metric.sfsp__SalesMetric__c);
                const monthKeys = [...Object.keys(metric)].filter((name) => name.startsWith("sfsp__Target_Month"));
                const metricDetails = {
                  id: metric.Id,
                  format: "Allocation",
                  type: "custom",
                  dataType: salesMetric.sfsp__Type__c,
                  value: monthKeys.reduce((agg, field) => agg + metric[field], 0),
                  columnName: salesMetric.Name
                };
                metricDetails.overrideAmount = salesMetric.sfsp__TargetOverrideEnabled__c ? metric.sfsp__TargetOverrideType__c === "Percentage" ? metricDetails.value !== 0 ? metric.sfsp__TargetOverrideAmount__c / 100 * metricDetails.value : metric.sfsp__TargetOverrideAmount__c / 100 : metric.sfsp__TargetOverrideAmount__c : 0;
                return metricDetails;
              })
            ],
            parent: null,
            children: [],
            expanded: true,
            loaded: false
          }];
          if (this.showSharedWith) {
            this.columns.splice(1, 0, { id: "sharedWith", name: "Shared With" });
            this.rows[0].data.splice(1, 0, { id: "SharedWith", format: "Shared with", type: "custom", node: this.$store.rootNode });
          }
          const traverse2 = (parents) => {
            const nextParents = [];
            parents.forEach((parentRow) => {
              const node = this.$store.nodeMap[parentRow.id];
              if (!node.children)
                return;
              const childRows = SPM.Utils.Node.buildRows({ parentRow, childNodes: node.children, lazy: true, includeBoundaries: false });
              nextParents.push(...childRows);
            });
            if (nextParents.length > 0) {
              traverse2(nextParents);
            }
          };
          traverse2(this.rows);
          SPM.Utils.Node.calculateValues(this.rows);
        },
        openExportToCSVModal(cell) {
          SPM.Components.Root.openModal("exportToCSV", {
            node: cell.data.node
          });
        },
        getBoundaryLocationTooltip(cell) {
          var _a2;
          return ((_a2 = cell.data) == null ? void 0 : _a2.node.boundaries.map((b) => b.sfsp__SalesBoundary__c ? b.sfsp__SalesBoundary__r.Name : b.sfsp__IncludePoints__c ? `${b.Name} (with point ZIPs)` : b.Name).join("\\n")) || "No boundaries found";
        },
        openShareModal(cell) {
          if (!this.$store.hasSalesPlanningTemplateApp)
            return;
          SPM.Components.Root.openModal("shareBranch", {
            node: { Id: cell.data.node.id, Name: cell.data.node.name },
            callback: ({ invitedToastMsg, updatedToastMsg, removedToastMsg, sharedWithRecords }) => {
              if (invitedToastMsg)
                this.$mitt.emit("toast", { message: invitedToastMsg, duration: 2500 });
              if (updatedToastMsg)
                this.$mitt.emit("toast", { message: updatedToastMsg, duration: 2500 });
              if (removedToastMsg)
                this.$mitt.emit("toast", { message: removedToastMsg, duration: 2500 });
              this.$mitt.emit("refresh-hierarchy-table", { sharedWithRecords });
              this.$mitt.emit("refresh-activity-history");
            }
          });
        }
      }
    };
    const _withScopeId$i = (n) => (pushScopeId("data-v-8d0d21b9"), n = n(), popScopeId(), n);
    const _hoisted_1$T = { class: "slds-grid slds-grid_vertical spm-full-height" };
    const _hoisted_2$R = { class: "slds-grid slds-col slds-scrollable_none" };
    const _hoisted_3$I = { class: "slds-col slds-grow slds-grid slds-grid_vertical" };
    const _hoisted_4$B = ["colspan"];
    const _hoisted_5$y = ["colspan"];
    const _hoisted_6$t = ["colspan"];
    const _hoisted_7$p = {
      key: 0,
      class: "slds-grid slds-grid_vertical-align-center slds-grid_align-spread slds-grow"
    };
    const _hoisted_8$n = { class: "slds-grid slds-grid_vertical-align-center" };
    const _hoisted_9$l = { class: "slds-col slds-grid slds-grid_vertical-align-center slds-m-right_small" };
    const _hoisted_10$h = ["name", "href"];
    const _hoisted_11$e = {
      key: 0,
      class: "slds-col slds-grid slds-grid_vertical-align-center"
    };
    const _hoisted_12$b = ["id"];
    const _hoisted_13$b = ["id"];
    const _hoisted_14$a = { class: "editShareIcon" };
    const _hoisted_15$9 = { key: 2 };
    const _hoisted_16$7 = {
      key: 0,
      class: "slds-grid slds-grid_align-spread slds-grid_vertical-align-center"
    };
    const _hoisted_17$6 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("b", null, "Target", -1));
    const _hoisted_18$6 = {
      key: 1,
      class: "slds-grid slds-grid_align-end slds-grid_vertical-align-center"
    };
    const _hoisted_19$6 = ["name"];
    const _hoisted_20$6 = {
      key: 3,
      class: "slds-grid slds-grid_align-end slds-grid_vertical-align-center"
    };
    const _hoisted_21$4 = ["name"];
    const _hoisted_22$4 = { class: "slds-illustration slds-illustration_small" };
    const _hoisted_23$4 = { class: "slds-text-longform" };
    const _hoisted_24$4 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("h3", { class: "slds-illustration__header slds-text-heading_medium" }, "Establish your hierarchy", -1));
    const _hoisted_25$3 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("p", { class: "slds-text-body_regular" }, "Import your hierarchy data from a CSV file.", -1));
    const _hoisted_26$1 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("h3", { class: "slds-illustration__header slds-text-heading_medium" }, "Get started on your sales plan", -1));
    const _hoisted_27$1 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("p", { class: "slds-text-body_regular" }, "Add your hierarchy, assignment objects, and allocation metrics.", -1));
    const _hoisted_28$1 = { class: "slds-m-vertical_medium" };
    const _hoisted_29$1 = {
      key: 0,
      class: "empty-state-panel spm-full-height"
    };
    const _hoisted_30$1 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("div", { class: "summary-header-cell empty-state-header" }, [
      /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-title_caps slds-text-align_center" }, "Allocation")
    ], -1));
    const _hoisted_31$1 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("div", { class: "empty-state-sub-header slds-border_top slds-p-around_x-small" }, " ", -1));
    const _hoisted_32$1 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-illustration slds-illustration_small" }, [
      /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-longform" }, [
        /* @__PURE__ */ createBaseVNode("h3", { class: "slds-illustration__header slds-text-heading_medium" }, "Allocate some metrics"),
        /* @__PURE__ */ createBaseVNode("p", {
          class: "slds-text-body_regular",
          style: { "margin-left": "3%", "margin-right": "3%" }
        }, "Add quotas, budgets, headcount, and any other metrics that matter to your company.")
      ])
    ], -1));
    const _hoisted_33$1 = { class: "slds-m-vertical_medium" };
    const _hoisted_34 = {
      key: 1,
      class: "empty-state-panel spm-full-height"
    };
    const _hoisted_35 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("div", { class: "summary-header-cell empty-state-header" }, [
      /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-title_caps slds-text-align_center" }, "Assignment")
    ], -1));
    const _hoisted_36 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("div", { class: "empty-state-sub-header slds-border_top slds-p-around_x-small" }, " ", -1));
    const _hoisted_37 = /* @__PURE__ */ _withScopeId$i(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-illustration slds-illustration_small" }, [
      /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-longform" }, [
        /* @__PURE__ */ createBaseVNode("h3", { class: "slds-illustration__header slds-text-heading_medium" }, "Start your assignments"),
        /* @__PURE__ */ createBaseVNode("p", { class: "slds-text-body_regular" }, "Assign records throughout your hierarchy.")
      ])
    ], -1));
    const _hoisted_38 = { class: "slds-m-vertical_medium" };
    function _sfc_render$U(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_ActionMenuItem = resolveComponent("ActionMenuItem");
      const _component_ActionMenu = resolveComponent("ActionMenu");
      const _component_Tooltip = resolveComponent("Tooltip");
      const _component_DataTable = resolveComponent("DataTable");
      const _component_HierarchyEmptyState = resolveComponent("HierarchyEmptyState");
      const _component_Button = resolveComponent("Button");
      const _component_Layout = resolveComponent("Layout");
      return openBlock(), createElementBlock("div", _hoisted_1$T, [
        $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
          description: withCtx(() => [
            createBaseVNode("div", null, toDisplayString($data.loadingMsg), 1)
          ]),
          _: 1
        })) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_2$R, [
          createBaseVNode("div", _hoisted_3$I, [
            createVNode(_component_DataTable, {
              columns: $data.columns,
              rows: $data.rows,
              class: normalizeClass({ "slds-grow-none": $options.showHierarchyEmptyState }),
              summaryHeader: "",
              bordered: "",
              columnsBordered: "",
              tree: "",
              onLoadRow: $options.loadRow
            }, {
              summaryHeaderRow: withCtx(() => [
                createBaseVNode("td", {
                  class: "summary-header-cell slds-text-title_caps slds-text-align_center",
                  colspan: $options.showSharedWith ? 2 : 1
                }, "Hierarchy", 8, _hoisted_4$B),
                _ctx.$store.assignmentObjects.filter((a) => a.recordsDataset.dimensions).length ? (openBlock(), createElementBlock("td", {
                  key: 0,
                  class: "summary-header-cell slds-text-title_caps slds-text-align_center",
                  colspan: _ctx.$store.assignmentObjects.filter((a) => a.recordsDataset.dimensions).length
                }, "Assignment", 8, _hoisted_5$y)) : createCommentVNode("", true),
                _ctx.$store.plan.sfsp__SalesMetrics__r.length ? (openBlock(), createElementBlock("td", {
                  key: 1,
                  class: "summary-header-cell slds-text-title_caps slds-text-align_center",
                  colspan: _ctx.$store.plan.sfsp__SalesMetrics__r.length
                }, "Allocation", 8, _hoisted_6$t)) : createCommentVNode("", true)
              ]),
              cell: withCtx((cell) => {
                var _a2;
                return [
                  cell.data.format === "Name" ? (openBlock(), createElementBlock("div", _hoisted_7$p, [
                    createBaseVNode("div", _hoisted_8$n, [
                      createBaseVNode("div", _hoisted_9$l, [
                        createBaseVNode("div", null, [
                          createBaseVNode("a", {
                            name: `${cell.data.node.name.replaceAll(" ", "-").toLowerCase()}-hierarchy-open-node`,
                            style: { "color": "#0250D9" },
                            href: `/apex/SalesPlanBuilder?planId=${_ctx.$store.plan.Id}&nodeId=${cell.data.node.id}`,
                            target: "_blank"
                          }, toDisplayString(cell.data.node.name), 9, _hoisted_10$h)
                        ])
                      ]),
                      createVNode(_component_ActionMenu, {
                        assistiveText: `${cell.row.name} Overflow Actions`,
                        title: `${cell.row.name} Overflow Actions`,
                        style: { "line-height": "1.25" }
                      }, {
                        button: withCtx(() => [
                          createVNode(_component_ButtonIcon, {
                            name: `hierarchy-manage-node-${cell.row.name.replaceAll(" ", "-").toLowerCase()}`,
                            iconCategory: "utility",
                            iconName: "down",
                            variant: "border-filled",
                            size: "xx-small",
                            assistiveText: `${cell.row.name} Overflow Actions`,
                            title: `${cell.row.name} Overflow Actions`
                          }, null, 8, ["name", "assistiveText", "title"])
                        ]),
                        default: withCtx(() => [
                          createVNode(_component_ActionMenuItem, {
                            label: "Export To CSV",
                            onClick: ($event) => $options.openExportToCSVModal(cell)
                          }, null, 8, ["onClick"]),
                          _ctx.$store.isEditor ? (openBlock(), createBlock(_component_ActionMenuItem, {
                            key: 0,
                            name: `${cell.data.node.name.replaceAll(" ", "-").toLowerCase()}-share`,
                            label: "Share",
                            disabled: !_ctx.$store.hasSalesPlanningTemplateApp,
                            onClick: ($event) => $options.openShareModal(cell)
                          }, null, 8, ["name", "disabled", "onClick"])) : createCommentVNode("", true)
                        ]),
                        _: 2
                      }, 1032, ["assistiveText", "title"])
                    ]),
                    ((_a2 = cell.data) == null ? void 0 : _a2.node.boundaries.length) > 0 ? (openBlock(), createElementBlock("div", _hoisted_11$e, [
                      createVNode(_component_Tooltip, {
                        text: $options.getBoundaryLocationTooltip(cell),
                        alignment: "top"
                      }, {
                        source: withCtx(() => [
                          createVNode(_component_ButtonIcon, {
                            id: `${cell.data.node.name}.boundary-icon`,
                            iconCategory: "utility",
                            iconName: "location",
                            variant: "default",
                            size: "small",
                            assistiveText: `${cell.row.name} Boundaries`,
                            title: `${cell.row.name} Boundaries`
                          }, null, 8, ["id", "assistiveText", "title"])
                        ]),
                        _: 2
                      }, 1032, ["text"])
                    ])) : createCommentVNode("", true)
                  ])) : cell.data.format === "Shared with" ? (openBlock(), createElementBlock("div", {
                    key: 1,
                    id: `share-with-${cell.data.node.name.replaceAll(" ", "-").toLowerCase()}`,
                    class: "slds-grid slds-grid_align-spread slds-grid_vertical-align-center"
                  }, [
                    createBaseVNode("div", {
                      id: `hierarchy-tab-share-with-${cell.data.node.name}`
                    }, toDisplayString(cell.data.node.accessRecords.length > 1 ? `${cell.data.node.accessRecords.length} users` : cell.data.node.accessRecords.length === 1 ? `${cell.data.node.accessRecords[0].name}` : "-"), 9, _hoisted_13$b),
                    createBaseVNode("div", _hoisted_14$a, [
                      createVNode(_component_ButtonIcon, {
                        id: `edit-share-${cell.data.node.name.replaceAll(" ", "-").toLowerCase()}`,
                        iconCategory: "utility",
                        iconName: "edit",
                        d: "",
                        size: "x-small",
                        assistiveText: `${cell.row.name} Edit Shared With`,
                        title: `${cell.row.name} Edit Shared With`,
                        onClick: ($event) => $options.openShareModal(cell)
                      }, null, 8, ["id", "assistiveText", "title", "onClick"])
                    ])
                  ], 8, _hoisted_12$b)) : cell.data.format === "Allocation" ? (openBlock(), createElementBlock("div", _hoisted_15$9, [
                    cell.data.overrideAmount ? (openBlock(), createElementBlock("div", _hoisted_16$7, [
                      createVNode(_component_Tooltip, {
                        id: "targetOverrideTooltip",
                        alignment: "left"
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("div", null, [
                            _hoisted_17$6,
                            createBaseVNode("div", null, "Original: " + toDisplayString(_ctx.$F(cell.data.dataType, cell.data.value)), 1),
                            createBaseVNode("div", null, "Override: " + toDisplayString(_ctx.$F(cell.data.dataType, cell.data.value + cell.data.overrideAmount)), 1)
                          ])
                        ]),
                        _: 2
                      }, 1024),
                      createBaseVNode("div", null, toDisplayString(_ctx.$F(cell.data.dataType, cell.data.value)), 1)
                    ])) : (openBlock(), createElementBlock("div", _hoisted_18$6, [
                      createBaseVNode("div", {
                        name: `${cell.data.columnName.replaceAll(" ", "-").toLowerCase()}-node-value-${cell.row.name.replaceAll(" ", "-").toLowerCase()}`
                      }, toDisplayString(_ctx.$F(cell.data.dataType, cell.data.value)), 9, _hoisted_19$6)
                    ]))
                  ])) : cell.data.format === "Assignment" ? (openBlock(), createElementBlock("div", _hoisted_20$6, [
                    cell.data.state === "loading" ? (openBlock(), createBlock(_component_Spinner, {
                      key: 0,
                      size: "x-small",
                      style: { "z-index": "1", "background-color": "unset" }
                    })) : (openBlock(), createElementBlock("div", {
                      key: 1,
                      name: `${cell.data.columnName.replaceAll(" ", "-").toLowerCase()}-node-value-${cell.row.name.replaceAll(" ", "-").toLowerCase()}`
                    }, toDisplayString(_ctx.$F("Numeric", cell.data.value)), 9, _hoisted_21$4))
                  ])) : createCommentVNode("", true)
                ];
              }),
              _: 1
            }, 8, ["columns", "rows", "class", "onLoadRow"]),
            $options.showHierarchyEmptyState ? (openBlock(), createBlock(_component_Layout, {
              key: 0,
              class: "slds-grow",
              horizontalAlign: "center",
              verticalAlign: "center",
              vertical: ""
            }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_22$4, [
                  createVNode(_component_HierarchyEmptyState),
                  createBaseVNode("div", _hoisted_23$4, [
                    _ctx.$store.assignmentObjects.length || _ctx.$store.plan.sfsp__SalesNodeMetrics__r.length ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                      _hoisted_24$4,
                      _hoisted_25$3
                    ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      _hoisted_26$1,
                      _hoisted_27$1
                    ], 64))
                  ])
                ]),
                createBaseVNode("div", _hoisted_28$1, [
                  _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_Button, {
                    key: 0,
                    label: "Add Hierarchy",
                    onClick: $options.openImportHierarchyModal
                  }, null, 8, ["onClick"])) : createCommentVNode("", true),
                  (_ctx.$store.isAdmin || _ctx.$store.isManager) && (!$data.allowAssignmentEmptyState && !_ctx.$store.assignmentObjects.length || $options.showTableEmptyState) ? (openBlock(), createBlock(_component_Button, {
                    key: 1,
                    label: "Add Assignment Objects",
                    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$mitt.emit("add-new-assignment-object", { allowTemplateCards: true }))
                  })) : createCommentVNode("", true),
                  (_ctx.$store.isAdmin || _ctx.$store.isManager) && (!$data.allowAllocationEmptyState && !_ctx.$store.plan.sfsp__SalesMetrics__r.length || $options.showTableEmptyState) ? (openBlock(), createBlock(_component_Button, {
                    key: 2,
                    label: "Add Allocation Metrics",
                    onClick: _cache[1] || (_cache[1] = ($event) => _ctx.$mitt.emit("add-new-metric", { allowTemplateCards: true }))
                  })) : createCommentVNode("", true)
                ])
              ]),
              _: 1
            })) : createCommentVNode("", true)
          ]),
          !$options.showTableEmptyState ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            !_ctx.$store.plan.sfsp__SalesMetrics__r.length && $data.allowAllocationEmptyState ? (openBlock(), createElementBlock("div", _hoisted_29$1, [
              _hoisted_30$1,
              _hoisted_31$1,
              createVNode(_component_Layout, {
                class: "spm-full-height empty-state-body",
                horizontalAlign: "center",
                verticalAlign: "center",
                vertical: ""
              }, {
                default: withCtx(() => [
                  _hoisted_32$1,
                  createBaseVNode("div", _hoisted_33$1, [
                    _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_Button, {
                      key: 0,
                      label: "Add Metrics",
                      onClick: _cache[2] || (_cache[2] = ($event) => _ctx.$mitt.emit("add-new-metric", { allowTemplateCards: true }))
                    })) : createCommentVNode("", true)
                  ])
                ]),
                _: 1
              })
            ])) : createCommentVNode("", true),
            $options.showAssignmentEmptyState ? (openBlock(), createElementBlock("div", _hoisted_34, [
              _hoisted_35,
              _hoisted_36,
              createVNode(_component_Layout, {
                class: "spm-full-height empty-state-body",
                horizontalAlign: "center",
                verticalAlign: "center",
                vertical: ""
              }, {
                default: withCtx(() => [
                  _hoisted_37,
                  createBaseVNode("div", _hoisted_38, [
                    _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_Button, {
                      key: 0,
                      label: "Add Assignments",
                      onClick: _cache[3] || (_cache[3] = ($event) => _ctx.$mitt.emit("add-new-assignment-object", { allowTemplateCards: true }))
                    })) : createCommentVNode("", true)
                  ])
                ]),
                _: 1
              })
            ])) : createCommentVNode("", true)
          ], 64)) : createCommentVNode("", true)
        ])
      ]);
    }
    const Hierarchy = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["render", _sfc_render$U], ["__scopeId", "data-v-8d0d21b9"]]);
    const PlanOverview_vue_vue_type_style_index_0_scoped_02dd0802_lang = "";
    const _sfc_main$T = {
      name: "PlanOverview",
      components: {
        // slds
        SLDSButton,
        Card,
        Layout,
        LayoutItem,
        Spinner,
        // local
        Hierarchy,
        LeftPanel
      },
      props: ["planId"],
      data() {
        return {
          loading: false,
          ready: false
        };
      },
      created() {
        this.$store.$patch({ plan: { Id: this.$props.planId } });
      },
      async mounted() {
        var _a2;
        SPM.Components.PlanOverview = this;
        this.loading = true;
        let hasPlanAccess = true;
        let planIdFilter = ` Id = '${this.$props.planId}'`;
        if (!this.$store.isAdmin) {
          const userAccessRecords = await SPM.Utils.Apex.invoke("Query", [`SELECT Id, sfsp__SalesPlan__c, sfsp__SalesNode__r.Name, sfsp__AccessLevel__c FROM sfsp__SalesUserAccess__c WHERE sfsp__User__c = '${SPM.currentUser.Id}' AND sfsp__SalesPlan__c = '${this.$props.planId}'`]) || [];
          const availablePlanIds = userAccessRecords.map((ar) => `'${ar.sfsp__SalesPlan__c}'`);
          hasPlanAccess = availablePlanIds.length > 0;
          planIdFilter = ` Id IN (${hasPlanAccess ? availablePlanIds.join(",") : null})`;
          this.$store.$patch({ userAccessRecords });
        }
        if (!hasPlanAccess) {
          this.$mitt.emit("accessDenied");
          this.loading = false;
          return;
        }
        this.$store.hasSalesPlanningTemplateApp = !!(await SPM.Utils.Apex.invoke("Query", ["SELECT Id FROM Folder where Type = 'Insights' AND DeveloperName = 'Sales_Planning'"]))[0];
        const plan = {
          ...SPM.Utils.Plan.defaults(),
          ...(await SPM.Utils.Apex.invoke("Query", [`
                SELECT
                    Id,
                    Name,
                    sfsp__Description__c,
                    sfsp__Period__c,
                    sfsp__Status__c,
                    sfsp__Type__c,
                    sfsp__AssignmentBehavior__c,
                    sfsp__HierarchyReference__c,
                    sfsp__SalesDataSource__r.Name,
                    sfsp__SalesDataSource__r.sfsp__SourceId__c,
                    (
                        SELECT Id, Name, sfsp__Description__c, sfsp__Type__c, sfsp__TargetOverrideEnabled__c FROM sfsp__SalesMetrics__r
                    ),
                    (
                        SELECT Id, Name, sfsp__Label__c, sfsp__ReferenceFields__c FROM sfsp__SalesAssignmentObjects__r
                    ),
                    (
                        SELECT
                            Id, sfsp__SalesMetric__c, sfsp__TargetOverrideAmount__c, sfsp__TargetOverrideType__c, ${Array(12).fill().map((v, i2) => `sfsp__Target_Month${i2 + 1}__c`).join(", ")}
                        FROM sfsp__SalesNodeMetrics__r
                        WHERE sfsp__SalesNode__c = ''
                    ),
                    (
                        SELECT Id, sfsp__User__r.Name, sfsp__AccessLevel__c, sfsp__SalesNode__r.Name FROM sfsp__SalesUserAccess__r 
                    )
                FROM sfsp__SalesPlan__c
                WHERE${planIdFilter}
            `]))[0]
        };
        if (!plan.Id) {
          return this.$mitt.emit("toast", {
            duration: 0,
            message: "Plan does not exist.",
            state: "info"
          });
        }
        if (plan.sfsp__Status__c !== "Active") {
          return this.$mitt.emit("toast", {
            duration: 0,
            message: "Plan is not active.",
            state: "info"
          });
        }
        this.$store.$patch({ plan });
        if (plan.sfsp__Type__c === "Segmentation") {
          SPM.Components.Root.page = "SegmentationPlanOverview";
          return;
        }
        const salesAsyncJobs = await SPM.Utils.AssignmentObject.getSalesAsyncJobs({ statuses: ["Queued", "Running", "Waiting", "Failure"] }) || [];
        this.$store.$patch({ salesAsyncJobs });
        await Promise.allSettled([
          this.$store.availableAdminIds = new Set((await SPM.Utils.Apex.invoke("GetUsersWithPermissionSet", ["SalesPlanningAdmin"]) || []).map((u) => u.Id)),
          this.$store.availableManagerIds = new Set((await SPM.Utils.Apex.invoke("GetUsersWithPermissionSet", ["SalesPlanningOpsManager"]) || []).map((u) => u.Id))
        ]);
        this.loading = false;
        if (this.$store.userAccessRecords.length > 1) {
          SPM.Components.Root.openModal("discreteBranch", {
            planId: plan.Id,
            userAccessRecords: this.$store.userAccessRecords,
            requireSelection: true,
            callback: async (branch) => {
              this.$store.$patch({ branch });
              this.ready = true;
            }
          });
        } else if (this.$store.userAccessRecords.length === 1) {
          const uac = this.$store.userAccessRecords[0];
          const branch = {
            id: uac.sfsp__SalesNode__c || "All Org",
            name: ((_a2 = uac.sfsp__SalesNode__r) == null ? void 0 : _a2.Name) || "All Org",
            accessLevel: uac.sfsp__AccessLevel__c,
            descendantIds: await SPM.Utils.Node.getDescendantIds({ planId: plan.Id, nodeIds: [uac.sfsp__SalesNode__c || ""] })
          };
          this.$store.$patch({ branch });
          this.ready = true;
        } else {
          this.$store.$patch({ branch: { ...this.$store.branch, descendantIds: await SPM.Utils.Node.getDescendantIds({ planId: plan.Id, nodeIds: [""] }) } });
          this.ready = true;
        }
        SPM.Utils.Splunk.sendLog({ logName: "spmEPT", logPayload: { pageName: "Plan Overview" } });
      },
      methods: {
        onEditPlanSpacebarPress() {
          window.open(`${window.origin}/apex/SalesPlanBuilder?planId=${this.$store.plan.Id}&nodeId=All Org`);
        },
        changeBranch() {
          SPM.Components.Hierarchy.loading = true;
          SPM.Components.Root.openModal("discreteBranch", {
            planId: this.$store.plan.Id,
            userAccessRecords: this.$store.userAccessRecords,
            currentBranch: this.$store.branch.id,
            callback: async (branch) => {
              this.$store.$patch({ branch });
              await SPM.Components.Hierarchy.init();
              SPM.Components.Hierarchy.loading = false;
            }
          });
        },
        publish() {
          SPM.Components.Root.openModal("publish", { kondo: true });
        }
      }
    };
    const _hoisted_1$S = ["href"];
    function _sfc_render$T(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_LeftPanel = resolveComponent("LeftPanel");
      const _component_LayoutItem = resolveComponent("LayoutItem");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Hierarchy = resolveComponent("Hierarchy");
      const _component_Card = resolveComponent("Card");
      const _component_Layout = resolveComponent("Layout");
      return openBlock(), createBlock(_component_Layout, { style: { "height": "100vh" } }, {
        default: withCtx(() => [
          $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
          createVNode(_component_LayoutItem, { style: { "width": "20%", "min-width": "384px" } }, {
            default: withCtx(() => [
              $data.ready ? (openBlock(), createBlock(_component_LeftPanel, { key: 0 })) : createCommentVNode("", true)
            ]),
            _: 1
          }),
          createVNode(_component_LayoutItem, {
            style: { "width": "100%" },
            class: "slds-p-around_large"
          }, {
            default: withCtx(() => [
              $data.ready ? (openBlock(), createBlock(_component_Card, {
                key: 0,
                class: "plan-overview-card slds-grid slds-grid_vertical spm-full-height",
                title: "Plan Hierarchy"
              }, {
                "header-content": withCtx(() => [
                  _ctx.$store.userAccessRecords.length > 1 ? (openBlock(), createBlock(_component_SLDSButton, {
                    key: 0,
                    id: "plan-home-change-branch",
                    label: "Change Root",
                    variant: "neutral",
                    onClick: $options.changeBranch
                  }, null, 8, ["onClick"])) : createCommentVNode("", true),
                  createBaseVNode("a", {
                    id: "edit-plan",
                    href: `/apex/SalesPlanBuilder?planId=${_ctx.$store.plan.Id}&nodeId=${_ctx.$store.branch.id}`,
                    role: "button",
                    class: "slds-button slds-button_neutral",
                    target: "_blank",
                    onKeydown: _cache[0] || (_cache[0] = withKeys(withModifiers((...args) => $options.onEditPlanSpacebarPress && $options.onEditPlanSpacebarPress(...args), ["prevent"]), ["space"]))
                  }, toDisplayString(_ctx.$store.isEditor ? "Edit Plan" : "View Plan"), 41, _hoisted_1$S),
                  _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_SLDSButton, {
                    key: 1,
                    id: "publish-plan",
                    label: "Publish",
                    disabled: _ctx.$store.salesAsyncJobs.length > 0,
                    variant: "brand",
                    onClick: $options.publish
                  }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true)
                ]),
                body: withCtx(() => [
                  createVNode(_component_Hierarchy)
                ]),
                _: 1
              })) : createCommentVNode("", true)
            ]),
            _: 1
          })
        ]),
        _: 1
      });
    }
    const PlanOverview = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["render", _sfc_render$T], ["__scopeId", "data-v-02dd0802"]]);
    const PlanDetails_vue_vue_type_style_index_0_scoped_0288b826_lang = "";
    const _sfc_main$S = {
      name: "PlanDetails",
      components: {
        Icon
      },
      data() {
        return {
          loadingMsg: ""
        };
      },
      async mounted() {
        SPM.Components.PlanDetails = this;
      },
      methods: {
        openAddTeamMemberModal() {
          SPM.Components.Root.openModal("addTeamMembers", {
            callback: async (toastMsg) => {
              this.$mitt.emit("refresh-activity-history");
              if (toastMsg)
                this.$store.toast({ message: toastMsg, duration: 3e3 });
            }
          });
        },
        openEditModal() {
          SPM.Components.Root.openModal("salesPlan", {
            edit: true,
            isAdvanced: true,
            callback: ({ plan }) => {
              this.$mitt.emit("toast", { message: `${plan.Name} successfully updated.`, duration: 2500 });
              this.$store.$patch({ plan: { ...this.$store.plan, ...plan } });
            }
          });
        },
        openDeleteConfirmModal() {
          SPM.Components.Root.openModal("confirmDelete", {
            delete: async () => {
              await SPM.Utils.CRM.upsert({ records: [{ Id: this.$store.plan.Id, sfsp__Status__c: "Deleted" }] });
              await insertActivities([{
                name: this.$store.plan.Name,
                parentId: this.$store.plan.Id,
                recordType: ActivityRecordTypes.PLAN,
                subtype: ActivitySubtypes.DELETE,
                type: ActivityTypes.MANAGEMENT
              }]);
              return { success: true };
            },
            callback: () => {
              const { Name } = this.$store.plan;
              SPM.Components.Root.loadPlan("", () => {
                this.$mitt.emit("toast", { message: `${Name} successfully deleted.`, duration: 2500 });
              });
            },
            textContent: `Are you sure you want to delete plan <strong>${SPM.Utils.Str.sanitizeHTML(this.$store.plan.Name)}</strong>? All plan data, planning elements and associated scenarios will be deleted for all users. This action cannot be undone.`,
            title: "Delete Plan"
          });
        }
      }
    };
    const _withScopeId$h = (n) => (pushScopeId("data-v-0288b826"), n = n(), popScopeId(), n);
    const _hoisted_1$R = { class: "slds-card slds-p-around_small" };
    const _hoisted_2$Q = { class: "slds-grid slds-grid_vertical-align-center" };
    const _hoisted_3$H = { class: "slds-m-left_small" };
    const _hoisted_4$A = /* @__PURE__ */ _withScopeId$h(() => /* @__PURE__ */ createBaseVNode("div", { class: "spm-card-subtitle" }, "Sales Plan", -1));
    const _hoisted_5$x = { class: "spm-card-title" };
    const _hoisted_6$s = {
      class: "slds-button-group slds-m-top_small",
      role: "group"
    };
    const _hoisted_7$o = {
      class: "slds-m-top_small",
      style: { "white-space": "pre-wrap" }
    };
    function _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      return openBlock(), createElementBlock("div", _hoisted_1$R, [
        createBaseVNode("div", _hoisted_2$Q, [
          createVNode(_component_Icon, {
            category: "standard",
            name: "work_plan"
          }),
          createBaseVNode("div", _hoisted_3$H, [
            _hoisted_4$A,
            createBaseVNode("div", _hoisted_5$x, toDisplayString(_ctx.$store.plan.Name), 1)
          ])
        ]),
        createBaseVNode("div", _hoisted_6$s, [
          createBaseVNode("button", {
            class: "slds-button slds-button_neutral",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.openAddTeamMemberModal && $options.openAddTeamMemberModal(...args))
          }, "Share"),
          createBaseVNode("button", {
            class: "slds-button slds-button_neutral",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.openEditModal && $options.openEditModal(...args))
          }, "Edit"),
          createBaseVNode("button", {
            class: "slds-button slds-button_neutral",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.openDeleteConfirmModal && $options.openDeleteConfirmModal(...args))
          }, "Delete")
        ]),
        createBaseVNode("p", _hoisted_7$o, toDisplayString(_ctx.$store.plan.sfsp__Description__c), 1)
      ]);
    }
    const PlanDetails = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["render", _sfc_render$S], ["__scopeId", "data-v-0288b826"]]);
    const DataSourceModal_vue_vue_type_style_index_0_scoped_3fa6dfb9_lang = "";
    const _sfc_main$R = {
      name: "DataSourceModal",
      components: {
        Spinner,
        Modal,
        TextInput,
        Icon,
        ButtonIcon
      },
      emits: ["select", "close"],
      data() {
        return {
          isLoading: true,
          searchTerm: "",
          dataSources: []
        };
      },
      computed: {
        filteredDataSources() {
          return this.dataSources.filter((ds) => ds.Name.toLowerCase().includes(this.searchTerm.toLowerCase()));
        }
      },
      async mounted() {
        SPM.Components.DataSourceModal = this;
        this.dataSources = await SPM.Utils.Apex.invoke("Query", ["SELECT Id, Name, sfsp__SourceId__c, sfsp__ReferenceFields__c FROM sfsp__SalesDataSource__c"]);
        this.isLoading = false;
      },
      methods: {
        selectDataSource(dataSource) {
          this.$emit("select", dataSource);
          this.$emit("close");
        }
      }
    };
    const _withScopeId$g = (n) => (pushScopeId("data-v-3fa6dfb9"), n = n(), popScopeId(), n);
    const _hoisted_1$Q = {
      key: 1,
      class: "slds-m-top_small",
      style: { "max-height": "600px", "overflow": "auto" }
    };
    const _hoisted_2$P = { class: "slds-table slds-table_bordered slds-table_col-bordered" };
    const _hoisted_3$G = /* @__PURE__ */ _withScopeId$g(() => /* @__PURE__ */ createBaseVNode("thead", null, [
      /* @__PURE__ */ createBaseVNode("tr", null, [
        /* @__PURE__ */ createBaseVNode("th", null, "Name"),
        /* @__PURE__ */ createBaseVNode("th", null, "Reference Fields")
      ])
    ], -1));
    const _hoisted_4$z = ["onClick"];
    const _hoisted_5$w = { key: 2 };
    function _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Icon = resolveComponent("Icon");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_TextInput = resolveComponent("TextInput");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        title: "Select Data Source",
        size: "small",
        footless: true,
        onClose: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          $data.isLoading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
          createVNode(_component_TextInput, {
            modelValue: $data.searchTerm,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.searchTerm = $event),
            class: "slds-input-has-icon slds-input-has-icon_left-right slds-grow",
            labels: { placeholder: "Search Data Sources..." }
          }, {
            extend: withCtx(() => [
              createVNode(_component_Icon, {
                category: "utility",
                name: "search",
                iconClass: ["slds-input__icon", "slds-input__icon_left"]
              }),
              createVNode(_component_ButtonIcon, {
                iconCategory: "utility",
                iconName: "clear",
                assistiveText: "Clear",
                iconClass: ["slds-button__icon", "slds-icon-text-light"],
                class: "slds-button slds-button_icon slds-input__icon slds-input__icon_right",
                title: "Clear",
                onClick: _cache[0] || (_cache[0] = ($event) => $data.searchTerm = "")
              })
            ]),
            _: 1
          }, 8, ["modelValue", "labels"]),
          $data.dataSources.length ? (openBlock(), createElementBlock("div", _hoisted_1$Q, [
            createBaseVNode("table", _hoisted_2$P, [
              _hoisted_3$G,
              createBaseVNode("tbody", null, [
                (openBlock(true), createElementBlock(Fragment, null, renderList($options.filteredDataSources, (dataSource) => {
                  return openBlock(), createElementBlock("tr", {
                    key: dataSource.Id,
                    style: { "cursor": "pointer" },
                    onClick: ($event) => $options.selectDataSource(dataSource)
                  }, [
                    createBaseVNode("td", null, toDisplayString(dataSource.Name), 1),
                    createBaseVNode("td", null, toDisplayString(JSON.parse(dataSource.sfsp__ReferenceFields__c).length), 1)
                  ], 8, _hoisted_4$z);
                }), 128))
              ])
            ])
          ])) : createCommentVNode("", true),
          !$data.isLoading && $data.dataSources.length === 0 ? (openBlock(), createElementBlock("div", _hoisted_5$w, "There are no data sources available. Please contact your admin.")) : createCommentVNode("", true)
        ]),
        _: 1
      });
    }
    const DataSourceModal = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["render", _sfc_render$R], ["__scopeId", "data-v-3fa6dfb9"]]);
    const _sfc_main$Q = {
      name: "Desert",
      props: ["header", "body"]
    };
    const _hoisted_1$P = { class: "slds-illustration" };
    const _hoisted_2$O = /* @__PURE__ */ createStaticVNode('<svg class="slds-illustration__svg" viewBox="0 0 468 194" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-67.000000, -112.000000)"><g><g transform="translate(245.000000, 200.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(135.000000, 152.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(69.000000, 256.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M14,36.5 L464,36.5"></path><path vector-effect="non-scaling-stroke" d="M0,36.5 L6,36.5"></path><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="234.5 36 279.5 0 313.5 26"></polyline><path vector-effect="non-scaling-stroke" d="M279.5,1 L279.5,35" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M313.5,11 C313.5,20.7437888 313.5,25.7437888 313.5,26 C313.5,25.7437888 313.5,20.7437888 313.5,11 Z" stroke-linejoin="round"></path><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="303.5 17 313.5 9 347.5 36"></polyline></g><g transform="translate(113.000000, 178.000000)"><g transform="translate(30.000000, 8.000000)" class="slds-illustration__fill-secondary"><path vector-effect="non-scaling-stroke" d="M29.5,60.5 L29.5,12 C29.5,5.372583 34.872583,0 41.5,0 C48.127417,0 53.5,5.372583 53.5,12 L53.5,40.5 L70.5,40.5 L70.5,27 C70.5,23.1340068 73.6340068,20 77.5,20 C81.3659932,20 84.5,23.1340068 84.5,27 L84.5,48.5 C84.5,51.8137085 81.8137085,54.5 78.5,54.5 L53.5,54.5 L53.5,118.5 L29.5,118.5 L29.5,74.5 L6.5,74.5 C3.1862915,74.5 0.5,71.8137085 0.5,68.5 L0.5,39 C0.5,35.1340068 3.63400675,32 7.5,32 C11.3659932,32 14.5,35.1340068 14.5,39 L14.5,60.5 L29.5,60.5 Z"></path></g><g transform="translate(59.000000, 7.000000)" fill="#FFFFFF"><path vector-effect="non-scaling-stroke" d="M2,11 C3.65332031,8.49145508 5.65181478,6.77364095 7.9954834,5.84655762 C11.5109863,4.45593262 15.2684326,4.95605469 17.8156738,6.2824707 C20.362915,7.60888672 22.3626709,9.64978027 23.2602539,11.81604 C23.8586426,13.2602132 23.8586426,11.7547201 23.2602539,7.29956055 L19.612793,3.56494141 L13.7923584,0.564331055 L8.765625,1.42663574 L4.67321777,3.19787598 C2.69893392,5.13902708 1.69559733,6.16722532 1.66320801,6.2824707 C1.61462402,6.45533878 0.856079102,9.49145508 0.813964844,9.66003418 C0.785888672,9.77242025 1.18123372,10.2190755 2,11 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M0,126.5 L356,126.5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M362.5,126.5 L372.013149,126.5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M107.5,20 L107.5,28" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M113,30.6568542 L118.656854,25" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M37.5,32 L37.5,40" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M44,42.6568542 L49.6568542,37" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M25,42.6568542 L30.6568542,37" stroke-linecap="round" transform="translate(27.828427, 39.828427) scale(-1, 1) translate(-27.828427, -39.828427) "></path><path vector-effect="non-scaling-stroke" d="M71.5,0 L71.5,8" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M79,10.6568542 L84.6568542,5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M58,10.6568542 L63.6568542,5" stroke-linecap="round" transform="translate(60.828427, 7.828427) scale(-1, 1) translate(-60.828427, -7.828427) "></path><path vector-effect="non-scaling-stroke" d="M59.5,68.5 L59.5,20 C59.5,13.372583 64.872583,8 71.5,8 C78.127417,8 83.5,13.372583 83.5,20 L83.5,48.5 L100.5,48.5 L100.5,35 C100.5,31.1340068 103.634007,28 107.5,28 C111.365993,28 114.5,31.1340068 114.5,35 L114.5,56.5 C114.5,59.8137085 111.813708,62.5 108.5,62.5 L83.5,62.5 L83.5,126.5 L59.5,126.5 L59.5,82.5 L36.5,82.5 C33.1862915,82.5 30.5,79.8137085 30.5,76.5 L30.5,47 C30.5,43.1340068 33.6340068,40 37.5,40 C41.3659932,40 44.5,43.1340068 44.5,47 L44.5,68.5 L59.5,68.5 Z"></path><path vector-effect="non-scaling-stroke" d="M77,88.5 L92.5,88.5 L92.5,81 C92.5,77.1340068 95.6340068,74 99.5,74 L99.5,74 C103.365993,74 106.5,77.1340068 106.5,81 L106.5,96.5 C106.5,99.8137085 103.813708,102.5 100.5,102.5 L77,102.5" class="slds-illustration__fill-secondary" stroke-linecap="round" stroke-linejoin="round"></path></g></g><g transform="translate(429.000000, 242.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><g><path vector-effect="non-scaling-stroke" d="M12.5,4 L12.5,50"></path><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="11 18.5 0.5 18.5 0.5 0"></polyline><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="14 25.5 24.5 25.5 24.5 8"></polyline><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="2.5 31 2.5 38.5 11 38.5"></polyline></g></g><g transform="translate(327.000000, 95.000000)"><g><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" cx="64" cy="64" r="23"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="135,1,1,18" transform="translate(64.000000, 64.000000) rotate(230.000000) translate(-64.000000, -64.000000) " cx="64" cy="64" r="45"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="107,10" transform="translate(64.000000, 64.000000) rotate(150.000000) translate(-64.000000, -64.000000) " cx="64" cy="64" r="33"></circle></g><g transform="translate(41.000000, 41.000000)" class="slds-illustration__stroke-primary" stroke-width="3"><circle vector-effect="non-scaling-stroke" cx="23" cy="23" r="23"></circle></g></g></g></g></g></svg>', 1);
    const _hoisted_3$F = {
      key: 0,
      class: "slds-text-longform"
    };
    const _hoisted_4$y = {
      key: 0,
      class: "slds-illustration__header slds-text-heading_medium"
    };
    const _hoisted_5$v = {
      key: 1,
      class: "slds-text-body_regular"
    };
    function _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", _hoisted_1$P, [
        _hoisted_2$O,
        $props.header || $props.body ? (openBlock(), createElementBlock("div", _hoisted_3$F, [
          $props.header ? (openBlock(), createElementBlock("h3", _hoisted_4$y, toDisplayString($props.header), 1)) : createCommentVNode("", true),
          $props.body ? (openBlock(), createElementBlock("p", _hoisted_5$v, toDisplayString($props.body), 1)) : createCommentVNode("", true)
        ])) : createCommentVNode("", true)
      ]);
    }
    const Desert = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["render", _sfc_render$Q]]);
    const UsersList_vue_vue_type_style_index_0_scoped_2e9bdf45_lang = "";
    const _sfc_main$P = {
      name: "UsersList",
      components: {
        Spinner,
        Icon,
        ButtonIcon,
        Desert,
        ActionMenu,
        ActionMenuItem,
        Button: SLDSButton
      },
      data() {
        return {
          isLoading: true,
          // plan users
          planUsers: []
        };
      },
      async mounted() {
        SPM.Components.UsersList = this;
        await this.getPlanUsers();
      },
      methods: {
        async getPlanUsers() {
          this.isLoading = true;
          this.planUsers = await SPM.Utils.Apex.invoke("Query", [`
                SELECT Id, sfsp__SalesNode__c, sfsp__User__r.Name, sfsp__User__r.SmallPhotoUrl
                FROM sfsp__SalesUserAccess__c
                WHERE sfsp__SalesPlan__c = '${SPM.Components.Root.planId}' AND sfsp__SalesNode__c = NULL
            `]);
          this.isLoading = false;
        },
        openAddTeamMemberModal() {
          SPM.Components.Root.openModal("addTeamMembers", {
            callback: async (toastMsg) => {
              this.$mitt.emit("refresh-activity-history");
              const userAccessRecords = await SPM.Utils.Apex.invoke("Query", [`SELECT Id, sfsp__SalesPlan__c, sfsp__SalesNode__c, sfsp__AccessLevel__c FROM sfsp__SalesUserAccess__c WHERE sfsp__User__c = '${SPM.currentUser.Id}' AND sfsp__SalesPlan__c != NULL `]) || [];
              this.$store.$patch({ userAccessRecords });
              if (toastMsg)
                this.$store.toast({ message: toastMsg, duration: 3e3 });
            }
          });
        },
        async addUser(user) {
          const newPlanUser = {
            sobjectType: "sfsp__SalesUserAccess__c",
            sfsp__User__c: user.Id,
            sfsp__User__r: user,
            sfsp__SalesPlan__c: SPM.Components.Root.planId
          };
          this.planUsers.push(newPlanUser);
          await SPM.Utils.CRM.upsert({ records: [newPlanUser] });
        },
        async removeUser(planUser) {
          SPM.Utils.Arr.splice(this.planUsers, (pu) => pu === planUser);
          await SPM.Utils.CRM.delete({ records: [planUser] });
          const activityRecords = [];
          activityRecords.push({
            description: `Removed ${planUser.sfsp__User__r.Name} from ${this.$store.plan.Name}`,
            name: this.$store.plan.Name,
            parentId: this.$store.plan.Id,
            recordType: ActivityRecordTypes.PLAN,
            subtype: ActivitySubtypes.DELETE,
            type: ActivityTypes.SHARING
          });
          await insertActivities(activityRecords);
          this.$mitt.emit("refresh-activity-history");
        }
      }
    };
    const _withScopeId$f = (n) => (pushScopeId("data-v-2e9bdf45"), n = n(), popScopeId(), n);
    const _hoisted_1$O = { class: "slds-card slds-card_boundary" };
    const _hoisted_2$N = { class: "slds-card__header slds-grid slds-grid_vertical-align-center slds-p-bottom_small slds-m-bottom_none slds-border_bottom" };
    const _hoisted_3$E = { class: "slds-card__header-title" };
    const _hoisted_4$x = {
      key: 2,
      class: "slds-table users-table"
    };
    const _hoisted_5$u = /* @__PURE__ */ _withScopeId$f(() => /* @__PURE__ */ createBaseVNode("thead", null, [
      /* @__PURE__ */ createBaseVNode("tr", null, [
        /* @__PURE__ */ createBaseVNode("th", { style: { "width": "100%" } }, "Name"),
        /* @__PURE__ */ createBaseVNode("th")
      ])
    ], -1));
    const _hoisted_6$r = { class: "slds-grid slds-grid_vertical-align-center" };
    const _hoisted_7$n = ["src"];
    const _hoisted_8$m = ["href"];
    const _hoisted_9$k = ["id"];
    function _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Desert = resolveComponent("Desert");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_ActionMenuItem = resolveComponent("ActionMenuItem");
      const _component_ActionMenu = resolveComponent("ActionMenu");
      return openBlock(), createElementBlock("div", _hoisted_1$O, [
        createBaseVNode("div", _hoisted_2$N, [
          createVNode(_component_Icon, {
            category: "standard",
            name: "groups",
            class: "slds-m-right_small"
          }),
          createBaseVNode("h2", _hoisted_3$E, "Users (" + toDisplayString($data.planUsers.length) + ")", 1),
          createBaseVNode("button", {
            class: "slds-button slds-button_neutral slds-col_bump-left",
            onClick: _cache[0] || (_cache[0] = ($event) => $options.openAddTeamMemberModal())
          }, "Add")
        ]),
        $data.isLoading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : $data.planUsers.length === 0 ? (openBlock(), createBlock(_component_Desert, {
          key: 1,
          class: "slds-illustration_small slds-m-top_small",
          body: "Add users to grant them access to this plan"
        })) : (openBlock(), createElementBlock("table", _hoisted_4$x, [
          _hoisted_5$u,
          createBaseVNode("tbody", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList($data.planUsers, (planUser) => {
              return openBlock(), createElementBlock("tr", {
                key: planUser.Id
              }, [
                createBaseVNode("td", null, [
                  createBaseVNode("div", _hoisted_6$r, [
                    createBaseVNode("img", {
                      src: planUser.sfsp__User__r.SmallPhotoUrl,
                      style: { "width": "32px", "height": "32px", "border-radius": "16px", "margin-right": "12px" }
                    }, null, 8, _hoisted_7$n),
                    createBaseVNode("a", {
                      href: `/${planUser.sfsp__User__r.Id}`,
                      target: "_blank"
                    }, toDisplayString(planUser.sfsp__User__r.Name), 9, _hoisted_8$m)
                  ])
                ]),
                createBaseVNode("td", null, [
                  createVNode(_component_ActionMenu, null, {
                    button: withCtx(() => [
                      createVNode(_component_ButtonIcon, {
                        iconCategory: "utility",
                        iconName: "down",
                        variant: "border-filled",
                        size: "x-small",
                        assistiveText: `View Actions`,
                        title: `View Actions`
                      })
                    ]),
                    default: withCtx(() => [
                      createVNode(_component_ActionMenuItem, {
                        label: "",
                        onClick: ($event) => $options.removeUser(planUser)
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("span", {
                            id: `remove-member-${planUser.id}`,
                            class: "slds-text-color_destructive"
                          }, "Remove", 8, _hoisted_9$k)
                        ]),
                        _: 2
                      }, 1032, ["onClick"])
                    ]),
                    _: 2
                  }, 1024)
                ])
              ]);
            }), 128))
          ])
        ]))
      ]);
    }
    const UsersList = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["render", _sfc_render$P], ["__scopeId", "data-v-2e9bdf45"]]);
    const _sfc_main$O = {
      name: "PlanContent",
      components: {
        Icon,
        DataSourceModal,
        UsersList,
        ActionMenu,
        ActionMenuItem,
        ButtonIcon,
        Button: SLDSButton
      },
      data() {
        return {
          loadingMsg: "",
          // records
          showDataSourceModal: false,
          recordCount: 0,
          recordName: "",
          // segments
          segmentCount: 0
        };
      },
      async mounted() {
        var _a2, _b;
        SPM.Components.PlanContent = this;
        if (this.$store.plan.sfsp__SalesDataSource__r)
          this.updateDataSource(this.$store.plan.sfsp__SalesDataSource__r);
        this.segmentCount = ((_b = (_a2 = await SPM.Utils.Apex.invoke(
          "Query",
          [`
                SELECT Count(Id) NodeCount
                FROM sfsp__SalesNode__c
                WHERE sfsp__SalesPlan__c = '${this.$store.plan.Id}'
            `]
        )) == null ? void 0 : _a2[0]) == null ? void 0 : _b.NodeCount) || 0;
      },
      methods: {
        async updateDataSource(dataSource) {
          SPM.Utils.CRM.upsert({ records: [{ Id: this.$store.plan.Id, sfsp__SalesDataSource__c: dataSource.Id }] });
          this.$store.plan.sfsp__SalesDataSource__c = dataSource.Id;
          this.$store.plan.sfsp__SalesDataSource__r = dataSource;
          const { currentVersionTotalRowCount } = await SPM.Utils.Rest.invoke("GetDataset", { id: dataSource.sfsp__SourceId__c });
          this.recordCount = currentVersionTotalRowCount;
          this.recordName = dataSource.Name;
        },
        launchSegmentBuilder() {
          window.open(`/apex/SegmentBuilder?planId=${this.$store.plan.Id}`);
        }
      }
    };
    const _hoisted_1$N = { class: "slds-card slds-p-around_small" };
    const _hoisted_2$M = { class: "spm-overview slds-card" };
    const _hoisted_3$D = /* @__PURE__ */ createBaseVNode("div", { class: "spm-overview-title" }, "Sales Plan Details", -1);
    const _hoisted_4$w = { class: "slds-grid" };
    const _hoisted_5$t = {
      key: 0,
      class: "slds-card"
    };
    const _hoisted_6$q = /* @__PURE__ */ createBaseVNode("div", { class: "spm-overview-card-title" }, "Records", -1);
    const _hoisted_7$m = { class: "slds-box slds-grid slds-grid_vertical slds-grid_vertical-align-center" };
    const _hoisted_8$l = /* @__PURE__ */ createBaseVNode("div", { class: "slds-m-bottom_xx-small" }, "No Records Yet", -1);
    const _hoisted_9$j = {
      key: 1,
      class: "slds-card"
    };
    const _hoisted_10$g = /* @__PURE__ */ createBaseVNode("div", { class: "spm-overview-card-title" }, "Records", -1);
    const _hoisted_11$d = { class: "spm-overview-card-count" };
    const _hoisted_12$a = { class: "spm-datasource-name slds-m-top_large" };
    const _hoisted_13$a = /* @__PURE__ */ createBaseVNode("span", null, "Select Data Source", -1);
    const _hoisted_14$9 = {
      key: 3,
      class: "slds-card"
    };
    const _hoisted_15$8 = /* @__PURE__ */ createBaseVNode("div", { class: "spm-overview-card-title" }, "Segments", -1);
    const _hoisted_16$6 = { class: "slds-box slds-grid slds-grid_vertical slds-grid_vertical-align-center" };
    const _hoisted_17$5 = /* @__PURE__ */ createBaseVNode("div", { class: "slds-m-bottom_xx-small" }, "No Segments Yet", -1);
    const _hoisted_18$5 = {
      key: 4,
      class: "slds-card"
    };
    const _hoisted_19$5 = /* @__PURE__ */ createBaseVNode("div", { class: "spm-overview-card-title" }, "Segments", -1);
    const _hoisted_20$5 = { class: "spm-overview-card-count" };
    function _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_ActionMenuItem = resolveComponent("ActionMenuItem");
      const _component_ActionMenu = resolveComponent("ActionMenu");
      const _component_DataSourceModal = resolveComponent("DataSourceModal");
      const _component_UsersList = resolveComponent("UsersList");
      return openBlock(), createElementBlock("div", _hoisted_1$N, [
        createBaseVNode("div", _hoisted_2$M, [
          _hoisted_3$D,
          createBaseVNode("div", _hoisted_4$w, [
            !_ctx.$store.plan.sfsp__SalesDataSource__r ? (openBlock(), createElementBlock("div", _hoisted_5$t, [
              _hoisted_6$q,
              createBaseVNode("div", _hoisted_7$m, [
                _hoisted_8$l,
                createBaseVNode("button", {
                  class: "slds-button slds-button_brand",
                  onClick: _cache[0] || (_cache[0] = ($event) => $data.showDataSourceModal = true)
                }, "Link Data Source")
              ])
            ])) : (openBlock(), createElementBlock("div", _hoisted_9$j, [
              _hoisted_10$g,
              createBaseVNode("div", _hoisted_11$d, toDisplayString(_ctx.$F("Compact", $data.recordCount)), 1),
              createBaseVNode("div", _hoisted_12$a, "Data Source: " + toDisplayString($data.recordName), 1),
              createVNode(_component_ActionMenu, { class: "spm-overview-card-edit" }, {
                button: withCtx(() => [
                  createVNode(_component_ButtonIcon, {
                    iconCategory: "utility",
                    iconName: "down",
                    variant: "border-filled",
                    size: "x-small",
                    assistiveText: `View Actions`,
                    title: `View Actions`
                  })
                ]),
                default: withCtx(() => [
                  createVNode(_component_ActionMenuItem, {
                    label: "Select Data Source",
                    onClick: _cache[1] || (_cache[1] = ($event) => $data.showDataSourceModal = true)
                  }, {
                    default: withCtx(() => [
                      _hoisted_13$a
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ])),
            $data.showDataSourceModal ? (openBlock(), createBlock(_component_DataSourceModal, {
              key: 2,
              onSelect: $options.updateDataSource,
              onClose: _cache[2] || (_cache[2] = ($event) => $data.showDataSourceModal = false)
            }, null, 8, ["onSelect"])) : createCommentVNode("", true),
            $data.segmentCount === 0 ? (openBlock(), createElementBlock("div", _hoisted_14$9, [
              _hoisted_15$8,
              createBaseVNode("div", _hoisted_16$6, [
                _hoisted_17$5,
                createBaseVNode("button", {
                  class: "slds-button slds-button_brand",
                  onClick: _cache[3] || (_cache[3] = (...args) => $options.launchSegmentBuilder && $options.launchSegmentBuilder(...args))
                }, "Create Segments")
              ])
            ])) : (openBlock(), createElementBlock("div", _hoisted_18$5, [
              _hoisted_19$5,
              createBaseVNode("div", _hoisted_20$5, toDisplayString($data.segmentCount), 1),
              createBaseVNode("button", {
                class: "slds-button slds-button_brand slds-m-top_medium",
                onClick: _cache[4] || (_cache[4] = (...args) => $options.launchSegmentBuilder && $options.launchSegmentBuilder(...args))
              }, "Edit Segments")
            ]))
          ])
        ]),
        createVNode(_component_UsersList)
      ]);
    }
    const PlanContent = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$O]]);
    const _sfc_main$N = {
      name: "PlanHistory",
      components: {
        ButtonIcon,
        ActivityHistory,
        ActivityHistoryOptionsPopover
      },
      data() {
        return {
          isActivityHistoryEmpty: false,
          renderFilterPopover: false,
          history: HistoryTypes.ALL,
          sort: SortTypes.NEWEST
        };
      },
      async mounted() {
        SPM.Components.PlanDetails = this;
      },
      methods: {
        applyFilters({ history, sort }) {
          this.renderFilterPopover = false;
          this.history = history;
          this.sort = sort;
        },
        onInitialized() {
          this.isActivityHistoryEmpty = this.$refs.activityHistory.empty;
        }
      }
    };
    const _hoisted_1$M = {
      class: "slds-card slds-p-around_small slds-grid slds-grid_vertical",
      style: { "overflow": "hidden" }
    };
    const _hoisted_2$L = { class: "slds-grid slds-grid_vertical-align-center slds-border_bottom" };
    const _hoisted_3$C = /* @__PURE__ */ createBaseVNode("div", {
      style: { "font-weight": "700" },
      class: "slds-m-bottom_medium"
    }, "History", -1);
    function _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_ActivityHistory = resolveComponent("ActivityHistory");
      const _component_ActivityHistoryOptionsPopover = resolveComponent("ActivityHistoryOptionsPopover");
      return openBlock(), createElementBlock("div", _hoisted_1$M, [
        createBaseVNode("div", _hoisted_2$L, [
          _hoisted_3$C,
          createVNode(_component_ButtonIcon, {
            class: "slds-col_bump-left",
            assistiveText: "Filter",
            disabled: $data.isActivityHistoryEmpty,
            iconCategory: "utility",
            iconName: "settings",
            size: "x-small",
            title: "Filter",
            variant: "border-filled",
            onClick: _cache[0] || (_cache[0] = ($event) => $data.renderFilterPopover = true)
          }, null, 8, ["disabled"])
        ]),
        createVNode(_component_ActivityHistory, {
          ref: "activityHistory",
          history: $data.history,
          embedLinks: "",
          parentId: _ctx.$store.plan.Id,
          userId: _ctx.$props.userId,
          sort: $data.sort,
          class: "slds-m-top_small",
          onInitialized: $options.onInitialized
        }, null, 8, ["history", "parentId", "userId", "sort", "onInitialized"]),
        $data.renderFilterPopover ? (openBlock(), createBlock(_component_ActivityHistoryOptionsPopover, {
          key: 0,
          history: $data.history,
          sort: $data.sort,
          onApply: $options.applyFilters,
          onClose: _cache[1] || (_cache[1] = ($event) => $data.renderFilterPopover = false)
        }, null, 8, ["history", "sort", "onApply"])) : createCommentVNode("", true)
      ]);
    }
    const PlanHistory = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$N]]);
    const _sfc_main$M = {
      name: "SegmentationPlanOverview",
      components: {
        PlanDetails,
        PlanContent,
        PlanHistory,
        // slds
        Spinner
      },
      data() {
        return {
          loadingMsg: ""
        };
      },
      async mounted() {
        SPM.Components.SegmentationPlanOverview = this;
      },
      methods: {}
    };
    const _hoisted_1$L = {
      class: "slds-grid slds-p-around_small",
      style: { "height": "100%" }
    };
    const _hoisted_2$K = {
      class: "slds-grid slds-grid_vertical",
      style: { "width": "400px", "height": "100%" }
    };
    const _hoisted_3$B = {
      class: "slds-m-left_small slds-grid slds-grow",
      style: { "height": "100%" }
    };
    function _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_PlanDetails = resolveComponent("PlanDetails");
      const _component_PlanHistory = resolveComponent("PlanHistory");
      const _component_PlanContent = resolveComponent("PlanContent");
      return openBlock(), createElementBlock(Fragment, null, [
        $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
          description: withCtx(() => [
            createTextVNode(toDisplayString($data.loadingMsg), 1)
          ]),
          _: 1
        })) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_1$L, [
          createBaseVNode("div", _hoisted_2$K, [
            createVNode(_component_PlanDetails),
            createVNode(_component_PlanHistory)
          ]),
          createBaseVNode("div", _hoisted_3$B, [
            createVNode(_component_PlanContent, { class: "slds-grow" })
          ])
        ])
      ], 64);
    }
    const SegmentationPlanOverview = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["render", _sfc_render$M]]);
    const _sfc_main$L = {
      name: "SetupEmptyState"
    };
    const _hoisted_1$K = {
      class: "slds-illustration__svg",
      viewBox: "0 0 396 245",
      "aria-hidden": "true",
      xmlns: "http://www.w3.org/2000/svg"
    };
    const _hoisted_2$J = /* @__PURE__ */ createStaticVNode('<defs><rect x="77" y="47" width="20" height="28"></rect></defs><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-114.000000, -78.000000)"><g><g transform="translate(124.000000, 154.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(339.000000, 107.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(151.000000, 296.500000)"><g transform="translate(10.339768, 0.275260)"></g><path vector-effect="non-scaling-stroke" d="M140.962142,26.4644491 C138.225735,20.0143094 131.944776,15.5029106 124.633892,15.5029106 C122.619663,15.5029106 120.683612,15.8453541 118.878328,16.4764392 C115.451481,11.1704266 109.567406,7.66985447 102.883789,7.66985447 C96.4912675,7.66985447 90.8301585,10.8721423 87.3508511,15.7935668 C85.9589956,14.968161 84.3423157,14.4956341 82.6177606,14.4956341 C81.1083143,14.4956341 79.6815102,14.8576334 78.4157672,15.5014039 C74.9975328,6.58722215 66.5098304,0.275259875 56.5804557,0.275259875 C47.4632836,0.275259875 39.5615782,5.59684366 35.6837305,13.3681823 C33.3912034,12.266973 30.8314865,11.6515593 28.1312741,11.6515593 C19.4373504,11.6515593 12.1998844,18.0312998 10.6476214,26.4644491 L140.962142,26.4644491 Z" class="slds-illustration__fill-secondary"></path><path vector-effect="non-scaling-stroke" d="M0,25 L130,25" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round"></path></g><g transform="translate(320.000000, 281.000000)"><g transform="translate(0.293436, 0.054545)"><path vector-effect="non-scaling-stroke" d="M165.428708,41.9454545 L0.0995432562,41.9454545 C0.0336614956,41.2089487 0,40.4630069 0,39.7090909 C0,26.2132599 10.7866531,15.2727273 24.0926641,15.2727273 C27.7492016,15.2727273 31.215485,16.0989227 34.3199502,17.5772977 C39.5712028,7.14424616 50.271428,0 62.6175975,0 C76.0636257,0 87.5573893,8.47383452 92.1862485,20.441159 C93.9002755,19.5768947 95.8324059,19.0909091 97.8764479,19.0909091 C100.211783,19.0909091 102.401037,19.7252784 104.285841,20.8333889 C108.997403,14.2263569 116.663488,9.92727273 125.320028,9.92727273 C138.043441,9.92727273 148.627152,19.2146805 150.834755,31.4671412 C151.487388,31.3631046 152.156394,31.3090909 152.837838,31.3090909 C159.117096,31.3090909 164.340238,35.8953699 165.428708,41.9454545 Z" class="slds-illustration__fill-secondary"></path><path vector-effect="non-scaling-stroke" d="M32.7065637,40.4454545 L173.706564,40.4454545" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round"></path></g></g><g transform="translate(116.000000, 80.000000)"><g transform="translate(106.000000, 4.000000)"><g><use class="slds-illustration__fill-secondary" fill-rule="evenodd" xlink:href="#path-1"></use><rect class="slds-illustration__stroke-primary" stroke-width="3" x="78.5" y="48.5" width="17" height="25"></rect></g><rect class="slds-illustration__fill-secondary" x="72" y="30" width="30" height="22" rx="2"></rect><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" cx="87" cy="150" r="87"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-width="6" stroke-linecap="round" stroke-linejoin="round" cx="87.5" cy="23.5" r="23.5"></circle></g><g transform="translate(112.000000, 35.000000)" fill="#FFFFFF"><circle vector-effect="non-scaling-stroke" cx="81" cy="119" r="73"></circle><rect x="67" y="0" width="28" height="4"></rect><path vector-effect="non-scaling-stroke" d="M0.180175781,90.2270508 C0.778808594,89.5117187 11.3666992,64.2470703 30.4042969,52.2089844 C49.4418945,40.1708984 64.3725586,35.2084961 85.1640625,36.3398437 C105.955566,37.4711914 122.305176,44.8969727 133.487793,53.7832031 C144.67041,62.6694336 156.910645,77.7836914 163.28125,93.7817383 C167.52832,104.447103 164.678548,96.9777018 154.731934,71.3735352 L134.561523,50.390625 L106.423828,35.831543 L83.5615234,32.3847656 L61.4130859,34.121582 L40.7431641,41.5869141 L21.2519531,54.597168 L6.90820313,73.0634766 C2.02376302,84.9827474 -0.21891276,90.7039388 0.180175781,90.2270508 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M178.5,49.7801039 C170.984351,44.9862617 166,36.5752096 166,27 C166,12.0883118 178.088312,0 193,0 C207.911688,0 220,12.0883118 220,27 C220,36.5752096 215.015649,44.9862617 207.5,49.7801039 L207.5,55.5 C207.5,56.0522847 207.052285,56.5 206.5,56.5 L179.5,56.5 C178.947715,56.5 178.5,56.0522847 178.5,55.5 L178.5,49.7801039 Z"></path><path vector-effect="non-scaling-stroke" d="M178.5,40.7750367 C175.091592,37.1883928 173,32.3384551 173,27 C173,15.954305 181.954305,7 193,7 C204.045695,7 213,15.954305 213,27 C213,32.3384551 210.908408,37.1883928 207.5,40.7750367 L207.5,35.5 C207.5,34.9477153 207.052285,34.5 206.5,34.5 L179.5,34.5 C178.947715,34.5 178.5,34.9477153 178.5,35.5 L178.5,40.7750367 Z"></path><path vector-effect="non-scaling-stroke" d="M179.5,34.5 L206.5,34.5 C207.052285,34.5 207.5,34.9477153 207.5,35.5 L207.5,55.5 C207.5,56.0522847 207.052285,56.5 206.5,56.5 L179.5,56.5 C178.947715,56.5 178.5,56.0522847 178.5,55.5 L178.5,35.5 C178.5,34.9477153 178.947715,34.5 179.5,34.5 Z" stroke-linecap="round" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M184.5,56.5 L184.5,67.356737 C187.353249,67.1189178 190.206393,67 193.059326,67 C195.900065,67 198.713659,67.1179036 201.5,67.3537468 L201.5,56.5 L184.5,56.5 Z"></path><path vector-effect="non-scaling-stroke" d="M27,241.5 L392,241.5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M0,241.5 L20,241.5" stroke-linecap="round"></path><circle vector-effect="non-scaling-stroke" cx="193" cy="154" r="87"></circle><circle vector-effect="non-scaling-stroke" cx="193" cy="154" r="73"></circle></g></g><g transform="translate(252.000000, 178.000000)"><g transform="translate(2.000000, 1.000000)"><circle vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-width="6" cx="55" cy="55" r="41"></circle><polygon vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" points="55 0 62 16 48 16"></polygon><polygon vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" transform="translate(55.000000, 102.000000) scale(1, -1) translate(-55.000000, -102.000000) " points="55 94 62 110 48 110"></polygon><polygon vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" transform="translate(102.000000, 55.000000) scale(1, -1) rotate(90.000000) translate(-102.000000, -55.000000) " points="102 47 109 63 95 63"></polygon><polygon vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" transform="translate(8.000000, 55.000000) scale(-1, -1) rotate(90.000000) translate(-8.000000, -55.000000) " points="8 47 15 63 1 63"></polygon><polygon vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" transform="translate(78.371087, 79.079086) scale(1, -1) rotate(45.000000) translate(-78.371087, -79.079086) " points="78.3710872 47.4827561 96.4223693 110.675417 60.3198052 110.675417"></polygon></g><g class="slds-illustration__fill-primary"><polygon vector-effect="non-scaling-stroke" transform="translate(35.687128, 35.395128) scale(-1, 1) rotate(45.000000) translate(-35.687128, -35.395128) " points="35.6871284 3.79879726 53.7384105 66.9914578 17.6358464 66.9914578"></polygon><ellipse cx="58" cy="58.0018766" rx="9" ry="9.00187656"></ellipse></g><g transform="translate(49.000000, 49.000000)" stroke="#FFFFFF" stroke-width="3"><ellipse cx="9" cy="9.00187656" rx="9" ry="9.00187656"></ellipse></g></g><g transform="translate(436.500000, 259.500000)"><g class="slds-illustration__fill-secondary"><path vector-effect="non-scaling-stroke" d="M18.9209988,1.95433401 L33.259296,51.443436 C33.5666778,52.5043744 32.9557995,53.613617 31.8948612,53.9209988 C31.7139843,53.9734036 31.5266126,54 31.3382972,54 L2.6617028,54 C1.5571333,54 0.661702805,53.1045695 0.661702805,52 C0.661702805,51.8116846 0.688299176,51.6243129 0.74070397,51.443436 L15.0790012,1.95433401 C15.386383,0.893395645 16.4956256,0.282517358 17.556564,0.589899164 C18.2152102,0.780726338 18.7301717,1.29568777 18.9209988,1.95433401 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-linecap="round" stroke-width="3"><polygon vector-effect="non-scaling-stroke" stroke-linejoin="round" points="17 0.323943662 34 54 -1.81721305e-12 54"></polygon><path vector-effect="non-scaling-stroke" d="M17,4.6953125 C17,43.0456294 17,62.6471919 17,63.5 C17,62.6471919 17,43.0456294 17,4.6953125 Z"></path><path vector-effect="non-scaling-stroke" d="M17,29.3239437 C22.3333333,35.7851611 25,39.1184944 25,39.3239437 C25,39.1184944 22.3333333,35.7851611 17,29.3239437 Z" stroke-linejoin="round" transform="translate(21.000000, 34.323944) scale(-1, 1) translate(-21.000000, -34.323944) "></path></g></g><g transform="translate(393.000000, 226.500000)"><g transform="translate(1.000000, 0.000000)" class="slds-illustration__fill-secondary"><path vector-effect="non-scaling-stroke" d="M25.6478873,0 L50.879042,84.4273253 C51.1953215,85.4856452 50.5937789,86.5999782 49.535459,86.9162577 C49.3496374,86.9717906 49.1567264,87 48.9627843,87 L2.33299037,87 C1.22842087,87 0.332990367,86.1045695 0.332990367,85 C0.332990367,84.8060578 0.361199757,84.6131469 0.416732643,84.4273253 L25.6478873,0 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-linecap="round" stroke-width="3"><polygon vector-effect="non-scaling-stroke" stroke-linejoin="round" points="26.5 0 52.5 87 0.5 87"></polygon><path vector-effect="non-scaling-stroke" d="M26.5,3.58642578 C26.5,64.0261034 26.5,94.9972948 26.5,96.5 C26.5,94.9972948 26.5,64.0261034 26.5,3.58642578 Z"></path><path vector-effect="non-scaling-stroke" d="M15.6478873,42 C22.9812207,49.078692 26.6478873,52.7453587 26.6478873,53 C26.6478873,52.7453587 22.9812207,49.078692 15.6478873,42 Z" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M27.6478873,68 C36.9812207,57.078692 41.6478873,51.7453587 41.6478873,52 C41.6478873,51.7453587 36.9812207,57.078692 27.6478873,68 Z" stroke-linejoin="round"></path></g></g><g transform="translate(182.500000, 259.500000)"><g class="slds-illustration__fill-secondary"><path vector-effect="non-scaling-stroke" d="M18.9209988,1.95433401 L33.259296,51.443436 C33.5666778,52.5043744 32.9557995,53.613617 31.8948612,53.9209988 C31.7139843,53.9734036 31.5266126,54 31.3382972,54 L2.6617028,54 C1.5571333,54 0.661702805,53.1045695 0.661702805,52 C0.661702805,51.8116846 0.688299176,51.6243129 0.74070397,51.443436 L15.0790012,1.95433401 C15.386383,0.893395645 16.4956256,0.282517358 17.556564,0.589899164 C18.2152102,0.780726338 18.7301717,1.29568777 18.9209988,1.95433401 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-width="3"><polygon vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" points="17 0.323943662 34 54 -1.81721305e-12 54"></polygon><path vector-effect="non-scaling-stroke" d="M17,4.32394366 C17,42.2551731 17,61.6471919 17,62.5 C17,61.6471919 17,42.2551731 17,4.32394366 Z"></path><path vector-effect="non-scaling-stroke" d="M17,32.3239437 C23.6666667,39.4518278 27,43.1184944 27,43.3239437 C27,43.1184944 23.6666667,39.4518278 17,32.3239437 Z" stroke-linecap="round" stroke-linejoin="round" transform="translate(22.000000, 37.823944) scale(-1, 1) translate(-22.000000, -37.823944) "></path></g></g><g transform="translate(129.000000, 209.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><g transform="translate(27.848898, 30.021465) rotate(-15.000000) translate(-27.848898, -30.021465) translate(5.848898, 5.021465)"><path vector-effect="non-scaling-stroke" d="M1.73977935,3.49433365 C1.73977935,3.49433365 11.283937,0.730940796 13.3525511,10.749914" transform="translate(7.546165, 6.947488) rotate(41.000000) translate(-7.546165, -6.947488) "></path><path vector-effect="non-scaling-stroke" d="M11.1319089,10.2387854 C11.1319089,10.2387854 20.6760665,7.47539254 22.7446806,17.4943658" transform="translate(16.938295, 13.691939) scale(-1, 1) rotate(-41.000000) translate(-16.938295, -13.691939) "></path><path vector-effect="non-scaling-stroke" d="M19.7302848,42.5865514 C19.7302848,42.5865514 29.2744424,39.8231586 31.3430565,49.8421318"></path><path vector-effect="non-scaling-stroke" d="M31.7302848,42.5865514 C31.7302848,42.5865514 41.2744424,39.8231586 43.3430565,49.8421318" transform="translate(37.536671, 46.039705) scale(-1, 1) translate(-37.536671, -46.039705) "></path></g></g></g></g></g>', 2);
    const _hoisted_4$v = [
      _hoisted_2$J
    ];
    function _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1$K, _hoisted_4$v);
    }
    const SetupEmptyState = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["render", _sfc_render$L]]);
    const SetupError_vue_vue_type_style_index_0_lang = "";
    const _sfc_main$K = {
      name: "ErrorPage",
      components: {
        SetupEmptyState,
        Button: SLDSButton,
        Setup
      },
      data() {
        return {
          EmptyStateSVG,
          openSetup: false,
          Button: SLDSButton
        };
      },
      computed: {
        renderSetup() {
          return this.openSetup;
        }
      }
    };
    const _hoisted_1$J = { style: { "height": "100%" } };
    const _hoisted_2$I = {
      key: 1,
      class: "slds-illustration slds-illustration_small"
    };
    const _hoisted_3$A = { class: "slds-text-longform error-content" };
    const _hoisted_4$u = /* @__PURE__ */ createBaseVNode("h3", { class: "slds-illustration__header slds-text-heading_medium" }, "Not Set Up", -1);
    const _hoisted_5$s = /* @__PURE__ */ createBaseVNode("p", { class: "slds-text-body_regular" }, "Sales Planning needs to be configured prior to use", -1);
    function _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Setup = resolveComponent("Setup");
      const _component_SetupEmptyState = resolveComponent("SetupEmptyState");
      const _component_Button = resolveComponent("Button");
      return openBlock(), createElementBlock("div", _hoisted_1$J, [
        $options.renderSetup ? (openBlock(), createBlock(_component_Setup, {
          key: 0,
          showClose: $data.openSetup,
          onClose: _cache[0] || (_cache[0] = ($event) => $data.openSetup = false)
        }, null, 8, ["showClose"])) : !$options.renderSetup ? (openBlock(), createElementBlock("div", _hoisted_2$I, [
          createBaseVNode("div", _hoisted_3$A, [
            createVNode(_component_SetupEmptyState),
            _hoisted_4$u,
            _hoisted_5$s,
            createVNode(_component_Button, {
              label: "Open Setup",
              onClick: _cache[1] || (_cache[1] = ($event) => $data.openSetup = true)
            })
          ])
        ])) : createCommentVNode("", true)
      ]);
    }
    const SetupError = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["render", _sfc_render$K]]);
    const SetupErrorNonAdmin_vue_vue_type_style_index_0_lang = "";
    const _sfc_main$J = {
      name: "NonAdminErrorPage",
      components: {
        SetupEmptyState,
        Button: SLDSButton,
        Setup
      },
      data() {
        return {
          EmptyStateSVG,
          openSetup: false,
          Button: SLDSButton
        };
      },
      computed: {
        renderSetup() {
          return this.openSetup;
        }
      }
    };
    const _hoisted_1$I = { style: { "height": "100%" } };
    const _hoisted_2$H = {
      key: 1,
      class: "slds-illustration slds-illustration_small"
    };
    const _hoisted_3$z = { class: "slds-text-longform error-content" };
    const _hoisted_4$t = /* @__PURE__ */ createBaseVNode("h3", { class: "slds-illustration__header slds-text-heading_medium" }, "No Access", -1);
    const _hoisted_5$r = /* @__PURE__ */ createBaseVNode("p", { class: "slds-text-body_regular" }, "Sales Planning is not enabled for your user.", -1);
    const _hoisted_6$p = /* @__PURE__ */ createBaseVNode("p", { class: "slds-text-body_regular" }, "Please contact your administrator if you feel this is an error.", -1);
    function _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Setup = resolveComponent("Setup");
      const _component_SetupEmptyState = resolveComponent("SetupEmptyState");
      return openBlock(), createElementBlock("div", _hoisted_1$I, [
        $options.renderSetup ? (openBlock(), createBlock(_component_Setup, {
          key: 0,
          showClose: $data.openSetup,
          onClose: _cache[0] || (_cache[0] = ($event) => $data.openSetup = false)
        }, null, 8, ["showClose"])) : !$options.renderSetup ? (openBlock(), createElementBlock("div", _hoisted_2$H, [
          createBaseVNode("div", _hoisted_3$z, [
            createVNode(_component_SetupEmptyState),
            _hoisted_4$t,
            _hoisted_5$r,
            _hoisted_6$p
          ])
        ])) : createCommentVNode("", true)
      ]);
    }
    const SetupErrorNonAdmin = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["render", _sfc_render$J]]);
    const _sfc_main$I = {
      name: "SalesNodeModal",
      components: {
        Button: SLDSButton,
        Modal,
        Spinner,
        TextInput
      },
      props: ["config"],
      data() {
        return {
          loading: false,
          node: {
            sobjectType: "sfsp__SalesNode__c",
            Name: "",
            sfsp__SalesPlan__c: this.config.planId,
            sfsp__Parent__c: this.config.parentId,
            sfsp__Priority__c: this.$store.nodeMap[this.config.parentId].children.length + 1
          }
        };
      },
      methods: {
        async save() {
          this.loading = true;
          const [newNode] = await SPM.Utils.Apex.invoke("InsertSObjects", [[this.node], true]);
          this.config.callback(newNode);
          this.$emit("close");
          this.loading = false;
        }
      }
    };
    const _hoisted_1$H = {
      class: "slds-grid slds-grid_vertical",
      style: { "height": "100%" }
    };
    const _hoisted_2$G = { class: "slds-grid" };
    const _hoisted_3$y = { class: "slds-col_bump-left" };
    function _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_TextInput = resolveComponent("TextInput");
      const _component_Button = resolveComponent("Button");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        ref: "modal",
        title: "Sales Node",
        size: "small",
        detach: "",
        onClose: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
          createBaseVNode("div", _hoisted_1$H, [
            createVNode(_component_TextInput, {
              modelValue: $data.node.Name,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.node.Name = $event),
              labels: { name: "Name" }
            }, null, 8, ["modelValue"])
          ])
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", null, [
            createBaseVNode("div", _hoisted_2$G, [
              createBaseVNode("div", _hoisted_3$y, [
                createVNode(_component_Button, {
                  class: "slds-button slds-button_neutral",
                  onClick: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
                }, {
                  default: withCtx(() => [
                    createTextVNode("Close")
                  ]),
                  _: 1
                }),
                createVNode(_component_Button, {
                  class: "slds-button slds-button_brand",
                  onClick: $options.save
                }, {
                  default: withCtx(() => [
                    createTextVNode("Save")
                  ]),
                  _: 1
                }, 8, ["onClick"])
              ])
            ])
          ])
        ]),
        _: 1
      }, 512);
    }
    const SalesNodeModal = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["render", _sfc_render$I]]);
    const _sfc_main$H = {
      name: "ErrorPopover",
      components: {
        ButtonIcon,
        Popover
      },
      props: {
        error: String,
        errors: Object,
        lazy: Boolean,
        refs: Object
      },
      data() {
        return {
          renderPopover: false
        };
      },
      mounted() {
        SPM.Components.FormErrorIndicator = this;
        if (!this.lazy)
          this.renderPopover = true;
      },
      methods: {
        focusElementWithError(error) {
          this.renderPopover = false;
          this.$nextTick(() => this.refs[error.ref].focus());
        }
      }
    };
    const _hoisted_1$G = /* @__PURE__ */ createBaseVNode("span", null, "We hit a snag.", -1);
    const _hoisted_2$F = { key: 0 };
    const _hoisted_3$x = /* @__PURE__ */ createBaseVNode("div", { style: { "margin-bottom": "0.25rem", "margin-left": "-0.5rem", "font-weight": "600" } }, " Review the following fields ", -1);
    const _hoisted_4$s = {
      class: "slds-m-left_medium",
      style: { "list-style": "disc" }
    };
    const _hoisted_5$q = ["onClick"];
    function _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Popover = resolveComponent("Popover");
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(_component_ButtonIcon, {
          ref: "errorButtonIcon",
          assistiveText: "Error",
          title: "Error",
          iconCategory: "utility",
          iconName: "error",
          iconSize: "large",
          class: "slds-button_icon-error",
          onClick: _cache[0] || (_cache[0] = ($event) => $data.renderPopover = !$data.renderPopover)
        }, null, 512),
        $data.renderPopover ? (openBlock(), createBlock(_component_Popover, {
          key: 0,
          ref: "errorPopover",
          bindTo: _ctx.$refs.errorButtonIcon.$el,
          theme: "error",
          width: "medium",
          class: "slds-text-align_left",
          onClose: _cache[1] || (_cache[1] = ($event) => $data.renderPopover = false)
        }, {
          header: withCtx(() => [
            _hoisted_1$G
          ]),
          content: withCtx(() => [
            $props.error ? (openBlock(), createElementBlock("div", _hoisted_2$F, toDisplayString($props.error), 1)) : createCommentVNode("", true),
            $props.errors ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              _hoisted_3$x,
              createBaseVNode("ul", _hoisted_4$s, [
                (openBlock(true), createElementBlock(Fragment, null, renderList($props.errors, (error, i2) => {
                  return openBlock(), createElementBlock("li", {
                    key: i2,
                    class: normalizeClass({ "slds-text-link": error.ref }),
                    onClick: ($event) => $options.focusElementWithError(error)
                  }, toDisplayString(error.message), 11, _hoisted_5$q);
                }), 128))
              ])
            ], 64)) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["bindTo"])) : createCommentVNode("", true)
      ], 64);
    }
    const FormErrorIndicator = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["render", _sfc_render$H]]);
    const TemplateAssignmentObjects = Object.freeze({
      Account: {
        name: "Account",
        label: "Account",
        fields: [
          { name: "Id", crmName: "Id", label: "ID", type: "Text", unique: true, createdDate: Date.now(), sobject: "account", source: "CRM" },
          { name: "Name", crmName: "Name", label: "Name", type: "Text", createdDate: Date.now(), sobject: "account", isNameField: true, source: "CRM" },
          { name: "BillingCity", crmName: "BillingCity", label: "City", type: "Text", createdDate: Date.now(), sobject: "account", source: "CRM" },
          { name: "BillingState", crmName: "BillingState", label: "State", type: "Text", createdDate: Date.now(), sobject: "account", source: "CRM" },
          { name: "BillingCountry", crmName: "BillingCountry", label: "Country", type: "Text", createdDate: Date.now(), sobject: "account", source: "CRM" },
          { name: "BillingPostalCode", crmName: "BillingPostalCode", label: "Postal Code", type: "Text", createdDate: Date.now(), sobject: "account", source: "CRM" },
          { name: "Industry", crmName: "Industry", label: "Industry", type: "Text", createdDate: Date.now(), sobject: "account", source: "CRM" },
          { name: "AnnualRevenue", crmName: "AnnualRevenue", label: "Revenue", type: "Numeric", scale: 2, precision: 18, createdDate: Date.now(), sobject: "account", source: "CRM" },
          { name: "NumberOfEmployees", crmName: "NumberOfEmployees", label: "Employees", type: "Numeric", scale: 2, precision: 10, createdDate: Date.now(), sobject: "account", source: "CRM" },
          { name: "BillingLatitude", crmName: "BillingLatitude", label: "Latitude", type: "Latitude", scale: 15, precision: 18, createdDate: Date.now(), sobject: "account", source: "CRM" },
          { name: "BillingLongitude", crmName: "BillingLongitude", label: "Longitude", type: "Longitude", scale: 15, precision: 18, createdDate: Date.now(), sobject: "account", source: "CRM" }
        ]
      },
      Lead: {
        name: "Lead",
        label: "Lead",
        fields: [
          { name: "Id", crmName: "Id", label: "Lead Id", type: "Text", unique: true, createdDate: Date.now(), sobject: "lead", source: "CRM" },
          { name: "Name", crmName: "Name", label: "Full Name", type: "Text", createdDate: Date.now(), sobject: "lead", isNameField: true, source: "CRM" },
          { name: "Company", crmName: "Company", label: "Company", type: "Text", createdDate: Date.now(), sobject: "lead", source: "CRM" },
          { name: "City", crmName: "City", label: "City", type: "Text", createdDate: Date.now(), sobject: "lead", source: "CRM" },
          { name: "State", crmName: "State", label: "State", type: "Text", createdDate: Date.now(), sobject: "lead", source: "CRM" },
          { name: "PostalCode", crmName: "PostalCode", label: "Zip/Postal Code", type: "Text", createdDate: Date.now(), sobject: "lead", source: "CRM" },
          { name: "Country", crmName: "Country", label: "Country", type: "Text", createdDate: Date.now(), sobject: "lead", source: "CRM" },
          { name: "Industry", crmName: "Industry", label: "Industry", type: "Text", createdDate: Date.now(), sobject: "lead", source: "CRM" },
          { name: "AnnualRevenue", crmName: "AnnualRevenue", label: "Annual Revenue", type: "Numeric", scale: 2, precision: 18, createdDate: Date.now(), sobject: "lead", source: "CRM" },
          { name: "NumberOfEmployees", crmName: "NumberOfEmployees", label: "Employees", type: "Numeric", scale: 2, precision: 10, createdDate: Date.now(), sobject: "lead", source: "CRM" },
          { name: "Latitude", crmName: "Latitude", label: "Latitude", type: "Latitude", scale: 15, precision: 18, createdDate: Date.now(), sobject: "lead", source: "CRM" },
          { name: "Longitude", crmName: "Longitude", label: "Longitude", type: "Longitude", scale: 15, precision: 18, createdDate: Date.now(), sobject: "lead", source: "CRM" }
        ]
      }
    });
    const _sfc_main$G = {
      components: { TemplateCard },
      emits: ["template-selected"],
      data() {
        return {
          templates: [
            {
              name: "Account",
              label: "Accounts",
              buttonLabel: "Add",
              description: "Define segments and equitable territories when you assign accounts to your sales hierarchy."
            },
            {
              name: "Lead",
              label: "Leads",
              buttonLabel: "Add",
              description: "Position your business for the best growth potential when you distribute prospects throughout your sales team."
            },
            {
              name: "Salesforce Object",
              label: "Other",
              buttonLabel: "Add",
              description: "Plan your sales strategy using an object that represents your business focus."
            }
          ]
        };
      },
      methods: {
        onTemplateClick(template) {
          SPM.Components.ReferenceDataModal.loadingMsg = "Loading...";
          let assignmentObject;
          if (template.name !== "Salesforce Object") {
            const templateObject = TemplateAssignmentObjects[template.name];
            assignmentObject = {
              sobjectType: "sfsp__SalesAssignmentObject__c",
              Name: templateObject.name,
              sfsp__SalesPlan__c: this.$store.plan.Id,
              sfsp__Label__c: templateObject.label,
              sfsp__ReferenceFields__c: JSON.stringify(templateObject.fields)
            };
          }
          this.$emit("template-selected", assignmentObject);
        }
      }
    };
    const _hoisted_1$F = { class: "spm-template-cards-max-width" };
    const _hoisted_2$E = { class: "slds-grid slds-m-vertical_medium slds-gutters" };
    const _hoisted_3$w = ["id"];
    function _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_TemplateCard = resolveComponent("TemplateCard");
      return openBlock(), createElementBlock("div", _hoisted_1$F, [
        createBaseVNode("div", _hoisted_2$E, [
          (openBlock(true), createElementBlock(Fragment, null, renderList($data.templates, (template) => {
            return openBlock(), createElementBlock("div", {
              id: `${template.name.replaceAll(" ", "-").toLowerCase()}`,
              key: template.name,
              class: "slds-size_1-of-3 slds-col"
            }, [
              createVNode(_component_TemplateCard, {
                template,
                onSelectTemplate: $options.onTemplateClick
              }, null, 8, ["template", "onSelectTemplate"])
            ], 8, _hoisted_3$w);
          }), 128))
        ])
      ]);
    }
    const ObjectTemplateSelector = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["render", _sfc_render$G]]);
    function ownKeys$1(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2$1(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = null != arguments[i2] ? arguments[i2] : {};
        i2 % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty$1(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function isFunction$1(val) {
      return typeof val === "function";
    }
    function isObject(o) {
      return o !== null && typeof o === "object" && !Array.isArray(o);
    }
    function normalizeValidatorObject(validator2) {
      return isFunction$1(validator2.$validator) ? _objectSpread2$1({}, validator2) : {
        $validator: validator2
      };
    }
    function unwrapValidatorResponse(result) {
      if (typeof result === "object")
        return result.$valid;
      return result;
    }
    function unwrapNormalizedValidator(validator2) {
      return validator2.$validator || validator2;
    }
    function withParams($params, $validator) {
      if (!isObject($params))
        throw new Error(`[@vuelidate/validators]: First parameter to "withParams" should be an object, provided ${typeof $params}`);
      if (!isObject($validator) && !isFunction$1($validator))
        throw new Error(`[@vuelidate/validators]: Validator must be a function or object with $validator parameter`);
      const validatorObj = normalizeValidatorObject($validator);
      validatorObj.$params = _objectSpread2$1(_objectSpread2$1({}, validatorObj.$params || {}), $params);
      return validatorObj;
    }
    function withMessage($message, $validator) {
      if (!isFunction$1($message) && typeof unref($message) !== "string")
        throw new Error(`[@vuelidate/validators]: First parameter to "withMessage" should be string or a function returning a string, provided ${typeof $message}`);
      if (!isObject($validator) && !isFunction$1($validator))
        throw new Error(`[@vuelidate/validators]: Validator must be a function or object with $validator parameter`);
      const validatorObj = normalizeValidatorObject($validator);
      validatorObj.$message = $message;
      return validatorObj;
    }
    function withAsync($validator) {
      let $watchTargets = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      const validatorObj = normalizeValidatorObject($validator);
      return _objectSpread2$1(_objectSpread2$1({}, validatorObj), {}, {
        $async: true,
        $watchTargets
      });
    }
    function forEach(validators2) {
      return {
        $validator(collection) {
          for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            others[_key - 1] = arguments[_key];
          }
          return unref(collection).reduce((previous, collectionItem, index) => {
            const collectionEntryResult = Object.entries(collectionItem).reduce((all, _ref) => {
              let [property, $model] = _ref;
              const innerValidators = validators2[property] || {};
              const propertyResult = Object.entries(innerValidators).reduce((all2, _ref2) => {
                let [validatorName, currentValidator] = _ref2;
                const validatorFunction = unwrapNormalizedValidator(currentValidator);
                const $response = validatorFunction.call(this, $model, collectionItem, index, ...others);
                const $valid = unwrapValidatorResponse($response);
                all2.$data[validatorName] = $response;
                all2.$data.$invalid = !$valid || !!all2.$data.$invalid;
                all2.$data.$error = all2.$data.$invalid;
                if (!$valid) {
                  let $message = currentValidator.$message || "";
                  const $params = currentValidator.$params || {};
                  if (typeof $message === "function") {
                    $message = $message({
                      $pending: false,
                      $invalid: !$valid,
                      $params,
                      $model,
                      $response
                    });
                  }
                  all2.$errors.push({
                    $property: property,
                    $message,
                    $params,
                    $response,
                    $model,
                    $pending: false,
                    $validator: validatorName
                  });
                }
                return {
                  $valid: all2.$valid && $valid,
                  $data: all2.$data,
                  $errors: all2.$errors
                };
              }, {
                $valid: true,
                $data: {},
                $errors: []
              });
              all.$data[property] = propertyResult.$data;
              all.$errors[property] = propertyResult.$errors;
              return {
                $valid: all.$valid && propertyResult.$valid,
                $data: all.$data,
                $errors: all.$errors
              };
            }, {
              $valid: true,
              $data: {},
              $errors: {}
            });
            return {
              $valid: previous.$valid && collectionEntryResult.$valid,
              $data: previous.$data.concat(collectionEntryResult.$data),
              $errors: previous.$errors.concat(collectionEntryResult.$errors)
            };
          }, {
            $valid: true,
            $data: [],
            $errors: []
          });
        },
        $message: (_ref3) => {
          let {
            $response
          } = _ref3;
          return $response ? $response.$errors.map((context) => {
            return Object.values(context).map((errors) => errors.map((error) => error.$message)).reduce((a, b) => a.concat(b), []);
          }) : [];
        }
      };
    }
    const req = (value) => {
      value = unref(value);
      if (Array.isArray(value))
        return !!value.length;
      if (value === void 0 || value === null) {
        return false;
      }
      if (value === false) {
        return true;
      }
      if (value instanceof Date) {
        return !isNaN(value.getTime());
      }
      if (typeof value === "object") {
        for (let _ in value)
          return true;
        return false;
      }
      return !!String(value).length;
    };
    const len = (value) => {
      value = unref(value);
      if (Array.isArray(value))
        return value.length;
      if (typeof value === "object") {
        return Object.keys(value).length;
      }
      return String(value).length;
    };
    function regex() {
      for (var _len = arguments.length, expr = new Array(_len), _key = 0; _key < _len; _key++) {
        expr[_key] = arguments[_key];
      }
      return (value) => {
        value = unref(value);
        return !req(value) || expr.every((reg) => {
          reg.lastIndex = 0;
          return reg.test(value);
        });
      };
    }
    var common = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      forEach,
      len,
      normalizeValidatorObject,
      regex,
      req,
      unwrap: unref,
      unwrapNormalizedValidator,
      unwrapValidatorResponse,
      withAsync,
      withMessage,
      withParams
    });
    regex(/^[a-zA-Z]*$/);
    regex(/^[a-zA-Z0-9]*$/);
    regex(/^\d*(\.\d+)?$/);
    const emailRegex = /^(?:[A-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[A-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9]{2,}(?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
    regex(emailRegex);
    function maxLength$1(length) {
      return (value) => !req(value) || len(value) <= unref(length);
    }
    function maxLength(max2) {
      return {
        $validator: maxLength$1(max2),
        $message: (_ref) => {
          let {
            $params
          } = _ref;
          return `The maximum length allowed is ${$params.max}`;
        },
        $params: {
          max: max2,
          type: "maxLength"
        }
      };
    }
    function required$1(value) {
      if (typeof value === "string") {
        value = value.trim();
      }
      return req(value);
    }
    var required = {
      $validator: required$1,
      $message: "Value is required",
      $params: {
        type: "required"
      }
    };
    const validate$1 = (prop, val) => prop ? req(typeof val === "string" ? val.trim() : val) : true;
    function requiredIf$1(propOrFunction) {
      return function(value, parentVM) {
        if (typeof propOrFunction !== "function") {
          return validate$1(unref(propOrFunction), value);
        }
        const result = propOrFunction.call(this, value, parentVM);
        return validate$1(result, value);
      };
    }
    function requiredIf(prop) {
      return {
        $validator: requiredIf$1(prop),
        $message: "The value is required",
        $params: {
          type: "requiredIf",
          prop
        }
      };
    }
    const urlRegex = /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i;
    regex(urlRegex);
    regex(/(^[0-9]*$)|(^-[0-9]+$)/);
    regex(/^[-]?\d*(\.\d+)?$/);
    function ownKeys(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = null != arguments[i2] ? arguments[i2] : {};
        i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function unwrapObj(obj) {
      let ignoreKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      return Object.keys(obj).reduce((o, k) => {
        if (ignoreKeys.includes(k))
          return o;
        o[k] = unref(obj[k]);
        return o;
      }, {});
    }
    function isFunction(val) {
      return typeof val === "function";
    }
    function isProxy(value) {
      return isReactive(value) || isReadonly(value);
    }
    function get(obj, stringPath, def2) {
      let current = obj;
      const path = stringPath.split(".");
      for (let i2 = 0; i2 < path.length; i2++) {
        if (!current[path[i2]])
          return def2;
        current = current[path[i2]];
      }
      return current;
    }
    function gatherBooleanGroupProperties(group, nestedResults, property) {
      return computed(() => {
        return group.some((path) => {
          return get(nestedResults, path, {
            [property]: false
          })[property];
        });
      });
    }
    function gatherArrayGroupProperties(group, nestedResults, property) {
      return computed(() => {
        return group.reduce((all, path) => {
          const fetchedProperty = get(nestedResults, path, {
            [property]: false
          })[property] || [];
          return all.concat(fetchedProperty);
        }, []);
      });
    }
    function callRule(rule, value, siblingState, instance) {
      return rule.call(instance, unref(value), unref(siblingState), instance);
    }
    function normalizeValidatorResponse(result) {
      return result.$valid !== void 0 ? !result.$valid : !result;
    }
    function createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {
      let {
        $lazy,
        $rewardEarly
      } = _ref;
      let watchTargets = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : [];
      let siblingState = arguments.length > 8 ? arguments[8] : void 0;
      let $lastInvalidState = arguments.length > 9 ? arguments[9] : void 0;
      let $lastCommittedOn = arguments.length > 10 ? arguments[10] : void 0;
      const $invalid = ref(!!$dirty.value);
      const $pendingCounter = ref(0);
      $pending.value = false;
      const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {
        if ($lazy && !$dirty.value || $rewardEarly && !$lastInvalidState.value && !$pending.value) {
          return;
        }
        let ruleResult;
        try {
          ruleResult = callRule(rule, model, siblingState, instance);
        } catch (err) {
          ruleResult = Promise.reject(err);
        }
        $pendingCounter.value++;
        $pending.value = !!$pendingCounter.value;
        $invalid.value = false;
        Promise.resolve(ruleResult).then((data) => {
          $pendingCounter.value--;
          $pending.value = !!$pendingCounter.value;
          $response.value = data;
          $invalid.value = normalizeValidatorResponse(data);
        }).catch((error) => {
          $pendingCounter.value--;
          $pending.value = !!$pendingCounter.value;
          $response.value = error;
          $invalid.value = true;
        });
      }, {
        immediate: true,
        deep: typeof model === "object"
      });
      return {
        $invalid,
        $unwatch
      };
    }
    function createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {
      let {
        $lazy,
        $rewardEarly
      } = _ref2;
      const $unwatch = () => ({});
      const $invalid = computed(() => {
        if ($lazy && !$dirty.value || $rewardEarly && !$lastInvalidState.value) {
          return false;
        }
        let returnValue = true;
        try {
          const result = callRule(rule, model, siblingState, instance);
          $response.value = result;
          returnValue = normalizeValidatorResponse(result);
        } catch (err) {
          $response.value = err;
        }
        return returnValue;
      });
      return {
        $unwatch,
        $invalid
      };
    }
    function createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {
      const $pending = ref(false);
      const $params = rule.$params || {};
      const $response = ref(null);
      let $invalid;
      let $unwatch;
      if (rule.$async) {
        ({
          $invalid,
          $unwatch
        } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));
      } else {
        ({
          $invalid,
          $unwatch
        } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));
      }
      const message = rule.$message;
      const $message = isFunction(message) ? computed(() => message(unwrapObj({
        $pending,
        $invalid,
        $params: unwrapObj($params),
        $model: model,
        $response,
        $validator: validatorName,
        $propertyPath: propertyPath,
        $property: propertyKey
      }))) : message || "";
      return {
        $message,
        $params,
        $pending,
        $invalid,
        $response,
        $unwatch
      };
    }
    function sortValidations() {
      let validationsRaw = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      const validations = unref(validationsRaw);
      const validationKeys = Object.keys(validations);
      const rules = {};
      const nestedValidators = {};
      const config = {};
      let validationGroups = null;
      validationKeys.forEach((key) => {
        const v = validations[key];
        switch (true) {
          case isFunction(v.$validator):
            rules[key] = v;
            break;
          case isFunction(v):
            rules[key] = {
              $validator: v
            };
            break;
          case key === "$validationGroups":
            validationGroups = v;
            break;
          case key.startsWith("$"):
            config[key] = v;
            break;
          default:
            nestedValidators[key] = v;
        }
      });
      return {
        rules,
        nestedValidators,
        config,
        validationGroups
      };
    }
    const ROOT_PATH = "__root";
    function createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {
      const ruleKeys = Object.keys(rules);
      const cachedResult = resultsCache.get(path, rules);
      const $dirty = ref(false);
      const $lastInvalidState = ref(false);
      const $lastCommittedOn = ref(0);
      if (cachedResult) {
        if (!cachedResult.$partial)
          return cachedResult;
        cachedResult.$unwatch();
        $dirty.value = cachedResult.$dirty.value;
      }
      const result = {
        $dirty,
        $path: path,
        $touch: () => {
          if (!$dirty.value)
            $dirty.value = true;
        },
        $reset: () => {
          if ($dirty.value)
            $dirty.value = false;
        },
        $commit: () => {
        }
      };
      if (!ruleKeys.length) {
        cachedResult && resultsCache.set(path, rules, result);
        return result;
      }
      ruleKeys.forEach((ruleKey) => {
        result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);
      });
      result.$externalResults = computed(() => {
        if (!externalResults.value)
          return [];
        return [].concat(externalResults.value).map((stringError, index) => ({
          $propertyPath: path,
          $property: key,
          $validator: "$externalResults",
          $uid: `${path}-externalResult-${index}`,
          $message: stringError,
          $params: {},
          $response: null,
          $pending: false
        }));
      });
      result.$invalid = computed(() => {
        const r = ruleKeys.some((ruleKey) => unref(result[ruleKey].$invalid));
        $lastInvalidState.value = r;
        return !!result.$externalResults.value.length || r;
      });
      result.$pending = computed(() => ruleKeys.some((ruleKey) => unref(result[ruleKey].$pending)));
      result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);
      result.$silentErrors = computed(() => ruleKeys.filter((ruleKey) => unref(result[ruleKey].$invalid)).map((ruleKey) => {
        const res = result[ruleKey];
        return reactive({
          $propertyPath: path,
          $property: key,
          $validator: ruleKey,
          $uid: `${path}-${ruleKey}`,
          $message: res.$message,
          $params: res.$params,
          $response: res.$response,
          $pending: res.$pending
        });
      }).concat(result.$externalResults.value));
      result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);
      result.$unwatch = () => ruleKeys.forEach((ruleKey) => {
        result[ruleKey].$unwatch();
      });
      result.$commit = () => {
        $lastInvalidState.value = true;
        $lastCommittedOn.value = Date.now();
      };
      resultsCache.set(path, rules, result);
      return result;
    }
    function collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {
      const nestedValidationKeys = Object.keys(validations);
      if (!nestedValidationKeys.length)
        return {};
      return nestedValidationKeys.reduce((results, nestedKey) => {
        results[nestedKey] = setValidations({
          validations: validations[nestedKey],
          state: nestedState,
          key: nestedKey,
          parentKey: path,
          resultsCache,
          globalConfig: config,
          instance,
          externalResults: nestedExternalResults
        });
        return results;
      }, {});
    }
    function createMetaFields(results, nestedResults, childResults) {
      const allResults = computed(() => [nestedResults, childResults].filter((res) => res).reduce((allRes, res) => {
        return allRes.concat(Object.values(unref(res)));
      }, []));
      const $dirty = computed({
        get() {
          return results.$dirty.value || (allResults.value.length ? allResults.value.every((r) => r.$dirty) : false);
        },
        set(v) {
          results.$dirty.value = v;
        }
      });
      const $silentErrors = computed(() => {
        const modelErrors = unref(results.$silentErrors) || [];
        const nestedErrors = allResults.value.filter((result) => (unref(result).$silentErrors || []).length).reduce((errors, result) => {
          return errors.concat(...result.$silentErrors);
        }, []);
        return modelErrors.concat(nestedErrors);
      });
      const $errors = computed(() => {
        const modelErrors = unref(results.$errors) || [];
        const nestedErrors = allResults.value.filter((result) => (unref(result).$errors || []).length).reduce((errors, result) => {
          return errors.concat(...result.$errors);
        }, []);
        return modelErrors.concat(nestedErrors);
      });
      const $invalid = computed(() => allResults.value.some((r) => r.$invalid) || unref(results.$invalid) || false);
      const $pending = computed(() => allResults.value.some((r) => unref(r.$pending)) || unref(results.$pending) || false);
      const $anyDirty = computed(() => allResults.value.some((r) => r.$dirty) || allResults.value.some((r) => r.$anyDirty) || $dirty.value);
      const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);
      const $touch = () => {
        results.$touch();
        allResults.value.forEach((result) => {
          result.$touch();
        });
      };
      const $commit = () => {
        results.$commit();
        allResults.value.forEach((result) => {
          result.$commit();
        });
      };
      const $reset = () => {
        results.$reset();
        allResults.value.forEach((result) => {
          result.$reset();
        });
      };
      if (allResults.value.length && allResults.value.every((nr) => nr.$dirty))
        $touch();
      return {
        $dirty,
        $errors,
        $invalid,
        $anyDirty,
        $error,
        $pending,
        $touch,
        $reset,
        $silentErrors,
        $commit
      };
    }
    function setValidations(_ref) {
      let {
        validations,
        state,
        key,
        parentKey,
        childResults,
        resultsCache,
        globalConfig = {},
        instance,
        externalResults
      } = _ref;
      const path = parentKey ? `${parentKey}.${key}` : key;
      const {
        rules,
        nestedValidators,
        config,
        validationGroups
      } = sortValidations(validations);
      const mergedConfig = _objectSpread2(_objectSpread2({}, globalConfig), config);
      const nestedState = key ? computed(() => {
        const s = unref(state);
        return s ? unref(s[key]) : void 0;
      }) : state;
      const cachedExternalResults = _objectSpread2({}, unref(externalResults) || {});
      const nestedExternalResults = computed(() => {
        const results2 = unref(externalResults);
        if (!key)
          return results2;
        return results2 ? unref(results2[key]) : void 0;
      });
      const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state);
      const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults);
      const $validationGroups = {};
      if (validationGroups) {
        Object.entries(validationGroups).forEach((_ref2) => {
          let [key2, group] = _ref2;
          $validationGroups[key2] = {
            $invalid: gatherBooleanGroupProperties(group, nestedResults, "$invalid"),
            $error: gatherBooleanGroupProperties(group, nestedResults, "$error"),
            $pending: gatherBooleanGroupProperties(group, nestedResults, "$pending"),
            $errors: gatherArrayGroupProperties(group, nestedResults, "$errors"),
            $silentErrors: gatherArrayGroupProperties(group, nestedResults, "$silentErrors")
          };
        });
      }
      const {
        $dirty,
        $errors,
        $invalid,
        $anyDirty,
        $error,
        $pending,
        $touch,
        $reset,
        $silentErrors,
        $commit
      } = createMetaFields(results, nestedResults, childResults);
      const $model = key ? computed({
        get: () => unref(nestedState),
        set: (val) => {
          $dirty.value = true;
          const s = unref(state);
          const external = unref(externalResults);
          if (external) {
            external[key] = cachedExternalResults[key];
          }
          if (isRef(s[key])) {
            s[key].value = val;
          } else {
            s[key] = val;
          }
        }
      }) : null;
      if (key && mergedConfig.$autoDirty) {
        watch(nestedState, () => {
          if (!$dirty.value)
            $touch();
          const external = unref(externalResults);
          if (external) {
            external[key] = cachedExternalResults[key];
          }
        }, {
          flush: "sync"
        });
      }
      async function $validate() {
        $touch();
        if (mergedConfig.$rewardEarly) {
          $commit();
          await nextTick();
        }
        await nextTick();
        return new Promise((resolve2) => {
          if (!$pending.value)
            return resolve2(!$invalid.value);
          const unwatch = watch($pending, () => {
            resolve2(!$invalid.value);
            unwatch();
          });
        });
      }
      function $getResultsForChild(key2) {
        return (childResults.value || {})[key2];
      }
      function $clearExternalResults() {
        if (isRef(externalResults)) {
          externalResults.value = cachedExternalResults;
        } else {
          if (Object.keys(cachedExternalResults).length === 0) {
            Object.keys(externalResults).forEach((k) => {
              delete externalResults[k];
            });
          } else {
            Object.assign(externalResults, cachedExternalResults);
          }
        }
      }
      return reactive(_objectSpread2(_objectSpread2(_objectSpread2({}, results), {}, {
        $model,
        $dirty,
        $error,
        $errors,
        $invalid,
        $anyDirty,
        $pending,
        $touch,
        $reset,
        $path: path || ROOT_PATH,
        $silentErrors,
        $validate,
        $commit
      }, childResults && {
        $getResultsForChild,
        $clearExternalResults,
        $validationGroups
      }), nestedResults));
    }
    class ResultsStorage {
      constructor() {
        this.storage = /* @__PURE__ */ new Map();
      }
      set(path, rules, result) {
        this.storage.set(path, {
          rules,
          result
        });
      }
      checkRulesValidity(path, rules, storedRules) {
        const storedRulesKeys = Object.keys(storedRules);
        const newRulesKeys = Object.keys(rules);
        if (newRulesKeys.length !== storedRulesKeys.length)
          return false;
        const hasAllValidators = newRulesKeys.every((ruleKey) => storedRulesKeys.includes(ruleKey));
        if (!hasAllValidators)
          return false;
        return newRulesKeys.every((ruleKey) => {
          if (!rules[ruleKey].$params)
            return true;
          return Object.keys(rules[ruleKey].$params).every((paramKey) => {
            return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);
          });
        });
      }
      get(path, rules) {
        const storedRuleResultPair = this.storage.get(path);
        if (!storedRuleResultPair)
          return void 0;
        const {
          rules: storedRules,
          result
        } = storedRuleResultPair;
        const isValidCache = this.checkRulesValidity(path, rules, storedRules);
        const $unwatch = result.$unwatch ? result.$unwatch : () => ({});
        if (!isValidCache)
          return {
            $dirty: result.$dirty,
            $partial: true,
            $unwatch
          };
        return result;
      }
    }
    const CollectFlag = {
      COLLECT_ALL: true,
      COLLECT_NONE: false
    };
    const VuelidateInjectChildResults = Symbol("vuelidate#injectChildResults");
    const VuelidateRemoveChildResults = Symbol("vuelidate#removeChildResults");
    function nestedValidations(_ref) {
      let {
        $scope,
        instance
      } = _ref;
      const childResultsRaw = {};
      const childResultsKeys = ref([]);
      const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {
        results[key] = unref(childResultsRaw[key]);
        return results;
      }, {}));
      function injectChildResultsIntoParent(results, _ref2) {
        let {
          $registerAs: key,
          $scope: childScope,
          $stopPropagation
        } = _ref2;
        if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope)
          return;
        childResultsRaw[key] = results;
        childResultsKeys.value.push(key);
      }
      instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);
      function removeChildResultsFromParent(key) {
        childResultsKeys.value = childResultsKeys.value.filter((childKey) => childKey !== key);
        delete childResultsRaw[key];
      }
      instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent);
      const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []);
      provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);
      const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []);
      provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);
      return {
        childResults,
        sendValidationResultsToParent,
        removeValidationResultsFromParent
      };
    }
    function ComputedProxyFactory(target) {
      return new Proxy(target, {
        get(target2, prop) {
          return typeof target2[prop] === "object" ? ComputedProxyFactory(target2[prop]) : computed(() => target2[prop]);
        }
      });
    }
    let uid = 0;
    function useVuelidate(validations, state) {
      var _getCurrentInstance;
      let globalConfig = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      if (arguments.length === 1) {
        globalConfig = validations;
        validations = void 0;
        state = void 0;
      }
      let {
        $registerAs,
        $scope = CollectFlag.COLLECT_ALL,
        $stopPropagation,
        $externalResults,
        currentVueInstance
      } = globalConfig;
      const instance = currentVueInstance || ((_getCurrentInstance = getCurrentInstance()) === null || _getCurrentInstance === void 0 ? void 0 : _getCurrentInstance.proxy);
      const componentOptions = instance ? instance.$options : {};
      if (!$registerAs) {
        uid += 1;
        $registerAs = `_vuelidate_${uid}`;
      }
      const validationResults = ref({});
      const resultsCache = new ResultsStorage();
      const {
        childResults,
        sendValidationResultsToParent,
        removeValidationResultsFromParent
      } = instance ? nestedValidations({
        $scope,
        instance
      }) : {
        childResults: ref({})
      };
      if (!validations && componentOptions.validations) {
        const rules = componentOptions.validations;
        state = ref({});
        onBeforeMount(() => {
          state.value = instance;
          watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, (validations2) => {
            validationResults.value = setValidations({
              validations: validations2,
              state,
              childResults,
              resultsCache,
              globalConfig,
              instance,
              externalResults: $externalResults || instance.vuelidateExternalResults
            });
          }, {
            immediate: true
          });
        });
        globalConfig = componentOptions.validationsConfig || globalConfig;
      } else {
        const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations : reactive(validations || {});
        watch(validationsWatchTarget, (newValidationRules) => {
          validationResults.value = setValidations({
            validations: newValidationRules,
            state,
            childResults,
            resultsCache,
            globalConfig,
            instance: instance !== null && instance !== void 0 ? instance : {},
            externalResults: $externalResults
          });
        }, {
          immediate: true
        });
      }
      if (instance) {
        sendValidationResultsToParent.forEach((f) => f(validationResults, {
          $registerAs,
          $scope,
          $stopPropagation
        }));
        onBeforeUnmount(() => removeValidationResultsFromParent.forEach((f) => f($registerAs)));
      }
      return computed(() => {
        return _objectSpread2(_objectSpread2({}, unref(validationResults.value)), childResults.value);
      });
    }
    const FieldSelector_vue_vue_type_style_index_0_scoped_44359602_lang = "";
    const FieldTypes = Object.freeze({
      ADDRESS: "address",
      // address
      BOOLEAN: "boolean",
      // boolean
      COMBOBOX: "combobox",
      // string
      CURRENCY: "currency",
      // double
      DATE: "date",
      // date
      DATETIME: "datetime",
      // dateTime
      DOUBLE: "double",
      // double
      EMAIL: "email",
      // string
      ID: "id",
      // ID
      INT: "int",
      // int
      // LOCATION: 'location', ------------------- TODO
      // MULTIPICKLIST: 'multipicklist',---------- TODO
      PERCENT: "percent",
      // double
      PHONE: "phone",
      // string
      PICKLIST: "picklist",
      // string
      REFERENCE: "reference",
      // ID
      STRING: "string",
      // string
      TEXTAREA: "textarea",
      // string
      URL: "url"
      // string
    });
    const _sfc_main$F = {
      components: {
        Icon,
        Picklist,
        Spinner
      },
      props: {
        disabled: Boolean,
        errors: Array,
        excludeFieldTypes: Array,
        excludeSoapTypes: Array,
        includeFieldTypes: Array,
        includeSoapTypes: Array,
        labels: Object,
        maxLookupDepth: Number,
        modelValue: String,
        sobject: {
          type: String,
          required: true
        }
      },
      emits: [
        "update:modelValue",
        "update:lookups",
        // TODO
        "update:field"
        // TODO
      ],
      data() {
        return {
          // bindings
          field: "",
          lookups: [],
          options: this.buildOptionsBySObject(),
          // general
          fullyQualifiedAPIName: "",
          localSObject: {
            name: this.$props.sobject,
            label: ""
            // fetching this on activation
          },
          // UI state management
          loading: false,
          initializing: false,
          ready: false
        };
      },
      computed: {
        hasFilters() {
          var _a2, _b, _c, _d;
          return ((_a2 = this.$props.excludeFieldTypes) == null ? void 0 : _a2.length) || ((_b = this.$props.excludeSoapTypes) == null ? void 0 : _b.length) || ((_c = this.$props.includeFieldTypes) == null ? void 0 : _c.length) || ((_d = this.$props.includeSoapTypes) == null ? void 0 : _d.length);
        },
        computedLabels() {
          return {
            ...{
              name: "Field Selector",
              loading: "Loading Fields..."
            },
            ...this.$props.labels
          };
        },
        /**
         * Watching $props alone provides an oldValue equal to newValue even when deeply watching. This is
         * because the actual object is not being reassigned, but rather properties are simply changing. However,
         * computing $props as so will allow us to watch an object which gets reassigned. Thus, we can compare old
         * and new values.
         */
        computedProps() {
          return { ...this.$props };
        }
      },
      watch: {
        computedProps: {
          handler(newProps, oldProps = {}) {
            var _a2, _b, _c, _d;
            if (((_a2 = this.$props.excludeSoapTypes) == null ? void 0 : _a2.length) && ((_b = this.$props.includeSoapTypes) == null ? void 0 : _b.length)) {
              console.error("Do not specify both excludeSoapTypes and includeSoapTypes properties. Choose one or neither.");
            }
            if (((_c = this.$props.excludeFieldTypes) == null ? void 0 : _c.length) && ((_d = this.$props.includeFieldTypes) == null ? void 0 : _d.length)) {
              console.error("Do not specify both excludeFieldTypes and includeFieldTypes properties. Choose one or neither.");
            }
            const { modelValue: newModelValue, sobject: newSObject } = newProps;
            const { modelValue: oldModelValue, sobject: oldSObject } = oldProps;
            if ((oldSObject || newSObject) && (newSObject == null ? void 0 : newSObject.toLowerCase()) !== (oldSObject == null ? void 0 : oldSObject.toLowerCase())) {
              this.localSObject.label = "";
              this.localSObject.name = newSObject.toLowerCase();
            }
            if (!!!newModelValue) {
              this.reset({ clearBinding: false });
              return;
            }
            if (newModelValue === this.fullyQualifiedAPIName && oldModelValue === newModelValue) {
              return;
            }
            this.hydrate();
          },
          deep: true,
          immediate: true
        }
      },
      methods: {
        focus() {
          var _a2;
          (_a2 = this.$refs.picklist) == null ? void 0 : _a2.focus();
        },
        async hydrate() {
          var _a2;
          this.initializing = true;
          this.loading = true;
          await this.$nextTick();
          const { field = "", lookups = [] } = deconstructFQAPIName(this.$props.modelValue);
          this.field = "Loading...";
          this.lookups = new Array(lookups.length);
          let options = await getFieldsBySObject(this.$props.sobject);
          if (lookups.length) {
            this.localSObject.label = await getLabelBySObject(this.$props.sobject);
            await SPM.Utils.Async.forEach(
              lookups,
              async (lookup2, index) => {
                const name = (lookup2 == null ? void 0 : lookup2.name) || lookup2;
                const option = options.find((f) => f.relationshipName === name);
                const [parent] = option.spm__references;
                this.lookups[index] = {
                  name,
                  label: `${option.label} (${parent.label})`
                };
                if (index < lookups.length) {
                  options = await getFieldsBySObject(parent.name);
                }
              }
            );
          }
          this.options = [{
            name: field,
            label: (_a2 = options.find((f) => f.name === field)) == null ? void 0 : _a2.label
          }];
          this.field = field;
          this.initializing = false;
          this.loading = false;
        },
        buildOptionsBySObject(sobject) {
          return [{
            options: () => new Promise(async (resolve2) => {
              this.loading = true;
              if (!this.localSObject.label) {
                this.localSObject.label = await getLabelBySObject(sobject || this.$props.sobject);
              }
              const fields = await this.getFieldsBySObject(sobject || this.$props.sobject);
              resolve2(fields);
              this.loading = false;
              this.ready = true;
              this.$nextTick(() => {
                this.$refs.picklist.focus();
              });
            }),
            lazy: true
          }];
        },
        updateBinding() {
          this.fullyQualifiedAPIName = constructFQAPIName({ field: this.field, lookups: this.lookups });
          this.$emit("update:modelValue", this.fullyQualifiedAPIName);
        },
        async getFieldsBySObject(sobject) {
          const fields = await getFieldsBySObject(sobject);
          function getSoapType(field) {
            const parts = field.soapType.split(":");
            return parts[parts.length - 1].toLowerCase();
          }
          if (this.hasFilters) {
            return fields.filter((field) => {
              var _a2, _b, _c, _d;
              if ((_a2 = this.$props.includeSoapTypes) == null ? void 0 : _a2.length) {
                return this.$props.includeSoapTypes.includes(getSoapType(field));
              }
              if ((_b = this.$props.includeFieldTypes) == null ? void 0 : _b.length) {
                return this.$props.includeFieldTypes.includes(field.type);
              }
              if ((_c = this.$props.excludeSoapTypes) == null ? void 0 : _c.length) {
                return !this.$props.excludeSoapTypes.includes(getSoapType(field));
              }
              if ((_d = this.$props.excludeFieldTypes) == null ? void 0 : _d.length) {
                return !this.$props.excludeFieldTypes.includes(field.type);
              }
            });
          }
          return fields;
        },
        async reset({ clearBinding = true } = {}) {
          this.ready = false;
          this.field = "";
          this.lookups = [];
          this.options = this.buildOptionsBySObject();
          if (clearBinding) {
            this.$emit("update:modelValue", "");
          }
        },
        async loadLookup({ name }, index) {
          this.$refs.picklist.reset();
          if (index === -1) {
            this.lookups = [];
            this.options = this.buildOptionsBySObject(this.$props.sobject);
          } else {
            this.lookups.splice(index + 1);
            this.options = this.buildOptionsBySObject(name);
          }
          this.$nextTick(() => {
            this.$refs.picklist.activationHandler();
            this.$refs.picklist.focus();
          });
        },
        getMaxLookupDepth() {
          return this.$props.maxLookupDepth >= 0 ? this.$props.maxLookupDepth : getMaxLookupDepth();
        },
        onRequestSelectOption(option) {
          var _a2;
          if (!option)
            return false;
          if (!((_a2 = option.spm__references) == null ? void 0 : _a2.length) || this.lookups.length >= this.getMaxLookupDepth()) {
            return true;
          }
          const [parent] = option.spm__references;
          this.lookups.push({
            name: parent.name,
            label: `${option.label} (${parent.label})`,
            relationshipName: option.relationshipName
          });
          this.options = this.buildOptionsBySObject(parent.name);
          this.$refs.picklist.reset();
          this.$nextTick(() => {
            this.$refs.picklist.activationHandler();
          });
          return false;
        }
      }
    };
    const _withScopeId$e = (n) => (pushScopeId("data-v-44359602"), n = n(), popScopeId(), n);
    const _hoisted_1$E = {
      key: 0,
      class: "slds-grid",
      style: { "padding": "0.5rem 1rem 0.75rem 1rem", "border-bottom": "1px solid #ccc", "margin-bottom": "10px" }
    };
    const _hoisted_2$D = { class: "slds-grid slds-wrap" };
    const _hoisted_3$v = /* @__PURE__ */ _withScopeId$e(() => /* @__PURE__ */ createBaseVNode("span", { style: { "padding-left": "1px", "padding-right": "4px" } }, " > ", -1));
    const _hoisted_4$r = ["onClick"];
    const _hoisted_5$p = {
      key: 2,
      style: { "padding-left": "1px", "padding-right": "4px" }
    };
    const _hoisted_6$o = /* @__PURE__ */ _withScopeId$e(() => /* @__PURE__ */ createBaseVNode("span", { class: "slds-media__figure slds-listbox__option-icon" }, null, -1));
    const _hoisted_7$l = { class: "slds-media__body" };
    const _hoisted_8$k = ["title"];
    const _hoisted_9$i = { class: "slds-truncate slds-col" };
    const _hoisted_10$f = {
      class: "slds-show",
      style: { "color": "#888" }
    };
    const _hoisted_11$c = {
      key: 0,
      class: "slds-grid slds-m-top_xx-small"
    };
    const _hoisted_12$9 = {
      key: 1,
      class: "slds-grid slds-wrap"
    };
    const _hoisted_13$9 = /* @__PURE__ */ _withScopeId$e(() => /* @__PURE__ */ createBaseVNode("span", { style: { "padding-left": "1px", "padding-right": "4px" } }, " > ", -1));
    const _hoisted_14$8 = {
      key: 0,
      style: { "padding-left": "1px", "padding-right": "4px" }
    };
    function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Picklist = resolveComponent("Picklist");
      return openBlock(), createBlock(_component_Picklist, mergeProps({
        ref: "picklist",
        modelValue: $data.field,
        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.field = $event)
      }, _ctx.$attrs, {
        class: { "default-cursor": !$data.ready },
        errors: _ctx.$props.errors,
        disabled: $data.loading || _ctx.$props.disabled,
        filterable: $data.ready || !!$data.field,
        labels: $options.computedLabels,
        idKey: "name",
        onRequestSelectOption: $options.onRequestSelectOption,
        options: $data.options,
        titleKey: "label",
        onClear: $options.reset,
        onReset: $options.reset,
        onSelectedOption: $options.updateBinding
      }), {
        dropdownHeader: withCtx(() => [
          $data.lookups.length ? (openBlock(), createElementBlock("div", _hoisted_1$E, [
            createVNode(_component_Icon, {
              category: "utility",
              name: "record_lookup",
              size: "xx-small",
              class: "slds-show slds-m-right_xx-small",
              style: { "margin-top": "2px", "margin-right": "0.35rem" }
            }),
            createBaseVNode("div", _hoisted_2$D, [
              createBaseVNode("div", null, [
                createBaseVNode("a", {
                  onClick: _cache[0] || (_cache[0] = ($event) => $options.loadLookup($data.localSObject, -1))
                }, toDisplayString($data.localSObject.label), 1),
                _hoisted_3$v
              ]),
              (openBlock(true), createElementBlock(Fragment, null, renderList($data.lookups || [], (lookup2, index) => {
                return openBlock(), createElementBlock("div", { key: index }, [
                  index < $data.lookups.length - 1 ? (openBlock(), createElementBlock("a", {
                    key: 0,
                    onClick: ($event) => $options.loadLookup(lookup2, index)
                  }, toDisplayString(lookup2.label), 9, _hoisted_4$r)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(lookup2.label), 1)
                  ], 64)),
                  index < $data.lookups.length - 1 ? (openBlock(), createElementBlock("span", _hoisted_5$p, " > ")) : createCommentVNode("", true)
                ]);
              }), 128))
            ])
          ])) : createCommentVNode("", true)
        ]),
        option: withCtx(({ option }) => {
          var _a2;
          return [
            $data.lookups.length < $options.getMaxLookupDepth() && ((_a2 = option.spm__references) == null ? void 0 : _a2.length) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              _hoisted_6$o,
              createBaseVNode("span", _hoisted_7$l, [
                createBaseVNode("div", {
                  class: "slds-grid slds-grid_align-spread slds-grid_vertical-align-center",
                  title: option.label
                }, [
                  createBaseVNode("div", _hoisted_9$i, [
                    createTextVNode(toDisplayString(option.label) + " ", 1),
                    createBaseVNode("div", _hoisted_10$f, " Lookup (" + toDisplayString(option.spm__references[0].label) + ") ", 1)
                  ]),
                  createVNode(_component_Icon, {
                    category: "utility",
                    name: "chevronright",
                    size: "x-small",
                    class: "slds-show"
                  })
                ], 8, _hoisted_8$k)
              ])
            ], 64)) : createCommentVNode("", true)
          ];
        }),
        footer: withCtx(() => {
          var _a2;
          return [
            $data.field && $data.lookups.length ? (openBlock(), createElementBlock("div", _hoisted_11$c, [
              createVNode(_component_Icon, {
                category: "utility",
                name: "record_lookup",
                size: "xx-small",
                class: "slds-show slds-m-right_xx-small",
                style: { "margin-top": "2px", "margin-right": "0.35rem" }
              }),
              $data.initializing ? (openBlock(), createBlock(_component_Spinner, {
                key: 0,
                class: "initializing-spinner",
                inline: "",
                size: "xx-small",
                theme: "brand",
                withoutContainer: ""
              })) : (openBlock(), createElementBlock("div", _hoisted_12$9, [
                createBaseVNode("div", null, [
                  createTextVNode(toDisplayString((_a2 = $data.localSObject) == null ? void 0 : _a2.label) + " ", 1),
                  _hoisted_13$9
                ]),
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.lookups || [], (lookup2, index) => {
                  return openBlock(), createElementBlock("div", { key: index }, [
                    createTextVNode(toDisplayString(lookup2 == null ? void 0 : lookup2.label) + " ", 1),
                    index < $data.lookups.length - 1 ? (openBlock(), createElementBlock("span", _hoisted_14$8, " > ")) : createCommentVNode("", true)
                  ]);
                }), 128))
              ]))
            ])) : createCommentVNode("", true)
          ];
        }),
        _: 1
      }, 16, ["modelValue", "class", "errors", "disabled", "filterable", "labels", "onRequestSelectOption", "options", "onClear", "onReset", "onSelectedOption"]);
    }
    const FieldSelector = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["render", _sfc_render$F], ["__scopeId", "data-v-44359602"]]);
    function buildDefaultField(field) {
      return {
        ...field,
        dirty: false,
        name: (field == null ? void 0 : field.name) || "",
        invalid: !(field == null ? void 0 : field.name),
        saved: !!(field == null ? void 0 : field.name)
      };
    }
    function buildDefaultFieldBindings(existingReferenceFields) {
      const defaultFieldBinding = {
        fields: [],
        latitude: buildDefaultField(),
        longitude: buildDefaultField()
      };
      (existingReferenceFields || []).forEach((field) => {
        if (field.type === "Latitude") {
          defaultFieldBinding.latitude = buildDefaultField(field);
        } else if (field.type === "Longitude") {
          defaultFieldBinding.longitude = buildDefaultField(field);
        } else {
          defaultFieldBinding.fields.push(buildDefaultField(field));
        }
      });
      if (!SPM.Components.ReferenceDataModal.templateAssignmentObject.hasOwnProperty("Name"))
        defaultFieldBinding.fields.push(buildDefaultField());
      return defaultFieldBinding;
    }
    const _sfc_main$E = {
      name: "AssignmentObjectModal",
      components: {
        SLDSButton,
        ButtonIcon,
        Layout,
        LayoutItem,
        FieldSelector,
        Picklist,
        Popover,
        Spinner
      },
      props: ["existingAssignmentObject"],
      emits: ["close"],
      data() {
        var _a2, _b, _c, _d, _e;
        return {
          loading: false,
          loadingMsg: "",
          v$: useVuelidate(),
          error: {
            renderPopover: false,
            renderPopoverBindTo: null
          },
          FieldTypes,
          renderGeoFields: (!!((_a2 = this.$props.existingAssignmentObject) == null ? void 0 : _a2.Id) || SPM.Components.ReferenceDataModal.templateAssignmentObject.Name) && JSON.parse(((_b = this.$props.existingAssignmentObject) == null ? void 0 : _b.sfsp__ReferenceFields__c) || "[]").some((f) => f.type === "Latitude" || f.type === "Longitude") || false,
          updatingReference: !!((_c = this.$props.existingAssignmentObject) == null ? void 0 : _c.Id),
          assignmentObject: {
            name: ((_d = this.$props.existingAssignmentObject) == null ? void 0 : _d.Name) || "",
            ...buildDefaultFieldBindings(JSON.parse(((_e = this.$props.existingAssignmentObject) == null ? void 0 : _e.sfsp__ReferenceFields__c) || "[]"))
          },
          assignmentObjectOptionsDelay: 500,
          assignmentObjectOptions: [
            {
              options: async (term) => {
                this.sObjects = this.sObjects || (await SPM.Utils.Rest.invoke("SObjects")).sobjects;
                this.assignmentObjectOptionsDelay = 200;
                term = term.toLowerCase();
                return this.sObjects.filter((o) => o.label.toLowerCase().includes(term));
              }
            }
          ]
        };
      },
      computed: {
        geoDeleteRender() {
          return this.assignmentObject.latitude.saved || this.assignmentObject.longitude.saved;
        },
        objectNotSelected() {
          return !this.assignmentObject.name;
        },
        fieldsAreInvalid() {
          return this.assignmentObject.fields.some((f) => f.invalid) || this.renderGeoFields && (this.assignmentObject.latitude.invalid || this.assignmentObject.longitude.invalid);
        },
        fieldErrorIndices() {
          const errors = [];
          this.assignmentObject.fields.forEach((f, i2) => {
            if (f.invalid && !f.saved && f.name === "") {
              errors.push(i2);
            }
          });
          return errors;
        },
        $parentCmp() {
          return SPM.Components.ReferenceDataModal;
        },
        v$Errors() {
          return this.v$.$errors.length > 0;
        }
      },
      watch: {
        "assignmentObject": {
          handler() {
            if (this.error.renderPopover) {
              this.error.renderPopover = false;
            }
          },
          deep: true
        },
        "assignmentObject.name": {
          handler() {
            this.renderGeoFields = false;
            this.assignmentObject = {
              name: this.assignmentObject.name,
              ...buildDefaultFieldBindings()
            };
          }
        },
        "v$.$invalid": {
          handler(value) {
            if (!value) {
              this.error = {
                renderPopover: false,
                renderPopoverBindTo: null
              };
              this.$parentCmp.renderErrorButtonIcon = false;
            }
          }
        },
        fieldsAreInvalid(value) {
          if (!value) {
            this.error = {
              renderPopover: false,
              renderPopoverBindTo: null
            };
            this.$parentCmp.renderErrorButtonIcon = false;
          }
        }
      },
      validations() {
        return {
          assignmentObject: {
            name: {
              required: common.withMessage("You must choose an assignment object.", required),
              duplication: common.withMessage("This assignment object already exists for the plan.", (a) => !this.$store.plan.sfsp__SalesAssignmentObjects__r.some((o) => o.Name === a && !this.updatingReference)),
              $autoDirty: true
            },
            longitude: {
              name: {
                required: common.withMessage("You must choose a longitude field.", requiredIf(this.geoValidation)),
                duplication: common.withMessage("This longitude reference field already exists on this assignment object", (l) => !this.assignmentObject.fields.some((f) => f.name === l && l !== "")),
                $autoDirty: true
              }
            },
            latitude: {
              name: {
                required: common.withMessage("You must choose a latitude field.", requiredIf(this.geoValidation)),
                duplication: common.withMessage("This latitude reference field already exists on this assignment object", (l) => !this.assignmentObject.fields.some((f) => f.name === l && l !== "")),
                $autoDirty: true
              }
            },
            fields: {
              $each: common.forEach({
                name: {
                  required: common.withMessage("Please select a field or remove", requiredIf(this.requiredFieldValidation)),
                  duplication: common.withMessage("This reference field already exists on this assignment object", this.validateReferenceFields)
                }
              })
            }
          }
        };
      },
      mounted() {
        SPM.Components.ReferenceDataCRM = this;
      },
      methods: {
        getVuelidateErrors(vuelidateErrors) {
          const errors = [];
          if (Array.isArray(vuelidateErrors) && vuelidateErrors.length > 0) {
            vuelidateErrors.forEach((err) => {
              errors.push(err.$message);
            });
          }
          return errors;
        },
        geoValidation(value) {
          return this.renderGeoFields && value === "";
        },
        requiredFieldValidation(value) {
          const field = this.assignmentObject.fields.find((f) => f.name === value);
          return value === "" && field.dirty && field.invalid;
        },
        validateReferenceFields(value) {
          let validated = true;
          const fields = this.assignmentObject.fields.filter((fs) => fs.name === value && value !== "");
          if (this.renderGeoFields) {
            if (this.assignmentObject.latitude.name === value && this.assignmentObject.latitude.name !== "" || this.assignmentObject.longitude.name === value && this.assignmentObject.longitude.name !== "") {
              fields.push(this.assignmentObject.fields.find((f) => f.name === value));
            }
          }
          if (fields.length > 1) {
            fields.forEach((f) => {
              if (f.dirty && !f.saved) {
                f.invalid = true;
              }
            });
            validated = false;
          } else if (fields.length === 1) {
            fields[0].invalid = false;
          }
          return validated;
        },
        touch() {
          this.assignmentObject.fields.forEach((f) => f.dirty = !f.saved);
          if (this.renderGeoFields) {
            this.assignmentObject.latitude.dirty = !this.assignmentObject.latitude.saved;
            this.assignmentObject.longitude.dirty = !this.assignmentObject.longitude.saved;
          }
        },
        async save(addAnother) {
          if (this.v$.$invalid || this.fieldsAreInvalid) {
            this.v$.$touch();
            this.touch();
            this.$parentCmp.renderErrorButtonIcon = true;
            await this.$nextTick();
            this.error.renderPopoverBindTo = this.$parentCmp.$refs.errorButtonIcon.$el;
            this.error.renderPopover = true;
            return;
          }
          let assignmentObject;
          let activityDescription = "";
          this.$parentCmp.loadingMsg = "Saving your work...";
          try {
            this.$parentCmp.loadingMsg = "Loading...";
            const fields = [...this.assignmentObject.fields];
            if (!this.assignmentObject.fields.find((f) => f.name === "Id")) {
              const _fields = await getFieldsBySObject(this.assignmentObject.name);
              const idField = _fields.find((f) => f.name === "Id");
              const newObj = { crmName: "Id" };
              fields.push(newObj);
              await this.onSelectOption(newObj, idField);
            }
            fields.filter((fs) => fs.unique).forEach((field) => field.unique = field.name === "Id");
            if (this.renderGeoFields) {
              fields.push(Object.assign(this.assignmentObject.latitude, { type: "Latitude" }));
              fields.push(Object.assign(this.assignmentObject.longitude, { type: "Longitude" }));
            }
            const entitySet = /* @__PURE__ */ new Set();
            const fieldSet = /* @__PURE__ */ new Set();
            const fieldMap = /* @__PURE__ */ new Map();
            fields.forEach((f) => {
              if (f.sobject) {
                fieldMap.set(`${f.sobject.toLowerCase()}:${f.name.toLowerCase()}`, f);
                entitySet.add(f.sobject);
                fieldSet.add(f.name);
              }
            });
            const query = `SELECT Description, EntityDefinition.QualifiedApiName, QualifiedApiName FROM FieldDefinition WHERE EntityDefinition.QualifiedApiName IN (${Array.from(entitySet).map((e) => `'${e}'`).join(",")}) AND QualifiedApiName IN (${Array.from(fieldSet).map((f) => `'${f}'`).join(",")})`;
            const fieldDefinitions = await SPM.Utils.Rest.invoke("ToolingQuery", query);
            (fieldDefinitions.records || []).forEach((r) => {
              const key = `${r.EntityDefinition.QualifiedApiName.toLowerCase()}:${r.QualifiedApiName.toLowerCase()}`;
              if (fieldMap.has(key)) {
                fieldMap.get(key).description = r.Description || "";
              }
            });
            if (this.updatingReference) {
              activityDescription = `Updating ${this.$props.existingAssignmentObject.Name} Reference Fields`;
              this.$parentCmp.loadingMsg = "Retrieving CRM Records...";
              [assignmentObject] = await SPM.Utils.Apex.invoke("UpdateSObjects", [
                [{
                  Id: this.$props.existingAssignmentObject.Id,
                  Name: this.$props.existingAssignmentObject.Name,
                  sfsp__SalesPlan__c: this.$props.existingAssignmentObject.sfsp__SalesPlan__c,
                  sfsp__Label__c: this.$props.existingAssignmentObject.sfsp__Label__c,
                  sfsp__ReferenceFields__c: JSON.stringify(fields.map((f) => {
                    delete f.dirty;
                    delete f.invalid;
                    delete f.saved;
                    return f;
                  }))
                }],
                true
              ]);
              this.$store.$patch((state) => {
                const assignmentObjectIndex = state.plan.sfsp__SalesAssignmentObjects__r.findIndex((a) => a.Id === assignmentObject.Id);
                state.plan.sfsp__SalesAssignmentObjects__r.splice(assignmentObjectIndex, 1, assignmentObject);
                state.hasChanged = true;
              });
              this.$parentCmp.loadingMsg = "Updating Assignment Object Dataset...";
              const [asyncJob] = await SPM.Utils.Apex.invoke("InsertSObjects", [
                [{
                  sobjectType: "sfsp__SalesAsyncJob__c",
                  sfsp__MaioEndpoint__c: SPM.maioUrl,
                  sfsp__SalesAssignmentObject__c: assignmentObject.Id,
                  sfsp__Type__c: "Update Assignment Object",
                  sfsp__Splunk__c: JSON.stringify({ txnId: this.$store.txnId })
                }],
                true
              ]);
              this.$store.salesAsyncJobs.push(asyncJob);
              const jobResponse2 = await SPM.Utils.Apex.invoke("StartJob", [{ job: "BuildAssignmentObject", version: SPM.version, requestId: asyncJob.Id, assignmentObjectId: asyncJob.sfsp__SalesAssignmentObject__c, isScratch: SPM.isScratch, updateRefFields: true }]);
              console.log(jobResponse2);
              this.$parentCmp.loadingMsg = "";
              SPM.Components.ReferenceDataModal.view = SPM.Components.ReferenceDataModal.Views.LIST;
            } else {
              [assignmentObject] = await SPM.Utils.Apex.invoke("InsertSObjects", [
                [{
                  sobjectType: "sfsp__SalesAssignmentObject__c",
                  Name: this.assignmentObject.name,
                  sfsp__SalesPlan__c: this.$store.plan.Id,
                  sfsp__Label__c: this.existingAssignmentObject.sfsp__Label__c || this.sObjects.find((o) => o.name === this.assignmentObject.name).label,
                  sfsp__ReferenceFields__c: JSON.stringify(fields.map((f) => {
                    delete f.dirty;
                    delete f.invalid;
                    delete f.saved;
                    return f;
                  }))
                }],
                true
              ]);
              activityDescription = `Creating ${assignmentObject.Name} assignment object`;
              this.$parentCmp.loadingMsg = "Starting Dataset Creation...";
              const [asyncJob] = await SPM.Utils.Apex.invoke("InsertSObjects", [
                [{
                  sobjectType: "sfsp__SalesAsyncJob__c",
                  sfsp__MaioEndpoint__c: SPM.maioUrl,
                  sfsp__SalesAssignmentObject__c: assignmentObject.Id,
                  sfsp__Type__c: "Add Assignment Object",
                  sfsp__Splunk__c: JSON.stringify({ txnId: this.$store.txnId })
                }],
                true
              ]);
              this.$store.salesAsyncJobs.push(asyncJob);
              const jobResponse2 = await SPM.Utils.Apex.invoke("StartJob", [{ job: "BuildAssignmentObject", version: SPM.version, requestId: asyncJob.Id, assignmentObjectId: asyncJob.sfsp__SalesAssignmentObject__c, isScratch: SPM.isScratch }]);
              console.log(jobResponse2);
              this.$parentCmp.loadingMsg = "";
              this.$parentCmp.$emit("close");
            }
            await insertActivities([{
              description: activityDescription,
              // TODO
              name: this.assignmentObject.name,
              parentId: this.$store.plan.Id,
              recordType: ActivityRecordTypes.ASSIGNMENT,
              subtype: this.updatingReference ? ActivitySubtypes.UPDATE : ActivitySubtypes.CREATE,
              type: ActivityTypes.MANAGEMENT
            }]);
            this.$parentCmp.$nextTick(this.$parentCmp.$props.config.callback.bind(this, assignmentObject, addAnother));
          } catch (ex) {
            this.$store.toast({ message: `Assignment Object "${assignmentObject.Name}" was not ${this.updatingReference ? "updated" : "created"}`, duration: null, state: "error" });
            if ((assignmentObject == null ? void 0 : assignmentObject.Id) && !this.updatingReference) {
              SPM.Utils.Rest.invoke("Delete", { ids: [assignmentObject.Id] });
            }
            this.$parentCmp.$emit("close");
          } finally {
            this.$parentCmp.loadingMsg = "";
          }
        },
        async onSelectOption(localField, selectedField) {
          await SPM.Utils.Async.wait(1);
          const soapType = selectedField.soapType.split(":")[1];
          Object.assign(localField, {
            name: localField.crmName.replaceAll("__", "_").replaceAll(".", "_"),
            dirty: true,
            invalid: false,
            label: selectedField.label,
            sobject: selectedField.sobject,
            source: "CRM",
            sourceType: soapType,
            unique: selectedField.name === "Id",
            // CRMA
            precision: selectedField.precision || 10,
            // CRMA
            scale: selectedField.scale || 2,
            // CRMA
            createdDate: Date.now(),
            type: ["string", "id", "boolean", "date", "datetime"].includes(soapType.toLowerCase()) ? "Text" : "Numeric",
            // CRMA data type,
            isNameField: selectedField.nameField
          });
        },
        onAddField() {
          this.assignmentObject.fields.push(buildDefaultField());
          this.$nextTick(() => {
            this.$refs[`field-${this.assignmentObject.fields.length - 1}`][0].focus();
          });
        },
        onAddGeoField() {
          this.renderGeoFields = true;
          this.$nextTick(() => {
            this.$refs.latitude.focus();
          });
        },
        onDeleteField(index) {
          const { fields } = this.assignmentObject;
          const numFields = fields.length;
          if (fields.length === 1) {
            if (this.renderGeoFields) {
              fields.splice(0, 1);
              this.$refs.latitude.focus();
            } else {
              fields.splice(0, 1, buildDefaultField());
              this.$refs["field-0"][0].focus();
            }
            return;
          }
          fields.splice(index, 1);
          this.$nextTick(() => {
            if (numFields - 1 === index) {
              if (this.renderGeoFields) {
                this.$refs.latitude.focus();
              } else {
                this.$refs[`field-${index - 1}`][0].focus();
              }
            } else {
              this.$refs[`field-${index}`][0].focus();
            }
          });
        },
        onDeleteGeoField() {
          this.assignmentObject.latitude = buildDefaultField();
          this.assignmentObject.longitude = buildDefaultField();
          if (this.assignmentObject.fields.length === 0) {
            this.$refs.latitude.focus();
            this.assignmentObject.latitude.dirty = true;
            this.assignmentObject.longitude.dirty = true;
          } else {
            this.renderGeoFields = false;
            this.$refs[`field-${this.assignmentObject.fields.length - 1}`][0].focus();
          }
        }
      }
    };
    const _hoisted_1$D = {
      class: "slds-m-left_xx-small slds-m-right_x-small",
      style: { "font-weight": "800", "width": "1.5rem", "text-align": "right", "padding-top": "2rem" }
    };
    const _hoisted_2$C = {
      class: "slds-m-left_xx-small slds-m-right_x-small",
      style: { "font-weight": "800", "width": "1.5rem", "text-align": "right", "padding-top": "2rem" }
    };
    const _hoisted_3$u = /* @__PURE__ */ createBaseVNode("span", null, "We hit a snag.", -1);
    const _hoisted_4$q = { key: 0 };
    function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Picklist = resolveComponent("Picklist");
      const _component_FieldSelector = resolveComponent("FieldSelector");
      const _component_LayoutItem = resolveComponent("LayoutItem");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Layout = resolveComponent("Layout");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Popover = resolveComponent("Popover");
      return openBlock(), createElementBlock("div", null, [
        createVNode(_component_Picklist, {
          ref: "assignmentObject.name",
          modelValue: $data.assignmentObject.name,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.assignmentObject.name = $event),
          asyncDelay: $data.assignmentObjectOptionsDelay,
          errors: _ctx.$getErrorsByField($data.v$.assignmentObject.name),
          labels: { name: "Assignment Object" },
          options: $data.assignmentObjectOptions,
          disabled: $data.updatingReference,
          idKey: "name",
          titleKey: "label",
          filterable: "",
          required: ""
        }, null, 8, ["modelValue", "asyncDelay", "errors", "options", "disabled"]),
        (openBlock(true), createElementBlock(Fragment, null, renderList($data.assignmentObject.fields, (field, index) => {
          return openBlock(), createBlock(_component_Layout, {
            key: index,
            class: "slds-p-horizontal_small slds-p-vertical_x-small",
            gutters: ""
          }, {
            default: withCtx(() => [
              createBaseVNode("div", _hoisted_1$D, toDisplayString(`${index + 1}.`), 1),
              createVNode(_component_LayoutItem, { class: "slds-gutters_x-small" }, {
                default: withCtx(() => [
                  $data.updatingReference && !!field.name && !field.dirty && !field.crmName ? (openBlock(), createBlock(_component_Picklist, {
                    key: 0,
                    modelValue: field.name,
                    options: [field.name],
                    labels: { name: `Reference Field ${index + 1}` },
                    filterable: "",
                    disabled: ""
                  }, null, 8, ["modelValue", "options", "labels"])) : (openBlock(), createBlock(_component_FieldSelector, {
                    key: 1,
                    ref_for: true,
                    ref: `field-${index}`,
                    modelValue: field.crmName,
                    "onUpdate:modelValue": ($event) => field.crmName = $event,
                    class: normalizeClass({ "slds-has-error": field.dirty && field.invalid }),
                    errors: $options.getVuelidateErrors($data.v$.assignmentObject.fields.$each.$response.$errors[index].name),
                    disabled: $options.objectNotSelected || $data.updatingReference && !!field.name && !field.dirty,
                    labels: { name: `Reference Field ${index + 1}` },
                    pageSize: 10,
                    required: "",
                    sobject: $data.assignmentObject.name,
                    onClear: ($event) => {
                      field.invalid = true;
                    },
                    onSelectedOption: ($event) => $options.onSelectOption(field, $event)
                  }, null, 8, ["modelValue", "onUpdate:modelValue", "class", "errors", "disabled", "labels", "sobject", "onClear", "onSelectedOption"]))
                ]),
                _: 2
              }, 1024),
              createVNode(_component_LayoutItem, {
                class: "slds-grow-none slds-gutters_x-small",
                style: { "padding-top": "1.5rem" }
              }, {
                default: withCtx(() => [
                  createVNode(_component_ButtonIcon, {
                    assistiveText: "Delete",
                    disabled: $options.objectNotSelected || (!$data.renderGeoFields && !field.name && $data.assignmentObject.fields.length === 1 || $data.updatingReference && !!field.name && !field.dirty),
                    iconCategory: "utility",
                    iconName: "delete",
                    title: "Delete",
                    variant: "border-filled",
                    onClick: ($event) => $options.onDeleteField(index)
                  }, null, 8, ["disabled", "onClick"])
                ]),
                _: 2
              }, 1024)
            ]),
            _: 2
          }, 1024);
        }), 128)),
        $data.renderGeoFields ? (openBlock(), createBlock(_component_Layout, {
          key: 0,
          class: "slds-p-horizontal_small slds-p-vertical_x-small",
          gutters: ""
        }, {
          default: withCtx(() => [
            createBaseVNode("div", _hoisted_2$C, toDisplayString(`${$data.assignmentObject.fields.length + 1}.`), 1),
            createVNode(_component_LayoutItem, { class: "slds-gutters_x-small" }, {
              default: withCtx(() => [
                createVNode(_component_FieldSelector, {
                  ref: "latitude",
                  modelValue: $data.assignmentObject.latitude.crmName,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.assignmentObject.latitude.crmName = $event),
                  class: normalizeClass({ "slds-has-error": $data.assignmentObject.latitude.dirty && $data.assignmentObject.latitude.invalid }),
                  disabled: $data.updatingReference && !$data.assignmentObject.latitude.invalid && !$data.assignmentObject.latitude.dirty,
                  errors: _ctx.$getErrorsByField($data.v$.assignmentObject.latitude.name),
                  includeFieldTypes: [$data.FieldTypes.REFERENCE, $data.FieldTypes.DOUBLE],
                  labels: { name: "Latitude" },
                  pageSize: 10,
                  required: "",
                  sobject: $data.assignmentObject.name,
                  onClear: _cache[2] || (_cache[2] = ($event) => {
                    $data.assignmentObject.latitude.invalid = true;
                  }),
                  onSelectedOption: _cache[3] || (_cache[3] = ($event) => $options.onSelectOption($data.assignmentObject.latitude, $event))
                }, null, 8, ["modelValue", "class", "disabled", "errors", "includeFieldTypes", "sobject"])
              ]),
              _: 1
            }),
            createVNode(_component_LayoutItem, { class: "slds-gutters_x-small" }, {
              default: withCtx(() => [
                createVNode(_component_FieldSelector, {
                  ref: "longitude",
                  modelValue: $data.assignmentObject.longitude.crmName,
                  "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.assignmentObject.longitude.crmName = $event),
                  class: normalizeClass({ "slds-has-error": $data.assignmentObject.longitude.dirty && $data.assignmentObject.longitude.invalid }),
                  disabled: $data.updatingReference && !$data.assignmentObject.longitude.invalid && !$data.assignmentObject.latitude.dirty,
                  errors: _ctx.$getErrorsByField($data.v$.assignmentObject.longitude.name),
                  includeFieldTypes: [$data.FieldTypes.REFERENCE, $data.FieldTypes.DOUBLE],
                  labels: { name: "Longitude" },
                  pageSize: 10,
                  required: "",
                  sobject: $data.assignmentObject.name,
                  onClear: _cache[5] || (_cache[5] = ($event) => {
                    $data.assignmentObject.longitude.invalid = true;
                  }),
                  onSelectedOption: _cache[6] || (_cache[6] = ($event) => $options.onSelectOption($data.assignmentObject.longitude, $event))
                }, null, 8, ["modelValue", "class", "disabled", "errors", "includeFieldTypes", "sobject"])
              ]),
              _: 1
            }),
            createVNode(_component_LayoutItem, {
              class: "slds-grow-none slds-gutters_x-small",
              style: { "padding-top": "1.5rem" }
            }, {
              default: withCtx(() => [
                createVNode(_component_ButtonIcon, {
                  assistiveText: "Delete",
                  disabled: $options.geoDeleteRender,
                  iconCategory: "utility",
                  iconName: "delete",
                  title: "Delete",
                  variant: "border-filled",
                  onClick: $options.onDeleteGeoField
                }, null, 8, ["disabled", "onClick"])
              ]),
              _: 1
            })
          ]),
          _: 1
        })) : createCommentVNode("", true),
        createVNode(_component_Layout, {
          class: "slds-p-around_small slds-m-top_xx-small",
          style: { "padding-left": "3.25rem" },
          gutters: ""
        }, {
          default: withCtx(() => [
            createVNode(_component_SLDSButton, {
              disabled: $options.objectNotSelected || $options.$parentCmp.loadingMsg.length > 0,
              class: "slds-legacy-button",
              iconCategory: "utility",
              iconName: "add",
              onClick: $options.onAddField
            }, {
              default: withCtx(() => [
                createTextVNode(" Add Reference ")
              ]),
              _: 1
            }, 8, ["disabled", "onClick"]),
            createVNode(_component_LayoutItem, { class: "slds-grow-none" }, {
              default: withCtx(() => [
                createVNode(_component_SLDSButton, {
                  disabled: $options.objectNotSelected || $data.renderGeoFields || $options.$parentCmp.loadingMsg.length > 0,
                  class: "slds-legacy-button",
                  iconCategory: "utility",
                  iconName: "add",
                  onClick: $options.onAddGeoField
                }, {
                  default: withCtx(() => [
                    createTextVNode(" Add Coordinates ")
                  ]),
                  _: 1
                }, 8, ["disabled", "onClick"])
              ]),
              _: 1
            })
          ]),
          _: 1
        }),
        $data.error.renderPopover ? (openBlock(), createBlock(_component_Popover, {
          key: 1,
          bindTo: $data.error.renderPopoverBindTo,
          theme: "error",
          width: "medium",
          position: "fixed",
          onClose: _cache[7] || (_cache[7] = ($event) => $data.error.renderPopover = false)
        }, {
          header: withCtx(() => [
            _hoisted_3$u
          ]),
          content: withCtx(() => [
            $options.v$Errors ? (openBlock(), createElementBlock("div", _hoisted_4$q, " Resolve errors before continuing. ")) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["bindTo"])) : createCommentVNode("", true)
      ]);
    }
    const ReferenceDataCRM = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["render", _sfc_render$E]]);
    const _sfc_main$D = {
      name: "FileImport",
      components: {
        Icon,
        ButtonIcon
      },
      data() {
        return {
          id: getGUID(),
          file: null
        };
      },
      methods: {
        async onFileChange(event, dropped = false) {
          var _a2;
          const fileSource = dropped ? event.dataTransfer : event.target;
          this.file = (_a2 = fileSource == null ? void 0 : fileSource.files) == null ? void 0 : _a2[0];
          this.$emit("file-change", { file: this.file });
        }
      }
    };
    const _hoisted_1$C = ["id"];
    const _hoisted_2$B = /* @__PURE__ */ createBaseVNode("abbr", {
      class: "slds-required",
      title: "required"
    }, "* ", -1);
    const _hoisted_3$t = {
      class: "slds-file-selector slds-file-selector_files",
      style: { "display": "block" }
    };
    const _hoisted_4$p = ["id", "aria-labelledby"];
    const _hoisted_5$o = ["id", "for"];
    const _hoisted_6$n = {
      class: "slds-file-selector__button slds-button slds-button_neutral",
      style: { "width": "100%" }
    };
    const _hoisted_7$k = /* @__PURE__ */ createBaseVNode("span", {
      class: "slds-file-selector__text slds-text-color_weak slds-text-align_center slds-m-top_small",
      style: { "display": "block" }
    }, "Or drop file", -1);
    const _hoisted_8$j = {
      key: 1,
      class: "slds-input slds-p-horizontal_xx-small slds-file-selector__body slds-grid_align-spread"
    };
    const _hoisted_9$h = { class: "slds-file-selector__input slds-truncate" };
    const _hoisted_10$e = { class: "slds-p-left_xx-small" };
    function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("label", {
          class: "slds-form-element__label",
          id: `${$data.id}-file-selector-primary-label`
        }, [
          _hoisted_2$B,
          createTextVNode("CSV File")
        ], 8, _hoisted_1$C),
        createBaseVNode("div", _hoisted_3$t, [
          !$data.file ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: "slds-file-selector__dropzone slds-theme_default",
            onDragenter: _cache[1] || (_cache[1] = withModifiers(() => {
            }, ["prevent", "stop"])),
            onDragover: _cache[2] || (_cache[2] = withModifiers(() => {
            }, ["prevent", "stop"])),
            onDragleave: _cache[3] || (_cache[3] = withModifiers(() => {
            }, ["prevent", "stop"])),
            onDrop: _cache[4] || (_cache[4] = withModifiers((e) => $options.onFileChange(e, true), ["prevent", "stop"]))
          }, [
            createBaseVNode("input", {
              id: `${$data.id}-csvFileInput`,
              type: "file",
              class: "slds-file-selector__input slds-assistive-text",
              "aria-labelledby": `${$data.id}-file-selector-primary-label ${$data.id}-file-selector-secondary-label`,
              onChange: _cache[0] || (_cache[0] = (...args) => $options.onFileChange && $options.onFileChange(...args))
            }, null, 40, _hoisted_4$p),
            createBaseVNode("label", {
              id: `${$data.id}-file-selector-secondary-label`,
              class: "slds-file-selector__body slds-p-around_small",
              style: { "display": "block" },
              for: `${$data.id}-csvFileInput`
            }, [
              createBaseVNode("span", _hoisted_6$n, [
                createVNode(_component_Icon, {
                  category: "utility",
                  name: "upload",
                  size: "xx-small",
                  class: "slds-current-color",
                  iconClass: ["slds-button__icon", "slds-button__icon_left"]
                }),
                createTextVNode(" Upload File ")
              ]),
              _hoisted_7$k
            ], 8, _hoisted_5$o)
          ], 32)) : (openBlock(), createElementBlock("label", _hoisted_8$j, [
            createBaseVNode("div", _hoisted_9$h, [
              createVNode(_component_Icon, {
                category: "doctype",
                name: "csv",
                size: "small",
                inheritFillFromParent: false,
                iconClass: ["slds-input__icon", "slds-input__icon_left", "slds-p-bottom_xx-small"]
              }),
              createBaseVNode("span", _hoisted_10$e, toDisplayString($data.file.name), 1)
            ]),
            createVNode(_component_ButtonIcon, {
              iconCategory: "utility",
              iconName: "clear",
              variant: "container",
              size: "small",
              title: "Remove CSV",
              assistiveText: "Remove CSV",
              onClick: _cache[5] || (_cache[5] = ($event) => _ctx.$emit("file-change", { file: $data.file = null }))
            })
          ]))
        ])
      ]);
    }
    const FileImport = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$D]]);
    const ReferenceDataCSV_vue_vue_type_style_index_0_scoped_d3cec463_lang = "";
    const _sfc_main$C = {
      name: "ReferenceFieldsCSV",
      components: {
        Button: SLDSButton,
        Checkbox,
        FileImport,
        Spinner,
        TextInput,
        Picklist,
        DataTable
      },
      props: ["assignmentObject"],
      emits: ["show-errors"],
      data() {
        return {
          loadingMsg: "",
          hideUnchecked: false,
          showErrors: false,
          csvRows: [],
          csvColumns: [],
          rows: [],
          columns: [
            { id: "csvColumn", name: "CSV Column" },
            { id: "sampleData", name: "Sample Data" },
            { id: "apiName", name: "Reference Field API Name" },
            { id: "type", name: "Type" },
            { id: "description", name: "Description" }
          ],
          csvFile: null,
          csvKey: "",
          fileName: "",
          showUploadError: false
        };
      },
      computed: {
        hasSelectedRows() {
          return this.rows.some((row) => row.data[0].selected);
        },
        hasErrors() {
          return !this.hasSelectedRows || this.rows.some((row) => this.getFieldAPINameErrors(row).length);
        },
        computedRows() {
          if (!this.hideUnchecked)
            return this.rows;
          return this.rows.filter((row) => row.data[0].selected);
        },
        csvReferenceFields() {
          return JSON.parse(this.$props.assignmentObject.sfsp__ReferenceFields__c).filter((field) => field.source === "CSV");
        },
        parsedReferenceFields() {
          return JSON.parse(this.$props.assignmentObject.sfsp__ReferenceFields__c);
        }
      },
      watch: {
        csvKey: {
          handler() {
            if (!this.csvKey)
              this.rows = [];
            else
              this.loadTable();
          }
        },
        hasErrors() {
          if (this.showErrors)
            this.$emit("show-errors", this.hasErrors);
        }
      },
      mounted() {
        SPM.Components.ReferenceFieldsCSV = this;
      },
      methods: {
        async save() {
          if (this.hasErrors) {
            this.showErrors = true;
            this.$emit("show-errors", this.showErrors);
            return;
          }
          try {
            await this.uploadCsv({ csvFile: this.csvFile, preview: false });
            this.loadingMsg = "Updating Reference Fields...";
            const uniqueFieldIndex = this.csvColumns.findIndex((colName) => colName === this.csvKey);
            const selectedColumnIndexes = [];
            const selectedFields = [];
            this.rows.forEach((row, index) => {
              if (row.data[0].selected) {
                selectedColumnIndexes.push(index >= uniqueFieldIndex ? index + 1 : index);
                selectedFields.push({
                  name: row.data[2].value.replaceAll(/\s/g, ""),
                  // target field name
                  type: row.data[3].value,
                  // field data type
                  description: row.data[4].value
                  // field description
                });
              }
            });
            const rowsToUpdate = this.csvRows.map((rowData) => {
              const fieldMapping = {};
              rowData.forEach((d, i2) => {
                if (selectedColumnIndexes.includes(i2)) {
                  const columnName = this.csvColumns[i2];
                  const tableRow = this.rows.find((r) => r.data[0].value === columnName);
                  const fieldName = tableRow.data[2].value;
                  fieldMapping[fieldName.replaceAll(/\s/g, "")] = d;
                }
              });
              const uniqueFieldName = this.parsedReferenceFields.find((f) => f.unique).name;
              fieldMapping[uniqueFieldName] = rowData[uniqueFieldIndex];
              return fieldMapping;
            });
            const referenceFields = this.parsedReferenceFields;
            await SPM.Utils.Async.forEachParallel(selectedFields, async ({ name, type, description }) => {
              const label = name;
              name = name.replace(/[~`!@#$%^&*()\<\>\-+=\[\]{}:;|\\,?\/"'']/g, "");
              name = name.replace(/_{2,}/g, "_");
              name = name.replaceAll(".", "_");
              name = name.replace(/_+$/, "");
              name = name.replace(/^(\d)/, "X$1");
              const geoField = referenceFields.find((f) => ["Latitude", "Longitude"].includes(f.type) && f.name === name);
              const dataType = (geoField == null ? void 0 : geoField.type) || (type === "Number" ? "Numeric" : "Text");
              const refField = {
                name,
                label,
                type: dataType,
                description,
                unique: false,
                precision: 10,
                scale: 2,
                source: "CSV"
              };
              const existingField = referenceFields.find((f) => f.name === refField.name);
              if (!existingField)
                referenceFields.push({ ...refField, createdDate: Date.now() });
              else
                Object.assign(existingField, { ...refField, lastModifiedDate: Date.now() });
            });
            const [assignmentObject] = await SPM.Utils.Apex.invoke("UpdateSObjects", [
              [{
                Id: this.$props.assignmentObject.Id,
                Name: this.$props.assignmentObject.Name,
                sfsp__Label__c: this.$props.assignmentObject.sfsp__Label__c,
                sfsp__ReferenceFields__c: JSON.stringify(referenceFields)
              }],
              true
            ]);
            this.$store.$patch((state) => {
              const assignmentObjectIndex = state.plan.sfsp__SalesAssignmentObjects__r.findIndex((a) => a.Id === assignmentObject.Id);
              state.plan.sfsp__SalesAssignmentObjects__r.splice(assignmentObjectIndex, 1, assignmentObject);
              state.hasChanged = true;
            });
            this.loadingMsg = "Updating Assignment Object Dataset...";
            const [asyncJob] = await SPM.Utils.Apex.invoke("InsertSObjects", [
              [{
                sobjectType: "sfsp__SalesAsyncJob__c",
                sfsp__MaioEndpoint__c: SPM.maioUrl,
                sfsp__SalesAssignmentObject__c: assignmentObject.Id,
                sfsp__Type__c: "Update Assignment Object",
                sfsp__Splunk__c: JSON.stringify({ txnId: this.$store.txnId }),
                sfsp__Status__c: "Waiting",
                sfsp__Details__c: "Waiting for dataflow to start..."
              }],
              true
            ]);
            this.$store.salesAsyncJobs.push(asyncJob);
            const nodeBoundaries = await SPM.Utils.Apex.invoke("Query", [`SELECT Id, Name, sfsp__SalesPlan__c, sfsp__ContainerSet__c, sfsp__IncludePoints__c FROM sfsp__SalesBoundary__c WHERE sfsp__SalesPlan__c = '${this.$store.plan.Id}'`]);
            await Promise.all([
              SPM.Utils.ExternalData.updateDataset({ planId: this.$store.plan.Id, planName: this.$store.plan.Name, datasetType: "Records", assignmentObject, geoBoundaries: nodeBoundaries, rowsToUpdate }),
              SPM.Utils.ExternalData.updateDataset({ planId: this.$store.plan.Id, planName: this.$store.plan.Name, datasetType: "Assignments", assignmentObject, geoBoundaries: nodeBoundaries, rowsToUpdate })
            ]);
            await this.$nextTick();
            SPM.Components.ReferenceDataModal.view = SPM.Components.ReferenceDataModal.Views.LIST;
            SPM.Components.ReferenceDataModal.$nextTick(SPM.Components.ReferenceDataModal.$props.config.callback.bind(this, assignmentObject));
          } catch (ex) {
            this.$store.toast({ message: `Assignment Object "${this.$props.assignmentObject.Name}" was not updated`, duration: null, state: "error" });
            this.$parentCmp.$emit("close");
          } finally {
            this.loadingMsg = "";
          }
        },
        async onFileChange({ file }) {
          if (!file) {
            this.fileName = "";
            this.csvKey = "";
            this.hideUnchecked = false;
            this.showUploadError = false;
            return;
          }
          this.fileName = file.name;
          await this.$nextTick();
          this.uploadCsv({ csvFile: file, preview: true });
        },
        async uploadCsv({ csvFile, preview }) {
          this.loadingMsg = "Uploading CSV...";
          const csvData = [];
          await new Promise((resolve2, reject) => {
            if (csvFile.type.includes("csv") || /.+(.csv)$/.test(csvFile.name)) {
              const config = { header: true, skipEmptyLines: true, worker: true };
              if (preview)
                config.preview = 50001;
              let rowCount = 0;
              Papa.parse(csvFile, {
                ...config,
                step: async (result) => {
                  this.loadingMsg = `Parsing Rows...(${rowCount})`;
                  csvData.push(result.data);
                  rowCount++;
                  await this.$nextTick();
                },
                complete: () => {
                  if (rowCount > 5e4)
                    this.showUploadError = true;
                  else {
                    this.loadingMsg = `Completed ${csvData} Rows`;
                    this.csvRows = csvData.map((row) => Object.values(row));
                    if (preview) {
                      this.csvRows = this.csvRows.slice(0, 5);
                      this.csvColumns = Object.keys(csvData[0]);
                      this.csvFile = csvFile;
                    }
                  }
                  resolve2();
                }
              });
            }
          });
          await this.$nextTick();
          this.loadingMsg = "";
          return csvData;
        },
        loadTable() {
          const availableFields = this.csvColumns.filter((colName) => colName !== this.csvKey);
          const uniqueFieldIndex = this.csvColumns.findIndex((colName) => colName === this.csvKey);
          this.rows = availableFields.map((fieldName, index) => ({
            id: index,
            data: [
              { id: "ColumnName", format: "ColumnName", type: "custom", selected: false, value: fieldName },
              {
                id: "State",
                format: "State",
                type: "custom",
                // get sample data from first 5 rows
                value: this.csvRows.slice(0, 5).map((row) => index >= uniqueFieldIndex ? row[index + 1] : row[index]).join(", ")
              },
              { id: "FieldName", format: "FieldName", type: "custom", value: "" },
              {
                id: "DataType",
                format: "DataType",
                type: "custom",
                value: index >= uniqueFieldIndex ? /^[0-9,.-]*$/.test(this.csvRows[0][index + 1]) ? "Number" : "Text" : /^[0-9,.-]*$/.test(this.csvRows[0][index]) ? "Number" : "Text"
              },
              { id: "Description", format: "Description", type: "custom", value: "" }
            ]
          }));
        },
        async mapFields() {
          this.loadingMsg = "Loading...";
          this.rows.forEach((row) => {
            if (!row.data[0].selected)
              return;
            const columnName = row.data[0].value;
            if (this.csvReferenceFields.find((f) => f.name.toLowerCase() === columnName.replaceAll(/\s/g, "").toLowerCase())) {
              row.data[2].value = columnName;
            }
          });
          await this.$nextTick();
          this.loadingMsg = "";
        },
        getFieldAPINameErrors(row) {
          const errors = [];
          if (row.data[0].selected && this.parsedReferenceFields.filter((field) => field.source === "CRM").some((field) => field.name === row.data[2].value)) {
            errors.push("This name matches an existing field name. Please choose another.");
          } else if (row.data[0].selected && !row.data[2].value) {
            errors.push("");
          }
          return errors;
        }
      }
    };
    const _withScopeId$d = (n) => (pushScopeId("data-v-d3cec463"), n = n(), popScopeId(), n);
    const _hoisted_1$B = { class: "slds-grid spm-full-height" };
    const _hoisted_2$A = { class: "slds-col slds-size_1-of-4 slds-theme_shade slds-p-around_medium slds-border_right" };
    const _hoisted_3$s = {
      key: 0,
      class: "slds-form-element__label slds-required"
    };
    const _hoisted_4$o = { class: "slds-grid slds-grid_vertical slds-col slds-grow" };
    const _hoisted_5$n = { class: "slds-grid slds-grid_align-spread slds-grid_vertical-align-center slds-p-around_medium" };
    const _hoisted_6$m = /* @__PURE__ */ _withScopeId$d(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-col slds-text-body_regular" }, [
      /* @__PURE__ */ createBaseVNode("b")
    ], -1));
    const _hoisted_7$j = { class: "slds-col slds-grid slds-gutters slds-grid_vertical-align-right" };
    const _hoisted_8$i = { class: "slds-col" };
    const _hoisted_9$g = { class: "slds-col" };
    const _hoisted_10$d = {
      key: 1,
      class: "slds-text-align_left slds-truncate",
      style: { "max-width": "10rem" }
    };
    const _hoisted_11$b = /* @__PURE__ */ _withScopeId$d(() => /* @__PURE__ */ createBaseVNode("label", {
      class: "slds-assistive-text",
      for: "csvFieldName"
    }, "Field Name", -1));
    function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_FileImport = resolveComponent("FileImport");
      const _component_Picklist = resolveComponent("Picklist");
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_Button = resolveComponent("Button");
      const _component_Spinner = resolveComponent("Spinner");
      const _component_TextInput = resolveComponent("TextInput");
      const _component_DataTable = resolveComponent("DataTable");
      return openBlock(), createElementBlock("div", _hoisted_1$B, [
        createBaseVNode("div", _hoisted_2$A, [
          createVNode(_component_FileImport, { onFileChange: $options.onFileChange }, null, 8, ["onFileChange"]),
          $data.showUploadError ? (openBlock(), createElementBlock("label", _hoisted_3$s, "Your CSV file exceeds the record limit of 50,000.")) : createCommentVNode("", true),
          $data.fileName ? (openBlock(), createBlock(_component_Picklist, {
            key: 1,
            modelValue: $data.csvKey,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.csvKey = $event),
            required: "",
            filterable: "",
            labels: { name: "CSV Key", placeholder: "Select Field..." },
            options: $data.csvColumns,
            disabled: $data.showUploadError
          }, null, 8, ["modelValue", "labels", "options", "disabled"])) : createCommentVNode("", true)
        ]),
        createBaseVNode("div", _hoisted_4$o, [
          createBaseVNode("div", _hoisted_5$n, [
            _hoisted_6$m,
            createBaseVNode("div", _hoisted_7$j, [
              createBaseVNode("div", _hoisted_8$i, [
                createVNode(_component_Checkbox, {
                  modelValue: $data.hideUnchecked,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.hideUnchecked = $event),
                  ariaLabeledBy: `${$data.hideUnchecked}`,
                  labels: { name: "Show selected rows only" },
                  disabled: $data.showUploadError
                }, null, 8, ["modelValue", "ariaLabeledBy", "disabled"])
              ]),
              createBaseVNode("div", _hoisted_9$g, [
                createVNode(_component_Button, {
                  variant: "neutral",
                  label: "Match Fields",
                  disabled: !$options.hasSelectedRows || !_ctx.$props.assignmentObject,
                  onClick: $options.mapFields
                }, null, 8, ["disabled", "onClick"])
              ])
            ])
          ]),
          $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
            description: withCtx(() => [
              createTextVNode(toDisplayString($data.loadingMsg), 1)
            ]),
            _: 1
          })) : createCommentVNode("", true),
          createVNode(_component_DataTable, {
            columns: $data.columns,
            rows: $options.computedRows,
            bordered: ""
          }, {
            cell: withCtx((cell) => [
              cell.data.format === "ColumnName" ? (openBlock(), createBlock(_component_Checkbox, {
                key: 0,
                modelValue: cell.data.selected,
                "onUpdate:modelValue": ($event) => cell.data.selected = $event,
                ariaLabeledBy: `${cell.data.value}`,
                labels: { name: `${cell.data.value}` }
              }, null, 8, ["modelValue", "onUpdate:modelValue", "ariaLabeledBy", "labels"])) : createCommentVNode("", true),
              cell.data.format === "State" ? (openBlock(), createElementBlock("div", _hoisted_10$d, toDisplayString(cell.data.value), 1)) : createCommentVNode("", true),
              _hoisted_11$b,
              cell.data.format === "FieldName" ? (openBlock(), createBlock(_component_Picklist, {
                key: 2,
                modelValue: cell.data.value,
                "onUpdate:modelValue": ($event) => cell.data.value = $event,
                labelForId: "csvFieldName",
                combobox: "",
                options: $options.csvReferenceFields,
                idKey: "name",
                titleKey: "name",
                labels: { placeholder: "Add Name..." },
                errors: $data.showErrors ? $options.getFieldAPINameErrors(cell.row) : []
              }, null, 8, ["modelValue", "onUpdate:modelValue", "options", "labels", "errors"])) : createCommentVNode("", true),
              cell.data.format === "DataType" ? (openBlock(), createBlock(_component_Picklist, {
                key: 3,
                modelValue: cell.data.value,
                "onUpdate:modelValue": ($event) => cell.data.value = $event,
                options: ["Number", "Text"]
              }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
              cell.data.format === "Description" ? (openBlock(), createBlock(_component_TextInput, {
                key: 4,
                modelValue: cell.data.value,
                "onUpdate:modelValue": ($event) => cell.data.value = $event,
                labels: { placeholder: "Add Description..." }
              }, null, 8, ["modelValue", "onUpdate:modelValue", "labels"])) : createCommentVNode("", true)
            ]),
            _: 1
          }, 8, ["columns", "rows"])
        ])
      ]);
    }
    const ReferenceDataCSV = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$C], ["__scopeId", "data-v-d3cec463"]]);
    const _sfc_main$B = {
      name: "ReferenceDataTable",
      components: {
        SLDSButton,
        DataTable,
        Layout,
        LayoutItem
      },
      props: ["assignmentObjectId"],
      emits: ["set-view"],
      data() {
        return {
          columns: [
            { id: "field", name: "Field " },
            { id: "apiName", name: "API Name" },
            { id: "description", name: "Description" },
            { id: "type", name: "Type" },
            { id: "createdDate", name: "Created Date" },
            { id: "lastModifiedDate", name: "Last Modified Date" }
          ],
          ready: false,
          rows: []
        };
      },
      computed: {
        disableImports() {
          return this.$store.salesAsyncJobs.some((job) => job.sfsp__SalesAssignmentObject__c === this.$props.assignmentObjectId);
        },
        computedRows() {
          const assignmentObject = this.$store.plan.sfsp__SalesAssignmentObjects__r.find((o) => o.Id === this.$props.assignmentObjectId) || {};
          return JSON.parse(assignmentObject.sfsp__ReferenceFields__c || "[]").map((f) => ({
            data: [
              f.label,
              f.name,
              f.description,
              ["Latitude", "Longitude"].includes(f.type) ? "Text" : f.type,
              f.createdDate ? this.$F("DateTime", new Date(f.createdDate)) : "",
              f.lastModifiedDate ? this.$F("DateTime", new Date(f.lastModifiedDate)) : ""
            ]
          }));
        },
        $parentCmp() {
          return SPM.Components.ReferenceDataModal;
        }
      },
      mounted() {
        this.$parentCmp.loadingMsg = "Loading...";
        setTimeout(() => {
          this.ready = true;
          this.$parentCmp.loadingMsg = "";
        }, 500);
      },
      methods: {
        onCRM() {
          this.$emit("set-view", Views.CRM);
        },
        onCSV() {
          this.$emit("set-view", Views.CSV);
        }
      }
    };
    const _hoisted_1$A = { style: { "min-height": "100px" } };
    function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_LayoutItem = resolveComponent("LayoutItem");
      const _component_Layout = resolveComponent("Layout");
      const _component_DataTable = resolveComponent("DataTable");
      return openBlock(), createElementBlock("div", _hoisted_1$A, [
        $data.ready ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createVNode(_component_Layout, {
            class: "slds-p-around_small",
            horizontalAlign: "spread",
            style: { "background": "#F3F3F3" }
          }, {
            default: withCtx(() => [
              createVNode(_component_LayoutItem, null, {
                default: withCtx(() => [
                  _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_SLDSButton, {
                    key: 0,
                    label: "Add from Salesforce",
                    disabled: $options.disableImports,
                    onClick: $options.onCRM
                  }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true),
                  (_ctx.$store.isAdmin || _ctx.$store.isManager) && _ctx.$store.hasDataPipelinesAccess ? (openBlock(), createBlock(_component_SLDSButton, {
                    key: 1,
                    label: "Add from CSV File ",
                    disabled: $options.disableImports,
                    onClick: $options.onCSV
                  }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true)
                ]),
                _: 1
              })
            ]),
            _: 1
          }),
          createVNode(_component_DataTable, {
            columns: $data.columns,
            rows: $options.computedRows
          }, null, 8, ["columns", "rows"])
        ], 64)) : createCommentVNode("", true)
      ]);
    }
    const ReferenceDataTable = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["render", _sfc_render$B]]);
    const ReferenceDataModal_vue_vue_type_style_index_0_scoped_f2864593_lang = "";
    const _sfc_main$A = {
      name: "ReferenceDataTableModal",
      components: {
        // local
        FormErrorIndicator,
        ObjectTemplateSelector,
        ReferenceDataCRM,
        ReferenceDataCSV,
        ReferenceDataTable,
        // slds
        SLDSButton,
        ButtonIcon,
        Modal,
        Spinner
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          loadingMsg: "",
          renderErrorButtonIcon: false,
          renderCSVErrorButtonIcon: false,
          view: this.$props.config.view || Views.LIST,
          Views,
          templateAssignmentObject: {}
        };
      },
      computed: {
        computedSize() {
          switch (this.view) {
            case Views.CRM:
            case Views.TEMPLATES:
              return "small";
            case Views.CSV:
              return "large";
            default:
              return "medium";
          }
        },
        computedTitle() {
          switch (this.view) {
            case Views.TEMPLATES:
            case Views.CRM:
              return this.$props.config.assignmentObject ? "Edit Assignment Object" : "New Assignment Object";
            case Views.CSV:
              return "Import Reference Fields";
            case Views.LIST:
              return "Manage Reference Fields";
            default:
              return "";
          }
        },
        assignmentObject() {
          return { ...this.templateAssignmentObject, ...this.$store.plan.sfsp__SalesAssignmentObjects__r.find((o) => {
            var _a2, _b;
            return o.Id === ((_b = (_a2 = this.$props.config) == null ? void 0 : _a2.assignmentObject) == null ? void 0 : _b.Id);
          }) || {} };
        }
      },
      watch: {
        view(value) {
          this.cancelIsBack = value !== Views.LIST && this.templateAssignmentObject.hasOwnProperty("Id");
        }
      },
      created() {
        SPM.Components.ReferenceDataModal = this;
        if (this.view === Views.TEMPLATES)
          this.$nextTick(() => this.$refs.modal.$el.classList.add("spm-template-view"));
      },
      methods: {
        save(addAnother) {
          this.$refs[this.view].save(addAnother);
        },
        cancelGoBack() {
          if (this.cancelIsBack) {
            this.renderErrorButtonIcon = false;
            this.view = this.Views.LIST;
          } else {
            this.$emit("close");
          }
        },
        onTemplateSelected(assignmentObject) {
          this.templateAssignmentObject = assignmentObject || {};
          this.view = this.Views.CRM;
          this.$refs.modal.$el.classList.remove("spm-template-view");
          this.loadingMsg = "";
        }
      }
    };
    const _withScopeId$c = (n) => (pushScopeId("data-v-f2864593"), n = n(), popScopeId(), n);
    const _hoisted_1$z = {
      key: 0,
      id: "add-assignment-object-helptext"
    };
    const _hoisted_2$z = /* @__PURE__ */ _withScopeId$c(() => /* @__PURE__ */ createBaseVNode("span", null, "Include reference data from proprietary and third-party systems for up to 50,000 records. ", -1));
    const _hoisted_3$r = /* @__PURE__ */ _withScopeId$c(() => /* @__PURE__ */ createBaseVNode("a", {
      href: "https://help.salesforce.com/s/articleView?id=sf.sales_planning_plans_assignments_reference_fields.htm",
      target: "_blank"
    }, "Tell Me More", -1));
    const _hoisted_4$n = [
      _hoisted_2$z,
      _hoisted_3$r
    ];
    const _hoisted_5$m = {
      key: 1,
      id: "add-assignment-object-helptext",
      class: "slds-m-top_small"
    };
    const _hoisted_6$l = /* @__PURE__ */ _withScopeId$c(() => /* @__PURE__ */ createBaseVNode("span", null, "Select a Salesforce object and any of its fields for reference in your planning efforts. ", -1));
    const _hoisted_7$i = /* @__PURE__ */ _withScopeId$c(() => /* @__PURE__ */ createBaseVNode("a", {
      href: "https://help.salesforce.com/s/articleView?id=sf.sales_planning_plans_assignments_reference_fields.htm",
      target: "_blank"
    }, "Tell Me More", -1));
    const _hoisted_8$h = [
      _hoisted_6$l,
      _hoisted_7$i
    ];
    const _hoisted_9$f = { key: 5 };
    const _hoisted_10$c = { class: "slds-m-right_x-small" };
    function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_ObjectTemplateSelector = resolveComponent("ObjectTemplateSelector");
      const _component_ReferenceDataCRM = resolveComponent("ReferenceDataCRM");
      const _component_ReferenceDataCSV = resolveComponent("ReferenceDataCSV");
      const _component_ReferenceDataTable = resolveComponent("ReferenceDataTable");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_FormErrorIndicator = resolveComponent("FormErrorIndicator");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "add-assignment-object",
        ref: "modal",
        size: $options.computedSize,
        title: $options.computedTitle,
        class: normalizeClass({
          "min-height": $data.view === $data.Views.CSV,
          "no-padding": [$data.Views.LIST, $data.Views.CSV].includes($data.view),
          "spm-loading": $data.loadingMsg !== "",
          "spm-kondo": $props.config.kondo
        }),
        footless: $data.view === $data.Views.TEMPLATES,
        onClose: _cache[6] || (_cache[6] = ($event) => _ctx.$emit("close"))
      }, createSlots({
        content: withCtx(() => [
          $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, {
            key: 0,
            immediate: ""
          }, {
            description: withCtx(() => [
              createTextVNode(toDisplayString($data.loadingMsg), 1)
            ]),
            _: 1
          })) : createCommentVNode("", true),
          $data.view === $data.Views.TEMPLATES ? (openBlock(), createBlock(_component_ObjectTemplateSelector, {
            key: 1,
            ref: $data.Views.TEMPLATES,
            onTemplateSelected: $options.onTemplateSelected
          }, null, 8, ["onTemplateSelected"])) : $data.view === $data.Views.CRM ? (openBlock(), createBlock(_component_ReferenceDataCRM, {
            key: 2,
            ref: $data.Views.CRM,
            existingAssignmentObject: $options.assignmentObject
          }, null, 8, ["existingAssignmentObject"])) : $data.view === $data.Views.CSV ? (openBlock(), createBlock(_component_ReferenceDataCSV, {
            key: 3,
            ref: $data.Views.CSV,
            assignmentObject: $options.assignmentObject,
            onShowErrors: _cache[0] || (_cache[0] = (v) => $data.renderCSVErrorButtonIcon = v)
          }, null, 8, ["assignmentObject"])) : $data.view === $data.Views.LIST ? (openBlock(), createBlock(_component_ReferenceDataTable, {
            key: 4,
            ref: "table",
            assignmentObjectId: _ctx.$props.config.assignmentObject.Id,
            onSetView: _cache[1] || (_cache[1] = ($event) => $data.view = $event)
          }, null, 8, ["assignmentObjectId"])) : (openBlock(), createElementBlock("div", _hoisted_9$f, "View does not exist."))
        ]),
        footer: withCtx(() => {
          var _a2;
          return [
            $data.renderErrorButtonIcon ? (openBlock(), createBlock(_component_ButtonIcon, {
              key: 0,
              ref: "errorButtonIcon",
              assistiveText: "Error",
              title: "Error",
              iconCategory: "utility",
              iconName: "error",
              iconSize: "large",
              class: "slds-button_icon-error",
              onClick: _cache[2] || (_cache[2] = ($event) => _ctx.$refs[$data.Views.CRM].error.renderPopover = !_ctx.$refs[$data.Views.CRM].error.renderPopover)
            }, null, 512)) : createCommentVNode("", true),
            createBaseVNode("span", _hoisted_10$c, [
              $data.renderCSVErrorButtonIcon ? (openBlock(), createBlock(_component_FormErrorIndicator, {
                key: 0,
                error: ((_a2 = _ctx.$refs[$data.Views.CSV]) == null ? void 0 : _a2.showUploadError) ? "Your CSV file exceeds the record limit of 50,000." : "Please select at least one column and a field for each selected column"
              }, null, 8, ["error"])) : createCommentVNode("", true)
            ]),
            $data.view !== $data.Views.LIST ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createVNode(_component_SLDSButton, {
                variant: [$data.Views.CRM, $data.Views.TEMPLATES].includes($data.view) ? "base" : "neutral",
                disabled: $data.loadingMsg.length > 0,
                onClick: $options.cancelGoBack
              }, {
                default: withCtx(() => [
                  createTextVNode(" Cancel ")
                ]),
                _: 1
              }, 8, ["variant", "disabled", "onClick"]),
              $data.view === $data.Views.CRM && !_ctx.$props.config.assignmentObject ? (openBlock(), createBlock(_component_SLDSButton, {
                key: 0,
                variant: [$data.Views.CRM, $data.Views.TEMPLATES].includes($data.view) ? "base" : "neutral",
                disabled: $data.loadingMsg.length > 0,
                onClick: _cache[3] || (_cache[3] = ($event) => $options.save(true))
              }, {
                default: withCtx(() => [
                  createTextVNode(" Save & New ")
                ]),
                _: 1
              }, 8, ["variant", "disabled"])) : createCommentVNode("", true),
              createVNode(_component_SLDSButton, {
                variant: "brand",
                disabled: $data.loadingMsg.length > 0,
                onClick: _cache[4] || (_cache[4] = ($event) => $options.save(false))
              }, {
                default: withCtx(() => [
                  createTextVNode(" Save ")
                ]),
                _: 1
              }, 8, ["disabled"])
            ], 64)) : (openBlock(), createBlock(_component_SLDSButton, {
              key: 2,
              onClick: _cache[5] || (_cache[5] = ($event) => _ctx.$emit("close"))
            }, {
              default: withCtx(() => [
                createTextVNode(" Close ")
              ]),
              _: 1
            }))
          ];
        }),
        _: 2
      }, [
        [$data.Views.CRM, $data.Views.TEMPLATES, $data.Views.CSV].includes($data.view) ? {
          name: "tagline",
          fn: withCtx(() => [
            $data.view === $data.Views.CSV ? (openBlock(), createElementBlock("div", _hoisted_1$z, _hoisted_4$n)) : (openBlock(), createElementBlock("div", _hoisted_5$m, _hoisted_8$h))
          ]),
          key: "0"
        } : void 0
      ]), 1032, ["size", "title", "class", "footless"]);
    }
    const ReferenceDataModal = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$A], ["__scopeId", "data-v-f2864593"]]);
    const Tree_vue_vue_type_style_index_0_scoped_02f9aca2_lang = "";
    const _sfc_main$z = {
      name: "Tree",
      components: { ButtonIcon, Checkbox },
      props: {
        model: Object,
        root: Object,
        isChild: Boolean,
        customNodeTest: Function,
        marginLines: Boolean,
        lazy: Boolean,
        selectable: Boolean,
        singleSelect: Boolean
      },
      emits: ["node-click", "node-expand-click"],
      data() {
        return {
          isCustomNode: false
        };
      },
      computed: {
        rootModel() {
          return this.root || this.model;
        }
      },
      created() {
        if (typeof this.customNodeTest === "function") {
          this.isCustomNode = this.customNodeTest(this.model);
        }
      },
      methods: {
        onNodeClick(node) {
          if (this.singleSelect) {
            const clearSelected = (node2) => {
              node2.selected = false;
              node2.children.forEach((c) => clearSelected(c));
            };
            clearSelected(this.rootModel);
            node.selected = true;
          }
          this.$emit("node-click", node);
        },
        onNodeExpandClick(node) {
          if (!this.lazy)
            node.expanded = !node.expanded;
          this.$emit("node-expand-click", node);
        },
        async onCheckChange() {
          await SPM.Utils.Async.wait(1);
          this.model.selected = this.model.selected === "none" ? "all" : "none";
          let descendantsToUpdate = [...this.model.children];
          while (descendantsToUpdate.length) {
            const nextDescendants = [];
            descendantsToUpdate.forEach((n) => {
              n.selected = this.model.selected === "all" ? "parent" : "none";
              nextDescendants.push(...n.children || []);
            });
            descendantsToUpdate = nextDescendants;
          }
          let ancestor = this.model.parent;
          while (ancestor) {
            ancestor.selected = ancestor.children.find((n) => ["all", "some"].includes(n.selected)) ? "some" : "none";
            ancestor = ancestor.parent;
          }
        }
      }
    };
    const _hoisted_1$y = ["title"];
    const _hoisted_2$y = { class: "treeItem" };
    const _hoisted_3$q = {
      key: 0,
      class: "treeName slds-grid slds-grid_vertical-align-center"
    };
    function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_Tree = resolveComponent("Tree", true);
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("div", {
          title: $props.model.name,
          class: normalizeClass(["treeEntry", { selectable: $props.singleSelect, selected: $props.model.selected }]),
          onClick: _cache[1] || (_cache[1] = ($event) => $options.onNodeClick($props.model))
        }, [
          createBaseVNode("div", {
            class: normalizeClass({ treeParent: $props.isChild, treeTitle: !$props.isChild, marginLines: $props.marginLines })
          }, [
            createBaseVNode("div", _hoisted_2$y, [
              !$data.isCustomNode ? (openBlock(), createElementBlock("div", _hoisted_3$q, [
                createVNode(_component_ButtonIcon, {
                  iconCategory: "utility",
                  iconName: $props.model.loading ? "spinner" : $props.model.expanded ? "chevrondown" : "chevronright",
                  variant: "container",
                  size: "small",
                  title: $props.model.loading ? "Loading" : $props.model.expanded ? "Collapse" : "Expand",
                  assistiveText: $props.model.loading ? "Loading" : $props.model.expanded ? "Collapse" : "Expand",
                  onClick: _cache[0] || (_cache[0] = withModifiers(($event) => $options.onNodeExpandClick($props.model), ["stop"]))
                }, null, 8, ["iconName", "title", "assistiveText"]),
                $props.selectable ? (openBlock(), createBlock(_component_Checkbox, {
                  key: 0,
                  class: "slds-m-right_x-small",
                  checked: ["all", "parent"].includes($props.model.selected),
                  indeterminate: $props.model.selected === "some",
                  disabled: $props.model.selected === "parent",
                  onClick: withModifiers($options.onCheckChange, ["prevent"])
                }, null, 8, ["checked", "indeterminate", "disabled", "onClick"])) : createCommentVNode("", true),
                createBaseVNode("label", null, toDisplayString($props.model.name), 1)
              ])) : createCommentVNode("", true),
              $data.isCustomNode ? renderSlot(_ctx.$slots, "customNodeContent", {
                key: 1,
                model: $props.model
              }, () => [
                createTextVNode(" Missing definition for customNodeContent slot ")
              ], true) : createCommentVNode("", true)
            ])
          ], 2)
        ], 10, _hoisted_1$y),
        $props.model.expanded ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(["treeMargin", { marginLines: $props.marginLines }])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.model.children, (childModel) => {
            return openBlock(), createBlock(_component_Tree, {
              key: childModel.id,
              model: childModel,
              root: $options.rootModel,
              isChild: true,
              marginLines: $props.marginLines,
              singleSelect: $props.singleSelect,
              customNodeTest: $props.customNodeTest
            }, {
              customNodeContent: withCtx((slotProps) => [
                renderSlot(_ctx.$slots, "customNodeContent", {
                  model: slotProps.model
                }, void 0, true)
              ]),
              _: 2
            }, 1032, ["model", "root", "marginLines", "singleSelect", "customNodeTest"]);
          }), 128))
        ], 2)) : createCommentVNode("", true)
      ]);
    }
    const Tree$1 = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$z], ["__scopeId", "data-v-02f9aca2"]]);
    const ImportHierarchyModal_vue_vue_type_style_index_0_scoped_bf9e0454_lang = "";
    const _sfc_main$y = {
      name: "ImportHierarchyModal",
      components: {
        SLDSButton,
        Picklist,
        Modal,
        FileImport,
        ScopedNotification,
        Tree: Tree$1,
        Spinner
      },
      emits: ["close"],
      data() {
        return {
          rows: [],
          columns: [],
          nodeColumn: null,
          parentColumn: null,
          rootNodeId: "All Org",
          previewHierarchy: null,
          previewMsg: "",
          loading: false
        };
      },
      computed: {
        nodes() {
          return this.$store.allNodes;
        }
      },
      watch: {
        nodeColumn() {
          this.generatePreview();
        },
        parentColumn() {
          this.generatePreview();
        }
      },
      mounted() {
        SPM.Components.ImportHierarchyModal = this;
      },
      methods: {
        onFileChange({ file }) {
          if (!file) {
            this.columns = [];
            this.rows = [];
            this.nodeColumn = null;
            this.parentColumn = null;
            return;
          }
          Papa.parse(file, {
            header: true,
            skipEmptyLines: true,
            complete: (results) => {
              this.columns = results.meta.fields;
              this.rows = results.data;
              this.nodeColumn = this.columns.find((c) => c.toLowerCase().includes("name")) || null;
              this.parentColumn = this.columns.find((c) => c.toLowerCase().includes("parent")) || null;
            }
          });
          this.$nextTick(() => this.generatePreview());
        },
        generatePreview() {
          var _a2, _b;
          if (!this.rows.length || !this.nodeColumn || !this.parentColumn || !this.rootNodeId) {
            this.previewHierarchy = null;
            this.previewMsg = "";
            return;
          }
          const selectedRootNode = this.nodes.find((node) => node.id === this.rootNodeId);
          const nodeMap = {};
          this.rows.forEach((row) => {
            const nodeId2 = row[this.nodeColumn];
            const parentId = row[this.parentColumn] || "";
            nodeMap[nodeId2] = nodeMap[nodeId2] || {
              id: nodeId2,
              name: nodeId2,
              expanded: false,
              children: []
            };
            nodeMap[parentId] = nodeMap[parentId] || {
              id: parentId,
              name: parentId,
              expanded: false,
              children: []
            };
            nodeMap[parentId].children.push(nodeMap[nodeId2]);
          });
          if (!((_b = (_a2 = nodeMap == null ? void 0 : nodeMap["All Org"]) == null ? void 0 : _a2.children) == null ? void 0 : _b.length))
            return this.previewMsg = "In the Parent column, specify the root node that represents the highest level of your hierarchy.";
          nodeMap["All Org"].children.forEach((c) => {
            c.expanded = true;
            c.children.forEach((g) => g.expanded = true);
          });
          this.previewHierarchy = {
            id: selectedRootNode.id,
            name: selectedRootNode.name,
            expanded: true,
            children: nodeMap["All Org"].children
          };
        },
        async importHierarchy() {
          try {
            this.loading = true;
            await SPM.Utils.Node.importHierarchy({ hierarchy: this.previewHierarchy, includeBoundaries: false });
            await this.$nextTick();
            await SPM.Components.Hierarchy.init();
            this.$store.toast({ message: "Hierarchy was imported.", duration: 2500, state: "success" });
          } catch (e) {
            this.$store.toast({ message: `Can't import hierarchy. Try again."`, duration: null, state: "error" });
          } finally {
            this.loading = false;
            this.$emit("close");
          }
        }
      }
    };
    const _withScopeId$b = (n) => (pushScopeId("data-v-bf9e0454"), n = n(), popScopeId(), n);
    const _hoisted_1$x = /* @__PURE__ */ _withScopeId$b(() => /* @__PURE__ */ createBaseVNode("div", null, [
      /* @__PURE__ */ createBaseVNode("span", null, "Import your sales hierarchy in a CSV file. Or download a sample hierarchy, populate it with your hierarchy details, and then import it. "),
      /* @__PURE__ */ createBaseVNode("a", {
        href: "https://resources.docs.salesforce.com/rel1/doc/en-us/static/misc/sample_hierarchy.csv",
        target: "_blank"
      }, "Download Sample")
    ], -1));
    const _hoisted_2$x = {
      class: "slds-grid",
      style: { "height": "25rem" }
    };
    const _hoisted_3$p = { class: "slds-col slds-size_1-of-2 slds-p-around_medium slds-is-relative" };
    const _hoisted_4$m = /* @__PURE__ */ _withScopeId$b(() => /* @__PURE__ */ createBaseVNode("div", { id: "preview-arrow" }, null, -1));
    const _hoisted_5$l = {
      class: "slds-col slds-size_1-of-2 slds-theme_shade slds-p-around_medium slds-border_left",
      style: { "border-width": "2px" }
    };
    const _hoisted_6$k = {
      class: "spm-box",
      style: { "max-height": "20rem", "overflow": "auto" }
    };
    const _hoisted_7$h = {
      key: 1,
      class: "slds-grid slds-grid_vertical slds-align_absolute-center slds-text-body_small slds-p-around_large"
    };
    function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_ScopedNotification = resolveComponent("ScopedNotification");
      const _component_FileImport = resolveComponent("FileImport");
      const _component_Picklist = resolveComponent("Picklist");
      const _component_Tree = resolveComponent("Tree");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "import-hierarchy-modal",
        title: "Import Hierarchy",
        size: "small",
        onClose: _cache[4] || (_cache[4] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
            description: withCtx(() => [
              createTextVNode("Importing Hierarchy...")
            ]),
            _: 1
          })) : createCommentVNode("", true),
          createVNode(_component_ScopedNotification, null, {
            content: withCtx(() => [
              _hoisted_1$x
            ]),
            _: 1
          }),
          createBaseVNode("div", _hoisted_2$x, [
            createBaseVNode("div", _hoisted_3$p, [
              _hoisted_4$m,
              createVNode(_component_FileImport, { onFileChange: $options.onFileChange }, null, 8, ["onFileChange"]),
              $data.columns.length ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                createVNode(_component_Picklist, {
                  modelValue: $data.nodeColumn,
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.nodeColumn = $event),
                  class: "slds-m-bottom_x-small",
                  labels: { name: "Node Column", placeholder: "Select an option..." },
                  options: $data.columns,
                  onSelectedOption: $options.generatePreview
                }, null, 8, ["modelValue", "labels", "options", "onSelectedOption"]),
                createVNode(_component_Picklist, {
                  modelValue: $data.parentColumn,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.parentColumn = $event),
                  class: "slds-m-bottom_x-small",
                  labels: { name: "Parent Column", placeholder: "Select an option..." },
                  options: $data.columns,
                  onSelectedOption: $options.generatePreview
                }, null, 8, ["modelValue", "labels", "options", "onSelectedOption"]),
                createVNode(_component_Picklist, {
                  modelValue: $data.rootNodeId,
                  "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.rootNodeId = $event),
                  class: "slds-m-bottom_x-small",
                  disabled: "",
                  filterable: "",
                  labels: { name: "Root Node" },
                  idKey: "id",
                  titleKey: "name",
                  options: _ctx.$store.allNodes,
                  onSelectedOption: $options.generatePreview
                }, null, 8, ["modelValue", "options", "onSelectedOption"])
              ], 64)) : createCommentVNode("", true)
            ]),
            createBaseVNode("div", _hoisted_5$l, [
              createBaseVNode("div", _hoisted_6$k, [
                $data.previewHierarchy ? (openBlock(), createBlock(_component_Tree, {
                  key: 0,
                  model: $data.previewHierarchy
                }, null, 8, ["model"])) : (openBlock(), createElementBlock("div", _hoisted_7$h, toDisplayString($data.previewMsg || "To preview, select your CSV file and its node and parent columns."), 1))
              ])
            ])
          ])
        ]),
        footer: withCtx(() => [
          createVNode(_component_SLDSButton, {
            variant: "neutral",
            onClick: _cache[3] || (_cache[3] = ($event) => _ctx.$emit("close"))
          }, {
            default: withCtx(() => [
              createTextVNode("Cancel")
            ]),
            _: 1
          }),
          createVNode(_component_SLDSButton, {
            disabled: !$data.previewHierarchy || $data.loading,
            theme: "brand",
            onClick: $options.importHierarchy
          }, {
            default: withCtx(() => [
              createTextVNode("Import")
            ]),
            _: 1
          }, 8, ["disabled", "onClick"])
        ]),
        _: 1
      });
    }
    const ImportHierarchyModal = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$y], ["__scopeId", "data-v-bf9e0454"]]);
    const Overview_vue_vue_type_style_index_0_scoped_8e90a63b_lang = "";
    const _sfc_main$x = {
      name: "Overview",
      components: {
        SLDSButton,
        Card,
        Icon
      },
      props: ["users", "availableAdminIds", "availableManagerIds", "availableStandardIds"],
      emits: ["change-page"],
      computed: {
        numAdmin() {
          return this.availableAdminIds.size;
        },
        numManager() {
          return this.users.filter((u) => this.availableManagerIds.has(u.id) && !this.availableAdminIds.has(u.id)).length;
        },
        numStandard() {
          return this.users.filter((u) => this.availableStandardIds.has(u.id) && !this.availableManagerIds.has(u.id) && !this.availableAdminIds.has(u.id)).length;
        }
      }
    };
    const _withScopeId$a = (n) => (pushScopeId("data-v-8e90a63b"), n = n(), popScopeId(), n);
    const _hoisted_1$w = {
      id: "share-plan-overview",
      class: "slds-grid slds-grid_vertical"
    };
    const _hoisted_2$w = { class: "slds-p-horizontal_medium slds-p-vertical_large" };
    const _hoisted_3$o = /* @__PURE__ */ _withScopeId$a(() => /* @__PURE__ */ createBaseVNode("div", null, "Shared With", -1));
    const _hoisted_4$l = {
      id: "adminUsers",
      class: "slds-grid slds-grid_vertical slds-border_bottom"
    };
    const _hoisted_5$k = { class: "slds-col slds-grid slds-grid_vertical-align-center slds-p-around_small" };
    const _hoisted_6$j = { class: "avatar slds-grid slds-grid_vertical-align-center slds-grid_align-center slds-m-right_medium" };
    const _hoisted_7$g = { class: "slds-grid slds-grid_vertical" };
    const _hoisted_8$g = {
      id: "managerUsers",
      class: "slds-grid slds-grid_vertical slds-border_bottom"
    };
    const _hoisted_9$e = { class: "slds-col slds-grid slds-grid_vertical-align-center slds-p-around_small" };
    const _hoisted_10$b = { class: "avatar slds-grid slds-grid_vertical-align-center slds-grid_align-center slds-m-right_medium" };
    const _hoisted_11$a = { class: "slds-grid slds-grid_vertical" };
    const _hoisted_12$8 = {
      id: "standardUsers",
      class: "slds-grid slds-grid_vertical"
    };
    const _hoisted_13$8 = { class: "slds-col slds-grid slds-grid_vertical-align-center slds-p-around_small" };
    const _hoisted_14$7 = { class: "avatar slds-grid slds-grid_vertical-align-center slds-grid_align-center slds-m-right_medium" };
    const _hoisted_15$7 = { class: "slds-grid slds-grid_vertical" };
    function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Card = resolveComponent("Card");
      return openBlock(), createElementBlock("div", _hoisted_1$w, [
        createBaseVNode("div", _hoisted_2$w, [
          _hoisted_3$o,
          createVNode(_component_Card, null, {
            body: withCtx(() => [
              createBaseVNode("div", _hoisted_4$l, [
                createBaseVNode("div", _hoisted_5$k, [
                  createBaseVNode("div", _hoisted_6$j, [
                    createVNode(_component_Icon, {
                      category: "standard",
                      name: "user_role",
                      assistiveText: "User Role Icon"
                    })
                  ]),
                  createBaseVNode("div", _hoisted_7$g, "Sales Planning Admins (" + toDisplayString($options.numAdmin) + ")", 1)
                ])
              ]),
              createBaseVNode("div", _hoisted_8$g, [
                createBaseVNode("div", _hoisted_9$e, [
                  createBaseVNode("div", _hoisted_10$b, [
                    createVNode(_component_Icon, {
                      category: "standard",
                      name: "omni_supervisor",
                      assistiveText: "Omni Supervisor Icon"
                    })
                  ]),
                  createBaseVNode("div", _hoisted_11$a, "Sales Plan Managers (" + toDisplayString($options.numManager) + ")", 1),
                  createVNode(_component_SLDSButton, {
                    id: "share-plan-overview-navigate-manager",
                    class: "slds-col_bump-left",
                    variant: "base",
                    label: "Manage",
                    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("change-page", "ManagerUsers"))
                  })
                ])
              ]),
              createBaseVNode("div", _hoisted_12$8, [
                createBaseVNode("div", _hoisted_13$8, [
                  createBaseVNode("div", _hoisted_14$7, [
                    createVNode(_component_Icon, {
                      category: "standard",
                      name: "user",
                      assistiveText: "User Icon"
                    })
                  ]),
                  createBaseVNode("div", _hoisted_15$7, "Sales Plan Contributors (" + toDisplayString($options.numStandard) + ")", 1),
                  createVNode(_component_SLDSButton, {
                    id: "share-plan-overview-navigate-standard",
                    class: "slds-col_bump-left",
                    variant: "base",
                    label: "Manage",
                    onClick: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("change-page", "StandardUsers"))
                  })
                ])
              ])
            ]),
            _: 1
          })
        ])
      ]);
    }
    const Overview$1 = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$x], ["__scopeId", "data-v-8e90a63b"]]);
    const _sfc_main$w = {
      name: "ConfirmSelfRemoval",
      components: {
        Button: SLDSButton,
        Popover
      },
      emits: ["close", "confirm"],
      props: ["bindTo"],
      methods: {
        onConfirm() {
          this.$emit("confirm");
          this.$emit("close");
        }
      }
    };
    const _hoisted_1$v = /* @__PURE__ */ createBaseVNode("div", { class: "slds-grid slds-p-vertical_large" }, [
      /* @__PURE__ */ createBaseVNode("span", { id: "share-plan-confirm-removal-text" }, "Removing yourself from this plan prevents you from accessing any of its details.")
    ], -1);
    const _hoisted_2$v = { class: "slds-grid slds-grid_vertical-align-center" };
    function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Button = resolveComponent("Button");
      const _component_Popover = resolveComponent("Popover");
      return openBlock(), createBlock(_component_Popover, {
        id: "share-plan-confirm-removal-popover",
        width: "x-large",
        bindTo: _ctx.$props.bindTo,
        alignment: "left",
        position: "fixed",
        closeOnClickOutside: "",
        onClose: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
      }, {
        header: withCtx(() => [
          createTextVNode("Remove Yourself?")
        ]),
        content: withCtx(() => [
          _hoisted_1$v
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_2$v, [
            createVNode(_component_Button, {
              class: "slds-col_bump-left",
              variant: "neutral",
              label: "Cancel",
              onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
            }),
            createVNode(_component_Button, {
              id: "share-plan-confirm-removal-accept",
              class: "slds-col_bump-left",
              variant: "brand",
              label: "Remove",
              onClick: $options.onConfirm
            }, null, 8, ["onClick"])
          ])
        ]),
        _: 1
      }, 8, ["bindTo"]);
    }
    const ConfirmSelfRemoval$1 = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$w]]);
    const _sfc_main$v = {
      name: "ShareEmptyState"
    };
    const _hoisted_1$u = {
      class: "slds-illustration__svg",
      viewBox: "0 0 468 194",
      "aria-hidden": "true",
      xmlns: "http://www.w3.org/2000/svg"
    };
    const _hoisted_2$u = /* @__PURE__ */ createStaticVNode('<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-67.000000, -112.000000)"><g><g transform="translate(245.000000, 200.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(135.000000, 152.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(69.000000, 256.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M14,36.5 L464,36.5"></path><path vector-effect="non-scaling-stroke" d="M0,36.5 L6,36.5"></path><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="234.5 36 279.5 0 313.5 26"></polyline><path vector-effect="non-scaling-stroke" d="M279.5,1 L279.5,35" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M313.5,11 C313.5,20.7437888 313.5,25.7437888 313.5,26 C313.5,25.7437888 313.5,20.7437888 313.5,11 Z" stroke-linejoin="round"></path><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="303.5 17 313.5 9 347.5 36"></polyline></g><g transform="translate(113.000000, 178.000000)"><g transform="translate(30.000000, 8.000000)" class="slds-illustration__fill-secondary"><path vector-effect="non-scaling-stroke" d="M29.5,60.5 L29.5,12 C29.5,5.372583 34.872583,0 41.5,0 C48.127417,0 53.5,5.372583 53.5,12 L53.5,40.5 L70.5,40.5 L70.5,27 C70.5,23.1340068 73.6340068,20 77.5,20 C81.3659932,20 84.5,23.1340068 84.5,27 L84.5,48.5 C84.5,51.8137085 81.8137085,54.5 78.5,54.5 L53.5,54.5 L53.5,118.5 L29.5,118.5 L29.5,74.5 L6.5,74.5 C3.1862915,74.5 0.5,71.8137085 0.5,68.5 L0.5,39 C0.5,35.1340068 3.63400675,32 7.5,32 C11.3659932,32 14.5,35.1340068 14.5,39 L14.5,60.5 L29.5,60.5 Z"></path></g><g transform="translate(59.000000, 7.000000)" fill="#FFFFFF"><path vector-effect="non-scaling-stroke" d="M2,11 C3.65332031,8.49145508 5.65181478,6.77364095 7.9954834,5.84655762 C11.5109863,4.45593262 15.2684326,4.95605469 17.8156738,6.2824707 C20.362915,7.60888672 22.3626709,9.64978027 23.2602539,11.81604 C23.8586426,13.2602132 23.8586426,11.7547201 23.2602539,7.29956055 L19.612793,3.56494141 L13.7923584,0.564331055 L8.765625,1.42663574 L4.67321777,3.19787598 C2.69893392,5.13902708 1.69559733,6.16722532 1.66320801,6.2824707 C1.61462402,6.45533878 0.856079102,9.49145508 0.813964844,9.66003418 C0.785888672,9.77242025 1.18123372,10.2190755 2,11 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M0,126.5 L356,126.5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M362.5,126.5 L372.013149,126.5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M107.5,20 L107.5,28" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M113,30.6568542 L118.656854,25" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M37.5,32 L37.5,40" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M44,42.6568542 L49.6568542,37" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M25,42.6568542 L30.6568542,37" stroke-linecap="round" transform="translate(27.828427, 39.828427) scale(-1, 1) translate(-27.828427, -39.828427) "></path><path vector-effect="non-scaling-stroke" d="M71.5,0 L71.5,8" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M79,10.6568542 L84.6568542,5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M58,10.6568542 L63.6568542,5" stroke-linecap="round" transform="translate(60.828427, 7.828427) scale(-1, 1) translate(-60.828427, -7.828427) "></path><path vector-effect="non-scaling-stroke" d="M59.5,68.5 L59.5,20 C59.5,13.372583 64.872583,8 71.5,8 C78.127417,8 83.5,13.372583 83.5,20 L83.5,48.5 L100.5,48.5 L100.5,35 C100.5,31.1340068 103.634007,28 107.5,28 C111.365993,28 114.5,31.1340068 114.5,35 L114.5,56.5 C114.5,59.8137085 111.813708,62.5 108.5,62.5 L83.5,62.5 L83.5,126.5 L59.5,126.5 L59.5,82.5 L36.5,82.5 C33.1862915,82.5 30.5,79.8137085 30.5,76.5 L30.5,47 C30.5,43.1340068 33.6340068,40 37.5,40 C41.3659932,40 44.5,43.1340068 44.5,47 L44.5,68.5 L59.5,68.5 Z"></path><path vector-effect="non-scaling-stroke" d="M77,88.5 L92.5,88.5 L92.5,81 C92.5,77.1340068 95.6340068,74 99.5,74 L99.5,74 C103.365993,74 106.5,77.1340068 106.5,81 L106.5,96.5 C106.5,99.8137085 103.813708,102.5 100.5,102.5 L77,102.5" class="slds-illustration__fill-secondary" stroke-linecap="round" stroke-linejoin="round"></path></g></g><g transform="translate(429.000000, 242.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><g><path vector-effect="non-scaling-stroke" d="M12.5,4 L12.5,50"></path><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="11 18.5 0.5 18.5 0.5 0"></polyline><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="14 25.5 24.5 25.5 24.5 8"></polyline><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="2.5 31 2.5 38.5 11 38.5"></polyline></g></g><g transform="translate(327.000000, 95.000000)"><g><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" cx="64" cy="64" r="23"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="135,1,1,18" transform="translate(64.000000, 64.000000) rotate(230.000000) translate(-64.000000, -64.000000) " cx="64" cy="64" r="45"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="107,10" transform="translate(64.000000, 64.000000) rotate(150.000000) translate(-64.000000, -64.000000) " cx="64" cy="64" r="33"></circle></g><g transform="translate(41.000000, 41.000000)" class="slds-illustration__stroke-primary" stroke-width="3"><circle vector-effect="non-scaling-stroke" cx="23" cy="23" r="23"></circle></g></g></g></g></g>', 1);
    const _hoisted_3$n = [
      _hoisted_2$u
    ];
    function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1$u, _hoisted_3$n);
    }
    const ShareEmptyState$1 = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$v]]);
    const ManagerUsers_vue_vue_type_style_index_0_scoped_aaf6e02b_lang = "";
    const _sfc_main$u = {
      name: "ManagerUsers",
      components: {
        SLDSButton,
        Card,
        Picklist,
        Tooltip,
        ButtonIcon,
        ConfirmSelfRemoval: ConfirmSelfRemoval$1,
        ShareEmptyState: ShareEmptyState$1
      },
      props: ["users", "availableAdminIds", "availableManagerIds"],
      emits: ["cancel-and-back", "add-user", "remove-user"],
      data() {
        return {
          removalContext: null,
          selectedUser: null,
          userOptions: [{
            options: async (term) => {
              term = term.replace(/'/g, "\\'");
              const matchingUsers = await SPM.Utils.Rest.invoke("Query", {
                query: `
                            SELECT Id, Name, FirstName, LastName, UserRole.Name, SmallPhotoUrl
                            FROM User
                            WHERE Name LIKE '%${term}%'
                            AND Id IN ('${[...this.availableManagerIds].join("','")}')
                            AND Id NOT IN ('${[...this.availableAdminIds].join("','")}')
                            LIMIT 10
                        `
              });
              return matchingUsers.filter((user) => !this.users.find((u) => u.id === user.Id));
            }
          }]
        };
      },
      computed: {
        currentUserId() {
          return SPM.currentUser.Id;
        },
        managerUsers() {
          return this.users.filter((u) => this.availableManagerIds.has(u.id) && !this.availableAdminIds.has(u.id));
        }
      },
      mounted() {
        this.$refs.userLookup.focus();
      },
      methods: {
        onAdd() {
          this.$emit("add-user", this.selectedUser);
          this.selectedUser = null;
        }
      }
    };
    const _withScopeId$9 = (n) => (pushScopeId("data-v-aaf6e02b"), n = n(), popScopeId(), n);
    const _hoisted_1$t = {
      id: "share-plan-manager",
      class: "slds-grid slds-grid_vertical"
    };
    const _hoisted_2$t = {
      id: "share-plan-manager-breadcrumbs",
      class: "slds-theme_shade slds-p-horizontal_medium slds-p-vertical_small slds-border_bottom"
    };
    const _hoisted_3$m = { class: "slds-grid" };
    const _hoisted_4$k = /* @__PURE__ */ _withScopeId$9(() => /* @__PURE__ */ createBaseVNode("span", null, " >", -1));
    const _hoisted_5$j = /* @__PURE__ */ _withScopeId$9(() => /* @__PURE__ */ createBaseVNode("span", null, " Sales Plan Managers", -1));
    const _hoisted_6$i = { class: "slds-grid slds-grid_align-spread slds-grid_vertical-align-end" };
    const _hoisted_7$f = { class: "slds-col slds-size_11-of-12 slds-p-right_small" };
    const _hoisted_8$f = /* @__PURE__ */ _withScopeId$9(() => /* @__PURE__ */ createBaseVNode("label", {
      for: "userLookup",
      class: "slds-assistive-text"
    }, "Add a sales plan manager", -1));
    const _hoisted_9$d = {
      class: "slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-listbox__option_has-meta",
      role: "option"
    };
    const _hoisted_10$a = { class: "slds-media__body" };
    const _hoisted_11$9 = ["title"];
    const _hoisted_12$7 = {
      key: 0,
      class: "slds-listbox__option-meta"
    };
    const _hoisted_13$7 = {
      key: 0,
      id: "noUsersWithAccess",
      class: "slds-p-vertical_large slds-illustration slds-illustration_small"
    };
    const _hoisted_14$6 = /* @__PURE__ */ _withScopeId$9(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-longform" }, [
      /* @__PURE__ */ createBaseVNode("h3", { class: "slds-illustration__header slds-text-heading_medium" }, "Any managers out there?"),
      /* @__PURE__ */ createBaseVNode("p", { class: "slds-text-body_regular" }, "Add sales plan managers who can build your plan.")
    ], -1));
    const _hoisted_15$6 = {
      key: 1,
      id: "usersWithAccess",
      class: "slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover",
      "aria-label": "Users with access"
    };
    const _hoisted_16$5 = /* @__PURE__ */ _withScopeId$9(() => /* @__PURE__ */ createBaseVNode("thead", null, [
      /* @__PURE__ */ createBaseVNode("tr", { class: "slds-line-height_reset" }, [
        /* @__PURE__ */ createBaseVNode("th", {
          class: "",
          scope: "col"
        }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Sales Plan Manager"
          }, "Sales Plan Manager")
        ]),
        /* @__PURE__ */ createBaseVNode("th", {
          class: "",
          scope: "col"
        }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Role"
          }, "Permission Set")
        ]),
        /* @__PURE__ */ createBaseVNode("th", {
          class: "",
          scope: "col"
        })
      ])
    ], -1));
    const _hoisted_17$4 = ["id"];
    const _hoisted_18$4 = {
      "data-label": "User",
      scope: "row",
      class: "slds-align-top"
    };
    const _hoisted_19$4 = { class: "slds-col slds-grid slds-grid_vertical-align-center" };
    const _hoisted_20$4 = { class: "avatar slds-grid slds-grid_vertical-align-center slds-grid_align-center slds-m-right_medium" };
    const _hoisted_21$3 = ["src"];
    const _hoisted_22$3 = { class: "slds-grid slds-grid_vertical" };
    const _hoisted_23$3 = ["id"];
    const _hoisted_24$3 = /* @__PURE__ */ _withScopeId$9(() => /* @__PURE__ */ createBaseVNode("td", { "data-label": "Permission Set" }, [
      /* @__PURE__ */ createBaseVNode("div", {
        class: "slds-truncate",
        title: "Sales Planning Ops Manager"
      }, "Sales Planning Ops Manager")
    ], -1));
    const _hoisted_25$2 = {
      "data-label": "Remove",
      style: { "text-align": "right" }
    };
    function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_Picklist = resolveComponent("Picklist");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_ShareEmptyState = resolveComponent("ShareEmptyState");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_ConfirmSelfRemoval = resolveComponent("ConfirmSelfRemoval");
      const _component_Card = resolveComponent("Card");
      return openBlock(), createElementBlock("div", _hoisted_1$t, [
        createBaseVNode("div", _hoisted_2$t, [
          createBaseVNode("div", _hoisted_3$m, [
            createBaseVNode("a", {
              href: "#",
              onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("cancel-and-back"))
            }, "Share Sales Plan"),
            _hoisted_4$k,
            _hoisted_5$j
          ])
        ]),
        createBaseVNode("div", {
          class: "slds-p-vertical_large slds-p-horizontal_medium",
          style: normalizeStyle({ "min-height": $options.managerUsers.length > 0 ? "30rem" : "initial" })
        }, [
          createBaseVNode("div", _hoisted_6$i, [
            createBaseVNode("div", _hoisted_7$f, [
              _hoisted_8$f,
              createVNode(_component_Picklist, {
                modelValue: (_a2 = $data.selectedUser) == null ? void 0 : _a2.Name,
                id: "userLookup",
                ref: "userLookup",
                options: $data.userOptions,
                labelForId: "userLookup",
                labels: { name: "Add a sales plan manager", search: "Search..." },
                titleKey: "Name",
                idKey: "Id",
                filterable: "",
                onSelectedOption: _cache[1] || (_cache[1] = (user) => $data.selectedUser = user),
                onClear: _cache[2] || (_cache[2] = () => $data.selectedUser = null)
              }, {
                option: withCtx((item) => [
                  createBaseVNode("div", _hoisted_9$d, [
                    createBaseVNode("span", _hoisted_10$a, [
                      createBaseVNode("span", {
                        class: "slds-truncate",
                        title: item.option.Name
                      }, toDisplayString(item.option.Name), 9, _hoisted_11$9),
                      item.option.UserRole ? (openBlock(), createElementBlock("span", _hoisted_12$7, toDisplayString(item.option.UserRole.Name), 1)) : createCommentVNode("", true)
                    ])
                  ])
                ]),
                _: 1
              }, 8, ["modelValue", "options", "labels"])
            ]),
            createVNode(_component_SLDSButton, {
              id: "share-plan-manager-add",
              class: "slds-col slds-size_1-of-12 slds-col_bump-left",
              style: { "height": "fit-content" },
              label: "Add",
              variant: "neutral",
              disabled: !$data.selectedUser,
              onClick: $options.onAdd
            }, null, 8, ["disabled", "onClick"])
          ]),
          createVNode(_component_Card, { class: "slds-m-top_medium" }, {
            body: withCtx(() => [
              $options.managerUsers.length === 0 ? (openBlock(), createElementBlock("div", _hoisted_13$7, [
                createVNode(_component_ShareEmptyState),
                _hoisted_14$6
              ])) : (openBlock(), createElementBlock("table", _hoisted_15$6, [
                _hoisted_16$5,
                createBaseVNode("tbody", null, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList($options.managerUsers, (user) => {
                    return openBlock(), createElementBlock("tr", {
                      id: user.dirty ? `sharedWithManager-preview-${user.name}` : `sharedWithManager-${user.name}`,
                      key: user.dirty ? `sharedWithManager-preview-${user.name}` : `sharedWithManager-${user.name}`,
                      class: normalizeClass(["slds-hint-parent", { "slds-is-edited": user.dirty }])
                    }, [
                      createBaseVNode("th", _hoisted_18$4, [
                        createBaseVNode("div", _hoisted_19$4, [
                          createBaseVNode("div", _hoisted_20$4, [
                            user.smallPhotoUrl ? (openBlock(), createElementBlock("img", {
                              key: 0,
                              class: "avatar",
                              src: user.smallPhotoUrl
                            }, null, 8, _hoisted_21$3)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                              createTextVNode(toDisplayString(user.initials), 1)
                            ], 64))
                          ]),
                          createBaseVNode("div", _hoisted_22$3, [
                            createBaseVNode("span", null, [
                              createBaseVNode("b", null, toDisplayString(user.name), 1)
                            ]),
                            createBaseVNode("span", {
                              id: `sharedWithManager-role-${user.name}`
                            }, toDisplayString(user.role), 9, _hoisted_23$3)
                          ])
                        ])
                      ]),
                      _hoisted_24$3,
                      createBaseVNode("td", _hoisted_25$2, [
                        createVNode(_component_ButtonIcon, {
                          id: `sharedWithManager-${user.name}-remove`,
                          class: "slds-button_icon-container",
                          assistiveText: "Remove",
                          iconCategory: "utility",
                          iconName: "close",
                          title: "Remove",
                          onClick: (e) => user.id === $options.currentUserId ? $data.removalContext = e.target : _ctx.$emit("remove-user", user.id)
                        }, null, 8, ["id", "onClick"])
                      ])
                    ], 10, _hoisted_17$4);
                  }), 128)),
                  $data.removalContext ? (openBlock(), createBlock(_component_ConfirmSelfRemoval, {
                    key: 0,
                    bindTo: $data.removalContext,
                    onConfirm: _cache[3] || (_cache[3] = ($event) => _ctx.$emit("remove-user", $options.currentUserId)),
                    onClose: _cache[4] || (_cache[4] = () => $data.removalContext = null)
                  }, null, 8, ["bindTo"])) : createCommentVNode("", true)
                ])
              ]))
            ]),
            _: 1
          })
        ], 4)
      ]);
    }
    const ManagerUsers$1 = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$u], ["__scopeId", "data-v-aaf6e02b"]]);
    const TreeNode_vue_vue_type_style_index_0_scoped_b6704967_lang = "";
    const _sfc_main$t = {
      name: "TreeNode",
      components: { ButtonIcon, Icon, Checkbox },
      props: {
        branchIds: {
          type: Array,
          default: () => []
        },
        node: {
          type: Object,
          required: true
        },
        expandButtonAlignment: {
          type: String,
          default: "left"
        },
        inheritSelection: Boolean
      },
      data() {
        return {
          localNode: this.node,
          hasFocus: false
        };
      },
      watch: {
        localNode: {
          immediate: true,
          deep: true,
          handler(value) {
            this.$nextTick(() => {
              this.$emit("update:node", value);
            });
          }
        },
        node: {
          immediate: true,
          deep: true,
          handler(value) {
            if (Object.keys(this.localNode).length === 0 && Object.keys(value).length) {
              this.localNode = value;
            }
          }
        }
      },
      methods: {
        toggleChildren() {
          this.localNode.expanded = !this.localNode.expanded;
        },
        toggleSelect() {
          this.localNode.indeterminate = false;
          this.localNode.selected = !this.localNode.selected;
          if (this.localNode.children && this.localNode.children.length) {
            if (this.inheritSelection) {
              this.toggleSelectionForChildren(this.localNode, this.localNode.selected);
            } else if (this.localNode.selected) {
              this.toggleSelectionForChildren(this.localNode, false);
            }
          }
          this.$emit("childSelectionMade");
          this.$emit("selectionChanged");
        },
        toggleSelectionForChildren(node = this.localNode, selection) {
          (node.children || []).forEach((child) => {
            child.selected = selection;
            child.disabled = selection;
            child.indeterminate = false;
            if (child.children)
              this.toggleSelectionForChildren(child, selection);
          });
          this.$emit("selectionChanged");
        },
        handleChildSelection() {
          if (this.inheritSelection && this.localNode.children.some((node) => node.selected || node.indeterminate)) {
            this.localNode.selected = false;
            this.localNode.indeterminate = true;
          } else {
            this.localNode.selected = false;
            this.localNode.indeterminate = false;
          }
          if (this.localNode.level > 1)
            this.$emit("childSelectionMade");
          this.$emit("selectionChanged");
        },
        right() {
          if (this.hasFocus) {
            if (this.localNode.children && this.localNode.children.length)
              this.localNode.expanded = true;
          }
        },
        left() {
          if (this.hasFocus) {
            if (this.localNode.children && this.localNode.children.length && this.localNode.expanded) {
              this.localNode.expanded = false;
            } else {
              if (this.localNode.level !== 1)
                this.$el.parentElement.closest('li[aria-expanded = "true"]').focus();
            }
          }
        }
      }
    };
    const _hoisted_1$s = ["aria-expanded", "aria-label", "aria-level", "aria-selected", "aria-disabled", "tabindex"];
    const _hoisted_2$s = { class: "slds-has-flexi-truncate" };
    const _hoisted_3$l = ["title"];
    const _hoisted_4$j = {
      key: 0,
      role: "group"
    };
    function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_TreeNode = resolveComponent("TreeNode", true);
      return !$props.node.isHidden ? (openBlock(), createElementBlock("li", {
        key: 0,
        "aria-expanded": $props.node.expanded,
        "aria-label": $props.node.label,
        "aria-level": $props.node.level,
        "aria-selected": $props.node.selected,
        "aria-disabled": $props.node.disabled,
        role: "treeitem",
        tabindex: $data.hasFocus ? 0 : -1,
        onFocus: _cache[1] || (_cache[1] = ($event) => $data.hasFocus = true),
        onBlur: _cache[2] || (_cache[2] = ($event) => $data.hasFocus = false),
        onKeydown: [
          _cache[3] || (_cache[3] = withKeys((...args) => $options.right && $options.right(...args), ["right"])),
          _cache[4] || (_cache[4] = withKeys((...args) => $options.left && $options.left(...args), ["left"]))
        ]
      }, [
        createBaseVNode("div", {
          class: "slds-tree__item",
          onClick: _cache[0] || (_cache[0] = withModifiers(() => $props.node.disabled ? () => {
          } : $options.toggleSelect(), ["prevent"]))
        }, [
          $props.expandButtonAlignment === "left" && $props.node.children && $props.node.children.length ? (openBlock(), createBlock(_component_ButtonIcon, {
            key: 0,
            variant: "bare",
            iconCategory: "utility",
            iconName: "chevronright",
            class: "slds-m-right_x-small slds-button_icon",
            "aria-hidden": "true",
            tabindex: "-1",
            title: `Expand ${$props.node.label}`,
            assistiveText: `Expand ${$props.node.label}`,
            onClick: withModifiers($options.toggleChildren, ["stop"])
          }, null, 8, ["title", "assistiveText", "onClick"])) : createCommentVNode("", true),
          createBaseVNode("span", _hoisted_2$s, [
            createBaseVNode("span", {
              class: "slds-tree__item-label slds-truncate",
              title: $props.node.label
            }, [
              createVNode(_component_Checkbox, {
                id: `share-plan-hierarchy-popover-checkbox-${$props.node.label}`,
                modelValue: $props.node.selected,
                disabled: $props.node.disabled,
                labels: { name: $props.node.label }
              }, null, 8, ["id", "modelValue", "disabled", "labels"])
            ], 8, _hoisted_3$l)
          ]),
          $props.expandButtonAlignment === "right" && $props.node.children && $props.node.children.length ? (openBlock(), createBlock(_component_ButtonIcon, {
            key: 1,
            variant: "bare",
            iconCategory: "utility",
            iconName: "chevronright",
            class: "slds-m-right_x-small slds-button_icon",
            "aria-hidden": "true",
            tabindex: "-1",
            title: `Expand ${$props.node.label}`,
            assistiveText: `Expand ${$props.node.label}`,
            onClick: withModifiers($options.toggleChildren, ["stop"])
          }, null, 8, ["title", "assistiveText", "onClick"])) : createCommentVNode("", true)
        ]),
        $props.node.children && $props.node.children.length && $props.node.expanded ? (openBlock(), createElementBlock("ul", _hoisted_4$j, [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.node.children, (child, index) => {
            return openBlock(), createBlock(_component_TreeNode, {
              key: child.id,
              node: $props.node.children[index],
              branchIds: $props.branchIds,
              expandButtonAlignment: $props.expandButtonAlignment,
              inheritSelection: $props.inheritSelection,
              onChildSelectionMade: $options.handleChildSelection
            }, null, 8, ["node", "branchIds", "expandButtonAlignment", "inheritSelection", "onChildSelectionMade"]);
          }), 128))
        ])) : createCommentVNode("", true)
      ], 40, _hoisted_1$s)) : createCommentVNode("", true);
    }
    const TreeNode = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$t], ["__scopeId", "data-v-b6704967"]]);
    const Tree_vue_vue_type_style_index_0_scoped_06c2e8cd_lang = "";
    const _sfc_main$s = {
      name: "Tree",
      components: {
        TreeNode,
        ButtonIcon,
        Icon
      },
      props: {
        treeData: {
          type: Object,
          default: () => {
          }
        },
        branchIds: {
          type: Array,
          default: () => []
        },
        heading: {
          type: String,
          required: true
        },
        showHeading: {
          type: Boolean,
          default: true
        },
        expandButtonAlignment: {
          type: String,
          default: "left",
          validator: (value) => {
            const validAlignments = [
              "left",
              "right"
            ];
            const isValid2 = !value || validAlignments.includes(value);
            if (!isValid2)
              console.error(`Valid alignment prop values are ${validAlignments.join(", ")}`);
            return isValid2;
          }
        },
        useCheckIconForSelect: Boolean,
        inheritSelection: Boolean,
        filterable: Boolean,
        filterInputId: {
          type: String,
          default: "filter-id"
        },
        filterLabel: {
          type: String,
          default: "Filter"
        },
        showFilterLabel: Boolean,
        required: Boolean,
        showCount: Boolean,
        treeId: {
          type: String,
          default: "tree-id"
        }
      },
      data() {
        return {
          focusableTreeItems: [],
          focusedTreeItemIndex: 0,
          searchTerm: "",
          numberSelected: 0
        };
      },
      computed: {
        lowerCaseSearchTerm() {
          return this.searchTerm.toLowerCase();
        }
      },
      watch: {
        treeData: {
          deep: true,
          handler() {
            this.getFocusableTreeItems();
            this.getSelectedItemsCount();
          }
        }
      },
      mounted() {
        this.getFocusableTreeItems();
      },
      methods: {
        selectionChanged() {
          this.$emit("selectionChanged");
        },
        getFocusableTreeItems() {
          const liElementsFromTree = this.$refs.treeRoot.querySelectorAll("li");
          if (this.focusableTreeItems.length !== liElementsFromTree.length)
            this.focusableTreeItems = liElementsFromTree;
          if (this.focusableTreeItems.length && !this.checkForFocusedItem() && document.activeElement !== this.$refs.filterInput) {
            if (this.focusedTreeItemIndex > this.focusableTreeItems.length - 1)
              this.focusedTreeItemIndex = 0;
            this.focusedTreeItem = this.focusableTreeItems[this.focusedTreeItemIndex];
            this.focusedTreeItem.focus();
          }
        },
        checkForFocusedItem() {
          let liHasFocus = false;
          this.focusableTreeItems.forEach((item, index) => {
            if (item === document.activeElement) {
              liHasFocus = true;
              this.focusedTreeItemIndex = index;
            }
          });
          return liHasFocus;
        },
        getBranchNodes() {
          const branchNodes = [];
          const traverseTree = (nodes) => {
            const childNodes = [];
            nodes.forEach((node) => {
              if (node.selected)
                branchNodes.push(node);
              else
                childNodes.push(...node.children || []);
            });
            if (childNodes.length > 0)
              traverseTree(childNodes);
          };
          traverseTree([this.treeData]);
          return branchNodes;
        },
        getSelectedItemsCount() {
          this.numberSelected = 0;
          const getNumberSelected = (node) => {
            (node.children || []).forEach((child) => {
              if (child.selected)
                this.numberSelected++;
              getNumberSelected(child);
            });
          };
          getNumberSelected(this.treeData);
        },
        getSelectedItems() {
          return this.treeData;
        },
        down() {
          if (this.focusedTreeItemIndex < this.focusableTreeItems.length - 1)
            this.focusedTreeItemIndex++;
          this.focusableTreeItems[this.focusedTreeItemIndex].focus();
        },
        up() {
          if (this.focusedTreeItemIndex > 0)
            this.focusedTreeItemIndex--;
          this.focusableTreeItems[this.focusedTreeItemIndex].focus();
        },
        filterNodes() {
          if (!this.treeData.expanded)
            this.treeData.expanded = true;
          this.filterByTerm(this.treeData);
        },
        filterByTerm(treeNode) {
          (treeNode.children || []).forEach((child) => {
            const childLabel = child.label.toLowerCase();
            let branchContainsTerm = false;
            const checkChildrenForTerm = (ch) => {
              (ch.children || []).forEach((c) => {
                if (c.label.toLowerCase().includes(this.lowerCaseSearchTerm)) {
                  branchContainsTerm = true;
                  c.expanded = true;
                } else {
                  c.expanded = false;
                }
                checkChildrenForTerm(c);
              });
            };
            checkChildrenForTerm(child);
            if (childLabel.includes(this.lowerCaseSearchTerm)) {
              child.isHidden = false;
              if (child.children) {
                child.expanded = true;
                const showChildren = (levelChild) => {
                  (levelChild.children || []).forEach((subLevel) => {
                    subLevel.isHidden = false;
                    subLevel.expanded = true;
                    showChildren(subLevel);
                  });
                };
                showChildren(child);
              }
            } else if (branchContainsTerm) {
              child.isHidden = false;
              child.expanded = true;
              this.filterByTerm(child);
            } else {
              child.isHidden = true;
              child.expanded = false;
            }
          });
        },
        clearSearchTerm() {
          this.searchTerm = "";
          this.filterNodes();
        }
      }
    };
    const _hoisted_1$r = {
      key: 0,
      class: "slds-m-bottom_small"
    };
    const _hoisted_2$r = { class: "slds-form-element" };
    const _hoisted_3$k = ["for"];
    const _hoisted_4$i = {
      key: 0,
      class: "slds-required",
      title: "Required"
    };
    const _hoisted_5$i = { key: 0 };
    const _hoisted_6$h = { class: "slds-form-element__control slds-input-has-icon slds-input-has-icon_left-right" };
    const _hoisted_7$e = ["id", "aria-controls"];
    const _hoisted_8$e = { class: "slds-tree_container" };
    const _hoisted_9$c = ["id"];
    function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_TreeNode = resolveComponent("TreeNode");
      return openBlock(), createElementBlock("div", null, [
        $props.filterable ? (openBlock(), createElementBlock("div", _hoisted_1$r, [
          createBaseVNode("div", _hoisted_2$r, [
            createBaseVNode("label", {
              class: normalizeClass(["slds-form-element__label slds-grid slds-grid_align-spread", { "slds-assistive-text": !$props.showFilterLabel }]),
              for: $props.filterInputId
            }, [
              createBaseVNode("span", null, [
                $props.required ? (openBlock(), createElementBlock("abbr", _hoisted_4$i, "*")) : createCommentVNode("", true),
                createTextVNode(" " + toDisplayString($props.filterLabel), 1)
              ]),
              $props.showCount ? (openBlock(), createElementBlock("span", _hoisted_5$i, " Selected (" + toDisplayString($data.numberSelected) + ") ", 1)) : createCommentVNode("", true)
            ], 10, _hoisted_3$k),
            createBaseVNode("div", _hoisted_6$h, [
              createVNode(_component_Icon, {
                category: "utility",
                name: "search",
                class: "slds-icon_container slds-icon-utility-search",
                iconClass: ["slds-icon", "slds-icon", "slds-input__icon", "slds-input__icon_left", "slds-icon-text-default"]
              }),
              withDirectives(createBaseVNode("input", {
                id: $props.filterInputId,
                ref: "filterInput",
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.searchTerm = $event),
                type: "search",
                "aria-controls": $props.treeId,
                placeholder: "Search...",
                class: "slds-input",
                onInput: _cache[1] || (_cache[1] = (...args) => $options.filterNodes && $options.filterNodes(...args))
              }, null, 40, _hoisted_7$e), [
                [vModelText, $data.searchTerm]
              ]),
              createVNode(_component_ButtonIcon, {
                iconCategory: "utility",
                iconName: "clear",
                variant: "bare",
                class: "slds-input__icon slds-input__icon_right",
                title: "Clear search terms",
                assistiveText: "Clear search terms",
                onClick: $options.clearSearchTerm
              }, null, 8, ["onClick"])
            ])
          ])
        ])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_8$e, [
          createBaseVNode("h4", {
            id: "treeheading",
            class: normalizeClass(["slds-tree__group-header", { "slds-assistive-text": !$props.showHeading }])
          }, toDisplayString($props.heading), 3),
          createBaseVNode("ul", {
            id: $props.treeId,
            ref: "treeRoot",
            "aria-labelledby": "treeheading",
            class: normalizeClass(["slds-tree", { "select-check-icon": $props.useCheckIconForSelect }]),
            role: "tree",
            onKeydown: [
              _cache[2] || (_cache[2] = withKeys((...args) => $options.down && $options.down(...args), ["down"])),
              _cache[3] || (_cache[3] = withKeys((...args) => $options.up && $options.up(...args), ["up"]))
            ]
          }, [
            createVNode(_component_TreeNode, {
              node: $props.treeData,
              branchIds: $props.branchIds,
              expandButtonAlignment: $props.expandButtonAlignment,
              inheritSelection: $props.inheritSelection,
              onSelectionChanged: $options.selectionChanged
            }, null, 8, ["node", "branchIds", "expandButtonAlignment", "inheritSelection", "onSelectionChanged"])
          ], 42, _hoisted_9$c)
        ])
      ]);
    }
    const Tree = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$s], ["__scopeId", "data-v-06c2e8cd"]]);
    const _sfc_main$r = {
      name: "HierarchySelector",
      components: {
        Button: SLDSButton,
        Popover,
        Tree
      },
      emits: ["close", "confirm"],
      props: ["bindTo", "user"],
      data() {
        return {
          treeData: null,
          branchIds: []
        };
      },
      mounted() {
        this.treeData = JSON.parse(JSON.stringify(this.user.hierarchy));
        this.branchIds = this.user.accessRecords.map((uac) => uac.sfsp__SalesNode__c || "All Org");
      },
      methods: {
        onConfirm() {
          const branchNodes = this.$refs.hierarchyTree.getBranchNodes();
          if (branchNodes.length === 0)
            return SPM.$store.toast({ message: "Please select at least one branch", duration: 2500, state: "error" });
          const accessRecords = branchNodes.map((branchNode) => {
            const existingAccessRecord = this.user.accessRecords.find((uac) => branchNode.id === (uac.sfsp__SalesNode__c || "All Org"));
            if (existingAccessRecord) {
              existingAccessRecord.sfsp__AccessLevel__c = branchNode.accessLevel;
              return existingAccessRecord;
            }
            return {
              sfsp__AccessLevel__c: branchNode.accessLevel || "Editor",
              sfsp__SalesNode__c: branchNode.id === "All Org" ? null : branchNode.id,
              sfsp__SalesPlan__c: this.$store.plan.Id,
              sfsp__User__c: this.user.id,
              sfsp__SalesNode__r: {
                Name: branchNode.id === "All Org" ? null : branchNode.label
              }
            };
          });
          this.user.accessRecords = accessRecords;
          this.$emit("confirm");
        }
      }
    };
    const _hoisted_1$q = {
      class: "slds-scrollable",
      style: { "max-height": "20rem" }
    };
    const _hoisted_2$q = { class: "slds-grid slds-grid_vertical-align-center" };
    function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Tree = resolveComponent("Tree");
      const _component_Button = resolveComponent("Button");
      const _component_Popover = resolveComponent("Popover");
      return openBlock(), createBlock(_component_Popover, {
        id: "share-plan-hierarchy-popover",
        width: "x-large",
        bindTo: _ctx.$props.bindTo,
        alignment: "right",
        position: "fixed",
        closeOnClickOutside: "",
        onClose: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
      }, {
        header: withCtx(() => [
          createTextVNode("Hierarchy Nodes")
        ]),
        content: withCtx(() => [
          createBaseVNode("div", _hoisted_1$q, [
            $data.treeData ? (openBlock(), createBlock(_component_Tree, {
              key: 0,
              ref: "hierarchyTree",
              class: "slds-is-relative",
              treeData: $data.treeData,
              branchIds: $data.branchIds,
              showFilterLabel: "",
              heading: "Hierarchy Access Tree",
              showHeading: false,
              expandButtonAlignment: "left",
              filterLabel: "",
              useCheckIconForSelect: "",
              inheritSelection: "",
              filterable: ""
            }, null, 8, ["treeData", "branchIds"])) : createCommentVNode("", true)
          ])
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_2$q, [
            createVNode(_component_Button, {
              class: "slds-col_bump-left",
              variant: "neutral",
              label: "Cancel",
              onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
            }),
            createVNode(_component_Button, {
              class: "slds-col_bump-left",
              variant: "brand",
              label: "Apply",
              onClick: $options.onConfirm
            }, null, 8, ["onClick"])
          ])
        ]),
        _: 1
      }, 8, ["bindTo"]);
    }
    const HierarchySelector = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$r]]);
    const StandardUsers_vue_vue_type_style_index_0_scoped_93b57e2c_lang = "";
    const _sfc_main$q = {
      name: "StandardUsers",
      components: {
        SLDSButton,
        Card,
        Picklist,
        Tooltip,
        ButtonIcon,
        HierarchySelector,
        ConfirmSelfRemoval: ConfirmSelfRemoval$1,
        ShareEmptyState: ShareEmptyState$1
      },
      props: ["users", "availableAdminIds", "availableManagerIds", "availableStandardIds", "nodeMap"],
      emits: ["cancel-and-back", "add-user", "remove-user", "edit-user"],
      data() {
        return {
          userContext: null,
          hierarchyContext: null,
          removalContext: null,
          selectedUser: null,
          branchValue: "All Org",
          branchOptions: [{ id: "All Org", name: "All Org" }, ...Object.values(this.nodeMap).flat().map((node) => ({ id: node.id, name: node.name }))],
          accessValue: "Editor",
          accessOptions: ["Editor", "Viewer"],
          userOptions: [{
            options: async (term) => {
              term = term.replace(/'/g, "\\'");
              const matchingUsers = await SPM.Utils.Rest.invoke("Query", {
                query: `
                            SELECT Id, Name, FirstName, LastName, UserRole.Name, SmallPhotoUrl
                            FROM User
                            WHERE Name LIKE '%${term}%'
                            AND Id IN ('${[...this.availableStandardIds].join("','")}')
                            AND Id NOT IN ('${[...this.availableAdminIds, ...this.availableManagerIds].join("','")}')
                            LIMIT 10
                        `
              });
              return matchingUsers.filter((user) => !this.users.find((u) => u.id === user.Id));
            }
          }]
        };
      },
      computed: {
        currentUserId() {
          return SPM.currentUser.Id;
        },
        standardUsers() {
          return this.users.filter((u) => this.availableStandardIds.has(u.id) && !this.availableManagerIds.has(u.id) && !this.availableAdminIds.has(u.id));
        }
      },
      mounted() {
        this.$refs.userLookup.focus();
      },
      methods: {
        onAdd() {
          this.$emit("add-user", this.selectedUser, this.accessValue, this.branchValue);
          this.selectedUser = null;
        }
      }
    };
    const _withScopeId$8 = (n) => (pushScopeId("data-v-93b57e2c"), n = n(), popScopeId(), n);
    const _hoisted_1$p = {
      id: "share-plan-standard",
      class: "slds-grid slds-grid_vertical"
    };
    const _hoisted_2$p = {
      id: "share-plan-standard-breadcrumbs",
      class: "slds-theme_shade slds-p-horizontal_medium slds-p-vertical_small slds-border_bottom"
    };
    const _hoisted_3$j = { class: "slds-grid" };
    const _hoisted_4$h = /* @__PURE__ */ _withScopeId$8(() => /* @__PURE__ */ createBaseVNode("span", null, " >", -1));
    const _hoisted_5$h = /* @__PURE__ */ _withScopeId$8(() => /* @__PURE__ */ createBaseVNode("span", null, " Sales Plan Contributors", -1));
    const _hoisted_6$g = { class: "slds-grid slds-grid_align-spread slds-grid_vertical-align-end" };
    const _hoisted_7$d = { class: "slds-col slds-size_4-of-12 slds-p-right_small" };
    const _hoisted_8$d = /* @__PURE__ */ _withScopeId$8(() => /* @__PURE__ */ createBaseVNode("label", {
      for: "share-plan-standard-user-lookup",
      class: "slds-assistive-text"
    }, "Add a user", -1));
    const _hoisted_9$b = {
      class: "slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-listbox__option_has-meta",
      role: "option"
    };
    const _hoisted_10$9 = { class: "slds-media__body" };
    const _hoisted_11$8 = ["title"];
    const _hoisted_12$6 = {
      key: 0,
      class: "slds-listbox__option-meta"
    };
    const _hoisted_13$6 = {
      id: "share-plan-standard-branch-picklist",
      class: "slds-col slds-size_4-of-12 slds-p-right_small"
    };
    const _hoisted_14$5 = /* @__PURE__ */ _withScopeId$8(() => /* @__PURE__ */ createBaseVNode("label", {
      for: "branchPicklist",
      class: "slds-assistive-text"
    }, "Node", -1));
    const _hoisted_15$5 = { class: "slds-col slds-size_3-of-12 slds-p-right_small" };
    const _hoisted_16$4 = /* @__PURE__ */ _withScopeId$8(() => /* @__PURE__ */ createBaseVNode("label", {
      for: "share-plan-standard-access-picklist",
      class: "slds-assistive-text"
    }, "Access", -1));
    const _hoisted_17$3 = {
      key: 0,
      id: "noUsersWithAccess",
      class: "slds-p-vertical_large slds-illustration slds-illustration_small"
    };
    const _hoisted_18$3 = /* @__PURE__ */ _withScopeId$8(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-longform" }, [
      /* @__PURE__ */ createBaseVNode("h3", { class: "slds-illustration__header slds-text-heading_medium" }, "Nobody helping yet?"),
      /* @__PURE__ */ createBaseVNode("p", { class: "slds-text-body_regular" }, "Get great sales results when you invite the key contributors to your sales plan.")
    ], -1));
    const _hoisted_19$3 = {
      key: 1,
      id: "usersWithAccess",
      class: "slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover",
      "aria-label": "Users with access"
    };
    const _hoisted_20$3 = /* @__PURE__ */ _withScopeId$8(() => /* @__PURE__ */ createBaseVNode("thead", null, [
      /* @__PURE__ */ createBaseVNode("tr", { class: "slds-line-height_reset" }, [
        /* @__PURE__ */ createBaseVNode("th", {
          class: "slds-col slds-size_4-of-12 slds-p-right_small",
          scope: "col"
        }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "User"
          }, "User")
        ]),
        /* @__PURE__ */ createBaseVNode("th", {
          class: "slds-col slds-size_3-of-12",
          scope: "col"
        }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Node"
          }, "Node")
        ]),
        /* @__PURE__ */ createBaseVNode("th", {
          class: "slds-col slds-size_1-of-12 slds-p-right_small",
          scope: "col"
        }),
        /* @__PURE__ */ createBaseVNode("th", {
          class: "slds-col slds-size_3-of-12",
          scope: "col"
        }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Access"
          }, "Access")
        ]),
        /* @__PURE__ */ createBaseVNode("th", {
          class: "slds-col slds-size_1-of-12",
          scope: "col"
        })
      ])
    ], -1));
    const _hoisted_21$2 = ["id"];
    const _hoisted_22$2 = {
      "data-label": "User",
      scope: "row",
      class: "slds-col slds-size_4-of-12 slds-align-top"
    };
    const _hoisted_23$2 = { class: "slds-col slds-grid slds-grid_vertical-align-center slds-p-right_small" };
    const _hoisted_24$2 = { class: "avatar slds-grid slds-grid_vertical-align-center slds-grid_align-center slds-m-right_medium" };
    const _hoisted_25$1 = ["src"];
    const _hoisted_26 = { class: "slds-grid slds-grid_vertical" };
    const _hoisted_27 = ["id"];
    const _hoisted_28 = {
      "data-label": "Hierarchy Branch",
      class: "slds-col slds-size_3-of-12"
    };
    const _hoisted_29 = ["id"];
    const _hoisted_30 = {
      "data-label": "Edit",
      class: "slds-col slds-size_1-of-12",
      style: { "text-align": "end" }
    };
    const _hoisted_31 = { class: "slds-col" };
    const _hoisted_32 = {
      "data-label": "Access",
      class: "slds-col slds-size_3-of-12"
    };
    const _hoisted_33 = {
      "data-label": "Remove",
      class: "slds-col slds-size_1-of-12"
    };
    function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_Picklist = resolveComponent("Picklist");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_ShareEmptyState = resolveComponent("ShareEmptyState");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_HierarchySelector = resolveComponent("HierarchySelector");
      const _component_ConfirmSelfRemoval = resolveComponent("ConfirmSelfRemoval");
      const _component_Card = resolveComponent("Card");
      return openBlock(), createElementBlock("div", _hoisted_1$p, [
        createBaseVNode("div", _hoisted_2$p, [
          createBaseVNode("div", _hoisted_3$j, [
            createBaseVNode("a", {
              href: "#",
              onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("cancel-and-back"))
            }, "Share Sales Plan"),
            _hoisted_4$h,
            _hoisted_5$h
          ])
        ]),
        createBaseVNode("div", {
          class: "slds-p-vertical_large slds-p-horizontal_medium",
          style: normalizeStyle({ "min-height": $options.standardUsers.length > 0 ? "30rem" : "initial" })
        }, [
          createBaseVNode("div", _hoisted_6$g, [
            createBaseVNode("div", _hoisted_7$d, [
              _hoisted_8$d,
              createVNode(_component_Picklist, {
                modelValue: (_a2 = $data.selectedUser) == null ? void 0 : _a2.Name,
                id: "share-plan-standard-user-lookup",
                style: { "width": "100%" },
                ref: "userLookup",
                options: $data.userOptions,
                labelForId: "share-plan-standard-user-lookup",
                labels: { name: "Add a user", search: "Search users..." },
                titleKey: "Name",
                idKey: "Id",
                filterable: "",
                onSelectedOption: _cache[1] || (_cache[1] = (user) => $data.selectedUser = user),
                onClear: _cache[2] || (_cache[2] = () => $data.selectedUser = null)
              }, {
                option: withCtx((item) => [
                  createBaseVNode("div", _hoisted_9$b, [
                    createBaseVNode("span", _hoisted_10$9, [
                      createBaseVNode("span", {
                        class: "slds-truncate",
                        title: item.option.Name
                      }, toDisplayString(item.option.Name), 9, _hoisted_11$8),
                      item.option.UserRole ? (openBlock(), createElementBlock("span", _hoisted_12$6, toDisplayString(item.option.UserRole.Name), 1)) : createCommentVNode("", true)
                    ])
                  ])
                ]),
                _: 1
              }, 8, ["modelValue", "options", "labels"])
            ]),
            createBaseVNode("div", _hoisted_13$6, [
              _hoisted_14$5,
              createVNode(_component_Picklist, {
                modelValue: $data.branchValue,
                "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.branchValue = $event),
                id: "branchPicklist",
                style: { "width": "100%" },
                labelForId: "branchPicklist",
                titleKey: "name",
                idKey: "id",
                filterable: "",
                options: $data.branchOptions,
                labels: { name: "Node" }
              }, null, 8, ["modelValue", "options"])
            ]),
            createBaseVNode("div", _hoisted_15$5, [
              _hoisted_16$4,
              createVNode(_component_Picklist, {
                modelValue: $data.accessValue,
                "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.accessValue = $event),
                id: "share-plan-standard-access-picklist",
                style: { "width": "100%" },
                labelForId: "share-plan-standard-access-picklist",
                options: $data.accessOptions,
                labels: { name: "Access" }
              }, null, 8, ["modelValue", "options"])
            ]),
            createVNode(_component_SLDSButton, {
              id: "share-plan-standard-add",
              class: "slds-col slds-size_1-of-12 slds-col_bump-left",
              style: { "height": "fit-content" },
              label: "Add",
              variant: "neutral",
              disabled: !$data.selectedUser || !$data.branchValue,
              onClick: $options.onAdd
            }, null, 8, ["disabled", "onClick"])
          ]),
          createVNode(_component_Card, { class: "slds-m-top_medium" }, {
            body: withCtx(() => [
              $options.standardUsers.length === 0 ? (openBlock(), createElementBlock("div", _hoisted_17$3, [
                createVNode(_component_ShareEmptyState),
                _hoisted_18$3
              ])) : (openBlock(), createElementBlock("table", _hoisted_19$3, [
                _hoisted_20$3,
                createBaseVNode("tbody", null, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList($options.standardUsers, (user) => {
                    return openBlock(), createElementBlock("tr", {
                      id: user.dirty ? `sharedWithStandard-preview-${user.name}` : `sharedWithStandard-${user.name}`,
                      key: user.dirty ? `sharedWithStandard-preview-${user.name}` : `sharedWithStandard-${user.name}`,
                      class: normalizeClass(["slds-hint-parent", { "slds-is-edited": user.dirty }])
                    }, [
                      createBaseVNode("th", _hoisted_22$2, [
                        createBaseVNode("div", _hoisted_23$2, [
                          createBaseVNode("div", _hoisted_24$2, [
                            user.smallPhotoUrl ? (openBlock(), createElementBlock("img", {
                              key: 0,
                              class: "avatar",
                              src: user.smallPhotoUrl
                            }, null, 8, _hoisted_25$1)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                              createTextVNode(toDisplayString(user.initials), 1)
                            ], 64))
                          ]),
                          createBaseVNode("div", _hoisted_26, [
                            createBaseVNode("span", null, [
                              createBaseVNode("b", null, toDisplayString(user.name), 1)
                            ]),
                            createBaseVNode("span", {
                              id: `sharedWithStandard-role-${user.name}`
                            }, toDisplayString(user.role), 9, _hoisted_27)
                          ])
                        ])
                      ]),
                      createBaseVNode("td", _hoisted_28, [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(user.accessRecords, (accessRecord) => {
                          var _a3, _b;
                          return openBlock(), createElementBlock("div", {
                            key: `${accessRecord.Id}-hierarchy`,
                            class: "slds-grid slds-grid_vertical-align-center slds-m-vertical_small slds-p-right_small",
                            style: { "height": "2rem" }
                          }, [
                            createBaseVNode("span", {
                              id: `sharedWithStandard-${user.name}-branch-${((_a3 = $props.nodeMap[accessRecord.sfsp__SalesNode__c]) == null ? void 0 : _a3.name) || "All Org"}`,
                              class: "slds-truncate slds-col"
                            }, toDisplayString(((_b = $props.nodeMap[accessRecord.sfsp__SalesNode__c]) == null ? void 0 : _b.name) || "All Org"), 9, _hoisted_29)
                          ]);
                        }), 128))
                      ]),
                      createBaseVNode("td", _hoisted_30, [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(user.accessRecords, (accessRecord) => {
                          var _a3;
                          return openBlock(), createElementBlock("div", {
                            key: `${accessRecord.Id}-edit`,
                            class: "slds-grid slds-grid_vertical-align-center slds-m-vertical_small slds-p-right_small",
                            style: { "height": "2rem" }
                          }, [
                            createBaseVNode("div", _hoisted_31, [
                              createVNode(_component_ButtonIcon, {
                                id: `sharedWithStandard-${user.name}-edit-${((_a3 = $props.nodeMap[accessRecord.sfsp__SalesNode__c]) == null ? void 0 : _a3.name) || "All Org"}`,
                                class: "slds-button_icon-container",
                                assistiveText: "Edit",
                                iconCategory: "utility",
                                iconName: "edit",
                                title: "Edit",
                                onClick: (e) => {
                                  $data.hierarchyContext = e.target;
                                  $data.userContext = user;
                                }
                              }, null, 8, ["id", "onClick"])
                            ])
                          ]);
                        }), 128))
                      ]),
                      createBaseVNode("td", _hoisted_32, [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(user.accessRecords, (accessRecord) => {
                          var _a3;
                          return openBlock(), createElementBlock("div", {
                            key: `${accessRecord.Id}-access`,
                            class: "slds-grid slds-grid_vertical-align-center slds-m-vertical_small slds-p-right_small",
                            style: { "height": "2rem" }
                          }, [
                            createVNode(_component_Picklist, {
                              modelValue: accessRecord.sfsp__AccessLevel__c,
                              "onUpdate:modelValue": ($event) => accessRecord.sfsp__AccessLevel__c = $event,
                              id: `sharedWithStandard-${user.name}-access-${((_a3 = $props.nodeMap[accessRecord.sfsp__SalesNode__c]) == null ? void 0 : _a3.name) || "All Org"}`,
                              style: { "width": "100%" },
                              options: $data.accessOptions,
                              onSelectedOption: ($event) => _ctx.$emit("edit-user", user.id)
                            }, null, 8, ["modelValue", "onUpdate:modelValue", "id", "options", "onSelectedOption"])
                          ]);
                        }), 128))
                      ]),
                      createBaseVNode("td", _hoisted_33, [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(user.accessRecords, (accessRecord) => {
                          var _a3;
                          return openBlock(), createElementBlock("div", {
                            key: `${accessRecord.Id}-remove`,
                            class: "slds-grid slds-grid_vertical-align-center slds-grid_align-end slds-m-vertical_small",
                            style: { "height": "2rem" }
                          }, [
                            createVNode(_component_ButtonIcon, {
                              id: `sharedWithStandard-${user.name}-remove-${((_a3 = $props.nodeMap[accessRecord.sfsp__SalesNode__c]) == null ? void 0 : _a3.name) || "All Org"}`,
                              class: "slds-button_icon-container",
                              assistiveText: "Remove",
                              iconCategory: "utility",
                              iconName: "close",
                              title: "Remove",
                              onClick: (e) => user.id === $options.currentUserId && user.accessRecords.length === 1 ? $data.removalContext = e.target : _ctx.$emit("remove-user", user.id, accessRecord)
                            }, null, 8, ["id", "onClick"])
                          ]);
                        }), 128))
                      ])
                    ], 10, _hoisted_21$2);
                  }), 128)),
                  $data.hierarchyContext && $data.userContext ? (openBlock(), createBlock(_component_HierarchySelector, {
                    key: 0,
                    bindTo: $data.hierarchyContext,
                    user: $data.userContext,
                    onConfirm: _cache[5] || (_cache[5] = () => {
                      _ctx.$emit("edit-user", $data.userContext.id);
                      $data.hierarchyContext = null;
                      $data.userContext = null;
                    }),
                    onClose: _cache[6] || (_cache[6] = () => {
                      $data.hierarchyContext = null;
                      $data.userContext = null;
                    })
                  }, null, 8, ["bindTo", "user"])) : createCommentVNode("", true),
                  $data.removalContext ? (openBlock(), createBlock(_component_ConfirmSelfRemoval, {
                    key: 1,
                    bindTo: $data.removalContext,
                    onConfirm: _cache[7] || (_cache[7] = ($event) => _ctx.$emit("remove-user", $options.currentUserId)),
                    onClose: _cache[8] || (_cache[8] = () => $data.removalContext = null)
                  }, null, 8, ["bindTo"])) : createCommentVNode("", true)
                ])
              ]))
            ]),
            _: 1
          })
        ], 4)
      ]);
    }
    const StandardUsers = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$q], ["__scopeId", "data-v-93b57e2c"]]);
    const PlanShareModal_vue_vue_type_style_index_0_scoped_be335579_lang = "";
    const _sfc_main$p = {
      name: "PlanShareModal",
      components: {
        SLDSButton,
        ButtonIcon,
        Modal,
        Spinner,
        Overview: Overview$1,
        ManagerUsers: ManagerUsers$1,
        StandardUsers
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          loading: true,
          page: "Overview",
          // node id => node info
          nodeMap: {},
          // node id => child nodes
          treeMap: {},
          // SalesPlanningAdmin
          availableAdminIds: this.$store.availableAdminIds,
          // SalesPlanningOpsManager
          availableManagerIds: this.$store.availableManagerIds,
          // SalesPlanning
          availableStandardIds: /* @__PURE__ */ new Set(),
          // users with access
          users: [],
          // copies
          usersCopy: []
        };
      },
      computed: {
        modalTitle() {
          let title = "";
          if (this.page === "Overview")
            title = "Share Sales Plan";
          else if (this.page === "ManagerUsers")
            title = "Sales Plan Managers";
          else if (this.page === "StandardUsers")
            title = "Sales Plan Contributors";
          return title;
        },
        changesMade() {
          return this.users.some((u) => u.dirty) || this.users.length !== this.usersCopy.length;
        }
      },
      async mounted() {
        SPM.Components.PlanShareModal = this;
        await this.init();
        this.loading = false;
      },
      methods: {
        async init() {
          await Promise.allSettled([
            this.availableStandardIds = new Set((await SPM.Utils.Apex.invoke("GetUsersWithPermissionSet", ["SalesPlanning"]) || []).map((u) => u.Id)),
            // populate treeMap
            this.treeMap = (await SPM.Utils.Apex.invoke("Query", [`SELECT Id, Name, sfsp__Parent__r.Id, sfsp__SalesPlan__c FROM sfsp__SalesNode__c WHERE sfsp__SalesPlan__c = '${this.$store.plan.Id}'`])).reduce((map2, node) => {
              var _a2;
              this.nodeMap[node.Id] = { id: node.Id, name: node.Name };
              const parentId = ((_a2 = node.sfsp__Parent__r) == null ? void 0 : _a2.Id) || "All Org";
              map2[parentId] = map2[parentId] || [];
              map2[parentId].push({
                id: node.Id,
                name: node.Name,
                parentId
              });
              return map2;
            }, { "All Org": [] })
          ]);
          const usersWithAccess = {};
          const accessRecords = await SPM.Utils.Apex.invoke("Query", [`SELECT Id, sfsp__User__r.Name, sfsp__User__r.UserRole.Name, sfsp__User__r.FirstName, sfsp__User__r.LastName, sfsp__User__r.SmallPhotoUrl, sfsp__AccessLevel__c, sfsp__SalesNode__r.Name FROM sfsp__SalesUserAccess__c WHERE sfsp__SalesPlan__c = '${SPM.$store.plan.Id}'`]) || [];
          accessRecords.forEach((ar) => {
            var _a2, _b, _c, _d, _e;
            usersWithAccess[ar.sfsp__User__c] = usersWithAccess[ar.sfsp__User__c] || {
              id: ar.sfsp__User__c,
              name: ar.sfsp__User__r.Name,
              initials: `${((_b = (_a2 = ar.sfsp__User__r) == null ? void 0 : _a2.FirstName) == null ? void 0 : _b[0]) || ""}${((_d = (_c = ar.sfsp__User__r) == null ? void 0 : _c.LastName) == null ? void 0 : _d[0]) || ""}`,
              role: ((_e = ar.sfsp__User__r.UserRole) == null ? void 0 : _e.Name) || "",
              smallPhotoUrl: ar.sfsp__User__r.SmallPhotoUrl,
              accessRecords: [],
              hierarchy: [],
              dirty: false
            };
            usersWithAccess[ar.sfsp__User__c].accessRecords.push(ar);
          });
          this.users = Object.values(usersWithAccess).map((u) => ({ ...u, hierarchy: this.prepareHierarchyTree(u.accessRecords) }));
          this.usersCopy = JSON.parse(JSON.stringify(this.users));
        },
        prepareHierarchyTree(accessRecords = []) {
          const hierarchyTree = {
            label: "All Org",
            level: 1,
            id: "All Org",
            expanded: true,
            selected: accessRecords.some((uac) => (uac.sfsp__SalesNode__c || "All Org") === "All Org"),
            disabled: false,
            isHidden: false,
            children: []
          };
          const buildLevel = (nodes, childrenList, parentLevel, parentSelected) => {
            nodes.forEach((node) => {
              var _a2, _b;
              const childNode = {
                label: node.name,
                level: parentLevel + 1,
                id: node.id,
                expanded: true,
                selected: parentSelected || accessRecords.some((uac) => uac.sfsp__SalesNode__c === node.id),
                accessLevel: ((_a2 = accessRecords.find((uac) => uac.sfsp__SalesNode__c === node.id)) == null ? void 0 : _a2.sfsp__AccessLevel__c) || "Editor",
                disabled: parentSelected,
                isHidden: false
              };
              if (((_b = this.treeMap[node.id]) == null ? void 0 : _b.length) > 0) {
                childNode.children = [];
                buildLevel(this.treeMap[node.id], childNode.children, parentLevel + 1, childNode.selected);
              }
              childrenList.push(childNode);
            });
          };
          buildLevel([...this.treeMap["All Org"]], hierarchyTree.children, hierarchyTree.level, hierarchyTree.selected);
          return hierarchyTree;
        },
        addUser(user, accessLevel = "Editor", nodeId2 = "All Org") {
          var _a2, _b, _c;
          if (!user.Id)
            return;
          const newAccessRecord = {
            sfsp__AccessLevel__c: accessLevel,
            sfsp__SalesPlan__c: this.$store.plan.Id,
            sfsp__User__c: user.Id,
            sfsp__SalesNode__c: nodeId2 === "All Org" ? null : nodeId2,
            sfsp__SalesNode__r: {
              Name: nodeId2 === "All Org" ? null : this.nodeMap[nodeId2].name
            }
          };
          const newUser = {
            id: user.Id,
            name: user.Name,
            initials: `${((_a2 = user == null ? void 0 : user.FirstName) == null ? void 0 : _a2[0]) || ""}${((_b = user == null ? void 0 : user.LastName) == null ? void 0 : _b[0]) || ""}`,
            role: ((_c = user.UserRole) == null ? void 0 : _c.Name) || "",
            smallPhotoUrl: user.SmallPhotoUrl,
            accessRecords: [newAccessRecord],
            hierarchy: this.prepareHierarchyTree([newAccessRecord]),
            dirty: true
          };
          this.users.unshift(newUser);
        },
        editUser(userId) {
          var _a2;
          const userIndex = this.users.findIndex((u) => u.id === userId);
          const copyIndex = this.usersCopy.findIndex((u) => u.id === userId);
          const accessRecords = this.users[userIndex].accessRecords;
          const accessRecordsCopy = ((_a2 = this.usersCopy[copyIndex]) == null ? void 0 : _a2.accessRecords) || [];
          if (accessRecordsCopy.length === 0)
            return;
          this.users[userIndex].dirty = !accessRecordsCopy.every((copy) => accessRecords.find((uac) => uac.Id === copy.Id && uac.sfsp__AccessLevel__c === copy.sfsp__AccessLevel__c && uac.sfsp__SalesNode__c === copy.sfsp__SalesNode__c));
          if (accessRecords.some((uac) => !uac.Id))
            this.users[userIndex].dirty = true;
          if (accessRecords.length !== accessRecordsCopy.length)
            this.users[userIndex].dirty = true;
          if (this.users[userIndex].dirty)
            this.users[userIndex].hierarchy = this.prepareHierarchyTree(accessRecords);
        },
        removeUser(userId, accessRecord) {
          const userIndex = this.users.findIndex((u) => u.id === userId);
          const copyIndex = this.usersCopy.findIndex((u) => u.id === userId);
          if (accessRecord) {
            this.users[userIndex].accessRecords.splice(this.users[userIndex].accessRecords.findIndex((uac) => (uac.sfsp__SalesNode__c || "All Org") === (accessRecord.sfsp__SalesNode__c || "All Org")), 1);
            if (copyIndex > -1) {
              this.users[userIndex].dirty = !this.usersCopy[copyIndex].accessRecords.every((copy) => this.users[userIndex].accessRecords.find((uac) => uac.Id === copy.Id && uac.sfsp__AccessLevel__c === copy.sfsp__AccessLevel__c && uac.sfsp__SalesNode__c === copy.sfsp__SalesNode__c));
              if (this.users[userIndex].accessRecords.length !== this.usersCopy[copyIndex].accessRecords.length)
                this.users[userIndex].dirty = true;
            }
            if (this.users[userIndex].accessRecords.some((uac) => !uac.Id))
              this.users[userIndex].dirty = true;
            if (this.users[userIndex].accessRecords.length > 0)
              return;
          }
          this.users.splice(userIndex, 1);
        },
        cancelAndBack() {
          if (this.page === "Overview") {
            this.$emit("close");
          } else {
            this.users = JSON.parse(JSON.stringify(this.usersCopy));
            this.page = "Overview";
          }
        },
        async postChatter(action, userId, nodeName = "All Org") {
          if (!SPM.chatterEnabled)
            return;
          let comment = "";
          switch (action) {
            case "remove":
              comment = `You have been removed from sales plan ${this.$store.plan.Name}.`;
              break;
            case "invite":
              comment = `${SPM.currentUser.Name} granted you access to ${nodeName} in sales plan {record:${this.$store.plan.Id}}.`;
              break;
            case "update":
              comment = `${SPM.currentUser.Name} changed your access to sales plan {record:${this.$store.plan.Id}}.`;
              break;
          }
          await SPM.Utils.Apex.invoke("PostFeedItem", [userId, comment]);
        },
        async save() {
          this.loading = true;
          const usersMap = this.users.reduce((map2, user) => {
            map2[user.name] = user;
            return map2;
          }, {});
          const usersCopyMap = this.usersCopy.reduce((map2, copy) => {
            map2[copy.name] = copy;
            return map2;
          }, {});
          const accessRecordsToDelete = /* @__PURE__ */ new Set();
          const accessRecordsToUpsert = /* @__PURE__ */ new Set();
          const activity = { invite: {}, remove: {}, edit: {} };
          this.usersCopy.forEach((existingUser) => {
            var _a2;
            const accessRecords = (_a2 = usersMap[existingUser.name]) == null ? void 0 : _a2.accessRecords;
            if (!accessRecords) {
              activity.remove[existingUser.name] = existingUser.accessRecords;
              existingUser.accessRecords.forEach((existingUac) => accessRecordsToDelete.add(existingUac));
            } else {
              existingUser.accessRecords.forEach((existingUac) => {
                if (accessRecords.every((uac) => uac.Id !== existingUac.Id))
                  accessRecordsToDelete.add(existingUac);
              });
            }
          });
          this.users.forEach((userWithAccess) => {
            var _a2;
            const existingAccessRecords = ((_a2 = usersCopyMap[userWithAccess.name]) == null ? void 0 : _a2.accessRecords) || [];
            if (existingAccessRecords.length === 0) {
              activity.invite[userWithAccess.name] = userWithAccess.accessRecords;
              userWithAccess.accessRecords.forEach((uac) => accessRecordsToUpsert.add({ sobjectType: "sfsp__SalesUserAccess__c", ...uac }));
            } else {
              const currentAccessRecords = userWithAccess.accessRecords;
              currentAccessRecords.forEach((currentUac) => {
                let accessChanged = true;
                existingAccessRecords.forEach((existingUac) => {
                  if (existingUac.sfsp__AccessLevel__c === currentUac.sfsp__AccessLevel__c && existingUac.sfsp__SalesNode__c === currentUac.sfsp__SalesNode__c)
                    accessChanged = false;
                });
                if (accessChanged) {
                  activity.edit[userWithAccess.name] = activity.edit[userWithAccess.name] || [];
                  activity.edit[userWithAccess.name].push(currentUac);
                  accessRecordsToUpsert.add({ sobjectType: "sfsp__SalesUserAccess__c", ...currentUac });
                }
              });
            }
          });
          await Promise.all([
            SPM.Utils.CRM.upsert({ records: accessRecordsToUpsert }),
            SPM.Utils.Rest.invoke("Delete", { ids: Array.from(accessRecordsToDelete).map((ua) => ua.Id) })
          ]);
          const toasts = { invitedToastMsg: "", updatedToastMsg: "", removedToastMsg: "" };
          const usersInvited = Object.keys(activity.invite);
          if (usersInvited.length > 0) {
            if (usersInvited.length === 1) {
              toasts.invitedToastMsg = `"${usersInvited[0]}" was invited to the plan.`;
            } else {
              toasts.invitedToastMsg = `(${usersInvited.length}) users were invited to the plan.`;
            }
            for (const userName of usersInvited) {
              const accessRecords = activity.invite[userName];
              await SPM.Utils.Async.forEachParallel(accessRecords, async (uac) => {
                var _a2;
                await this.postChatter("invite", uac.sfsp__User__c, ((_a2 = uac.sfsp__SalesNode__r) == null ? void 0 : _a2.Name) || "All Org");
              }, 5);
              const accessRecordDescriptions = accessRecords.map((uac) => {
                var _a2;
                return `Added ${userName} as ${uac.sfsp__AccessLevel__c} to ${((_a2 = uac.sfsp__SalesNode__r) == null ? void 0 : _a2.Name) || "All Org"}`;
              });
              const activityRecords = accessRecordDescriptions.map((description) => ({
                description,
                name: this.$store.plan.Name,
                parentId: this.$store.plan.Id,
                recordType: ActivityRecordTypes.PLAN,
                subtype: ActivitySubtypes.CREATE,
                type: ActivityTypes.SHARING
              }));
              await insertActivities(activityRecords);
            }
            await SPM.Utils.Async.forEachParallel(Object.values(usersInvited), async (user) => {
              await this.$store.savePreferences(user.id);
            }, 5);
          }
          const usersUpdated = Object.keys(activity.edit);
          if (usersUpdated.length > 0) {
            if (usersUpdated.length === 1) {
              toasts.updatedToastMsg = `Access for "${usersUpdated[0]}" was updated.`;
            } else {
              toasts.updatedToastMsg = `Access was updated for (${usersUpdated.length}) users.`;
            }
            await SPM.Utils.Async.forEachParallel(usersUpdated, async (userName) => {
              await this.postChatter("update", activity.edit[userName][0].sfsp__User__c);
              const accessRecords = activity.edit[userName];
              const accessRecordDescriptions = accessRecords.map((uac) => {
                var _a2;
                return `Changed ${userName}'s access to ${((_a2 = uac.sfsp__SalesNode__r) == null ? void 0 : _a2.Name) || "All Org"}`;
              });
              const activityRecords = accessRecordDescriptions.map((description) => ({
                description,
                name: this.$store.plan.Name,
                parentId: this.$store.plan.Id,
                recordType: ActivityRecordTypes.PLAN,
                subtype: ActivitySubtypes.UPDATE,
                type: ActivityTypes.SHARING
              }));
              await insertActivities(activityRecords);
            }, 5);
            await SPM.Utils.Async.forEachParallel(Object.values(usersUpdated), async (user) => {
              await this.$store.savePreferences(user.id);
            }, 5);
          }
          const usersRemoved = Object.keys(activity.remove);
          if (usersRemoved.length > 0) {
            if (usersRemoved.length === 1) {
              toasts.removedToastMsg = `"${usersRemoved[0]}" was removed from the plan.`;
            } else {
              toasts.removedToastMsg = `(${usersRemoved.length}) users were removed from the plan.`;
            }
            await SPM.Utils.Async.forEachParallel(usersRemoved, async (userName) => {
              await this.postChatter("remove", activity.remove[userName][0].sfsp__User__c);
              const accessRecords = activity.remove[userName];
              const accessRecordDescriptions = accessRecords.map((uac) => {
                var _a2;
                return `Removed ${uac.sfsp__User__r.Name}'s access to ${((_a2 = uac.sfsp__SalesNode__r) == null ? void 0 : _a2.Name) || "All Org"}`;
              });
              const activityRecords = accessRecordDescriptions.map((description) => ({
                description,
                name: this.$store.plan.Name,
                parentId: this.$store.plan.Id,
                recordType: ActivityRecordTypes.PLAN,
                subtype: ActivitySubtypes.DELETE,
                type: ActivityTypes.SHARING
              }));
              await insertActivities(activityRecords);
            }, 5);
          }
          const sharedWithRecords = [];
          if (Object.keys(usersMap).length) {
            for (const key in usersMap) {
              const user = usersMap[key];
              for (const record of user.accessRecords) {
                if (!this.availableAdminIds.has(user.id) && !this.availableManagerIds.has(user.id)) {
                  sharedWithRecords.push({
                    name: user.name,
                    userId: record.sfsp__User__c,
                    nodeId: record.sfsp__SalesNode__c || "All Org"
                  });
                }
              }
            }
          }
          this.config.callback({ ...toasts, sharedWithRecords });
          if (!!activity.remove[SPM.currentUser.Name]) {
            window.location.reload();
          } else {
            this.$emit("close");
            this.loading = false;
          }
        }
      }
    };
    const _hoisted_1$o = { class: "slds-grid" };
    const _hoisted_2$o = { class: "slds-col_bump-left" };
    function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Overview = resolveComponent("Overview");
      const _component_ManagerUsers = resolveComponent("ManagerUsers");
      const _component_StandardUsers = resolveComponent("StandardUsers");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "share-plan",
        ref: "modal",
        title: $options.modalTitle,
        detach: "",
        onClose: _cache[1] || (_cache[1] = ($event) => $data.loading ? () => {
        } : _ctx.$emit("close"))
      }, {
        tagline: withCtx(() => [
          $data.page !== "Overview" ? (openBlock(), createBlock(_component_ButtonIcon, {
            key: 0,
            id: "share-plan-navigate-back",
            iconCategory: "utility",
            iconName: "chevronleft",
            iconSize: "large",
            assistiveText: "Back",
            iconClass: ["slds-button__icon"],
            class: "slds-button slds-button_icon slds-input__icon slds-input__icon_left",
            style: { "position": "absolute", "left": "1rem", "top": "1rem" },
            title: "Back",
            disabled: $data.loading,
            onClick: $options.cancelAndBack
          }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true)
        ]),
        content: withCtx(() => [
          $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
          $data.page === "Overview" ? (openBlock(), createBlock(_component_Overview, {
            key: 1,
            users: $data.users,
            availableAdminIds: $data.availableAdminIds,
            availableManagerIds: $data.availableManagerIds,
            availableStandardIds: $data.availableStandardIds,
            onChangePage: _cache[0] || (_cache[0] = (newPage) => $data.page = newPage)
          }, null, 8, ["users", "availableAdminIds", "availableManagerIds", "availableStandardIds"])) : $data.page === "ManagerUsers" ? (openBlock(), createBlock(_component_ManagerUsers, {
            key: 2,
            users: $data.users,
            availableAdminIds: $data.availableAdminIds,
            availableManagerIds: $data.availableManagerIds,
            onAddUser: $options.addUser,
            onRemoveUser: $options.removeUser,
            onCancelAndBack: $options.cancelAndBack
          }, null, 8, ["users", "availableAdminIds", "availableManagerIds", "onAddUser", "onRemoveUser", "onCancelAndBack"])) : $data.page === "StandardUsers" ? (openBlock(), createBlock(_component_StandardUsers, {
            key: 3,
            users: $data.users,
            availableAdminIds: $data.availableAdminIds,
            availableManagerIds: $data.availableManagerIds,
            availableStandardIds: $data.availableStandardIds,
            nodeMap: $data.nodeMap,
            onAddUser: $options.addUser,
            onRemoveUser: $options.removeUser,
            onEditUser: $options.editUser,
            onCancelAndBack: $options.cancelAndBack
          }, null, 8, ["users", "availableAdminIds", "availableManagerIds", "availableStandardIds", "nodeMap", "onAddUser", "onRemoveUser", "onEditUser", "onCancelAndBack"])) : createCommentVNode("", true)
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", null, [
            createBaseVNode("div", _hoisted_1$o, [
              createBaseVNode("div", _hoisted_2$o, [
                createVNode(_component_SLDSButton, {
                  class: "slds-button slds-button_neutral",
                  disabled: $data.loading,
                  onClick: $options.cancelAndBack
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString($data.page === "Overview" ? "Close" : "Cancel & Back"), 1)
                  ]),
                  _: 1
                }, 8, ["disabled", "onClick"]),
                $data.page !== "Overview" ? (openBlock(), createBlock(_component_SLDSButton, {
                  key: 0,
                  class: "slds-button slds-button_brand",
                  disabled: !$options.changesMade || $data.loading,
                  onClick: $options.save
                }, {
                  default: withCtx(() => [
                    createTextVNode("Save")
                  ]),
                  _: 1
                }, 8, ["disabled", "onClick"])) : createCommentVNode("", true)
              ])
            ])
          ])
        ]),
        _: 1
      }, 8, ["title"]);
    }
    const PlanShareModal = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$p], ["__scopeId", "data-v-be335579"]]);
    const _sfc_main$o = {
      name: "ConfirmSelfRemoval",
      components: {
        Button: SLDSButton,
        Popover
      },
      emits: ["close", "confirm"],
      props: ["bindTo"],
      methods: {
        onConfirm() {
          this.$emit("confirm");
          this.$emit("close");
        }
      }
    };
    const _hoisted_1$n = /* @__PURE__ */ createBaseVNode("div", { class: "slds-grid slds-p-vertical_large" }, [
      /* @__PURE__ */ createBaseVNode("span", { id: "share-branch-confirm-removal-text" }, "Removing yourself from this plan prevents you from accessing any of its details.")
    ], -1);
    const _hoisted_2$n = { class: "slds-grid slds-grid_vertical-align-center" };
    function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Button = resolveComponent("Button");
      const _component_Popover = resolveComponent("Popover");
      return openBlock(), createBlock(_component_Popover, {
        id: "share-branch-confirm-removal-popover",
        width: "x-large",
        bindTo: _ctx.$props.bindTo,
        alignment: "left",
        position: "fixed",
        closeOnClickOutside: "",
        onClose: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
      }, {
        header: withCtx(() => [
          createTextVNode("Remove Yourself?")
        ]),
        content: withCtx(() => [
          _hoisted_1$n
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_2$n, [
            createVNode(_component_Button, {
              class: "slds-col_bump-left",
              variant: "neutral",
              label: "Cancel",
              onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
            }),
            createVNode(_component_Button, {
              id: "share-branch-confirm-removal-accept",
              class: "slds-col_bump-left",
              variant: "brand",
              label: "Remove",
              onClick: $options.onConfirm
            }, null, 8, ["onClick"])
          ])
        ]),
        _: 1
      }, 8, ["bindTo"]);
    }
    const ConfirmSelfRemoval = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$o]]);
    const _sfc_main$n = {
      name: "ShareEmptyState"
    };
    const _hoisted_1$m = {
      class: "slds-illustration__svg",
      viewBox: "0 0 468 194",
      "aria-hidden": "true",
      xmlns: "http://www.w3.org/2000/svg"
    };
    const _hoisted_2$m = /* @__PURE__ */ createStaticVNode('<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-67.000000, -112.000000)"><g><g transform="translate(245.000000, 200.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(135.000000, 152.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(69.000000, 256.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M14,36.5 L464,36.5"></path><path vector-effect="non-scaling-stroke" d="M0,36.5 L6,36.5"></path><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="234.5 36 279.5 0 313.5 26"></polyline><path vector-effect="non-scaling-stroke" d="M279.5,1 L279.5,35" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M313.5,11 C313.5,20.7437888 313.5,25.7437888 313.5,26 C313.5,25.7437888 313.5,20.7437888 313.5,11 Z" stroke-linejoin="round"></path><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="303.5 17 313.5 9 347.5 36"></polyline></g><g transform="translate(113.000000, 178.000000)"><g transform="translate(30.000000, 8.000000)" class="slds-illustration__fill-secondary"><path vector-effect="non-scaling-stroke" d="M29.5,60.5 L29.5,12 C29.5,5.372583 34.872583,0 41.5,0 C48.127417,0 53.5,5.372583 53.5,12 L53.5,40.5 L70.5,40.5 L70.5,27 C70.5,23.1340068 73.6340068,20 77.5,20 C81.3659932,20 84.5,23.1340068 84.5,27 L84.5,48.5 C84.5,51.8137085 81.8137085,54.5 78.5,54.5 L53.5,54.5 L53.5,118.5 L29.5,118.5 L29.5,74.5 L6.5,74.5 C3.1862915,74.5 0.5,71.8137085 0.5,68.5 L0.5,39 C0.5,35.1340068 3.63400675,32 7.5,32 C11.3659932,32 14.5,35.1340068 14.5,39 L14.5,60.5 L29.5,60.5 Z"></path></g><g transform="translate(59.000000, 7.000000)" fill="#FFFFFF"><path vector-effect="non-scaling-stroke" d="M2,11 C3.65332031,8.49145508 5.65181478,6.77364095 7.9954834,5.84655762 C11.5109863,4.45593262 15.2684326,4.95605469 17.8156738,6.2824707 C20.362915,7.60888672 22.3626709,9.64978027 23.2602539,11.81604 C23.8586426,13.2602132 23.8586426,11.7547201 23.2602539,7.29956055 L19.612793,3.56494141 L13.7923584,0.564331055 L8.765625,1.42663574 L4.67321777,3.19787598 C2.69893392,5.13902708 1.69559733,6.16722532 1.66320801,6.2824707 C1.61462402,6.45533878 0.856079102,9.49145508 0.813964844,9.66003418 C0.785888672,9.77242025 1.18123372,10.2190755 2,11 Z"></path></g><g class="slds-illustration__stroke-primary" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M0,126.5 L356,126.5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M362.5,126.5 L372.013149,126.5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M107.5,20 L107.5,28" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M113,30.6568542 L118.656854,25" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M37.5,32 L37.5,40" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M44,42.6568542 L49.6568542,37" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M25,42.6568542 L30.6568542,37" stroke-linecap="round" transform="translate(27.828427, 39.828427) scale(-1, 1) translate(-27.828427, -39.828427) "></path><path vector-effect="non-scaling-stroke" d="M71.5,0 L71.5,8" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M79,10.6568542 L84.6568542,5" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M58,10.6568542 L63.6568542,5" stroke-linecap="round" transform="translate(60.828427, 7.828427) scale(-1, 1) translate(-60.828427, -7.828427) "></path><path vector-effect="non-scaling-stroke" d="M59.5,68.5 L59.5,20 C59.5,13.372583 64.872583,8 71.5,8 C78.127417,8 83.5,13.372583 83.5,20 L83.5,48.5 L100.5,48.5 L100.5,35 C100.5,31.1340068 103.634007,28 107.5,28 C111.365993,28 114.5,31.1340068 114.5,35 L114.5,56.5 C114.5,59.8137085 111.813708,62.5 108.5,62.5 L83.5,62.5 L83.5,126.5 L59.5,126.5 L59.5,82.5 L36.5,82.5 C33.1862915,82.5 30.5,79.8137085 30.5,76.5 L30.5,47 C30.5,43.1340068 33.6340068,40 37.5,40 C41.3659932,40 44.5,43.1340068 44.5,47 L44.5,68.5 L59.5,68.5 Z"></path><path vector-effect="non-scaling-stroke" d="M77,88.5 L92.5,88.5 L92.5,81 C92.5,77.1340068 95.6340068,74 99.5,74 L99.5,74 C103.365993,74 106.5,77.1340068 106.5,81 L106.5,96.5 C106.5,99.8137085 103.813708,102.5 100.5,102.5 L77,102.5" class="slds-illustration__fill-secondary" stroke-linecap="round" stroke-linejoin="round"></path></g></g><g transform="translate(429.000000, 242.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><g><path vector-effect="non-scaling-stroke" d="M12.5,4 L12.5,50"></path><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="11 18.5 0.5 18.5 0.5 0"></polyline><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="14 25.5 24.5 25.5 24.5 8"></polyline><polyline vector-effect="non-scaling-stroke" stroke-linejoin="round" points="2.5 31 2.5 38.5 11 38.5"></polyline></g></g><g transform="translate(327.000000, 95.000000)"><g><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-secondary" cx="64" cy="64" r="23"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="135,1,1,18" transform="translate(64.000000, 64.000000) rotate(230.000000) translate(-64.000000, -64.000000) " cx="64" cy="64" r="45"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="107,10" transform="translate(64.000000, 64.000000) rotate(150.000000) translate(-64.000000, -64.000000) " cx="64" cy="64" r="33"></circle></g><g transform="translate(41.000000, 41.000000)" class="slds-illustration__stroke-primary" stroke-width="3"><circle vector-effect="non-scaling-stroke" cx="23" cy="23" r="23"></circle></g></g></g></g></g>', 1);
    const _hoisted_3$i = [
      _hoisted_2$m
    ];
    function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1$m, _hoisted_3$i);
    }
    const ShareEmptyState = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$n]]);
    const Overview_vue_vue_type_style_index_0_scoped_34277cb2_lang = "";
    const _sfc_main$m = {
      name: "Overview",
      components: {
        SLDSButton,
        Card,
        Icon
      },
      props: ["users", "availableAdminIds", "availableManagerIds", "availableStandardIds"],
      emits: ["change-page"],
      computed: {
        numAdmin() {
          return this.availableAdminIds.size;
        },
        numManager() {
          return this.users.filter((u) => this.availableManagerIds.has(u.id) && !this.availableAdminIds.has(u.id)).length;
        },
        numStandard() {
          return this.users.filter((u) => this.availableStandardIds.has(u.id) && !this.availableManagerIds.has(u.id) && !this.availableAdminIds.has(u.id)).length;
        }
      }
    };
    const _withScopeId$7 = (n) => (pushScopeId("data-v-34277cb2"), n = n(), popScopeId(), n);
    const _hoisted_1$l = {
      id: "share-branch-overview",
      class: "slds-grid slds-grid_vertical"
    };
    const _hoisted_2$l = { class: "slds-p-horizontal_medium slds-p-vertical_large" };
    const _hoisted_3$h = /* @__PURE__ */ _withScopeId$7(() => /* @__PURE__ */ createBaseVNode("div", null, "Contributors with Access", -1));
    const _hoisted_4$g = {
      id: "adminUsers",
      class: "slds-grid slds-grid_vertical slds-border_bottom"
    };
    const _hoisted_5$g = { class: "slds-col slds-grid slds-grid_vertical-align-center slds-p-around_small" };
    const _hoisted_6$f = { class: "avatar slds-grid slds-grid_vertical-align-center slds-grid_align-center slds-m-right_medium" };
    const _hoisted_7$c = { class: "slds-grid slds-grid_vertical" };
    const _hoisted_8$c = {
      id: "managerUsers",
      class: "slds-grid slds-grid_vertical slds-border_bottom"
    };
    const _hoisted_9$a = { class: "slds-col slds-grid slds-grid_vertical-align-center slds-p-around_small" };
    const _hoisted_10$8 = { class: "avatar slds-grid slds-grid_vertical-align-center slds-grid_align-center slds-m-right_medium" };
    const _hoisted_11$7 = { class: "slds-grid slds-grid_vertical" };
    const _hoisted_12$5 = {
      id: "upstreamUsers",
      class: "slds-grid slds-grid_vertical"
    };
    const _hoisted_13$5 = { class: "slds-col slds-grid slds-grid_vertical-align-center slds-p-around_small" };
    const _hoisted_14$4 = { class: "avatar slds-grid slds-grid_vertical-align-center slds-grid_align-center slds-m-right_medium" };
    const _hoisted_15$4 = /* @__PURE__ */ _withScopeId$7(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-grid slds-grid_vertical" }, "Contributors with Access to This Node's Ancestors", -1));
    function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Card = resolveComponent("Card");
      return openBlock(), createElementBlock("div", _hoisted_1$l, [
        createBaseVNode("div", _hoisted_2$l, [
          _hoisted_3$h,
          createVNode(_component_Card, null, {
            body: withCtx(() => [
              createBaseVNode("div", _hoisted_4$g, [
                createBaseVNode("div", _hoisted_5$g, [
                  createBaseVNode("div", _hoisted_6$f, [
                    createVNode(_component_Icon, {
                      category: "standard",
                      name: "user_role",
                      assistiveText: "User Role Icon"
                    })
                  ]),
                  createBaseVNode("div", _hoisted_7$c, "Sales Planning Admins (" + toDisplayString($options.numAdmin) + ")", 1)
                ])
              ]),
              createBaseVNode("div", _hoisted_8$c, [
                createBaseVNode("div", _hoisted_9$a, [
                  createBaseVNode("div", _hoisted_10$8, [
                    createVNode(_component_Icon, {
                      category: "standard",
                      name: "omni_supervisor",
                      assistiveText: "Omni Supervisor Icon"
                    })
                  ]),
                  createBaseVNode("div", _hoisted_11$7, "Sales Plan Managers (" + toDisplayString($options.numManager) + ")", 1),
                  _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_SLDSButton, {
                    key: 0,
                    id: "share-branch-overview-navigate-manager",
                    class: "slds-col_bump-left",
                    variant: "base",
                    label: "Manage",
                    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("change-page", "managerUsers"))
                  })) : createCommentVNode("", true)
                ])
              ]),
              createBaseVNode("div", _hoisted_12$5, [
                createBaseVNode("div", _hoisted_13$5, [
                  createBaseVNode("div", _hoisted_14$4, [
                    createVNode(_component_Icon, {
                      category: "standard",
                      name: "user",
                      assistiveText: "User Icon"
                    })
                  ]),
                  _hoisted_15$4
                ])
              ])
            ]),
            _: 1
          })
        ])
      ]);
    }
    const Overview = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$m], ["__scopeId", "data-v-34277cb2"]]);
    const BranchUsers_vue_vue_type_style_index_0_scoped_741da070_lang = "";
    const _sfc_main$l = {
      name: "BranchUsers",
      components: {
        SLDSButton,
        Card,
        Picklist,
        Tooltip,
        ButtonIcon,
        Overview,
        ConfirmSelfRemoval,
        ShareEmptyState
      },
      props: ["users", "availableAdminIds", "availableManagerIds", "availableStandardIds", "ancestorIds", "branchContext"],
      emits: ["change-page", "add-user", "remove-user", "edit-user"],
      data() {
        return {
          userContext: null,
          hierarchyContext: null,
          removalContext: null,
          selectedUser: null,
          accessValue: "Editor",
          accessOptions: ["Editor", "Viewer"],
          userOptions: [{
            options: async (term) => {
              term = term.replace(/'/g, "\\'");
              const matchingUsers = await SPM.Utils.Rest.invoke("Query", {
                query: `
                            SELECT Id, Name, FirstName, LastName, UserRole.Name, SmallPhotoUrl
                            FROM User
                            WHERE Name LIKE '%${term}%'
                            AND Id IN ('${[...this.availableStandardIds].join("','")}')
                            AND Id NOT IN ('${[...this.availableAdminIds, ...this.availableManagerIds].join("','")}')
                            LIMIT 10
                        `
              });
              return matchingUsers.filter((user) => !this.users.find((u) => u.id === user.Id && u.accessRecords.find((uac) => [this.branchContext.Id, ...this.ancestorIds].includes(uac.sfsp__SalesNode__c || "All Org"))));
            }
          }]
        };
      },
      computed: {
        currentUserId() {
          return SPM.currentUser.Id;
        },
        standardUsers() {
          return this.users.filter((u) => u.accessRecords.find((uac) => this.branchContext.Id === (uac.sfsp__SalesNode__c || "All Org")) && this.availableStandardIds.has(u.id) && !this.availableManagerIds.has(u.id) && !this.availableAdminIds.has(u.id));
        }
      },
      mounted() {
        this.$refs.userLookup.focus();
      },
      methods: {
        onAdd() {
          this.$emit("add-user", this.selectedUser, this.accessValue, this.branchContext.Id);
          this.selectedUser = null;
        }
      }
    };
    const _withScopeId$6 = (n) => (pushScopeId("data-v-741da070"), n = n(), popScopeId(), n);
    const _hoisted_1$k = { class: "slds-theme_shade slds-p-horizontal_medium slds-p-vertical_small slds-border_bottom" };
    const _hoisted_2$k = { class: "slds-grid slds-grid_align-spread slds-grid_vertical-align-end" };
    const _hoisted_3$g = { class: "slds-col slds-size_6-of-12 slds-p-right_small" };
    const _hoisted_4$f = /* @__PURE__ */ _withScopeId$6(() => /* @__PURE__ */ createBaseVNode("label", {
      for: "userLookup",
      class: "slds-assistive-text"
    }, "Add a user", -1));
    const _hoisted_5$f = {
      class: "slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-listbox__option_has-meta",
      role: "option"
    };
    const _hoisted_6$e = { class: "slds-media__body" };
    const _hoisted_7$b = ["title"];
    const _hoisted_8$b = {
      key: 0,
      class: "slds-listbox__option-meta"
    };
    const _hoisted_9$9 = { class: "slds-col slds-size_5-of-12 slds-p-right_small" };
    const _hoisted_10$7 = /* @__PURE__ */ _withScopeId$6(() => /* @__PURE__ */ createBaseVNode("label", {
      for: "accessPicklist",
      class: "slds-assistive-text"
    }, "Access", -1));
    const _hoisted_11$6 = { class: "slds-grid slds-grid_vertical slds-p-horizontal_medium slds-m-bottom_large" };
    const _hoisted_12$4 = {
      key: 0,
      id: "noUsersWithAccess",
      class: "slds-p-vertical_large slds-illustration slds-illustration_small"
    };
    const _hoisted_13$4 = /* @__PURE__ */ _withScopeId$6(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-longform" }, [
      /* @__PURE__ */ createBaseVNode("h3", { class: "slds-illustration__header slds-text-heading_medium" }, "Nobody helping yet?"),
      /* @__PURE__ */ createBaseVNode("p", { class: "slds-text-body_regular" }, "Get great sales results when you invite the key contributors to your sales plan.")
    ], -1));
    const _hoisted_14$3 = {
      key: 1,
      id: "usersWithAccess",
      class: "slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover",
      "aria-label": "Users with access"
    };
    const _hoisted_15$3 = /* @__PURE__ */ _withScopeId$6(() => /* @__PURE__ */ createBaseVNode("thead", null, [
      /* @__PURE__ */ createBaseVNode("tr", { class: "slds-line-height_reset" }, [
        /* @__PURE__ */ createBaseVNode("th", {
          class: "slds-col slds-size_6-of-12 slds-p-right_small",
          scope: "col"
        }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "User"
          }, "User")
        ]),
        /* @__PURE__ */ createBaseVNode("th", {
          class: "slds-col slds-size_5-of-12 slds-p-right_small",
          scope: "col"
        }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Access"
          }, "Access")
        ]),
        /* @__PURE__ */ createBaseVNode("th", {
          class: "slds-col slds-size_1-of-12",
          scope: "col"
        })
      ])
    ], -1));
    const _hoisted_16$3 = ["id"];
    const _hoisted_17$2 = {
      "data-label": "User",
      scope: "row",
      class: "slds-col slds-size_6-of-12 slds-align-top"
    };
    const _hoisted_18$2 = { class: "slds-col slds-grid slds-grid_vertical-align-center slds-p-right_small" };
    const _hoisted_19$2 = { class: "avatar slds-grid slds-grid_vertical-align-center slds-grid_align-center slds-m-right_medium" };
    const _hoisted_20$2 = ["src"];
    const _hoisted_21$1 = { class: "slds-grid slds-grid_vertical" };
    const _hoisted_22$1 = ["id"];
    const _hoisted_23$1 = {
      "data-label": "Access",
      class: "slds-col slds-size_5-of-12"
    };
    const _hoisted_24$1 = {
      "data-label": "Remove",
      class: "slds-col slds-size_1-of-12"
    };
    function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_Picklist = resolveComponent("Picklist");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Overview = resolveComponent("Overview");
      const _component_ShareEmptyState = resolveComponent("ShareEmptyState");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_ConfirmSelfRemoval = resolveComponent("ConfirmSelfRemoval");
      const _component_Card = resolveComponent("Card");
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("div", _hoisted_1$k, [
          createBaseVNode("div", _hoisted_2$k, [
            createBaseVNode("div", _hoisted_3$g, [
              _hoisted_4$f,
              createVNode(_component_Picklist, {
                modelValue: (_a2 = $data.selectedUser) == null ? void 0 : _a2.Name,
                id: "userLookup",
                ref: "userLookup",
                style: { "width": "100%" },
                options: $data.userOptions,
                labelForId: "userLookup",
                labels: { name: "Add a user", search: "Search users..." },
                titleKey: "Name",
                idKey: "Id",
                filterable: "",
                onSelectedOption: _cache[0] || (_cache[0] = (user) => $data.selectedUser = user),
                onClear: _cache[1] || (_cache[1] = () => $data.selectedUser = null)
              }, {
                option: withCtx((item) => [
                  createBaseVNode("div", _hoisted_5$f, [
                    createBaseVNode("span", _hoisted_6$e, [
                      createBaseVNode("span", {
                        class: "slds-truncate",
                        title: item.option.Name
                      }, toDisplayString(item.option.Name), 9, _hoisted_7$b),
                      item.option.UserRole ? (openBlock(), createElementBlock("span", _hoisted_8$b, toDisplayString(item.option.UserRole.Name), 1)) : createCommentVNode("", true)
                    ])
                  ])
                ]),
                _: 1
              }, 8, ["modelValue", "options", "labels"])
            ]),
            createBaseVNode("div", _hoisted_9$9, [
              _hoisted_10$7,
              createVNode(_component_Picklist, {
                modelValue: $data.accessValue,
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.accessValue = $event),
                id: "accessPicklist",
                style: { "width": "100%" },
                labelForId: "accessPicklist",
                options: $data.accessOptions,
                labels: { name: "Access" }
              }, null, 8, ["modelValue", "options"])
            ]),
            createVNode(_component_SLDSButton, {
              id: "share-branch-standard-add",
              class: "slds-col slds-size_1-of-12 slds-col_bump-left",
              style: { "height": "fit-content" },
              label: "Add",
              variant: "neutral",
              disabled: !$data.selectedUser,
              onClick: $options.onAdd
            }, null, 8, ["disabled", "onClick"])
          ])
        ]),
        createVNode(_component_Overview, {
          users: $props.users,
          availableAdminIds: $props.availableAdminIds,
          availableManagerIds: $props.availableManagerIds,
          availableStandardIds: $props.availableStandardIds,
          onChangePage: _cache[3] || (_cache[3] = (newPage) => _ctx.$emit("change-page", newPage))
        }, null, 8, ["users", "availableAdminIds", "availableManagerIds", "availableStandardIds"]),
        createBaseVNode("div", _hoisted_11$6, [
          createTextVNode(" Shared with "),
          createVNode(_component_Card, null, {
            body: withCtx(() => [
              $options.standardUsers.length === 0 ? (openBlock(), createElementBlock("div", _hoisted_12$4, [
                createVNode(_component_ShareEmptyState),
                _hoisted_13$4
              ])) : (openBlock(), createElementBlock("table", _hoisted_14$3, [
                _hoisted_15$3,
                createBaseVNode("tbody", null, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList($options.standardUsers, (user) => {
                    return openBlock(), createElementBlock("tr", {
                      id: user.dirty ? `sharedWithStandard-preview-${user.name}` : `sharedWithStandard-${user.name}`,
                      key: user.dirty ? `sharedWithStandard-preview-${user.name}` : `sharedWithStandard-${user.name}`,
                      class: normalizeClass(["slds-hint-parent", { "slds-is-edited": user.dirty }])
                    }, [
                      createBaseVNode("th", _hoisted_17$2, [
                        createBaseVNode("div", _hoisted_18$2, [
                          createBaseVNode("div", _hoisted_19$2, [
                            user.smallPhotoUrl ? (openBlock(), createElementBlock("img", {
                              key: 0,
                              class: "avatar",
                              src: user.smallPhotoUrl
                            }, null, 8, _hoisted_20$2)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                              createTextVNode(toDisplayString(user.initials), 1)
                            ], 64))
                          ]),
                          createBaseVNode("div", _hoisted_21$1, [
                            createBaseVNode("span", null, [
                              createBaseVNode("b", null, toDisplayString(user.name), 1)
                            ]),
                            createBaseVNode("span", {
                              id: `sharedWithStandard-role-${user.name}`
                            }, toDisplayString(user.role), 9, _hoisted_22$1)
                          ])
                        ])
                      ]),
                      createBaseVNode("td", _hoisted_23$1, [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(user.accessRecords.filter((uac) => $props.branchContext.Id === (uac.sfsp__SalesNode__c || "All Org")), (accessRecord) => {
                          return openBlock(), createElementBlock("div", {
                            key: `${accessRecord.Id}-access`,
                            class: "slds-grid slds-grid_vertical-align-center slds-m-vertical_small slds-p-right_small",
                            style: { "height": "2rem" }
                          }, [
                            createVNode(_component_Picklist, {
                              modelValue: accessRecord.sfsp__AccessLevel__c,
                              "onUpdate:modelValue": ($event) => accessRecord.sfsp__AccessLevel__c = $event,
                              id: `sharedWithStandard-${user.name}-access`,
                              style: { "width": "100%" },
                              options: $data.accessOptions,
                              disabled: !user.dirty && !_ctx.$store.isAdmin && !_ctx.$store.isManager,
                              onSelectedOption: ($event) => _ctx.$emit("edit-user", user.id)
                            }, null, 8, ["modelValue", "onUpdate:modelValue", "id", "options", "disabled", "onSelectedOption"])
                          ]);
                        }), 128))
                      ]),
                      createBaseVNode("td", _hoisted_24$1, [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(user.accessRecords.filter((uac) => $props.branchContext.Id === (uac.sfsp__SalesNode__c || "All Org")), (accessRecord) => {
                          return openBlock(), createElementBlock("div", {
                            key: `${accessRecord.Id}-remove`,
                            class: "slds-grid slds-grid_vertical-align-center slds-grid_align-end slds-m-vertical_small",
                            style: { "height": "2rem" }
                          }, [
                            createVNode(_component_ButtonIcon, {
                              id: `sharedWithStandard-${user.name}-remove`,
                              class: "slds-button_icon-container",
                              disabled: !user.dirty && !_ctx.$store.isAdmin && !_ctx.$store.isManager,
                              assistiveText: "Remove",
                              iconCategory: "utility",
                              iconName: "close",
                              title: "Remove",
                              onClick: (e) => user.id === $options.currentUserId && user.accessRecords.length === 1 ? $data.removalContext = e.target : _ctx.$emit("remove-user", user.id, accessRecord)
                            }, null, 8, ["id", "disabled", "onClick"])
                          ]);
                        }), 128))
                      ])
                    ], 10, _hoisted_16$3);
                  }), 128)),
                  $data.removalContext ? (openBlock(), createBlock(_component_ConfirmSelfRemoval, {
                    key: 0,
                    bindTo: $data.removalContext,
                    onConfirm: _cache[4] || (_cache[4] = ($event) => _ctx.$emit("remove-user", $options.currentUserId)),
                    onClose: _cache[5] || (_cache[5] = () => $data.removalContext = null)
                  }, null, 8, ["bindTo"])) : createCommentVNode("", true)
                ])
              ]))
            ]),
            _: 1
          })
        ])
      ]);
    }
    const BranchUsers = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$l], ["__scopeId", "data-v-741da070"]]);
    const ManagerUsers_vue_vue_type_style_index_0_scoped_658c16f8_lang = "";
    const _sfc_main$k = {
      name: "ManagerUsers",
      components: {
        SLDSButton,
        Card,
        Picklist,
        Tooltip,
        ButtonIcon,
        ConfirmSelfRemoval,
        ShareEmptyState
      },
      props: ["users", "availableAdminIds", "availableManagerIds", "availableStandardIds"],
      emits: ["cancel-and-back", "add-user", "remove-user"],
      data() {
        return {
          removalContext: null,
          selectedUser: null,
          userOptions: [{
            options: async (term) => {
              term = term.replace(/'/g, "\\'");
              const matchingUsers = await SPM.Utils.Rest.invoke("Query", {
                query: `
                            SELECT Id, Name, FirstName, LastName, UserRole.Name, SmallPhotoUrl
                            FROM User
                            WHERE Name LIKE '%${term}%'
                            AND Id IN ('${[...this.availableManagerIds].join("','")}')
                            AND Id NOT IN ('${[...this.availableAdminIds].join("','")}')
                            LIMIT 10
                        `
              });
              return matchingUsers.filter((user) => !this.users.find((u) => u.id === user.Id));
            }
          }]
        };
      },
      computed: {
        currentUserId() {
          return SPM.currentUser.Id;
        },
        managerUsers() {
          return this.users.filter((u) => this.availableManagerIds.has(u.id) && !this.availableAdminIds.has(u.id));
        }
      },
      mounted() {
        this.$refs.userLookup.focus();
      },
      methods: {
        onAdd() {
          this.$emit("add-user", this.selectedUser);
          this.selectedUser = null;
        }
      }
    };
    const _withScopeId$5 = (n) => (pushScopeId("data-v-658c16f8"), n = n(), popScopeId(), n);
    const _hoisted_1$j = {
      id: "share-branch-manager",
      class: "slds-grid slds-grid_vertical"
    };
    const _hoisted_2$j = { class: "slds-theme_shade slds-p-horizontal_medium slds-p-vertical_small slds-border_bottom" };
    const _hoisted_3$f = { class: "slds-grid" };
    const _hoisted_4$e = /* @__PURE__ */ _withScopeId$5(() => /* @__PURE__ */ createBaseVNode("span", null, " >", -1));
    const _hoisted_5$e = /* @__PURE__ */ _withScopeId$5(() => /* @__PURE__ */ createBaseVNode("span", null, " Sales Plan Managers", -1));
    const _hoisted_6$d = { class: "slds-grid slds-grid_align-spread slds-grid_vertical-align-end" };
    const _hoisted_7$a = { class: "slds-col slds-size_11-of-12 slds-p-right_small" };
    const _hoisted_8$a = /* @__PURE__ */ _withScopeId$5(() => /* @__PURE__ */ createBaseVNode("label", {
      for: "userLookup",
      class: "slds-assistive-text"
    }, "Add a sales plan manager", -1));
    const _hoisted_9$8 = {
      class: "slds-media slds-listbox__option slds-listbox__option_plain slds-media_small slds-listbox__option_has-meta",
      role: "option"
    };
    const _hoisted_10$6 = { class: "slds-media__body" };
    const _hoisted_11$5 = ["title"];
    const _hoisted_12$3 = {
      key: 0,
      class: "slds-listbox__option-meta"
    };
    const _hoisted_13$3 = {
      key: 0,
      id: "noUsersWithAccess",
      class: "slds-p-vertical_large slds-illustration slds-illustration_small"
    };
    const _hoisted_14$2 = /* @__PURE__ */ _withScopeId$5(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-longform" }, [
      /* @__PURE__ */ createBaseVNode("h3", { class: "slds-illustration__header slds-text-heading_medium" }, "Any managers out there?"),
      /* @__PURE__ */ createBaseVNode("p", { class: "slds-text-body_regular" }, "Add sales plan managers who can build out your plan.")
    ], -1));
    const _hoisted_15$2 = {
      key: 1,
      id: "usersWithAccess",
      class: "slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover",
      "aria-label": "Users with access"
    };
    const _hoisted_16$2 = /* @__PURE__ */ _withScopeId$5(() => /* @__PURE__ */ createBaseVNode("thead", null, [
      /* @__PURE__ */ createBaseVNode("tr", { class: "slds-line-height_reset" }, [
        /* @__PURE__ */ createBaseVNode("th", {
          class: "",
          scope: "col"
        }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Sales Plan Manager"
          }, "Sales Plan Manager")
        ]),
        /* @__PURE__ */ createBaseVNode("th", {
          class: "",
          scope: "col"
        }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Role"
          }, "Permission Set")
        ]),
        /* @__PURE__ */ createBaseVNode("th", {
          class: "",
          scope: "col"
        })
      ])
    ], -1));
    const _hoisted_17$1 = ["id"];
    const _hoisted_18$1 = {
      "data-label": "User",
      scope: "row",
      class: "slds-align-top"
    };
    const _hoisted_19$1 = { class: "slds-col slds-grid slds-grid_vertical-align-center" };
    const _hoisted_20$1 = { class: "avatar slds-grid slds-grid_vertical-align-center slds-grid_align-center slds-m-right_medium" };
    const _hoisted_21 = ["src"];
    const _hoisted_22 = { class: "slds-grid slds-grid_vertical" };
    const _hoisted_23 = ["id"];
    const _hoisted_24 = /* @__PURE__ */ _withScopeId$5(() => /* @__PURE__ */ createBaseVNode("td", { "data-label": "Permission Set" }, [
      /* @__PURE__ */ createBaseVNode("div", {
        class: "slds-truncate",
        title: "Sales Planning Ops Manager"
      }, "Sales Planning Ops Manager")
    ], -1));
    const _hoisted_25 = {
      "data-label": "Remove",
      style: { "text-align": "right" }
    };
    function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_Picklist = resolveComponent("Picklist");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_ShareEmptyState = resolveComponent("ShareEmptyState");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_ConfirmSelfRemoval = resolveComponent("ConfirmSelfRemoval");
      const _component_Card = resolveComponent("Card");
      return openBlock(), createElementBlock("div", _hoisted_1$j, [
        createBaseVNode("div", _hoisted_2$j, [
          createBaseVNode("div", _hoisted_3$f, [
            createBaseVNode("a", {
              href: "#",
              onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("cancel-and-back"))
            }, "Share Branch"),
            _hoisted_4$e,
            _hoisted_5$e
          ])
        ]),
        createBaseVNode("div", {
          class: "slds-p-vertical_large slds-p-horizontal_medium",
          style: normalizeStyle({ "min-height": $options.managerUsers.length > 0 ? "30rem" : "initial" })
        }, [
          createBaseVNode("div", _hoisted_6$d, [
            createBaseVNode("div", _hoisted_7$a, [
              _hoisted_8$a,
              createVNode(_component_Picklist, {
                modelValue: (_a2 = $data.selectedUser) == null ? void 0 : _a2.Name,
                id: "userLookup",
                ref: "userLookup",
                options: $data.userOptions,
                labelForId: "userLookup",
                labels: { name: "Add a sales plan manager", search: "Search..." },
                titleKey: "Name",
                idKey: "Id",
                filterable: "",
                onSelectedOption: _cache[1] || (_cache[1] = (user) => $data.selectedUser = user),
                onClear: _cache[2] || (_cache[2] = () => $data.selectedUser = null)
              }, {
                option: withCtx((item) => [
                  createBaseVNode("div", _hoisted_9$8, [
                    createBaseVNode("span", _hoisted_10$6, [
                      createBaseVNode("span", {
                        class: "slds-truncate",
                        title: item.option.Name
                      }, toDisplayString(item.option.Name), 9, _hoisted_11$5),
                      item.option.UserRole ? (openBlock(), createElementBlock("span", _hoisted_12$3, toDisplayString(item.option.UserRole.Name), 1)) : createCommentVNode("", true)
                    ])
                  ])
                ]),
                _: 1
              }, 8, ["modelValue", "options", "labels"])
            ]),
            createVNode(_component_SLDSButton, {
              id: "share-branch-manager-add",
              class: "slds-col slds-size_1-of-12 slds-col_bump-left",
              style: { "height": "fit-content" },
              label: "Add",
              variant: "neutral",
              disabled: !$data.selectedUser,
              onClick: $options.onAdd
            }, null, 8, ["disabled", "onClick"])
          ]),
          createVNode(_component_Card, { class: "slds-m-top_medium" }, {
            body: withCtx(() => [
              $options.managerUsers.length === 0 ? (openBlock(), createElementBlock("div", _hoisted_13$3, [
                createVNode(_component_ShareEmptyState),
                _hoisted_14$2
              ])) : (openBlock(), createElementBlock("table", _hoisted_15$2, [
                _hoisted_16$2,
                createBaseVNode("tbody", null, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList($options.managerUsers, (user) => {
                    return openBlock(), createElementBlock("tr", {
                      id: user.dirty ? `sharedWithManager-preview-${user.name}` : `sharedWithManager-${user.name}`,
                      key: user.dirty ? `sharedWithManager-preview-${user.name}` : `sharedWithManager-${user.name}`,
                      class: normalizeClass(["slds-hint-parent", { "slds-is-edited": user.dirty }])
                    }, [
                      createBaseVNode("th", _hoisted_18$1, [
                        createBaseVNode("div", _hoisted_19$1, [
                          createBaseVNode("div", _hoisted_20$1, [
                            user.smallPhotoUrl ? (openBlock(), createElementBlock("img", {
                              key: 0,
                              class: "avatar",
                              src: user.smallPhotoUrl
                            }, null, 8, _hoisted_21)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                              createTextVNode(toDisplayString(user.initials), 1)
                            ], 64))
                          ]),
                          createBaseVNode("div", _hoisted_22, [
                            createBaseVNode("span", null, [
                              createBaseVNode("b", null, toDisplayString(user.name), 1)
                            ]),
                            createBaseVNode("span", {
                              id: `sharedWithManager-role-${user.name}`
                            }, toDisplayString(user.role), 9, _hoisted_23)
                          ])
                        ])
                      ]),
                      _hoisted_24,
                      createBaseVNode("td", _hoisted_25, [
                        createVNode(_component_ButtonIcon, {
                          id: `sharedWithManager-${user.name}-remove`,
                          class: "slds-button_icon-container",
                          assistiveText: "Remove",
                          iconCategory: "utility",
                          iconName: "close",
                          title: "Remove",
                          onClick: (e) => user.id === $options.currentUserId ? $data.removalContext = e.target : _ctx.$emit("remove-user", user.id)
                        }, null, 8, ["id", "onClick"])
                      ])
                    ], 10, _hoisted_17$1);
                  }), 128)),
                  $data.removalContext ? (openBlock(), createBlock(_component_ConfirmSelfRemoval, {
                    key: 0,
                    bindTo: $data.removalContext,
                    onConfirm: _cache[3] || (_cache[3] = ($event) => _ctx.$emit("remove-user", $options.currentUserId)),
                    onClose: _cache[4] || (_cache[4] = () => $data.removalContext = null)
                  }, null, 8, ["bindTo"])) : createCommentVNode("", true)
                ])
              ]))
            ]),
            _: 1
          })
        ], 4)
      ]);
    }
    const ManagerUsers = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$k], ["__scopeId", "data-v-658c16f8"]]);
    const BranchShareModal_vue_vue_type_style_index_0_scoped_fb75cafb_lang = "";
    const _sfc_main$j = {
      name: "BranchShareModal",
      components: {
        SLDSButton,
        ButtonIcon,
        Picklist,
        Modal,
        Spinner,
        BranchUsers,
        ManagerUsers
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          loading: true,
          // branch
          branchContext: null,
          ancestorIds: [],
          page: "branchUsers",
          // node id => node info
          nodeMap: {},
          // SalesPlanningAdmin
          availableAdminIds: this.$store.availableAdminIds,
          // SalesPlanningOpsManager
          availableManagerIds: this.$store.availableManagerIds,
          // SalesPlanning
          availableStandardIds: /* @__PURE__ */ new Set(),
          // users with access
          users: [],
          // copies
          usersCopy: []
        };
      },
      computed: {
        modalTitle() {
          return this.page === "branchUsers" ? `Share ${this.branchContext.Name}` : "Share Sales Plan";
        },
        changesMade() {
          return this.users.some((u) => u.dirty) || this.users.length !== this.usersCopy.length;
        }
      },
      beforeMount() {
        this.branchContext = this.config.node;
      },
      async mounted() {
        SPM.Components.BranchShareModal = this;
        await this.init();
        this.loading = false;
      },
      methods: {
        async init() {
          await Promise.allSettled([
            this.availableStandardIds = new Set((await SPM.Utils.Apex.invoke("GetUsersWithPermissionSet", ["SalesPlanning"]) || []).map((u) => u.Id)),
            // populate nodeMap
            this.nodeMap = (await SPM.Utils.Apex.invoke("Query", [`SELECT Id, Name, sfsp__Parent__r.Id, sfsp__SalesPlan__c FROM sfsp__SalesNode__c WHERE sfsp__SalesPlan__c = '${this.$store.plan.Id}'`])).reduce((map2, node) => {
              var _a2;
              map2[node.Id] = {
                id: node.Id,
                name: node.Name,
                parentId: ((_a2 = node.sfsp__Parent__r) == null ? void 0 : _a2.Id) || "All Org"
              };
              return map2;
            }, { "All Org": { id: "All Org", name: "All Org", parentId: null } }),
            this.ancestorIds = await SPM.Utils.Node.getAncestorIds({ nodeId: this.branchContext.Id })
          ]);
          const usersWithAccess = {};
          const accessRecords = await SPM.Utils.Apex.invoke("Query", [`SELECT Id, sfsp__User__r.Name, sfsp__User__r.UserRole.Name, sfsp__User__r.FirstName, sfsp__User__r.LastName, sfsp__User__r.SmallPhotoUrl, sfsp__AccessLevel__c, sfsp__SalesNode__r.Name FROM sfsp__SalesUserAccess__c WHERE sfsp__SalesPlan__c = '${SPM.$store.plan.Id}'`]) || [];
          accessRecords.forEach((ar) => {
            var _a2, _b, _c, _d, _e;
            usersWithAccess[ar.sfsp__User__c] = usersWithAccess[ar.sfsp__User__c] || {
              id: ar.sfsp__User__c,
              name: ar.sfsp__User__r.Name,
              initials: `${((_b = (_a2 = ar.sfsp__User__r) == null ? void 0 : _a2.FirstName) == null ? void 0 : _b[0]) || ""}${((_d = (_c = ar.sfsp__User__r) == null ? void 0 : _c.LastName) == null ? void 0 : _d[0]) || ""}`,
              role: ((_e = ar.sfsp__User__r.UserRole) == null ? void 0 : _e.Name) || "",
              smallPhotoUrl: ar.sfsp__User__r.SmallPhotoUrl,
              accessRecords: [],
              dirty: false
            };
            usersWithAccess[ar.sfsp__User__c].accessRecords.push(ar);
          });
          this.users = Object.values(usersWithAccess);
          this.usersCopy = JSON.parse(JSON.stringify(this.users));
        },
        cancelAndBack() {
          if (this.page === "branchUsers") {
            this.$emit("close");
          } else {
            this.users = JSON.parse(JSON.stringify(this.usersCopy));
            this.page = "branchUsers";
          }
        },
        async addUser(user, accessLevel = "Editor", nodeId2 = "All Org") {
          var _a2, _b, _c;
          if (!user.Id)
            return;
          this.loading = true;
          const newAccessRecord = {
            sfsp__AccessLevel__c: accessLevel,
            sfsp__SalesPlan__c: this.$store.plan.Id,
            sfsp__User__c: user.Id,
            sfsp__SalesNode__c: nodeId2 === "All Org" ? null : nodeId2,
            sfsp__SalesNode__r: {
              Name: nodeId2 === "All Org" ? null : this.nodeMap[nodeId2].name
            }
          };
          const existingUser = this.users.find((u) => u.id === user.Id);
          if (existingUser) {
            const descendantIds = await SPM.Utils.Node.getDescendantIds({ planId: this.$store.plan.Id, nodeIds: [nodeId2 === "All Org" ? "" : nodeId2] });
            existingUser.accessRecords = existingUser.accessRecords.reduce((updatedUacs, uac) => {
              if (!descendantIds.includes(uac.sfsp__SalesNode__c || "All Org")) {
                updatedUacs.push(uac);
              }
              return updatedUacs;
            }, [newAccessRecord]);
            existingUser.dirty = true;
          } else {
            const newUser = {
              id: user.Id,
              name: user.Name,
              initials: `${((_a2 = user == null ? void 0 : user.FirstName) == null ? void 0 : _a2[0]) || ""}${((_b = user == null ? void 0 : user.LastName) == null ? void 0 : _b[0]) || ""}`,
              role: ((_c = user.UserRole) == null ? void 0 : _c.Name) || "",
              smallPhotoUrl: user.SmallPhotoUrl,
              accessRecords: [newAccessRecord],
              dirty: true
            };
            this.users.unshift(newUser);
          }
          this.loading = false;
        },
        editUser(userId) {
          var _a2;
          const userIndex = this.users.findIndex((u) => u.id === userId);
          const copyIndex = this.usersCopy.findIndex((u) => u.id === userId);
          const accessRecords = this.users[userIndex].accessRecords;
          const accessRecordsCopy = ((_a2 = this.usersCopy[copyIndex]) == null ? void 0 : _a2.accessRecords) || [];
          if (accessRecordsCopy.length === 0)
            return;
          this.users[userIndex].dirty = !accessRecordsCopy.every((copy) => accessRecords.find((uac) => uac.Id === copy.Id && uac.sfsp__AccessLevel__c === copy.sfsp__AccessLevel__c && uac.sfsp__SalesNode__c === copy.sfsp__SalesNode__c));
          if (accessRecords.some((uac) => !uac.Id))
            this.users[userIndex].dirty = true;
          if (accessRecords.length !== accessRecordsCopy.length)
            this.users[userIndex].dirty = true;
        },
        removeUser(userId, accessRecord) {
          const userIndex = this.users.findIndex((u) => u.id === userId);
          const copyIndex = this.usersCopy.findIndex((u) => u.id === userId);
          if (accessRecord) {
            this.users[userIndex].accessRecords.splice(this.users[userIndex].accessRecords.findIndex((uac) => (uac.sfsp__SalesNode__c || "All Org") === (accessRecord.sfsp__SalesNode__c || "All Org")), 1);
            if (copyIndex > -1) {
              this.users[userIndex].dirty = !this.usersCopy[copyIndex].accessRecords.every((copy) => this.users[userIndex].accessRecords.find((uac) => uac.Id === copy.Id && uac.sfsp__AccessLevel__c === copy.sfsp__AccessLevel__c && uac.sfsp__SalesNode__c === copy.sfsp__SalesNode__c));
              if (this.users[userIndex].accessRecords.length !== this.usersCopy[copyIndex].accessRecords.length)
                this.users[userIndex].dirty = true;
            }
            if (this.users[userIndex].accessRecords.some((uac) => !uac.Id))
              this.users[userIndex].dirty = true;
            if (this.users[userIndex].accessRecords.length > 0)
              return;
          }
          this.users.splice(userIndex, 1);
        },
        async postChatter(action, userId, nodeName = "All Org") {
          if (!SPM.chatterEnabled)
            return;
          let comment = "";
          switch (action) {
            case "remove":
              comment = `You have been removed from sales plan ${this.$store.plan.Name}.`;
              break;
            case "invite":
              comment = `${SPM.currentUser.Name} granted you access to ${nodeName} in sales plan {record:${this.$store.plan.Id}}.`;
              break;
            case "update":
              comment = `${SPM.currentUser.Name} changed your access to sales plan {record:${this.$store.plan.Id}}.`;
              break;
          }
          await SPM.Utils.Apex.invoke("PostFeedItem", [userId, comment]);
        },
        async save() {
          this.loading = true;
          const usersMap = this.users.reduce((map2, user) => {
            map2[user.name] = user;
            return map2;
          }, {});
          const usersCopyMap = this.usersCopy.reduce((map2, copy) => {
            map2[copy.name] = copy;
            return map2;
          }, {});
          const accessRecordsToDelete = /* @__PURE__ */ new Set();
          const accessRecordsToUpsert = /* @__PURE__ */ new Set();
          const activity = { invite: {}, remove: {}, edit: {} };
          this.usersCopy.forEach((existingUser) => {
            var _a2;
            const accessRecords = (_a2 = usersMap[existingUser.name]) == null ? void 0 : _a2.accessRecords;
            if (!accessRecords) {
              activity.remove[existingUser.name] = existingUser.accessRecords;
              existingUser.accessRecords.forEach((existingUac) => accessRecordsToDelete.add(existingUac));
            } else {
              existingUser.accessRecords.forEach((existingUac) => {
                if (accessRecords.every((uac) => uac.Id !== existingUac.Id))
                  accessRecordsToDelete.add(existingUac);
              });
            }
          });
          this.users.forEach((userWithAccess) => {
            var _a2;
            const existingAccessRecords = ((_a2 = usersCopyMap[userWithAccess.name]) == null ? void 0 : _a2.accessRecords) || [];
            if (existingAccessRecords.length === 0) {
              activity.invite[userWithAccess.name] = userWithAccess.accessRecords;
              userWithAccess.accessRecords.forEach((uac) => accessRecordsToUpsert.add({ sobjectType: "sfsp__SalesUserAccess__c", ...uac }));
            } else {
              const currentAccessRecords = userWithAccess.accessRecords;
              currentAccessRecords.forEach((currentUac) => {
                let accessChanged = true;
                existingAccessRecords.forEach((existingUac) => {
                  if (existingUac.sfsp__AccessLevel__c === currentUac.sfsp__AccessLevel__c && existingUac.sfsp__SalesNode__c === currentUac.sfsp__SalesNode__c)
                    accessChanged = false;
                });
                if (accessChanged) {
                  activity.edit[userWithAccess.name] = activity.edit[userWithAccess.name] || [];
                  activity.edit[userWithAccess.name].push(currentUac);
                  accessRecordsToUpsert.add({ sobjectType: "sfsp__SalesUserAccess__c", ...currentUac });
                }
              });
            }
          });
          await Promise.all([
            SPM.Utils.CRM.upsert({ records: accessRecordsToUpsert }),
            SPM.Utils.Rest.invoke("Delete", { ids: Array.from(accessRecordsToDelete).map((ua) => ua.Id) })
          ]);
          const toasts = { invitedToastMsg: "", updatedToastMsg: "", removedToastMsg: "" };
          const usersInvited = Object.keys(activity.invite);
          if (usersInvited.length > 0) {
            if (usersInvited.length === 1) {
              toasts.invitedToastMsg = `"${usersInvited[0]}" was invited to the plan.`;
            } else {
              toasts.invitedToastMsg = `(${usersInvited.length}) users were invited to the plan.`;
            }
            for (const userName of usersInvited) {
              const accessRecords = activity.invite[userName];
              await SPM.Utils.Async.forEachParallel(accessRecords, async (uac) => {
                var _a2;
                await this.postChatter("invite", uac.sfsp__User__c, ((_a2 = uac.sfsp__SalesNode__r) == null ? void 0 : _a2.Name) || "All Org");
              }, 5);
              const accessRecordDescriptions = accessRecords.map((uac) => {
                var _a2;
                return `Added ${userName} as ${uac.sfsp__AccessLevel__c} to ${((_a2 = uac.sfsp__SalesNode__r) == null ? void 0 : _a2.Name) || "All Org"}`;
              });
              const activityRecords = accessRecordDescriptions.map((description) => ({
                description,
                name: this.$store.plan.Name,
                parentId: this.$store.plan.Id,
                recordType: ActivityRecordTypes.PLAN,
                subtype: ActivitySubtypes.CREATE,
                type: ActivityTypes.SHARING
              }));
              await insertActivities(activityRecords);
            }
            await SPM.Utils.Async.forEachParallel(Object.values(usersInvited), async (user) => {
              await this.$store.savePreferences(user.id);
            }, 5);
          }
          const usersUpdated = Object.keys(activity.edit);
          if (usersUpdated.length > 0) {
            if (usersUpdated.length === 1) {
              toasts.updatedToastMsg = `Access for "${usersUpdated[0]}" was updated.`;
            } else {
              toasts.updatedToastMsg = `Access was updated for (${usersUpdated.length}) users.`;
            }
            await SPM.Utils.Async.forEachParallel(usersUpdated, async (userName) => {
              await this.postChatter("update", activity.edit[userName][0].sfsp__User__c);
              const accessRecords = activity.edit[userName];
              const accessRecordDescriptions = accessRecords.map((uac) => {
                var _a2;
                return `Changed ${userName}'s access to ${((_a2 = uac.sfsp__SalesNode__r) == null ? void 0 : _a2.Name) || "All Org"}`;
              });
              const activityRecords = accessRecordDescriptions.map((description) => ({
                description,
                name: this.$store.plan.Name,
                parentId: this.$store.plan.Id,
                recordType: ActivityRecordTypes.PLAN,
                subtype: ActivitySubtypes.UPDATE,
                type: ActivityTypes.SHARING
              }));
              await insertActivities(activityRecords);
            }, 5);
            await SPM.Utils.Async.forEachParallel(Object.values(usersUpdated), async (user) => {
              await this.$store.savePreferences(user.id);
            }, 5);
          }
          const usersRemoved = Object.keys(activity.remove);
          if (usersRemoved.length > 0) {
            if (usersRemoved.length === 1) {
              toasts.removedToastMsg = `"${usersRemoved[0]}" was removed from the plan.`;
            } else {
              toasts.removedToastMsg = `(${usersRemoved.length}) users were removed from the plan.`;
            }
            await SPM.Utils.Async.forEachParallel(usersRemoved, async (userName) => {
              await this.postChatter("remove", activity.remove[userName][0].sfsp__User__c);
              const accessRecords = activity.remove[userName];
              const accessRecordDescriptions = accessRecords.map((uac) => {
                var _a2;
                return `Removed ${uac.sfsp__User__r.Name}'s access to ${((_a2 = uac.sfsp__SalesNode__r) == null ? void 0 : _a2.Name) || "All Org"}`;
              });
              const activityRecords = accessRecordDescriptions.map((description) => ({
                description,
                name: this.$store.plan.Name,
                parentId: this.$store.plan.Id,
                recordType: ActivityRecordTypes.PLAN,
                subtype: ActivitySubtypes.DELETE,
                type: ActivityTypes.SHARING
              }));
              await insertActivities(activityRecords);
            }, 5);
          }
          const sharedWithRecords = [];
          if (Object.keys(usersMap).length) {
            for (const key in usersMap) {
              const user = usersMap[key];
              for (const record of user.accessRecords) {
                if (!this.availableAdminIds.has(user.id) && !this.availableManagerIds.has(user.id)) {
                  sharedWithRecords.push({
                    name: user.name,
                    userId: record.sfsp__User__c,
                    nodeId: record.sfsp__SalesNode__c || "All Org"
                  });
                }
              }
            }
          }
          this.config.callback({ ...toasts, sharedWithRecords });
          if (!!activity.remove[SPM.currentUser.Name]) {
            window.location.reload();
          } else {
            this.$emit("close");
            this.loading = false;
          }
        }
      }
    };
    const _hoisted_1$i = { class: "slds-grid" };
    const _hoisted_2$i = { class: "slds-col_bump-left" };
    function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_ManagerUsers = resolveComponent("ManagerUsers");
      const _component_BranchUsers = resolveComponent("BranchUsers");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "share-branch",
        ref: "modal",
        title: $options.modalTitle,
        size: "medium",
        detach: "",
        onClose: _cache[1] || (_cache[1] = ($event) => $data.loading ? () => {
        } : _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
          $data.page === "managerUsers" ? (openBlock(), createBlock(_component_ManagerUsers, {
            key: 1,
            users: $data.users,
            availableAdminIds: $data.availableAdminIds,
            availableManagerIds: $data.availableManagerIds,
            onAddUser: $options.addUser,
            onRemoveUser: $options.removeUser,
            onCancelAndBack: $options.cancelAndBack
          }, null, 8, ["users", "availableAdminIds", "availableManagerIds", "onAddUser", "onRemoveUser", "onCancelAndBack"])) : $data.page === "branchUsers" ? (openBlock(), createBlock(_component_BranchUsers, {
            key: 2,
            users: $data.users,
            availableAdminIds: $data.availableAdminIds,
            availableManagerIds: $data.availableManagerIds,
            availableStandardIds: $data.availableStandardIds,
            ancestorIds: $data.ancestorIds,
            branchContext: $data.branchContext,
            onAddUser: $options.addUser,
            onRemoveUser: $options.removeUser,
            onEditUser: $options.editUser,
            onChangePage: _cache[0] || (_cache[0] = (newPage) => $data.page = newPage)
          }, null, 8, ["users", "availableAdminIds", "availableManagerIds", "availableStandardIds", "ancestorIds", "branchContext", "onAddUser", "onRemoveUser", "onEditUser"])) : createCommentVNode("", true)
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", null, [
            createBaseVNode("div", _hoisted_1$i, [
              createBaseVNode("div", _hoisted_2$i, [
                createVNode(_component_SLDSButton, {
                  class: "slds-button slds-button_neutral",
                  disabled: $data.loading,
                  onClick: $options.cancelAndBack
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString($data.page === "branchUsers" ? "Cancel" : "Cancel & Back"), 1)
                  ]),
                  _: 1
                }, 8, ["disabled", "onClick"]),
                createVNode(_component_SLDSButton, {
                  class: "slds-button slds-button_brand",
                  disabled: !$options.changesMade || $data.loading,
                  onClick: $options.save
                }, {
                  default: withCtx(() => [
                    createTextVNode("Save")
                  ]),
                  _: 1
                }, 8, ["disabled", "onClick"])
              ])
            ])
          ])
        ]),
        _: 1
      }, 8, ["title"]);
    }
    const BranchShareModal = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$j], ["__scopeId", "data-v-fb75cafb"]]);
    const _sfc_main$i = {
      name: "SalesNodeModal",
      components: {
        Button: SLDSButton,
        Icon,
        Card,
        Modal,
        Spinner,
        TextInput,
        ProgressIndicator,
        Tree: Tree$1,
        DuelingPicklist,
        DataTable
      },
      props: ["config"],
      data() {
        return {
          loadingMsg: "Loading Hierarchy...",
          stepIndex: 0,
          steps: [
            { id: 1, label: "Step 1" },
            { id: 2, label: "Step 2" },
            { id: 3, label: "Step 3" }
          ],
          scenario: {
            sobjectType: "SalesPlan__c",
            Name: "",
            sfsp__Parent__c: this.config.planId,
            sfsp__Description__c: ""
          },
          nodeMap: {
            "All Org": {}
          },
          hierarchy: {
            id: "All Org",
            name: "All Org",
            loaded: false,
            expanded: false,
            selected: "none",
            children: []
          },
          allocationMetrics: [],
          assignmentObjects: [],
          referenceFieldRows: []
        };
      },
      computed: {
        previousLabel() {
          return this.stepIndex === 0 ? "Cancel" : "Previous";
        },
        nextLabel() {
          return this.stepIndex === this.steps.length - 1 ? "Save" : "Next";
        }
      },
      async mounted() {
        SPM.Components.ScenarioModal = this;
        const plan = {
          ...SPM.Utils.Plan.defaults(),
          ...(await SPM.Utils.Apex.invoke("Query", [`
                SELECT
                    Id, Name,
                    (
                        SELECT Id, Name, sfsp__Type__c FROM sfsp__SalesMetrics__r
                    ),
                    (
                        SELECT Id, Name, sfsp__Label__c, sfsp__ReferenceFields__c FROM sfsp__SalesAssignmentObjects__r
                    ),
                    (
                        SELECT
                            Id, sfsp__SalesMetric__c, ${Array(12).fill().map((v, i2) => `sfsp__Target_Month${i2 + 1}__c`).join(", ")}
                        FROM sfsp__SalesNodeMetrics__r
                        WHERE sfsp__SalesNode__c = ''
                    )
                FROM sfsp__SalesPlan__c
                WHERE Id = '${this.config.planId}'
            `]))[0]
        };
        this.allocationMetrics = plan.sfsp__SalesMetrics__r.map((m) => ({
          id: m.Id,
          label: m.Name,
          type: m.sfsp__Type__c,
          active: false,
          selected: false
        }));
        this.assignmentObjects = plan.sfsp__SalesAssignmentObjects__r.map((o) => ({
          id: o.Name,
          label: o.sfsp__Label__c,
          referenceFields: JSON.parse(o.sfsp__ReferenceFields__c),
          active: false,
          selected: false
        }));
        this.nodeMap["All Org"].hierarchyNode = this.hierarchy;
        this.expandNode(this.hierarchy, true);
        this.loadingMsg = "";
      },
      methods: {
        previousStep() {
          if (this.stepIndex === 0)
            this.$emit("close");
          else
            this.$refs.progressIndicator.previous();
        },
        nextStep() {
          if (this.stepIndex === this.steps.length - 1)
            return this.save();
          if (this.stepIndex === 1) {
            this.referenceFieldRows = this.assignmentObjects.reduce((arr, object) => {
              if (object.selected) {
                arr.push(...object.referenceFields.map((field) => ({
                  id: field.name,
                  selected: false,
                  data: [
                    field.label,
                    object.label
                  ]
                })));
              }
              return arr;
            }, []);
          }
          this.$refs.progressIndicator.next();
        },
        async expandNode(node, isRoot) {
          if (!node.loaded)
            await this.loadNodes([node.id], isRoot);
          node.expanded = !node.expanded;
        },
        async loadNodes(nodeIds, isRoot) {
          nodeIds.forEach((nodeId2) => this.nodeMap[nodeId2].hierarchyNode.loading = true);
          await SPM.Utils.Node.loadScope({
            planId: this.config.planId,
            nodeMap: this.nodeMap,
            parentNodeIds: isRoot ? [""] : nodeIds,
            metrics: this.allocationMetrics.map((m) => ({ Id: m.id }))
          });
          nodeIds.forEach((nodeId2) => {
            const parentNode = this.nodeMap[nodeId2];
            parentNode.children.forEach((childNode) => {
              const childHierarchyNode = {
                id: childNode.id,
                name: childNode.name,
                parent: parentNode.hierarchyNode,
                loaded: false,
                expanded: false,
                selected: parentNode.hierarchyNode.selected === "none" ? "none" : "parent",
                children: []
              };
              parentNode.hierarchyNode.children.push(childHierarchyNode);
              this.nodeMap[childNode.id].hierarchyNode = childHierarchyNode;
            });
            parentNode.hierarchyNode.loading = false;
            parentNode.hierarchyNode.loaded = true;
          });
        },
        clearHierarchySelection() {
          let nodesToUpdate = [this.hierarchy];
          while (nodesToUpdate.length) {
            const nextNodes = [];
            nodesToUpdate.forEach((n) => {
              n.selected = "none";
              nextNodes.push(...n.children || []);
            });
            nodesToUpdate = nextNodes;
          }
        },
        async save() {
          this.loadingMsg = "Creating Scenario...";
          this.scenario.Id = (await SPM.Utils.Apex.invoke("InsertSObjects", [[this.scenario], true]))[0].Id;
          this.loadingMsg = "Creating Metrics...";
          const scenarioMetrics = this.allocationMetrics.filter((m) => m.selected).map((m) => ({
            sobjectType: "sfsp__SalesMetric__c",
            Name: m.label,
            sfsp__Type__c: m.type,
            sfsp__SalesPlan__c: this.scenario.Id,
            sfsp__SalesPlanMetric__c: m.id
          }));
          await SPM.Utils.CRM.upsert({ records: scenarioMetrics });
          this.loadingMsg = "Creating Assignment Objects...";
          const scenarioAssignmentObjects = this.assignmentObjects.filter((o) => o.selected).map((o) => ({
            sobjectType: "sfsp__SalesAssignmentObject__c",
            Name: o.id,
            sfsp__SalesPlan__c: this.scenario.Id,
            sfsp__Label__c: o.label,
            sfsp__ReferenceFields__c: JSON.stringify(o.referenceFields.filter((field) => this.referenceFieldRows.find((row) => row.selected && row.id === `${o.id}.${field.name}`)))
          }));
          await SPM.Utils.CRM.upsert({ records: scenarioAssignmentObjects });
          const scenarioNodes = [];
          let currentLevelNodes = this.hierarchy.children;
          let currentLevelIndex = 0;
          while (currentLevelNodes.length) {
            this.loadingMsg = `Creating Hierarchy...L${++currentLevelIndex}`;
            const nodesToCreate = [];
            const nodesToLoad = [];
            currentLevelNodes.forEach((node) => {
              var _a2, _b;
              if (!["all", "parent"].includes(node.selected))
                return;
              node.scenarioNode = {
                sobjectType: "sfsp__SalesNode__c",
                Name: node.name,
                sfsp__SalesPlan__c: this.scenario.Id,
                sfsp__Parent__c: ((_b = (_a2 = node == null ? void 0 : node.parent) == null ? void 0 : _a2.scenarioNode) == null ? void 0 : _b.Id) || "",
                sfsp__SalesPlanNode__c: node.id,
                sfsp__Priority__c: node.parent.children.findIndex((n) => n === node) + 1
              };
              nodesToCreate.push(node.scenarioNode);
              if (!node.loaded)
                nodesToLoad.push(node);
            });
            await SPM.Utils.CRM.upsert({
              records: nodesToCreate,
              onProgress: (percent) => this.loadingMsg = `Creating Hierarchy...L${currentLevelIndex} ${percent}%`
            });
            scenarioNodes.push(...nodesToCreate);
            await this.loadNodes(nodesToLoad.map((n) => n.id));
            currentLevelNodes = currentLevelNodes.reduce((arr, node) => arr.concat(node.children), []);
          }
          const scenarioNodeMetrics = [];
          scenarioNodes.forEach((node) => {
            scenarioMetrics.forEach((metric) => {
              scenarioNodeMetrics.push({
                ...SPM.Utils.NodeMetric.Defaults,
                ...this.nodeMap[node.sfsp__SalesPlanNode__c].metrics.find((m) => m.sfsp__SalesMetric__c === metric.sfsp__SalesPlanMetric__c) || {},
                Id: null,
                sfsp__SalesMetric__c: metric.Id,
                sfsp__SalesNode__c: node.Id
              });
            });
          });
          await SPM.Utils.CRM.upsert({
            records: scenarioNodeMetrics,
            onProgress: (percent) => this.loadingMsg = `Creating Node Metrics...${percent}%`
          });
          this.$mitt.emit("toast", { message: `Created ${this.scenario.Name}` });
          this.$emit("close");
        }
      }
    };
    const _hoisted_1$h = {
      key: 1,
      class: "slds-grid slds-align_spread"
    };
    const _hoisted_2$h = { class: "slds-col slds-size_1-of-2 slds-p-horizontal_small" };
    const _hoisted_3$e = { class: "slds-col slds-size_1-of-2 slds-p-horizontal_small slds-grid slds-grid_vertical" };
    const _hoisted_4$d = {
      class: "slds-grid",
      style: { "position": "relative" }
    };
    const _hoisted_5$d = /* @__PURE__ */ createBaseVNode("label", {
      class: "slds-form-element__label",
      for: "unique-id-of-input"
    }, "Hierarchy Scope", -1);
    const _hoisted_6$c = { class: "spm-box slds-grow" };
    const _hoisted_7$9 = { key: 2 };
    const _hoisted_8$9 = { key: 3 };
    const _hoisted_9$7 = { class: "slds-grid slds-grid_align-spread" };
    function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_TextInput = resolveComponent("TextInput");
      const _component_Tree = resolveComponent("Tree");
      const _component_DuelingPicklist = resolveComponent("DuelingPicklist");
      const _component_Icon = resolveComponent("Icon");
      const _component_DataTable = resolveComponent("DataTable");
      const _component_Card = resolveComponent("Card");
      const _component_Button = resolveComponent("Button");
      const _component_ProgressIndicator = resolveComponent("ProgressIndicator");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        ref: "modal",
        title: "New Scenario",
        size: "small",
        detach: "",
        onClose: _cache[4] || (_cache[4] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
            description: withCtx(() => [
              createBaseVNode("div", null, toDisplayString($data.loadingMsg), 1)
            ]),
            _: 1
          })) : createCommentVNode("", true),
          $data.stepIndex === 0 ? (openBlock(), createElementBlock("div", _hoisted_1$h, [
            createBaseVNode("div", _hoisted_2$h, [
              createVNode(_component_TextInput, {
                modelValue: $data.scenario.Name,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.scenario.Name = $event),
                labels: { name: "Scenario Name" }
              }, null, 8, ["modelValue"]),
              createVNode(_component_TextInput, {
                modelValue: $data.scenario.sfsp__Description__c,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.scenario.sfsp__Description__c = $event),
                labels: { name: "Description" },
                useTextArea: ""
              }, null, 8, ["modelValue"])
            ]),
            createBaseVNode("div", _hoisted_3$e, [
              createBaseVNode("div", _hoisted_4$d, [
                _hoisted_5$d,
                createBaseVNode("a", {
                  class: "",
                  href: "#",
                  style: { "position": "absolute", "bottom": "0", "right": "0" },
                  onClick: _cache[2] || (_cache[2] = (...args) => $options.clearHierarchySelection && $options.clearHierarchySelection(...args))
                }, "Clear Selection")
              ]),
              createBaseVNode("div", _hoisted_6$c, [
                createVNode(_component_Tree, {
                  model: $data.hierarchy,
                  lazy: "",
                  selectable: "",
                  onNodeExpandClick: $options.expandNode
                }, null, 8, ["model", "onNodeExpandClick"])
              ])
            ])
          ])) : createCommentVNode("", true),
          $data.stepIndex === 1 ? (openBlock(), createElementBlock("div", _hoisted_7$9, [
            createVNode(_component_DuelingPicklist, {
              class: "slds-m-bottom_large",
              fields: $data.allocationMetrics,
              labels: { name: "Allocation Metrics" }
            }, null, 8, ["fields"]),
            createVNode(_component_DuelingPicklist, {
              fields: $data.assignmentObjects,
              labels: { name: "Assignment Objects" }
            }, null, 8, ["fields"])
          ])) : createCommentVNode("", true),
          $data.stepIndex === 2 ? (openBlock(), createElementBlock("div", _hoisted_8$9, [
            createVNode(_component_Card, {
              title: "Reference Fields",
              class: "slds-card_boundary"
            }, {
              icon: withCtx(() => [
                createVNode(_component_Icon, {
                  category: "standard",
                  name: "data_mapping",
                  assistiveText: "Reference Fields Icon"
                })
              ]),
              body: withCtx(() => [
                createVNode(_component_DataTable, {
                  columns: [
                    { id: "apiName", name: "Reference Field API Name" },
                    { id: "relatedTo", name: "Related To" }
                  ],
                  rows: $data.referenceFieldRows,
                  bordered: "",
                  multiselectable: "",
                  selectAll: ""
                }, null, 8, ["rows"])
              ]),
              _: 1
            })
          ])) : createCommentVNode("", true)
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_9$7, [
            createVNode(_component_Button, {
              class: "slds-button slds-button_neutral",
              onClick: $options.previousStep
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString($options.previousLabel), 1)
              ]),
              _: 1
            }, 8, ["onClick"]),
            createVNode(_component_ProgressIndicator, {
              ref: "progressIndicator",
              steps: $data.steps,
              onStepChange: _cache[3] || (_cache[3] = (v) => $data.stepIndex = v)
            }, null, 8, ["steps"]),
            createVNode(_component_Button, {
              class: "slds-button slds-button_brand",
              onClick: $options.nextStep
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString($options.nextLabel), 1)
              ]),
              _: 1
            }, 8, ["onClick"])
          ])
        ]),
        _: 1
      }, 512);
    }
    const ScenarioModal = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$i]]);
    const _sfc_main$h = {
      name: "SalesPlanModal",
      components: {
        SLDSButton,
        ButtonIcon,
        Layout,
        LayoutItem,
        Modal,
        Picklist,
        Popover,
        Spinner,
        TextInput,
        Checkbox
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          v$: useVuelidate(),
          loading: false,
          loadingMsg: "Loading...",
          original: {},
          plan: {
            sobjectType: "sfsp__SalesPlan__c",
            Name: "",
            sfsp__Period__c: "",
            sfsp__Description__c: "",
            sfsp__Type__c: ""
          },
          isSegmentationPlan: this.config.isAdvanced,
          error: {
            renderPopover: false,
            renderPopoverBindTo: null,
            renderButtonIcon: false
          },
          nameValidationSet: /* @__PURE__ */ new Set(),
          // etm
          territoryModels: [],
          territoryModelId: ""
        };
      },
      computed: {
        isCreate() {
          return !this.isEdit;
        },
        isEdit() {
          var _a2, _b;
          return ((_b = (_a2 = this.$props) == null ? void 0 : _a2.config) == null ? void 0 : _b.edit) === true;
        },
        computedSubtype() {
          return this.isEdit ? ActivitySubtypes.UPDATE : ActivitySubtypes.CREATE;
        },
        computedTitle() {
          return this.$props.config.title || (this.isEdit ? "Edit Sales Plan" : "New Sales Plan");
        },
        changesDetected() {
          return Object.keys(this.plan).some((key) => this.plan[key] !== this.original[key]);
        },
        periods() {
          const periods = this.$store.periods.toReversed().map((period) => {
            const dates = `${this.$F("DateTime", new Date(period.StartDate), { month: "short", year: "numeric" })} - ${this.$F("DateTime", new Date(period.EndDate), { month: "short", year: "numeric" })}`;
            const title = `${period.FullyQualifiedLabel} (${dates})`;
            return {
              title,
              label: period.FullyQualifiedLabel,
              dates,
              id: period.Id
            };
          });
          return periods;
        }
      },
      watch: {
        "v$.$invalid": {
          handler(value) {
            if (!value) {
              this.error = {
                renderPopover: false,
                renderPopoverBindTo: null,
                renderButtonIcon: false
              };
            }
          }
        }
      },
      validations() {
        return {
          territoryModelId: {
            required: common.withMessage("You must select a Territory Model.", (v) => this.config.template !== "Enterprise Territory Management" || !!v)
          },
          plan: {
            Name: {
              required: common.withMessage("You must name your Sales Plan.", required),
              maxLength: common.withMessage(({ $model }) => `Must be 80 characters or less. (${$model.length})`, maxLength(80)),
              duplicate: common.withMessage("Plan names must be unique for a given fiscal period.", (name) => !this.plan.sfsp__Period__c || !this.nameValidationSet.has(name + this.plan.sfsp__Period__c))
            },
            sfsp__Description__c: {
              maxLength: common.withMessage(({ $model }) => `Must be 255 characters or less. (${$model.length})`, maxLength(255))
            }
          }
        };
      },
      async created() {
        var _a2;
        const allPlans = await SPM.Utils.Apex.invoke("Query", ["SELECT Id, Name, sfsp__Period__c FROM sfsp__SalesPlan__c WHERE sfsp__Status__c != 'Deleted'"]);
        allPlans.forEach((p2) => {
          if (p2.Id !== this.$store.plan.Id) {
            this.nameValidationSet.add(p2.Name + p2.sfsp__Period__c);
          }
        });
        if (this.$props.config.edit) {
          const {
            Id,
            Name,
            sfsp__Period__c,
            sfsp__Description__c
          } = this.$store.plan;
          this.plan = {
            Id,
            Name,
            sfsp__Period__c: this.periods.find((p2) => p2.id === sfsp__Period__c) ? sfsp__Period__c : "",
            sfsp__Description__c
          };
          this.original = { ...this.plan };
          this.v$.$validate();
        } else {
          const periodId = (_a2 = this.$store.periods.find((p2) => new Date(p2.StartDate).getUTCFullYear() === (/* @__PURE__ */ new Date()).getUTCFullYear())) == null ? void 0 : _a2.Id;
          if (periodId)
            this.plan.sfsp__Period__c = periodId;
        }
      },
      async mounted() {
        SPM.Components.SalesPlanModal = this;
        if (this.config.template === "Enterprise Territory Management") {
          this.territoryModels = await SPM.Utils.Apex.invoke("Query", ["SELECT Id, Name, State FROM Territory2Model WHERE State IN ('Planning', 'Active')"]);
        }
      },
      methods: {
        async focusElementWithError($error) {
          this.error.renderPopover = false;
          await this.$nextTick();
          this.$refs[$error.$propertyPath].focus();
        },
        async save() {
          if (this.v$.$invalid) {
            this.v$.$touch();
            this.error.renderButtonIcon = true;
            await this.$nextTick();
            this.error.renderPopoverBindTo = this.$refs.errorButtonIcon.$el;
            this.error.renderPopover = true;
            return;
          }
          try {
            this.loading = true;
            this.loadingMsg = "Saving...";
            this.plan.sfsp__Owner__c = SPM.currentUser.Id;
            this.plan.sfsp__Type__c = this.isSegmentationPlan ? "Segmentation" : "";
            const [response] = await SPM.Utils.Apex.invoke("UpsertSObjects", [[this.plan], true]);
            await insertActivities([{
              description: this.buildActivityRecordDescription(),
              name: this.plan.Name,
              parentId: response.Id,
              recordType: ActivityRecordTypes.PLAN,
              subtype: this.computedSubtype,
              type: ActivityTypes.MANAGEMENT
            }]);
            if (this.isCreate) {
              this.$props.config.callback({ plan: response, territoryModelId: this.territoryModelId });
            } else {
              this.$props.config.callback({ plan: this.plan });
            }
            this.$emit("close");
          } catch (ex) {
            throw ex;
          } finally {
            this.loading = false;
          }
        },
        buildActivityRecordDescription() {
          if (this.isCreate) {
            return this.plan.sfsp__Description__c;
          }
          const changes = [];
          if (this.original.Name !== this.plan.Name) {
            changes.push("Name");
          }
          if (this.original.sfsp__Period__c !== this.plan.sfsp__Period__c) {
            changes.push("Fiscal Period");
          }
          if (this.original.sfsp__Description__c !== this.plan.sfsp__Description__c) {
            changes.push("Description");
          }
          return `Changed the following fields: ${changes.join(", ")}.`;
        }
      }
    };
    const _hoisted_1$g = /* @__PURE__ */ createBaseVNode("span", null, "We hit a snag.", -1);
    const _hoisted_2$g = /* @__PURE__ */ createBaseVNode("div", { style: { "margin-bottom": "0.25rem", "margin-left": "-0.5rem", "font-weight": "600" } }, " Review the following fields ", -1);
    const _hoisted_3$d = {
      class: "slds-m-left_medium",
      style: { "list-style": "disc" }
    };
    const _hoisted_4$c = ["onClick"];
    const _hoisted_5$c = { class: "slds-media__body" };
    const _hoisted_6$b = ["title"];
    const _hoisted_7$8 = { class: "slds-listbox__option-meta" };
    const _hoisted_8$8 = { class: "slds-grid" };
    const _hoisted_9$6 = { class: "slds-col_bump-left" };
    function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Popover = resolveComponent("Popover");
      const _component_TextInput = resolveComponent("TextInput");
      const _component_LayoutItem = resolveComponent("LayoutItem");
      const _component_Picklist = resolveComponent("Picklist");
      const _component_Layout = resolveComponent("Layout");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "new-sales-plan-modal",
        title: $options.computedTitle,
        size: "small",
        onClose: _cache[7] || (_cache[7] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
            description: withCtx(() => [
              createTextVNode(toDisplayString($data.loadingMsg), 1)
            ]),
            _: 1
          })) : createCommentVNode("", true),
          $data.error.renderPopover ? (openBlock(), createBlock(_component_Popover, {
            key: 1,
            bindTo: $data.error.renderPopoverBindTo,
            theme: "error",
            width: "medium",
            position: "fixed",
            onClose: _cache[0] || (_cache[0] = ($event) => $data.error.renderPopover = false)
          }, {
            header: withCtx(() => [
              _hoisted_1$g
            ]),
            content: withCtx(() => [
              _hoisted_2$g,
              createBaseVNode("ul", _hoisted_3$d, [
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.v$.$errors, ($error) => {
                  return openBlock(), createElementBlock("li", {
                    key: $error.$uid,
                    class: "slds-text-link",
                    onClick: ($event) => $options.focusElementWithError($error)
                  }, toDisplayString($error.$message), 9, _hoisted_4$c);
                }), 128))
              ])
            ]),
            _: 1
          }, 8, ["bindTo"])) : createCommentVNode("", true),
          createVNode(_component_Layout, { class: "slds-gutters_x-small" }, {
            default: withCtx(() => [
              createVNode(_component_LayoutItem, {
                size: "6",
                class: "slds-col"
              }, {
                default: withCtx(() => [
                  createVNode(_component_TextInput, {
                    id: "sales-plan-name",
                    ref: "plan.Name",
                    modelValue: $data.v$.plan.Name.$model,
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.v$.plan.Name.$model = $event),
                    labels: {
                      name: "Sales Plan Name"
                    },
                    required: "",
                    errors: _ctx.$getErrorsByField($data.v$.plan.Name)
                  }, null, 8, ["modelValue", "errors"])
                ]),
                _: 1
              }),
              createVNode(_component_LayoutItem, {
                size: "6",
                class: "slds-col"
              }, {
                default: withCtx(() => [
                  createVNode(_component_Picklist, {
                    id: "fiscal-period",
                    ref: "plan.sfsp__Period__c",
                    modelValue: $data.plan.sfsp__Period__c,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.plan.sfsp__Period__c = $event),
                    options: $options.periods,
                    detach: "",
                    filterable: "",
                    labels: {
                      name: "Fiscal Period"
                    }
                  }, {
                    option: withCtx(({ option }) => [
                      createBaseVNode("span", _hoisted_5$c, [
                        createBaseVNode("span", {
                          class: "slds-truncate",
                          title: option.label
                        }, toDisplayString(option.label), 9, _hoisted_6$b),
                        createBaseVNode("span", _hoisted_7$8, toDisplayString(option.dates), 1)
                      ])
                    ]),
                    _: 1
                  }, 8, ["modelValue", "options"])
                ]),
                _: 1
              })
            ]),
            _: 1
          }),
          createVNode(_component_Layout, { class: "slds-m-top_x-small" }, {
            default: withCtx(() => [
              createVNode(_component_LayoutItem, { size: "12" }, {
                default: withCtx(() => [
                  createVNode(_component_TextInput, {
                    id: "sales-plan-description",
                    ref: "plan.sfsp__Description__c",
                    modelValue: $data.v$.plan.sfsp__Description__c.$model,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.v$.plan.sfsp__Description__c.$model = $event),
                    useTextArea: "",
                    labels: {
                      name: "Description"
                    },
                    errors: _ctx.$getErrorsByField($data.v$.plan.sfsp__Description__c)
                  }, null, 8, ["modelValue", "errors"])
                ]),
                _: 1
              })
            ]),
            _: 1
          }),
          $props.config.template === "Enterprise Territory Management" ? (openBlock(), createBlock(_component_Layout, {
            key: 2,
            class: "slds-m-top_x-small"
          }, {
            default: withCtx(() => [
              createVNode(_component_LayoutItem, { size: "12" }, {
                default: withCtx(() => [
                  createVNode(_component_Picklist, {
                    id: "etm-model",
                    modelValue: $data.territoryModelId,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.territoryModelId = $event),
                    labels: { name: "Territory Management Model" },
                    options: $data.territoryModels,
                    idKey: "Id",
                    titleKey: "Name",
                    detach: "",
                    filterable: "",
                    required: "",
                    errors: _ctx.$getErrorsByField($data.v$.territoryModelId)
                  }, null, 8, ["modelValue", "options", "errors"])
                ]),
                _: 1
              })
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_8$8, [
            createBaseVNode("div", _hoisted_9$6, [
              $data.error.renderButtonIcon ? (openBlock(), createBlock(_component_ButtonIcon, {
                key: 0,
                ref: "errorButtonIcon",
                assistiveText: "Error",
                title: "Erorr",
                iconCategory: "utility",
                iconName: "error",
                iconSize: "large",
                class: "slds-button_icon-error",
                onClick: _cache[5] || (_cache[5] = ($event) => $data.error.renderPopover = !$data.error.renderPopover)
              }, null, 512)) : createCommentVNode("", true),
              createVNode(_component_SLDSButton, {
                class: "slds-button slds-button_neutral",
                onClick: _cache[6] || (_cache[6] = ($event) => _ctx.$emit("close"))
              }, {
                default: withCtx(() => [
                  createTextVNode("Cancel")
                ]),
                _: 1
              }),
              createVNode(_component_SLDSButton, {
                class: "slds-button slds-button_brand",
                disabled: !$options.changesDetected || $data.loading,
                onClick: $options.save
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString($options.isEdit ? "Save" : "Create"), 1)
                ]),
                _: 1
              }, 8, ["disabled", "onClick"])
            ])
          ])
        ]),
        _: 1
      }, 8, ["title"]);
    }
    const SalesPlanModal = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$h]]);
    const GenericConfirmDeleteModal_vue_vue_type_style_index_0_scoped_e616adac_lang = "";
    const _sfc_main$g = {
      name: "GenericConfirmDeleteModal",
      components: {
        SLDSButton,
        Modal,
        Spinner
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          loading: false,
          loadingMsg: "Loading..."
        };
      },
      methods: {
        async yes() {
          try {
            this.loadingMsg = this.$props.config.loadingMsg;
            this.loading = true;
            const { success, message } = await this.$props.config.delete();
            if (success) {
              this.$props.config.callback();
              this.$emit("close");
            } else {
              this.$mitt.emit("toast", { message, state: "error" });
            }
          } catch (ex) {
            throw ex;
          } finally {
            this.loading = false;
          }
        }
      }
    };
    const _hoisted_1$f = ["innerHTML"];
    const _hoisted_2$f = { class: "slds-grid" };
    const _hoisted_3$c = { class: "slds-col_bump-left" };
    function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "confirm-delete-modal",
        title: _ctx.$props.config.title,
        size: "base",
        onClose: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          createBaseVNode("div", {
            class: normalizeClass({ "generic-loading-spinner-msg": $data.loading })
          }, [
            $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
              description: withCtx(() => [
                createTextVNode(toDisplayString($data.loadingMsg), 1)
              ]),
              _: 1
            })) : (openBlock(), createElementBlock("div", {
              key: 1,
              innerHTML: _ctx.$props.config.textContent
            }, null, 8, _hoisted_1$f))
          ], 2)
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_2$f, [
            createBaseVNode("div", _hoisted_3$c, [
              createVNode(_component_SLDSButton, {
                class: "slds-button",
                variant: "neutral",
                disabled: $data.loading,
                onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(_ctx.$props.config.noLabel || "No"), 1)
                ]),
                _: 1
              }, 8, ["disabled"]),
              createVNode(_component_SLDSButton, {
                class: "slds-button",
                variant: "destructive",
                disabled: $data.loading,
                onClick: $options.yes
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(_ctx.$props.config.yesLabel || "Yes"), 1)
                ]),
                _: 1
              }, 8, ["disabled", "onClick"])
            ])
          ])
        ]),
        _: 1
      }, 8, ["title"]);
    }
    const GenericConfirmDeleteModal = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$g], ["__scopeId", "data-v-e616adac"]]);
    const _sfc_main$f = {
      name: "ExportToCSVModal",
      components: {
        SLDSButton,
        Modal,
        Spinner
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          ready: false,
          loadingMsg: "Loading...",
          nodeCount: 0
        };
      },
      computed: {
        nodes() {
          return this.ready ? SPM.Utils.Node.getDescendants({ nodes: [this.config.node] }) : 0;
        },
        exportOptions() {
          return [
            { id: "hierarchy", label: "Export hierarchy", type: "Hierarchy" },
            ...this.$store.plan.sfsp__SalesMetrics__r.map((m) => ({ id: m.Id, label: `Export ${m.Name}`, type: "Allocation Metric" })),
            ...this.$store.boundaryObjects.map((o) => ({ id: o.id, label: `Export ${o.label}`, type: "Boundary Object" })),
            ...this.$store.assignmentObjects.filter((a) => {
              var _a2;
              return (_a2 = a.recordsDataset) == null ? void 0 : _a2.dimensions;
            }).map((o) => ({ id: o.id, label: `Export ${o.label}`, type: "Assignment Object" }))
          ];
        }
      },
      async mounted() {
        await this.$store.loadLevel({ level: this.$store.maxLevel, rootNode: this.config.node, onProgress: (msg) => this.loadingMsg = msg });
        this.loadingMsg = "";
        this.ready = true;
      },
      methods: {
        async download({ type, id, label }) {
          this.loadingMsg = `${label}...`;
          const rows = [];
          switch (type) {
            case "Hierarchy":
              const assignmentObjects = this.$store.assignmentObjects.filter((a) => {
                var _a2;
                return (_a2 = a.recordsDataset) == null ? void 0 : _a2.dimensions;
              });
              const assignmentObjectAggregates = {};
              assignmentObjects.forEach((assignmentObject2) => {
                assignmentObjectAggregates[assignmentObject2.id] = {
                  referenceMetadata: SPM.Utils.AssignmentObject.getReferenceMetadata({ assignmentObject: assignmentObject2 })
                };
              });
              await SPM.Utils.Async.forEachParallel(this.nodes, async (node) => {
                await SPM.Utils.Async.forEach(assignmentObjects, async (assignmentObject2) => {
                  assignmentObjectAggregates[assignmentObject2.id][node.id] = await SPM.Utils.Node.getAssignmentData({ nodes: [node], assignmentObject: assignmentObject2, type: "aggregates" });
                });
              }, 5);
              const boundaryObjectAggregates = {};
              this.nodes.forEach((node) => {
                this.$store.boundaryObjects.forEach((boundaryObject2) => {
                  boundaryObjectAggregates[boundaryObject2.id] = boundaryObjectAggregates[boundaryObject2.id] || {};
                  boundaryObjectAggregates[boundaryObject2.id][node.id] = SPM.Utils.Node.getBoundaries({ node, boundaryObject: boundaryObject2 }).length;
                });
              });
              rows.push([
                "Name",
                "Parent",
                // assignment object values
                ...assignmentObjects.reduce((arr, assignmentObject2) => [
                  ...arr,
                  ...assignmentObjectAggregates[assignmentObject2.id].referenceMetadata.filter((m) => ["sum", "unique"].includes(m.type)).map((m) => m.title)
                ], []),
                // boundary values
                ...this.$store.boundaryObjects.map((o) => o.label),
                // allocation values
                ...this.$store.plan.sfsp__SalesMetrics__r.map((m) => m.Name)
              ]);
              SPM.Utils.Node.getDescendants({ nodes: [this.config.node] }).filter((n) => !!n.parentId).forEach((node) => {
                rows.push([
                  node.name,
                  this.$store.nodeMap[node.parentId].name,
                  // assignment values
                  ...assignmentObjects.reduce((arr, assignmentObject2) => [
                    ...arr,
                    ...assignmentObjectAggregates[assignmentObject2.id].referenceMetadata.filter((m) => ["sum", "unique"].includes(m.type)).map((m) => assignmentObjectAggregates[assignmentObject2.id][node.id][`${m.type}__${assignmentObject2.id}__${m.id}`])
                  ], []),
                  // boundary values
                  ...this.$store.boundaryObjects.map((o) => boundaryObjectAggregates[o.id][node.id]),
                  // allocation values
                  ...this.$store.plan.sfsp__SalesMetrics__r.map((m) => {
                    const nodeMetric = node.metrics.find((nm) => nm.sfsp__SalesMetric__c === m.Id);
                    return SPM.Utils.NodeMetric.getTarget({ nodeMetric, period: "Year" });
                  })
                ]);
              });
              break;
            case "Assignment Object":
              const assignmentObject = this.$store.assignmentObjects.find((o) => o.id === id);
              const objectMetadata = [
                ...assignmentObject.recordsDataset.dimensions,
                ...assignmentObject.recordsDataset.measures,
                { id: "AssignedTo", title: "Assigned To" },
                { id: "AssignmentType", title: "Assignment Type" }
              ];
              rows.push([...objectMetadata.map((m) => m.id)]);
              const records = await SPM.Utils.Node.getAssignmentData({ assignmentObject, nodes: [this.config.node], includeDescendants: true, type: "records" });
              rows.push(...records.map((r) => [
                ...objectMetadata.map((m) => m.id === "AssignedTo" ? (r.AssignedTo.split(", ") || []).map((at) => this.$store.nodeMap[at].name) : m.id === "AssignmentType" ? r.AssignmentType : r[`${assignmentObject.id}__${m.id}`])
              ]));
              break;
            case "Boundary Object":
              const boundaryObject = this.$store.boundaryObjects.find((o) => o.id === id);
              const objectsWithGeoField = this.$store.assignmentObjects.filter((o) => {
                var _a2, _b;
                return (_b = (_a2 = o.recordsDataset) == null ? void 0 : _a2.dimensions) == null ? void 0 : _b.find((f) => f.id === boundaryObject.name);
              });
              rows.push([boundaryObject.label, `${boundaryObject.label} ID`, "Assigned To", ...objectsWithGeoField.map((o) => o.label)]);
              const boundaryRecords = await SPM.Utils.Node.getBoundaryData({ boundaryObject, nodes: [this.config.node] });
              rows.push(...boundaryRecords.map((r) => [
                r.label,
                r.id,
                r.AssignedTo,
                ...objectsWithGeoField.map((o) => r[o.id])
              ]));
              break;
            case "Allocation Metric":
              rows.push([
                "Name",
                ...Array(12).fill("").map((item, i2) => `Month ${i2 + 1}`)
              ]);
              rows.push(
                ...SPM.Utils.Node.getDescendants({ nodes: [this.config.node] }).map((node) => [
                  node.name,
                  ...Array(12).fill("").map((item, i2) => node.metrics.find((m) => m.sfsp__SalesMetric__c === id)[`sfsp__Target_Month${i2 + 1}__c`])
                ])
              );
              break;
          }
          const csvFile = rows.reduce((fileContents, row) => {
            let finalVal = "";
            for (let j = 0; j < row.length; j++) {
              let innerValue = row[j] === null || row[j] === void 0 ? "" : row[j].toString();
              if (row[j] instanceof Date) {
                innerValue = row[j].toLocaleString();
              }
              let result = innerValue.replace(/"/g, '""');
              if (result.search(/("|,|;|\n)/g) >= 0 || row[j] instanceof String || typeof row[j] === "string") {
                result = `"${result}"`;
              }
              if (j > 0) {
                finalVal += ",";
              }
              finalVal += result;
            }
            return `${fileContents}${finalVal}
`;
          }, "");
          const link2 = document.createElement("a");
          link2.href = `data:text/csv;charset=utf-8,${encodeURIComponent(csvFile)}`;
          link2.target = "_blank";
          link2.download = `${label}.csv`;
          document.body.appendChild(link2);
          link2.click();
          this.loadingMsg = "";
          this.$mitt.emit("toast", { message: `Successfully exported ${label} to CSV` });
        },
        async downloadAll() {
          for (const option of this.exportOptions)
            await this.download(option);
        }
      }
    };
    const _hoisted_1$e = { key: 0 };
    const _hoisted_2$e = { class: "spm-slds-legacy" };
    const _hoisted_3$b = { style: { "width": "auto" } };
    const _hoisted_4$b = /* @__PURE__ */ createBaseVNode("td", { class: "slds-p-right_xx-large" }, "Top Level Node:", -1);
    const _hoisted_5$b = /* @__PURE__ */ createBaseVNode("td", null, "Nodes Included:", -1);
    const _hoisted_6$a = { class: "slds-grid slds-grid_vertical-align-center slds-grid_align-spread slds-m-vertical_small" };
    const _hoisted_7$7 = /* @__PURE__ */ createBaseVNode("label", { class: "slds-form-element__label" }, [
      /* @__PURE__ */ createBaseVNode("strong", null, "Select which files to export")
    ], -1);
    const _hoisted_8$7 = { class: "spm-selectlist" };
    const _hoisted_9$5 = { class: "slds-grid" };
    const _hoisted_10$5 = { class: "slds-col_bump-left" };
    function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        ref: "modal",
        title: "Export To CSV",
        size: "base",
        class: normalizeClass({ "spm-kondo": $props.config.kondo }),
        onClose: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
      }, {
        tagline: withCtx(() => [
          $props.config.node.id === "All Org" ? (openBlock(), createElementBlock("span", _hoisted_1$e, "Export as many as 10,000 records at a time, when you create flat files of your planned data. To create smaller files, select the export option from the node menu.")) : createCommentVNode("", true)
        ]),
        content: withCtx(() => [
          createBaseVNode("div", _hoisted_2$e, [
            $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
              description: withCtx(() => [
                createBaseVNode("div", null, toDisplayString($data.loadingMsg), 1)
              ]),
              _: 1
            })) : createCommentVNode("", true),
            createBaseVNode("table", _hoisted_3$b, [
              createBaseVNode("tr", null, [
                _hoisted_4$b,
                createBaseVNode("td", null, toDisplayString($props.config.node.name), 1)
              ]),
              createBaseVNode("tr", null, [
                _hoisted_5$b,
                createBaseVNode("td", null, toDisplayString($options.nodes.length), 1)
              ])
            ]),
            createBaseVNode("div", _hoisted_6$a, [
              _hoisted_7$7,
              createVNode(_component_SLDSButton, {
                variant: "base",
                class: "slds-legacy-button",
                label: "Download all files",
                onClick: $options.downloadAll
              }, null, 8, ["onClick"])
            ]),
            createBaseVNode("div", _hoisted_8$7, [
              (openBlock(true), createElementBlock(Fragment, null, renderList($options.exportOptions, (option) => {
                return openBlock(), createElementBlock("div", {
                  key: option.id,
                  class: "slds-p-around_small slds-grid slds-grid_vertical-align-center slds-grid_align-spread"
                }, [
                  createBaseVNode("div", null, toDisplayString(option.label), 1),
                  createVNode(_component_SLDSButton, {
                    variant: "base",
                    class: "slds-legacy-button",
                    label: "Download",
                    onClick: ($event) => $options.download(option)
                  }, null, 8, ["onClick"])
                ]);
              }), 128))
            ])
          ])
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", null, [
            createBaseVNode("div", _hoisted_9$5, [
              createBaseVNode("div", _hoisted_10$5, [
                createVNode(_component_SLDSButton, {
                  label: "Close",
                  onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
                })
              ])
            ])
          ])
        ]),
        _: 1
      }, 8, ["class"]);
    }
    const ExportToCSVModal = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$f]]);
    const PublishModal_vue_vue_type_style_index_0_scoped_4d1b52dc_lang = "";
    const _sfc_main$e = {
      name: "PublishModal",
      components: {
        // slds
        SLDSButton,
        Checkbox,
        Modal,
        Picklist,
        ProgressIndicator,
        Spinner,
        RadioButtonGroup,
        FormErrorIndicator,
        TemplateCard,
        Tree: Tree$1
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          v$: useVuelidate(),
          loadingMsg: "Loading...",
          // steps
          showTemplateCards: true,
          step: 0,
          steps: [
            { id: 0, label: "Publish" },
            { id: 1, label: "Publish" }
          ],
          templates: [
            {
              name: "Territory Management",
              label: "Territory Management",
              description: "Refine your territory model when you update account and user assignments throughout your sales hierarchy.",
              buttonLabel: "Publish"
            },
            {
              name: "CSV",
              label: "CSV",
              description: "Update proprietary and third-party systems with your sales plan.",
              buttonLabel: "Export"
            }
          ],
          // configure
          publishType: SPM.betaFlags.SP_PublishETM_RulesPilot ? "Rules" : "Assignments",
          publishTypeOptions: [
            { label: "Rules", value: "Rules" },
            { label: "Assignments", value: "Assignments" }
          ],
          publishTypeEnabled: SPM.betaFlags.SP_PublishETM_RulesPilot,
          sourceNodeId: "",
          targetModelId: "",
          targetModelOptions: [],
          territoryType: "",
          territoryTypeOptions: [],
          destinationHierarchy: null,
          enabledObjects: [],
          disabledObjects: [],
          publishUsers: true,
          // publish
          objectsToPublish: [],
          territoryCount: 0,
          userCount: 0
        };
      },
      computed: {
        title() {
          return this.steps[this.step].label;
        },
        cancelButtonLabel() {
          return this.$store.rootNode.childCount === 0 ? "Close" : "Cancel";
        },
        sourceNodes() {
          if (!this.sourceNodeId)
            return [];
          if (this.sourceNodeId === "All Org")
            return this.$store.nodeMap[this.sourceNodeId].children;
          return [this.$store.nodeMap[this.sourceNodeId]];
        },
        destinationTerritory() {
          const findSelected = (items) => items == null ? void 0 : items.reduce((result, item) => {
            if (result)
              return result;
            if (item.selected)
              return item;
            return findSelected(item.children);
          }, null);
          return findSelected([this.destinationHierarchy]);
        },
        errors() {
          const errors = this.v$.$errors.map((e) => ({ message: e.$message, ref: e.$propertyPath }));
          if (this.sourceNodeId && this.sourceNodes.length === 0) {
            errors.push({ message: "The selection has nothing to publish" });
          }
          return errors;
        }
      },
      watch: {
        async targetModelId() {
          var _a2, _b;
          if (!this.targetModelId)
            return this.destinationHierarchy = null;
          const territoryMap = (await SPM.Utils.Rest.invoke("Query", {
            query: `
                    SELECT Id, Name, ParentTerritory2.Id, ParentTerritory2.Name
                    FROM Territory2
                    WHERE Territory2ModelId = '${this.targetModelId}'
                `
          })).reduce((map2, t) => {
            var _a3, _b2;
            const parentId = ((_a3 = t == null ? void 0 : t.ParentTerritory2) == null ? void 0 : _a3.Id) || "";
            if (!map2[parentId]) {
              map2[parentId] = {
                id: parentId,
                name: (_b2 = t == null ? void 0 : t.ParentTerritory2) == null ? void 0 : _b2.Name,
                expanded: false,
                selected: false,
                children: [],
                rules: [],
                assignments: []
              };
            }
            if (!map2[t.Id]) {
              map2[t.Id] = {
                id: t.Id,
                name: t.Name,
                expanded: false,
                selected: false,
                children: [],
                rules: [],
                assignments: []
              };
            }
            map2[t.Id].ownerId = t.ForecastUserId || "";
            map2[t.Id].users = t.UserTerritory2Associations || [];
            map2[parentId].children.push(map2[t.Id]);
            return map2;
          }, {});
          (_a2 = territoryMap[""]) == null ? void 0 : _a2.children.forEach((c) => {
            c.expanded = true;
            c.children.forEach((g) => g.expanded = true);
          });
          this.destinationHierarchy = {
            id: this.targetModelId,
            name: this.targetModelOptions.find((m) => m.Id === this.targetModelId).Name,
            expanded: true,
            selected: true,
            children: ((_b = territoryMap[""]) == null ? void 0 : _b.children) || []
          };
        }
      },
      validations() {
        return {
          sourceNodeId: {
            required: common.withMessage("You must select a source hierarchy item.", required)
          },
          targetModelId: {
            required: common.withMessage("You must select a target territory model.", required)
          },
          territoryType: {
            required: common.withMessage("You must select a territory type.", required)
          }
        };
      },
      async mounted() {
        SPM.Components.PublishModal = this;
        this.$refs.modal.$el.classList.add("spm-template-view");
        this.$refs.modal.focusableElements[0].focus();
        this.loadingMsg = "";
      },
      methods: {
        onRequestStepChange(stepIndex) {
          if (this.step === stepIndex)
            return true;
          if (this.step === 0 && stepIndex === 1)
            return this.nextStep();
          if (this.step === 1 && stepIndex === 0)
            return this.previousStep();
          return false;
        },
        async onTemplateClick(template) {
          if (template.name === "Territory Management") {
            if (!SPM.etmEnabled) {
              this.$emit("close");
              return this.$mitt.emit("toast", {
                message: "Please enable Enterprise Territory Management before publishing.",
                state: "info"
              });
            }
            await Promise.all([
              // make sure all of this node's descendants are loaded
              this.$store.loadLevel({ level: this.$store.maxLevel, rootNode: this.$store.rootNode }),
              // get territory model options
              (async () => this.targetModelOptions = await SPM.Utils.Rest.invoke("Query", { query: "SELECT Id, Name, State FROM Territory2Model WHERE State IN ('Planning', 'Active')" }))(),
              // get territory model types
              (async () => this.territoryTypeOptions = await SPM.Utils.Rest.invoke("Query", { query: "SELECT Id, MasterLabel FROM Territory2Type" }))()
            ]);
            this.enabledObjects = this.$store.assignmentObjects.filter((o) => ["Account", "Lead"].includes(o.name)).map((o) => ({ id: o.id, label: o.label, selected: true, assignmentObject: o })).sort((a, b) => a.label > b.label ? 1 : -1);
            this.disabledObjects = this.$store.assignmentObjects.filter((o) => !["Account", "Lead"].includes(o.name)).map((o) => ({ id: o.id, label: o.label })).sort((a, b) => a.label > b.label ? 1 : -1);
            this.showTemplateCards = false;
            this.$refs.modal.$el.classList.remove("spm-template-view");
          } else {
            this.$emit("close");
            SPM.Components.Root.openModal("exportToCSV", { node: this.$store.rootNode, kondo: true });
          }
        },
        async nextStep() {
          if (this.v$.$invalid)
            return this.v$.$touch();
          if (this.errors.length)
            return;
          this.loadingMsg = "Preparing...";
          this.objectsToPublish = [];
          await SPM.Utils.Async.forEach(this.enabledObjects.filter((o) => o.selected), async (objectToPublish) => {
            this.objectsToPublish.push({
              id: objectToPublish.id,
              label: objectToPublish.label,
              assignmentObject: objectToPublish.assignmentObject,
              count: (await SPM.Utils.Node.getAssignmentData({ nodes: this.sourceNodes, assignmentObject: objectToPublish.assignmentObject, type: "aggregates" }))[`unique__${objectToPublish.id}__Id`]
            });
          });
          const descendantNodes = SPM.Utils.Node.getDescendants({ nodes: this.sourceNodes });
          this.territoryCount = descendantNodes.length;
          this.userCount = this.publishUsers ? descendantNodes.reduce((total, n) => total + n.users.length, 0) : 0;
          this.step = 1;
          this.$refs.progressIndicator.next();
          this.loadingMsg = "";
          return true;
        },
        previousStep() {
          this.step = 0;
          this.$refs.progressIndicator.previous();
          return true;
        },
        async publish() {
          var _a2;
          this.loadingMsg = "Preparing...";
          if (this.publishType === "Rules") {
            const territoriesToDelete = this.destinationTerritory.id === this.targetModelId ? this.destinationHierarchy.children : this.destinationTerritory.children;
            (function addTerritories(territories) {
              territories.forEach((t) => {
                addTerritories(t.children);
                territoriesToDelete.push(t);
              });
            })(territoriesToDelete);
            if (territoriesToDelete.length > 0) {
              const ruleAssociationsToDelete = await SPM.Utils.Rest.invoke("Query", {
                query: `
                            SELECT Id, RuleId, Territory2Id
                            FROM RuleTerritory2Association
                            WHERE Territory2Id IN (${territoriesToDelete.map((t) => `'${t.id}'`).join(",")})
                        `
              });
              await SPM.Utils.CRM.delete({ records: ruleAssociationsToDelete, onProgress: (percent) => this.loadingMsg = `Removing Existing Rule Associations...${percent}%` });
              const rulesToDelete = [...new Set(ruleAssociationsToDelete.map((a) => a.RuleId))].map((Id) => ({ Id }));
              await SPM.Utils.CRM.delete({ records: rulesToDelete, onProgress: (percent) => this.loadingMsg = `Removing Existing Rules...${percent}%` });
            }
            await SPM.Utils.CRM.delete({ records: territoriesToDelete.map((t) => ({ Id: t.id })), onProgress: (percent) => this.loadingMsg = `Removing Existing Territories...${percent}%` });
          }
          const publishPrefix = `t_${Date.now()}`;
          const territory2Map = {};
          const forecastManagerMap = {};
          const rules = [];
          const accountAssignmentObjectId = (_a2 = this.$store.assignmentObjects.find((o) => o.name === "Account")) == null ? void 0 : _a2.id;
          const createTerritory2Level = async (level, nodes) => {
            if (nodes.length === 0)
              return;
            this.loadingMsg = `Creating Territories...L${level}`;
            const currentLevelNodes = [];
            nodes.forEach((node) => {
              var _a3;
              const territory2 = {
                sobjectType: "Territory2",
                Territory2ModelId: this.targetModelId,
                DeveloperName: `${publishPrefix}_${node.id}`,
                Name: node.name,
                Description: "",
                Territory2TypeId: this.territoryType,
                ParentTerritory2Id: ((_a3 = territory2Map == null ? void 0 : territory2Map[node.parentId]) == null ? void 0 : _a3.Id) || this.destinationTerritory.id.replace(this.targetModelId, "")
              };
              currentLevelNodes.push(territory2);
              territory2Map[node.id] = territory2;
              forecastManagerMap[node.id] = node.ownerId;
              if (this.publishType === "Rules" && accountAssignmentObjectId) {
                node.rules.filter((r) => r.sfsp__SalesAssignmentObject__c === accountAssignmentObjectId).forEach((r) => {
                  rules.push({
                    sobjectType: "ObjectTerritory2AssignmentRule",
                    Territory2ModelId: this.targetModelId,
                    ObjectType: "Account",
                    MasterLabel: `${r.Name}_${node.name}`,
                    IsActive: true,
                    data__r: {
                      nodeId: node.id,
                      rule: r
                    }
                  });
                });
              }
            });
            await SPM.Utils.CRM.upsert({ records: currentLevelNodes });
            await createTerritory2Level(level + 1, nodes.reduce((arr, n) => arr.concat(n.children), []));
          };
          await createTerritory2Level(1, this.sourceNodes);
          if (this.publishType === "Rules") {
            const operatorMap = Object.entries(SPM.Utils.Rule.RuleItem.ETMOperators).reduce((map2, [etmOperator, operator]) => Object.assign(map2, { [operator]: etmOperator }), {});
            const fieldMap = this.$store.assignmentObjects.find((o) => o.name === "Account").referenceFields.reduce((map2, f) => Object.assign(map2, { [f.name]: f.crmName }), {});
            const ruleAssociations = [];
            const ruleItems = [];
            rules.forEach((r, ruleIndex) => {
              r.DeveloperName = `r_${territory2Map[r.data__r.nodeId].Id}_${r.data__r.rule.Id}`;
              ruleAssociations.push({
                sobjectType: "RuleTerritory2Association",
                IsInherited: true,
                Territory2Id: territory2Map[r.data__r.nodeId].Id,
                data__r: {
                  ruleIndex
                }
              });
              r.data__r.rule.sfsp__SalesNodeRuleItems__r.forEach((ri, i2) => {
                ruleItems.push({
                  attributes: {
                    type: "ObjectTerritory2AssignmentRuleItem"
                  },
                  Field: `Account.${fieldMap[ri.sfsp__Field__c]}`,
                  Operation: operatorMap[ri.sfsp__Operator__c],
                  SortOrder: i2 + 1,
                  Value: ri.sfsp__Value__c,
                  data__r: {
                    ruleIndex
                  }
                });
              });
            });
            await SPM.Utils.CRM.upsert({ records: rules, onProgress: (percent) => this.loadingMsg = `Creating Rules...${percent}%` });
            ruleAssociations.forEach((ra) => ra.RuleId = rules[ra.data__r.ruleIndex].Id);
            await SPM.Utils.CRM.upsert({ records: ruleAssociations, onProgress: (percent) => this.loadingMsg = `Creating Rule Associations...${percent}%` });
            ruleItems.forEach((ri) => {
              ri.RuleId = rules[ri.data__r.ruleIndex].Id;
              delete ri.data__r;
            });
            await SPM.Utils.Rest.invoke("Insert", { records: ruleItems, onProgress: (percent) => this.loadingMsg = `Creating Rule Items...${percent}%` });
            rules.forEach((r) => r.BooleanFilter = r.data__r.rule.sfsp__BooleanFilter__c);
            await SPM.Utils.CRM.upsert({ records: rules.map((r) => ({ Id: r.Id, BooleanFilter: r.BooleanFilter })), onProgress: (percent) => this.loadingMsg = `Updating Rules...${percent}%` });
          }
          const descendantNodes = SPM.Utils.Node.getDescendants({ nodes: this.sourceNodes });
          const utasToPublish = [];
          const forecastManagersToPublish = [];
          if (this.publishUsers) {
            const etmRoleMap = (await SPM.Utils.Rest.invoke("SObject", { sObject: "UserTerritory2Association" })).fields.find((f) => f.name === "RoleInTerritory2").picklistValues.filter((pv) => pv.active).reduce((map2, pv) => {
              map2[pv.label] = pv.value;
              return map2;
            }, {});
            descendantNodes.forEach((n) => {
              n.users.forEach((u) => {
                utasToPublish.push({
                  sobjectType: "UserTerritory2Association",
                  Territory2Id: territory2Map[n.id].Id,
                  UserId: u.sfsp__User__c,
                  RoleInTerritory2: etmRoleMap[u.sfsp__Role__c]
                });
              });
              if (this.publishType !== "Rules" && SPM.etmForecastEnabled && forecastManagerMap[n.id]) {
                const existingUser = n.users.find((u) => u.sfsp__User__c === forecastManagerMap[n.id]);
                if (!existingUser) {
                  utasToPublish.push({
                    sobjectType: "UserTerritory2Association",
                    Territory2Id: territory2Map[n.id].Id,
                    UserId: forecastManagerMap[n.id]
                  });
                }
                forecastManagersToPublish.push({ Id: territory2Map[n.id].Id, ForecastUserId: forecastManagerMap[n.id] });
              }
            });
          }
          await SPM.Utils.CRM.upsert({ records: utasToPublish, onProgress: (percent) => this.loadingMsg = `Creating User Associations...${percent}%` });
          await SPM.Utils.CRM.upsert({ records: forecastManagersToPublish, onProgress: (percent) => this.loadingMsg = `Adding Forecast Managers...${percent}%` });
          this.loadingMsg = "Running Rules...";
          const otasToPublish = [];
          await SPM.Utils.Async.forEachParallel(this.objectsToPublish, async (o) => {
            const assignmentData = await SPM.Utils.Node.getAssignmentData({ nodes: this.sourceNodes, includeDescendants: true, assignmentObject: o.assignmentObject, type: "records" });
            assignmentData.forEach((r) => {
              if (this.publishType === "Rules" && o.assignmentObject.name === "Account" && r.AssignmentType === "Rule")
                return;
              const nodeIds = r.AssignedTo.split(", ") || [];
              nodeIds.forEach((nodeId2) => {
                otasToPublish.push({
                  sobjectType: "ObjectTerritory2Association",
                  Territory2Id: territory2Map[nodeId2].Id,
                  ObjectId: r[`${o.id}__Id`],
                  AssociationCause: "Territory2Manual"
                });
              });
            });
          });
          await SPM.Utils.CRM.upsert({ records: otasToPublish, onProgress: (percent) => this.loadingMsg = `Creating Object Associations...${percent}%` });
          this.$mitt.emit("toast", { message: "Publish Complete" });
          this.$emit("close");
        }
      }
    };
    const _withScopeId$4 = (n) => (pushScopeId("data-v-4d1b52dc"), n = n(), popScopeId(), n);
    const _hoisted_1$d = {
      key: 1,
      class: "slds-text-align_center"
    };
    const _hoisted_2$d = { key: 0 };
    const _hoisted_3$a = { class: "slds-grid slds-m-vertical_medium slds-gutters slds-p-horizontal_medium" };
    const _hoisted_4$a = { class: "slds-m-bottom_small" };
    const _hoisted_5$a = { class: "slds-m-vertical_small" };
    const _hoisted_6$9 = /* @__PURE__ */ _withScopeId$4(() => /* @__PURE__ */ createBaseVNode("label", { class: "slds-form-element__label" }, "Destination Territory", -1));
    const _hoisted_7$6 = {
      class: "spm-box",
      style: { "min-height": "3rem", "max-height": "20rem", "overflow": "auto", "position": "relative" }
    };
    const _hoisted_8$6 = { class: "slds-m-vertical_small" };
    const _hoisted_9$4 = /* @__PURE__ */ _withScopeId$4(() => /* @__PURE__ */ createBaseVNode("div", {
      class: "slds-m-top_small",
      style: { "font-weight": "700" }
    }, "Planning Elements", -1));
    const _hoisted_10$4 = /* @__PURE__ */ _withScopeId$4(() => /* @__PURE__ */ createBaseVNode("div", { class: "spm-form-title" }, "Confirmation", -1));
    const _hoisted_11$4 = /* @__PURE__ */ _withScopeId$4(() => /* @__PURE__ */ createBaseVNode("p", null, "Here's information about your publish data.", -1));
    const _hoisted_12$2 = /* @__PURE__ */ _withScopeId$4(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-m-top_large" }, "Hierarchy", -1));
    const _hoisted_13$2 = { class: "spm-box" };
    const _hoisted_14$1 = { class: "slds-table slds-table_bordered slds-table_fixed-layout" };
    const _hoisted_15$1 = /* @__PURE__ */ _withScopeId$4(() => /* @__PURE__ */ createBaseVNode("thead", null, [
      /* @__PURE__ */ createBaseVNode("tr", null, [
        /* @__PURE__ */ createBaseVNode("th", null, "Location"),
        /* @__PURE__ */ createBaseVNode("th", null, "Hierarchy Source"),
        /* @__PURE__ */ createBaseVNode("th", null, "Destination Territory"),
        /* @__PURE__ */ createBaseVNode("th", null, "Territory Count"),
        /* @__PURE__ */ createBaseVNode("th", null, "User Count")
      ])
    ], -1));
    const _hoisted_16$1 = /* @__PURE__ */ _withScopeId$4(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-m-top_large" }, "Assignment Objects", -1));
    const _hoisted_17 = { class: "spm-box" };
    const _hoisted_18 = { class: "slds-table slds-table_bordered slds-table_fixed-layout" };
    const _hoisted_19 = /* @__PURE__ */ _withScopeId$4(() => /* @__PURE__ */ createBaseVNode("thead", null, [
      /* @__PURE__ */ createBaseVNode("tr", null, [
        /* @__PURE__ */ createBaseVNode("th", null, "Object"),
        /* @__PURE__ */ createBaseVNode("th", null, "Count")
      ])
    ], -1));
    const _hoisted_20 = { class: "slds-m-right_x-small" };
    function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_TemplateCard = resolveComponent("TemplateCard");
      const _component_RadioButtonGroup = resolveComponent("RadioButtonGroup");
      const _component_Picklist = resolveComponent("Picklist");
      const _component_Tree = resolveComponent("Tree");
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_ProgressIndicator = resolveComponent("ProgressIndicator");
      const _component_FormErrorIndicator = resolveComponent("FormErrorIndicator");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        ref: "modal",
        title: $options.title,
        size: "base",
        detach: "",
        class: normalizeClass({ "spm-kondo": $props.config.kondo }),
        footless: $props.config.kondo && $data.showTemplateCards,
        onClose: _cache[7] || (_cache[7] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => {
          var _a2;
          return [
            $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
              description: withCtx(() => [
                createBaseVNode("div", null, toDisplayString($data.loadingMsg), 1)
              ]),
              _: 1
            })) : createCommentVNode("", true),
            _ctx.$store.rootNode.childCount === 0 ? (openBlock(), createElementBlock("div", _hoisted_1$d, "To publish your plan, add a hierarchy.")) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
              $data.showTemplateCards ? (openBlock(), createElementBlock("div", _hoisted_2$d, [
                createBaseVNode("div", _hoisted_3$a, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList($data.templates, (template) => {
                    return openBlock(), createElementBlock("div", {
                      key: template.name,
                      class: "slds-size_1-of-2 slds-col"
                    }, [
                      createVNode(_component_TemplateCard, {
                        template,
                        onSelectTemplate: $options.onTemplateClick
                      }, null, 8, ["template", "onSelectTemplate"])
                    ]);
                  }), 128))
                ])
              ])) : $data.step === 0 ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                $data.publishTypeEnabled ? (openBlock(), createBlock(_component_RadioButtonGroup, {
                  key: 0,
                  modelValue: $data.publishType,
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.publishType = $event),
                  class: "slds-m-bottom_small",
                  labels: { name: "Publish Type" },
                  options: $data.publishTypeOptions
                }, null, 8, ["modelValue", "options"])) : createCommentVNode("", true),
                createBaseVNode("div", _hoisted_4$a, [
                  createVNode(_component_Picklist, {
                    ref: "sourceNodeId",
                    modelValue: $data.sourceNodeId,
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.sourceNodeId = $event),
                    labels: { name: "Source Hierarchy Item", search: "Select an item..." },
                    options: _ctx.$store.allNodes,
                    idKey: "id",
                    titleKey: "name",
                    filterable: "",
                    required: "",
                    errors: _ctx.$getErrorsByField($data.v$.sourceNodeId)
                  }, null, 8, ["modelValue", "labels", "options", "errors"])
                ]),
                createBaseVNode("div", _hoisted_5$a, [
                  createVNode(_component_Picklist, {
                    ref: "targetModelId",
                    modelValue: $data.targetModelId,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.targetModelId = $event),
                    labels: { name: "Target Territory Model", search: "Select a model..." },
                    options: $data.targetModelOptions,
                    idKey: "Id",
                    titleKey: "Name",
                    filterable: "",
                    required: "",
                    errors: _ctx.$getErrorsByField($data.v$.targetModelId)
                  }, null, 8, ["modelValue", "labels", "options", "errors"])
                ]),
                $data.targetModelId ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  _hoisted_6$9,
                  createBaseVNode("div", _hoisted_7$6, [
                    $data.destinationHierarchy ? (openBlock(), createBlock(_component_Tree, {
                      key: 0,
                      model: $data.destinationHierarchy,
                      singleSelect: ""
                    }, null, 8, ["model"])) : (openBlock(), createBlock(_component_Spinner, {
                      key: 1,
                      size: "small"
                    }))
                  ])
                ], 64)) : createCommentVNode("", true),
                createBaseVNode("div", _hoisted_8$6, [
                  createVNode(_component_Picklist, {
                    ref: "territoryType",
                    modelValue: $data.territoryType,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.territoryType = $event),
                    labels: { name: "Territory Type", search: "Select a type..." },
                    options: $data.territoryTypeOptions,
                    idKey: "Id",
                    titleKey: "MasterLabel",
                    filterable: "",
                    required: "",
                    errors: _ctx.$getErrorsByField($data.v$.territoryType)
                  }, null, 8, ["modelValue", "labels", "options", "errors"])
                ]),
                _hoisted_9$4,
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.enabledObjects, (obj) => {
                  return openBlock(), createBlock(_component_Checkbox, {
                    key: obj.id,
                    modelValue: obj.selected,
                    "onUpdate:modelValue": ($event) => obj.selected = $event,
                    labels: { name: obj.label }
                  }, null, 8, ["modelValue", "onUpdate:modelValue", "labels"]);
                }), 128)),
                createVNode(_component_Checkbox, {
                  modelValue: $data.publishUsers,
                  "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.publishUsers = $event),
                  labels: { name: "Users (on Hierarchy)" }
                }, null, 8, ["modelValue", "labels"]),
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.disabledObjects, (obj) => {
                  return openBlock(), createBlock(_component_Checkbox, {
                    key: obj.id,
                    labels: { name: `${obj.label} (Not Supported)` },
                    disabled: ""
                  }, null, 8, ["labels"]);
                }), 128))
              ], 64)) : $data.step === 1 ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                _hoisted_10$4,
                _hoisted_11$4,
                _hoisted_12$2,
                createBaseVNode("div", _hoisted_13$2, [
                  createBaseVNode("table", _hoisted_14$1, [
                    _hoisted_15$1,
                    createBaseVNode("tbody", null, [
                      createBaseVNode("tr", null, [
                        createBaseVNode("td", null, toDisplayString($data.targetModelId), 1),
                        createBaseVNode("td", null, toDisplayString($data.sourceNodeId), 1),
                        createBaseVNode("td", null, toDisplayString(((_a2 = $options.destinationTerritory) == null ? void 0 : _a2.name) || ""), 1),
                        createBaseVNode("td", null, toDisplayString(_ctx.$F("Numeric", $data.territoryCount)), 1),
                        createBaseVNode("td", null, toDisplayString(_ctx.$F("Numeric", $data.userCount)), 1)
                      ])
                    ])
                  ])
                ]),
                _hoisted_16$1,
                createBaseVNode("div", _hoisted_17, [
                  createBaseVNode("table", _hoisted_18, [
                    _hoisted_19,
                    createBaseVNode("tbody", null, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList($data.objectsToPublish, (objectToPublish) => {
                        return openBlock(), createElementBlock("tr", {
                          key: objectToPublish.id
                        }, [
                          createBaseVNode("td", null, toDisplayString(objectToPublish.label), 1),
                          createBaseVNode("td", null, toDisplayString(_ctx.$F("Numeric", objectToPublish.count)), 1)
                        ]);
                      }), 128))
                    ])
                  ])
                ])
              ], 64)) : createCommentVNode("", true)
            ], 64))
          ];
        }),
        footer: withCtx(() => [
          createBaseVNode("div", {
            class: normalizeClass({ "slds-grid slds-grid_vertical-align-center slds-grid_align-spread": _ctx.$store.rootNode.childCount !== 0 })
          }, [
            createVNode(_component_SLDSButton, {
              variant: "base",
              label: $options.cancelButtonLabel,
              disabled: $data.loadingMsg.length,
              onClick: _cache[5] || (_cache[5] = ($event) => _ctx.$emit("close"))
            }, null, 8, ["label", "disabled"]),
            _ctx.$store.rootNode.childCount !== 0 ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createVNode(_component_ProgressIndicator, {
                ref: "progressIndicator",
                style: { "max-width": "30%" },
                steps: $data.steps,
                onRequestStepChange: $options.onRequestStepChange,
                onStepChange: _cache[6] || (_cache[6] = (v) => $data.step = v)
              }, null, 8, ["steps", "onRequestStepChange"]),
              createBaseVNode("div", _hoisted_20, [
                $options.errors.length ? (openBlock(), createBlock(_component_FormErrorIndicator, {
                  key: 0,
                  errors: $options.errors,
                  refs: _ctx.$refs
                }, null, 8, ["errors", "refs"])) : createCommentVNode("", true)
              ]),
              $data.step === 0 ? (openBlock(), createBlock(_component_SLDSButton, {
                key: 0,
                variant: "brand",
                disabled: $data.loadingMsg.length > 0,
                label: "Next",
                onClick: $options.nextStep
              }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true),
              $data.step === 1 ? (openBlock(), createBlock(_component_SLDSButton, {
                key: 1,
                variant: "base",
                disabled: $data.loadingMsg.length > 0,
                label: "Back",
                onClick: $options.previousStep
              }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true),
              $data.step === 1 ? (openBlock(), createBlock(_component_SLDSButton, {
                key: 2,
                variant: "brand",
                disabled: $data.loadingMsg.length > 0,
                label: "Publish",
                onClick: $options.publish
              }, null, 8, ["disabled", "onClick"])) : createCommentVNode("", true)
            ], 64)) : createCommentVNode("", true)
          ], 2)
        ]),
        _: 1
      }, 8, ["title", "class", "footless"]);
    }
    const PublishModal = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$e], ["__scopeId", "data-v-4d1b52dc"]]);
    const _sfc_main$d = {
      name: "MetricsModal",
      components: {
        SLDSButton,
        ButtonIcon,
        Icon,
        Layout,
        LayoutItem,
        Modal,
        Picklist,
        Popover,
        Spinner,
        TextInput,
        Checkbox,
        Tooltip,
        TemplateCard
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          loading: false,
          loadingMsg: "",
          v$: useVuelidate(),
          original: {},
          metric: {
            sobjectType: "sfsp__SalesMetric__c",
            Name: "",
            sfsp__Description__c: "",
            sfsp__SalesPlan__c: this.$store.plan.Id,
            sfsp__Type__c: "",
            target: 0,
            sfsp__TargetOverrideEnabled__c: true
          },
          nodeMetric: {
            ...SPM.Utils.NodeMetric.Defaults,
            sfsp__SalesPlan__c: this.$store.plan.Id,
            sfsp__SalesMetric__c: null,
            sfsp__SalesNode__c: null,
            sfsp__TargetOverrideAmount__c: null,
            sfsp__TargetOverrideType__c: null
          },
          error: {
            renderPopover: false,
            renderPopoverBindTo: null,
            renderButtonIcon: false
          },
          types: [
            "Currency",
            "Numeric"
          ],
          MAX_NUM_METRICS: 5,
          showTemplateCards: this.$props.config.allowTemplateCards,
          templates: [
            {
              name: "Quota",
              label: "Quota",
              description: "Define achievable goals for your sales team when you enter quotas throughout your hierarchy. ",
              buttonLabel: "Add",
              type: "Currency",
              targetOverrideEnabled: true
            },
            {
              name: "Headcount",
              label: "Headcount",
              description: "Distribute available headcount throughout your sales hierarchy.",
              buttonLabel: "Add",
              type: "Numeric",
              targetOverrideEnabled: false
            },
            {
              name: "Custom",
              label: "Custom Metric",
              description: "Allocate to hierarchy branches based on metrics that matter to your company.",
              buttonLabel: "Add"
            }
          ]
        };
      },
      computed: {
        changesDetected() {
          return Object.keys(this.metric).some((key) => this.metric[key] !== this.original[key]);
        },
        isCreate() {
          return !this.isEdit;
        },
        isEdit() {
          var _a2;
          return typeof ((_a2 = this.$props.config) == null ? void 0 : _a2.metric) !== "undefined";
        },
        computedSubtype() {
          return this.isEdit ? ActivitySubtypes.UPDATE : ActivitySubtypes.CREATE;
        },
        computedTitle() {
          return this.isEdit ? "Edit Allocation Metric" : "New Allocation Metric";
        }
      },
      watch: {
        "v$.$invalid": {
          handler(value) {
            if (!value) {
              this.error = {
                renderPopover: false,
                renderPopoverBindTo: null,
                renderButtonIcon: false
              };
            }
          }
        }
      },
      validations() {
        return {
          metric: {
            Name: {
              required: common.withMessage("You must provde a name for the metric.", required),
              maxLength: common.withMessage(({ $model }) => `Must be 80 characters or less. (${$model.length})`, maxLength(80))
            },
            sfsp__Description__c: {
              maxLength: common.withMessage(({ $model }) => `Must be 255 characters or less. (${$model.length})`, maxLength(255))
            },
            sfsp__Type__c: {
              required: common.withMessage("You must select a data type.", required)
            }
          }
        };
      },
      created() {
        var _a2;
        if ((_a2 = this.$props.config) == null ? void 0 : _a2.metric) {
          this.metric = { ...this.$props.config.metric };
          const nodeMetric = this.$store.plan.sfsp__SalesNodeMetrics__r.find((m) => m.sfsp__SalesMetric__c === this.metric.Id) || {};
          this.nodeMetric = {
            ...this.nodeMetric,
            ...nodeMetric
          };
          this.metric.target = SPM.Utils.NodeMetric.getTarget({ nodeMetric: this.nodeMetric });
          this.original = { ...this.metric };
          this.showTemplateCards = false;
        } else {
          if (this.$props.config.allowTemplateCards)
            this.$nextTick(() => this.$refs.modal.$el.classList.add("spm-template-view"));
        }
      },
      mounted() {
        this.$refs.modal.focusableElements[0].focus();
      },
      methods: {
        async focusElementWithError($error) {
          this.error.renderPopover = false;
          await this.$nextTick();
          this.$refs[$error.$propertyPath].focus();
        },
        onTemplateClick(template) {
          if (template.name !== "Custom") {
            this.metric.Name = template.name;
            this.metric.sfsp__TargetOverrideEnabled__c = template.targetOverrideEnabled;
            this.metric.sfsp__Type__c = template.type;
          }
          this.showTemplateCards = false;
          this.$refs.modal.$el.classList.remove("spm-template-view");
        },
        async save(addAnother) {
          if (this.v$.$invalid) {
            this.v$.$touch();
            this.error.renderButtonIcon = true;
            await this.$nextTick();
            this.error.renderPopoverBindTo = this.$refs.errorButtonIcon.$el;
            this.error.renderPopover = true;
            return;
          }
          try {
            this.loading = true;
            this.loadingMsg = "Saving Allocation Metric...";
            const metricForUpsert = { ...this.metric };
            delete metricForUpsert.target;
            const [metricResponse] = await SPM.Utils.Apex.invoke("UpsertSObjects", [[metricForUpsert], true]);
            this.nodeMetric.sfsp__SalesMetric__c = metricResponse.Id;
            if (this.isCreate)
              this.nodeMetric.sfsp__TargetOverrideAmount__c = 0;
            SPM.Utils.NodeMetric.changeTarget({
              nodeMetric: this.nodeMetric,
              period: "Year",
              target: this.metric.target
            });
            const [nodeMetricResponse] = await SPM.Utils.Apex.invoke("UpsertSObjects", [[this.nodeMetric], true]);
            this.$store.$patch((state) => {
              if (this.isCreate) {
                state.plan.sfsp__SalesNodeMetrics__r.push(nodeMetricResponse);
              } else {
                const nodeMetricIndex = state.plan.sfsp__SalesNodeMetrics__r.findIndex((m) => m.Id === nodeMetricResponse.Id);
                state.plan.sfsp__SalesNodeMetrics__r.splice(nodeMetricIndex, 1, nodeMetricResponse);
              }
              state.hasChanged = true;
            });
            await insertActivities([{
              description: this.buildActivityRecordDescription(),
              name: this.metric.Name,
              parentId: this.$store.plan.Id,
              recordType: ActivityRecordTypes.METRIC,
              subtype: this.computedSubtype,
              type: ActivityTypes.MANAGEMENT
            }]);
            this.$emit("close");
            this.$nextTick(this.$props.config.callback.bind(this, metricResponse, addAnother));
          } catch (ex) {
            this.$store.toast({ message: `Allocation Metric "${this.metric.Name}" was not ${this.metric.Id ? "updated" : "created"}`, duration: null, state: "error" });
            this.$emit("close");
            throw ex;
          } finally {
            this.loading = false;
            this.loadingMsg = "";
          }
        },
        buildActivityRecordDescription() {
          if (this.isCreate) {
            return this.metric.sfsp__Description__c;
          }
          const changes = [];
          if (this.original.Name !== this.metric.Name) {
            changes.push("Name");
          }
          if (this.original.sfsp__Type__c !== this.metric.sfsp__Type__c) {
            changes.push("Type");
          }
          if (this.original.sfsp__Description__c !== this.metric.sfsp__Description__c) {
            changes.push("Description");
          }
          if (this.original.target !== this.metric.target) {
            changes.push("Global Target");
          }
          return `Changed the following fields: ${changes.join(", ")}.`;
        }
      }
    };
    const _hoisted_1$c = {
      key: 1,
      class: "spm-template-cards-max-width"
    };
    const _hoisted_2$c = { class: "slds-grid slds-m-vertical_medium slds-gutters" };
    const _hoisted_3$9 = ["id"];
    const _hoisted_4$9 = {
      key: 2,
      class: "slds-p-around_medium"
    };
    const _hoisted_5$9 = { class: "slds-grid" };
    const _hoisted_6$8 = /* @__PURE__ */ createBaseVNode("span", null, "We hit a snag.", -1);
    const _hoisted_7$5 = /* @__PURE__ */ createBaseVNode("div", { style: { "margin-bottom": "0.25rem", "margin-left": "-0.5rem", "font-weight": "600" } }, " Review the following fields ", -1);
    const _hoisted_8$5 = {
      class: "slds-m-left_medium",
      style: { "list-style": "disc" }
    };
    const _hoisted_9$3 = ["onClick"];
    const _hoisted_10$3 = { class: "slds-grid" };
    const _hoisted_11$3 = { class: "slds-col_bump-left" };
    function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_TemplateCard = resolveComponent("TemplateCard");
      const _component_TextInput = resolveComponent("TextInput");
      const _component_Picklist = resolveComponent("Picklist");
      const _component_LayoutItem = resolveComponent("LayoutItem");
      const _component_Layout = resolveComponent("Layout");
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_Tooltip = resolveComponent("Tooltip");
      const _component_Popover = resolveComponent("Popover");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "metrics-modal",
        ref: "modal",
        size: $data.showTemplateCards ? "medium" : "base",
        title: $options.computedTitle,
        class: normalizeClass({ "spm-kondo": $props.config.kondo }),
        footless: $props.config.kondo && $data.showTemplateCards,
        onClose: _cache[10] || (_cache[10] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
            description: withCtx(() => [
              createTextVNode(toDisplayString($data.loadingMsg), 1)
            ]),
            _: 1
          })) : createCommentVNode("", true),
          $data.showTemplateCards ? (openBlock(), createElementBlock("div", _hoisted_1$c, [
            createBaseVNode("div", _hoisted_2$c, [
              (openBlock(true), createElementBlock(Fragment, null, renderList($data.templates, (template) => {
                return openBlock(), createElementBlock("div", {
                  id: `${template.name.replaceAll(" ", "-").toLowerCase()}`,
                  key: template.name,
                  class: "slds-size_1-of-3 slds-col"
                }, [
                  createVNode(_component_TemplateCard, {
                    template,
                    onSelectTemplate: $options.onTemplateClick
                  }, null, 8, ["template", "onSelectTemplate"])
                ], 8, _hoisted_3$9);
              }), 128))
            ])
          ])) : (openBlock(), createElementBlock("div", _hoisted_4$9, [
            createVNode(_component_TextInput, {
              ref: "metric.Name",
              modelValue: $data.v$.metric.Name.$model,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.v$.metric.Name.$model = $event),
              class: "slds-m-bottom_small",
              errors: _ctx.$getErrorsByField($data.v$.metric.Name),
              labels: { name: "Metric Name" },
              required: ""
            }, null, 8, ["modelValue", "errors"]),
            createVNode(_component_TextInput, {
              ref: "metric.sfsp__Description__c",
              modelValue: $data.v$.metric.sfsp__Description__c.$model,
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.v$.metric.sfsp__Description__c.$model = $event),
              class: "slds-m-bottom_small",
              errors: _ctx.$getErrorsByField($data.v$.metric.sfsp__Description__c),
              labels: { name: "Description" },
              useTextArea: ""
            }, null, 8, ["modelValue", "errors"]),
            createVNode(_component_Layout, {
              class: "slds-m-bottom_large",
              gutters: ""
            }, {
              default: withCtx(() => [
                createVNode(_component_LayoutItem, null, {
                  default: withCtx(() => [
                    createVNode(_component_Picklist, {
                      ref: "metric.sfsp__Type__c",
                      modelValue: $data.v$.metric.sfsp__Type__c.$model,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.v$.metric.sfsp__Type__c.$model = $event),
                      errors: _ctx.$getErrorsByField($data.v$.metric.sfsp__Type__c),
                      labels: { name: "Data Type", placeholder: "Select an option..." },
                      options: $data.types,
                      required: ""
                    }, null, 8, ["modelValue", "errors", "labels", "options"])
                  ]),
                  _: 1
                }),
                createVNode(_component_LayoutItem, null, {
                  default: withCtx(() => [
                    createVNode(_component_TextInput, {
                      modelValue: $data.metric.target,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.metric.target = $event),
                      labels: { name: "Overall Target" }
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }),
            createBaseVNode("div", _hoisted_5$9, [
              createVNode(_component_Checkbox, {
                modelValue: $data.metric.sfsp__TargetOverrideEnabled__c,
                "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.metric.sfsp__TargetOverrideEnabled__c = $event),
                isFormElement: "",
                labels: { name: "Allow Target Override" }
              }, null, 8, ["modelValue"]),
              createVNode(_component_Tooltip, { class: "slds-p-top_xxx-small" }, {
                default: withCtx(() => [
                  createTextVNode("Allow users to set their own, modified target")
                ]),
                _: 1
              })
            ])
          ])),
          withDirectives(createVNode(_component_Popover, {
            bindTo: $data.error.renderPopoverBindTo,
            theme: "error",
            width: "medium",
            position: "fixed",
            onClose: _cache[5] || (_cache[5] = ($event) => $data.error.renderPopover = false)
          }, {
            header: withCtx(() => [
              _hoisted_6$8
            ]),
            content: withCtx(() => [
              _hoisted_7$5,
              createBaseVNode("ul", _hoisted_8$5, [
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.v$.$errors, ($error) => {
                  return openBlock(), createElementBlock("li", {
                    key: $error.$uid,
                    class: "slds-text-link",
                    onClick: ($event) => $options.focusElementWithError($error)
                  }, toDisplayString($error.$message), 9, _hoisted_9$3);
                }), 128))
              ])
            ]),
            _: 1
          }, 8, ["bindTo"]), [
            [vShow, $data.error.renderPopover]
          ])
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_10$3, [
            createBaseVNode("div", _hoisted_11$3, [
              $data.error.renderButtonIcon ? (openBlock(), createBlock(_component_ButtonIcon, {
                key: 0,
                ref: "errorButtonIcon",
                assistiveText: "Error",
                title: "Erorr",
                iconCategory: "utility",
                iconName: "error",
                iconSize: "large",
                class: "slds-button_icon-error",
                onClick: _cache[6] || (_cache[6] = ($event) => $data.error.renderPopover = !$data.error.renderPopover)
              }, null, 512)) : createCommentVNode("", true),
              createVNode(_component_SLDSButton, {
                class: "slds-button",
                disabled: !$options.changesDetected || $data.loading,
                variant: "base",
                onClick: _cache[7] || (_cache[7] = ($event) => _ctx.$emit("close"))
              }, {
                default: withCtx(() => [
                  createTextVNode(" Cancel ")
                ]),
                _: 1
              }, 8, ["disabled"]),
              $options.isCreate && _ctx.$store.plan.sfsp__SalesMetrics__r.length < $data.MAX_NUM_METRICS - 1 ? (openBlock(), createBlock(_component_SLDSButton, {
                key: 1,
                class: "slds-button",
                disabled: !$options.changesDetected || $data.loading,
                variant: "base",
                onClick: _cache[8] || (_cache[8] = ($event) => $options.save(true))
              }, {
                default: withCtx(() => [
                  createTextVNode(" Save & New ")
                ]),
                _: 1
              }, 8, ["disabled"])) : createCommentVNode("", true),
              createVNode(_component_SLDSButton, {
                class: "slds-button",
                disabled: !$options.changesDetected || $data.loading,
                variant: "brand",
                onClick: _cache[9] || (_cache[9] = ($event) => $options.save(false))
              }, {
                default: withCtx(() => [
                  createTextVNode(" Save ")
                ]),
                _: 1
              }, 8, ["disabled"])
            ])
          ])
        ]),
        _: 1
      }, 8, ["size", "title", "class", "footless"]);
    }
    const MetricsModal = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$d]]);
    const HierarchyReferenceDataCSV_vue_vue_type_style_index_0_scoped_27a99f90_lang = "";
    const _sfc_main$c = {
      name: "HierarchyReferenceDataCSV",
      components: {
        Button: SLDSButton,
        Checkbox,
        FileImport,
        Spinner,
        TextInput,
        Picklist,
        DataTable
      },
      props: ["planId"],
      emits: ["show-errors"],
      data() {
        return {
          loadingMsg: "",
          hideUnchecked: false,
          showErrors: false,
          csvRows: [],
          csvColumns: [],
          rows: [],
          columns: [
            { id: "csvColumnName", name: "CSV Column Name" },
            { id: "sampleData", name: "Sample Data" },
            { id: "apiName", name: "Reference Field API Name" },
            { id: "dataType", name: "Data Type" },
            { id: "description", name: "Description" }
          ],
          csvFile: null,
          csvKey: "",
          fileName: ""
        };
      },
      computed: {
        hasSelectedRows() {
          return this.rows.some((row) => row.data[0].selected);
        },
        hasErrors() {
          return !this.hasSelectedRows || this.rows.some((row) => row.data[0].selected && !row.data[2].value);
        },
        computedRows() {
          if (!this.hideUnchecked)
            return this.rows;
          return this.rows.filter((row) => row.data[0].selected);
        },
        parsedReferenceFields() {
          const plan = this.$store.plan.Id === this.$props.planId ? this.$store.plan : {};
          return JSON.parse((plan == null ? void 0 : plan.sfsp__HierarchyReference__c) || "[]");
        }
      },
      watch: {
        csvKey: {
          handler() {
            if (!this.csvKey)
              this.rows = [];
            else
              this.loadTable();
          }
        },
        hasErrors() {
          if (this.showErrors)
            this.$emit("show-errors", { error: this.hasErrors, message: "Please select at least one column and a field for each selected column" });
        }
      },
      mounted() {
        SPM.Components.HierarchyReferenceDataCSV = this;
      },
      methods: {
        async save() {
          if (this.hasErrors) {
            this.showErrors = true;
            this.$emit("show-errors", { error: this.hasErrors, message: "Please select at least one column and a field for each selected column" });
            return;
          }
          try {
            await this.uploadCsv({ csvFile: this.csvFile, preview: false });
            this.loadingMsg = "Updating Hierarchy Reference Fields...";
            const selectedFields = [];
            const selectedColumnIndexes = [];
            const csvKeyFieldIndex = this.csvColumns.findIndex((colName) => colName === this.csvKey);
            this.rows.forEach((row, index) => {
              if (row.data[0].selected) {
                selectedColumnIndexes.push(index >= csvKeyFieldIndex ? index + 1 : index);
                selectedFields.push({
                  name: row.data[2].value.replaceAll(/\s/g, ""),
                  // target field name
                  type: row.data[3].value,
                  // field data type
                  description: row.data[4].value,
                  // field description
                  colname: row.data[0].value.replaceAll(/\s/g, "")
                  // csv colname
                });
              }
            });
            const planReferenceFields = this.parsedReferenceFields;
            selectedFields.forEach(({ name, type, description }) => {
              const dataType = type === "Number" ? "Numeric" : "Text";
              const refField = {
                name: name.replaceAll(/\s/g, ""),
                // make name the same as the nodeRowsToUpdate key
                label: name,
                // leave the name the way it is for the label
                type: dataType,
                description,
                source: "CSV"
              };
              refField["All Org"] = null;
              const existingField = planReferenceFields.find((f) => f.name === refField.name);
              if (!existingField)
                planReferenceFields.push({ ...refField, createdDate: Date.now() });
              else
                Object.assign(existingField, { ...refField, lastModifiedDate: Date.now() });
            });
            const nodeRowsToUpdate = {};
            const csvNodeNames = this.csvRows.map((row) => row[csvKeyFieldIndex]);
            const planNodes = await SPM.Utils.Rest.invoke("Query", { query: `SELECT Id, Name, sfsp__SalesPlan__c, sfsp__HierarchyReferenceData__c FROM sfsp__SalesNode__c WHERE sfsp__SalesPlan__c = '${this.$props.planId}' AND Name IN ('${csvNodeNames.join("','")}')` });
            this.csvRows.forEach((rowData) => {
              const colNodeName = rowData[csvKeyFieldIndex];
              const nodes = planNodes.filter((v) => v.Name === colNodeName);
              if (nodes.length) {
                rowData.forEach((d, i2) => {
                  if (selectedColumnIndexes.includes(i2)) {
                    const columnName = this.csvColumns[i2];
                    const tableRow = this.rows.find((r) => r.data[0].value === columnName);
                    const fieldName = tableRow.data[2].value.replaceAll(/\s/g, "");
                    if (colNodeName === "All Org") {
                      const refField = planReferenceFields.find((p2) => p2.name === fieldName);
                      refField["All Org"] = d;
                      Object.assign(refField, { ...refField });
                    } else {
                      nodes.forEach((node) => {
                        node.sfsp__HierarchyReferenceData__c = JSON.parse((node == null ? void 0 : node.sfsp__HierarchyReferenceData__c) || "[]");
                        const existingRefData = node.sfsp__HierarchyReferenceData__c.find((r) => r.hasOwnProperty(fieldName));
                        const storeNode = this.$store.nodeMap[node.Id];
                        if (!existingRefData) {
                          const fieldMapping = { [fieldName]: d };
                          node.sfsp__HierarchyReferenceData__c.push(fieldMapping);
                          if (storeNode)
                            storeNode.referenceData.push(fieldMapping);
                        } else {
                          existingRefData[fieldName] = d;
                          if (storeNode)
                            storeNode.referenceData.find((r) => r.hasOwnProperty(fieldName))[fieldName] = d;
                        }
                      });
                    }
                  }
                });
                if (colNodeName !== "All Org") {
                  nodes.forEach((node) => {
                    const nodeUpdate = {
                      Id: node.Id,
                      sfsp__HierarchyReferenceData__c: JSON.stringify(node.sfsp__HierarchyReferenceData__c)
                    };
                    nodeRowsToUpdate[node.Id] = nodeUpdate;
                  });
                }
              }
            });
            if (Object.keys(nodeRowsToUpdate).length) {
              await SPM.Utils.CRM.upsert({ records: Object.values(nodeRowsToUpdate) });
            }
            const [planObject] = await SPM.Utils.Apex.invoke("UpdateSObjects", [
              [{
                Id: this.$props.planId,
                sfsp__HierarchyReference__c: JSON.stringify(planReferenceFields)
              }],
              true
            ]);
            this.$store.$patch((state) => {
              const plan = state.plan;
              state.plan = Object.assign(plan, { ...planObject });
              state.hasChanged = true;
            });
            this.$store.toast({ message: `Hierarchy Reference Field(s) successfully imported (${Object.keys(nodeRowsToUpdate).length}) nodes.`, duration: 2500, state: Object.keys(nodeRowsToUpdate).length ? "success" : "error" });
          } catch (err) {
            this.$store.toast({ message: "Hierarchy Reference Field(s) failed to import.", duration: null, state: "error" });
          } finally {
            await this.$nextTick();
            this.loadingMsg = "";
            SPM.Components.HierarchyReferenceDataModal.view = SPM.Components.HierarchyReferenceDataModal.Views.LIST;
          }
        },
        async onFileChange({ file }) {
          if (!file) {
            this.fileName = "";
            this.csvKey = "";
            this.hideUnchecked = false;
            return;
          }
          this.fileName = file.name;
          await this.$nextTick();
          this.uploadCsv({ csvFile: file, preview: true });
        },
        async uploadCsv({ csvFile, preview }) {
          this.loadingMsg = "Uploading CSV...";
          const csvData = [];
          await new Promise((resolve2, reject) => {
            if (csvFile.type.includes("csv") || /.+(.csv)$/.test(csvFile.name)) {
              const config = { header: true, skipEmptyLines: true, worker: true };
              if (preview)
                config.preview = 5;
              let rowCount = 0;
              Papa.parse(csvFile, {
                ...config,
                step: async (result) => {
                  this.loadingMsg = `Parsing Rows...(${rowCount})`;
                  csvData.push(result.data);
                  rowCount++;
                  await this.$nextTick();
                },
                complete: () => {
                  this.loadingMsg = `Completed ${csvData} Rows`;
                  this.csvRows = csvData.map((row) => Object.values(row));
                  if (preview) {
                    this.csvColumns = Object.keys(csvData[0]);
                    this.csvFile = csvFile;
                  }
                  resolve2();
                }
              });
            } else {
              this.$store.toast({ message: "This file is not of type csv. Check the file type.", state: "warning", duration: null });
              this.fileName = "";
              this.csvKey = "";
              this.hideUnchecked = false;
              resolve2();
            }
          });
          await this.$nextTick();
          this.loadingMsg = "";
          return csvData;
        },
        loadTable() {
          const availableFields = this.csvColumns.filter((colName) => colName !== this.csvKey);
          const csvKeyFieldIndex = this.csvColumns.findIndex((colName) => colName === this.csvKey);
          this.rows = availableFields.map((fieldName, index) => ({
            id: index,
            data: [
              { id: "ColumnName", format: "ColumnName", type: "custom", selected: false, value: fieldName },
              {
                id: "State",
                format: "State",
                type: "custom",
                // get sample data from first 5 rows
                value: this.csvRows.slice(0, 5).map((row) => index >= csvKeyFieldIndex ? row[index + 1] : row[index]).join(", ")
              },
              { id: "FieldName", format: "FieldName", type: "custom", value: "" },
              {
                id: "DataType",
                format: "DataType",
                type: "custom",
                value: index >= csvKeyFieldIndex ? /^[0-9,.-]*$/.test(this.csvRows[0][index + 1]) ? "Number" : "Text" : /^[0-9,.-]*$/.test(this.csvRows[0][index]) ? "Number" : "Text"
              },
              { id: "Description", format: "Description", type: "custom", value: "" }
            ]
          }));
        },
        async mapFields() {
          this.loadingMsg = "Loading...";
          this.rows.forEach((row) => {
            if (!row.data[0].selected)
              return;
            const columnName = row.data[0].value;
            if (this.parsedReferenceFields.find((f) => f.name.toLowerCase() === columnName.replaceAll(/\s/g, "").toLowerCase())) {
              row.data[2].value = columnName;
            }
          });
          await this.$nextTick();
          this.loadingMsg = "";
        }
      }
    };
    const _withScopeId$3 = (n) => (pushScopeId("data-v-27a99f90"), n = n(), popScopeId(), n);
    const _hoisted_1$b = { class: "slds-grid spm-full-height" };
    const _hoisted_2$b = { class: "slds-col slds-size_1-of-4 slds-theme_shade slds-p-around_medium slds-border_right" };
    const _hoisted_3$8 = /* @__PURE__ */ _withScopeId$3(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-body_regular slds-m-bottom_x-small" }, [
      /* @__PURE__ */ createBaseVNode("b", null, "Source")
    ], -1));
    const _hoisted_4$8 = { class: "slds-grid slds-grid_vertical slds-col slds-grow" };
    const _hoisted_5$8 = { class: "slds-grid slds-grid_align-spread slds-grid_vertical-align-center slds-p-around_medium" };
    const _hoisted_6$7 = /* @__PURE__ */ _withScopeId$3(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-col slds-text-body_regular" }, [
      /* @__PURE__ */ createBaseVNode("b", null, "Field Mapping")
    ], -1));
    const _hoisted_7$4 = { class: "slds-col slds-grid slds-gutters slds-grid_vertical-align-center" };
    const _hoisted_8$4 = { class: "slds-col" };
    const _hoisted_9$2 = { class: "slds-col" };
    const _hoisted_10$2 = {
      key: 1,
      class: "slds-text-align_left slds-truncate",
      style: { "max-width": "10rem" }
    };
    const _hoisted_11$2 = /* @__PURE__ */ _withScopeId$3(() => /* @__PURE__ */ createBaseVNode("label", {
      class: "slds-assistive-text",
      for: "csvFieldName"
    }, "Field Name", -1));
    function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_FileImport = resolveComponent("FileImport");
      const _component_Picklist = resolveComponent("Picklist");
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_Button = resolveComponent("Button");
      const _component_Spinner = resolveComponent("Spinner");
      const _component_TextInput = resolveComponent("TextInput");
      const _component_DataTable = resolveComponent("DataTable");
      return openBlock(), createElementBlock("div", _hoisted_1$b, [
        createBaseVNode("div", _hoisted_2$b, [
          _hoisted_3$8,
          createVNode(_component_FileImport, { onFileChange: $options.onFileChange }, null, 8, ["onFileChange"]),
          $data.fileName ? (openBlock(), createBlock(_component_Picklist, {
            key: 0,
            modelValue: $data.csvKey,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.csvKey = $event),
            class: "slds-m-bottom_x-small",
            required: "",
            filterable: "",
            labels: { name: "Node Name", placeholder: "Select Field..." },
            options: $data.csvColumns
          }, null, 8, ["modelValue", "labels", "options"])) : createCommentVNode("", true)
        ]),
        createBaseVNode("div", _hoisted_4$8, [
          createBaseVNode("div", _hoisted_5$8, [
            _hoisted_6$7,
            createBaseVNode("div", _hoisted_7$4, [
              createBaseVNode("div", _hoisted_8$4, [
                createVNode(_component_Checkbox, {
                  modelValue: $data.hideUnchecked,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.hideUnchecked = $event),
                  ariaLabeledBy: `${$data.hideUnchecked}`,
                  labels: { name: "Hide Unchecked" }
                }, null, 8, ["modelValue", "ariaLabeledBy"])
              ]),
              createBaseVNode("div", _hoisted_9$2, [
                createVNode(_component_Button, {
                  variant: "brand",
                  label: "Smart Map Fields",
                  disabled: !$options.hasSelectedRows,
                  onClick: $options.mapFields
                }, null, 8, ["disabled", "onClick"])
              ])
            ])
          ]),
          $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
            description: withCtx(() => [
              createTextVNode(toDisplayString($data.loadingMsg), 1)
            ]),
            _: 1
          })) : createCommentVNode("", true),
          createVNode(_component_DataTable, {
            columns: $data.columns,
            rows: $options.computedRows,
            bordered: ""
          }, {
            cell: withCtx((cell) => [
              cell.data.format === "ColumnName" ? (openBlock(), createBlock(_component_Checkbox, {
                key: 0,
                modelValue: cell.data.selected,
                "onUpdate:modelValue": ($event) => cell.data.selected = $event,
                ariaLabeledBy: `${cell.data.value}`,
                labels: { name: `${cell.data.value}` }
              }, null, 8, ["modelValue", "onUpdate:modelValue", "ariaLabeledBy", "labels"])) : createCommentVNode("", true),
              cell.data.format === "State" ? (openBlock(), createElementBlock("div", _hoisted_10$2, toDisplayString(cell.data.value), 1)) : createCommentVNode("", true),
              _hoisted_11$2,
              cell.data.format === "FieldName" ? (openBlock(), createBlock(_component_Picklist, {
                key: 2,
                modelValue: cell.data.value,
                "onUpdate:modelValue": ($event) => cell.data.value = $event,
                labelForId: "csvFieldName",
                combobox: "",
                options: $options.parsedReferenceFields,
                idKey: "name",
                titleKey: "name",
                labels: { placeholder: "Add Name..." },
                errors: $data.showErrors && cell.row.data[0].selected && !cell.data.value ? [""] : []
              }, null, 8, ["modelValue", "onUpdate:modelValue", "options", "labels", "errors"])) : createCommentVNode("", true),
              cell.data.format === "DataType" ? (openBlock(), createBlock(_component_Picklist, {
                key: 3,
                modelValue: cell.data.value,
                "onUpdate:modelValue": ($event) => cell.data.value = $event,
                options: ["Number", "Text"]
              }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
              cell.data.format === "Description" ? (openBlock(), createBlock(_component_TextInput, {
                key: 4,
                modelValue: cell.data.value,
                "onUpdate:modelValue": ($event) => cell.data.value = $event,
                labels: { placeholder: "Add Description..." }
              }, null, 8, ["modelValue", "onUpdate:modelValue", "labels"])) : createCommentVNode("", true)
            ]),
            _: 1
          }, 8, ["columns", "rows"])
        ])
      ]);
    }
    const HierarchyReferenceDataCSV = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$c], ["__scopeId", "data-v-27a99f90"]]);
    const _sfc_main$b = {
      name: "HierarchyReferenceDataTable",
      components: {
        SLDSButton,
        DataTable,
        Layout,
        LayoutItem
      },
      props: ["planId"],
      emits: ["set-view"],
      data() {
        return {
          columns: [
            { id: "fieldLabel", name: "Field Label" },
            { id: "fieldName", name: "Field Name" },
            { id: "description", name: "Description" },
            { id: "type", name: "Type" },
            { id: "createdDate", name: "Created Date" }
          ],
          ready: false,
          rows: []
        };
      },
      computed: {
        computedRows() {
          const plan = this.$store.plan.Id === this.$props.planId ? this.$store.plan : {};
          return JSON.parse((plan == null ? void 0 : plan.sfsp__HierarchyReference__c) || "[]").map((f) => ({
            data: [
              f.label,
              f.name,
              f.description,
              f.type,
              f.createdDate ? this.$F("DateTime", new Date(f.createdDate)) : ""
            ]
          }));
        },
        $parentCmp() {
          return SPM.Components.HierarchyReferenceDataModal;
        }
      },
      mounted() {
        this.$parentCmp.loading = true;
        setTimeout(() => {
          this.ready = true;
          this.$parentCmp.loading = false;
        }, 500);
      },
      methods: {
        onCRM() {
          this.$emit("set-view", Views.CRM);
        },
        onCSV() {
          this.$emit("set-view", Views.CSV);
        }
      }
    };
    const _hoisted_1$a = { style: { "min-height": "100px" } };
    const _hoisted_2$a = /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-heading_small" }, "Reference Fields", -1);
    function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Layout = resolveComponent("Layout");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_LayoutItem = resolveComponent("LayoutItem");
      const _component_DataTable = resolveComponent("DataTable");
      return openBlock(), createElementBlock("div", _hoisted_1$a, [
        $data.ready ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createVNode(_component_Layout, {
            class: "slds-p-around_small",
            horizontalAlign: "spread",
            style: { "background": "#F3F3F3" }
          }, {
            default: withCtx(() => [
              createVNode(_component_Layout, { verticalAlign: "center" }, {
                default: withCtx(() => [
                  _hoisted_2$a
                ]),
                _: 1
              }),
              _ctx.$store.isAdmin || _ctx.$store.isManager ? (openBlock(), createBlock(_component_LayoutItem, { key: 0 }, {
                default: withCtx(() => [
                  createVNode(_component_SLDSButton, {
                    label: "Import from CSV",
                    onClick: $options.onCSV
                  }, null, 8, ["onClick"])
                ]),
                _: 1
              })) : createCommentVNode("", true)
            ]),
            _: 1
          }),
          createVNode(_component_DataTable, {
            columns: $data.columns,
            rows: $options.computedRows
          }, null, 8, ["columns", "rows"])
        ], 64)) : createCommentVNode("", true)
      ]);
    }
    const HierarchyReferenceDataTable = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$b]]);
    const HierarchyReferenceDataModal_vue_vue_type_style_index_0_scoped_2979ec9a_lang = "";
    const _sfc_main$a = {
      name: "HierarchyReferenceDataTableModal",
      components: {
        // local
        FormErrorIndicator,
        HierarchyReferenceDataCSV,
        HierarchyReferenceDataTable,
        // slds
        SLDSButton,
        ButtonIcon,
        Modal,
        Spinner
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          loading: false,
          renderErrorButtonIcon: false,
          renderCSVErrorButtonIcon: false,
          renderCSVErrorButtonMessage: "",
          view: this.$props.config.view || Views.LIST,
          Views
        };
      },
      computed: {
        computedSize() {
          switch (this.view) {
            case Views.CSV:
              return "large";
            default:
              return "medium";
          }
        },
        computedTitle() {
          switch (this.view) {
            case Views.CSV:
              return "Import Reference Fields to Hierarchy";
            case Views.LIST:
              return "Manage Hierarchy Reference Fields";
            default:
              return "";
          }
        }
      },
      watch: {
        view(value) {
          this.cancelIsBack = value !== Views.LIST;
        }
      },
      created() {
        SPM.Components.HierarchyReferenceDataModal = this;
      },
      methods: {
        save(addAnother) {
          this.$refs[this.view].save(addAnother);
        },
        cancelGoBack() {
          if (this.cancelIsBack) {
            this.renderErrorButtonIcon = false;
            this.renderCSVErrorButtonIcon = false;
            this.renderCSVErrorButtonMessage = "";
            this.view = this.Views.LIST;
          } else {
            this.$emit("close");
          }
        },
        showErrors(v) {
          this.renderCSVErrorButtonIcon = v.error;
          this.renderCSVErrorButtonMessage = v.message;
        }
      }
    };
    const _hoisted_1$9 = { key: 3 };
    const _hoisted_2$9 = { class: "slds-m-right_x-small" };
    function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_HierarchyReferenceDataCSV = resolveComponent("HierarchyReferenceDataCSV");
      const _component_HierarchyReferenceDataTable = resolveComponent("HierarchyReferenceDataTable");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_FormErrorIndicator = resolveComponent("FormErrorIndicator");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        size: $options.computedSize,
        title: $options.computedTitle,
        class: normalizeClass({
          "min-height": $data.view === $data.Views.CSV,
          "no-padding": [$data.Views.LIST, $data.Views.CSV].includes($data.view)
        }),
        onClose: _cache[5] || (_cache[5] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          $data.loading ? (openBlock(), createBlock(_component_Spinner, {
            key: 0,
            immediate: ""
          })) : createCommentVNode("", true),
          $data.view === $data.Views.CSV ? (openBlock(), createBlock(_component_HierarchyReferenceDataCSV, {
            key: 1,
            ref: $data.Views.CSV,
            planId: _ctx.$props.config.planId,
            onShowErrors: _cache[0] || (_cache[0] = (v) => $options.showErrors(v))
          }, null, 8, ["planId"])) : $data.view === $data.Views.LIST ? (openBlock(), createBlock(_component_HierarchyReferenceDataTable, {
            key: 2,
            ref: "table",
            planId: _ctx.$props.config.planId,
            onSetView: _cache[1] || (_cache[1] = ($event) => $data.view = $event)
          }, null, 8, ["planId"])) : (openBlock(), createElementBlock("div", _hoisted_1$9, "View does not exist."))
        ]),
        footer: withCtx(() => [
          $data.renderErrorButtonIcon ? (openBlock(), createBlock(_component_ButtonIcon, {
            key: 0,
            ref: "errorButtonIcon",
            assistiveText: "Error",
            title: "Error",
            iconCategory: "utility",
            iconName: "error",
            iconSize: "large",
            class: "slds-button_icon-error",
            onClick: _cache[2] || (_cache[2] = ($event) => _ctx.$refs[$data.Views.CRM].error.renderPopover = !_ctx.$refs[$data.Views.CRM].error.renderPopover)
          }, null, 512)) : createCommentVNode("", true),
          createBaseVNode("span", _hoisted_2$9, [
            $data.renderCSVErrorButtonIcon ? (openBlock(), createBlock(_component_FormErrorIndicator, {
              key: 0,
              error: $data.renderCSVErrorButtonMessage
            }, null, 8, ["error"])) : createCommentVNode("", true)
          ]),
          $data.view !== $data.Views.LIST ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createVNode(_component_SLDSButton, { onClick: $options.cancelGoBack }, {
              default: withCtx(() => [
                createTextVNode(" Cancel ")
              ]),
              _: 1
            }, 8, ["onClick"]),
            createVNode(_component_SLDSButton, {
              variant: "brand",
              onClick: _cache[3] || (_cache[3] = ($event) => $options.save(false))
            }, {
              default: withCtx(() => [
                createTextVNode(" Save ")
              ]),
              _: 1
            })
          ], 64)) : (openBlock(), createBlock(_component_SLDSButton, {
            key: 2,
            onClick: _cache[4] || (_cache[4] = ($event) => _ctx.$emit("close"))
          }, {
            default: withCtx(() => [
              createTextVNode(" Close ")
            ]),
            _: 1
          }))
        ]),
        _: 1
      }, 8, ["size", "title", "class"]);
    }
    const HierarchyReferenceDataModal = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$a], ["__scopeId", "data-v-2979ec9a"]]);
    const PlanningElementsUpdateModal_vue_vue_type_style_index_0_scoped_f5cc7f87_lang = "";
    const _sfc_main$9 = {
      name: "PlanningElementsUpdate",
      components: {
        SLDSButton,
        DataTable,
        Spinner,
        Modal
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          columns: [
            { name: "Element Name", id: "name" },
            { name: "Type", id: "type" },
            { name: "Status", id: "status" },
            { name: "Details", id: "details" }
          ],
          rows: [],
          loadingMsg: ""
        };
      },
      watch: {
        "$store.salesAsyncJobs": {
          async handler() {
            this.refreshTable();
          },
          deep: true
        },
        "$store.assignmentObjects": {
          async handler() {
            this.refreshTable();
          },
          deep: true
        }
      },
      async mounted() {
        this.refreshTable();
      },
      methods: {
        refreshTable() {
          this.loadingMsg = "Checking for Planning Element Updates...";
          this.rows = [];
          this.$store.assignmentObjects.forEach((a) => {
            var _a2;
            if (a.asyncJob.status !== "Success" || !((_a2 = a.recordsDataset) == null ? void 0 : _a2.dimensions) || a.assignmentsDataset.dataflowStatus !== "" && a.recordsDataset.dataflowStatus !== "") {
              const filteredStatusRow = this.rows.find((f) => f.id === a.id && f.format === "status");
              const filteredDetailsRow = this.rows.find((f) => f.id === a.id && f.format === "details");
              const updateStatus = a.assignmentsDataset.dataflowStatus && a.recordsDataset.dataflowStatus ? a.recordsDataset.dataflowStatus : a.asyncJob.status;
              const updateDetails = a.assignmentsDataset.dataflowStatus && a.recordsDataset.dataflowStatus ? `${a.recordsDataset.dataflowStatus} Dataflow Job...` : a.asyncJob.details;
              if (filteredStatusRow && filteredDetailsRow) {
                filteredStatusRow.state = "loading";
                filteredDetailsRow.state = "loading";
                filteredStatusRow.value = updateStatus;
                filteredDetailsRow.value = updateDetails;
                filteredStatusRow.state = "loaded";
                filteredDetailsRow.state = "loaded";
              } else {
                this.rows.push({
                  data: [
                    { id: a.id, value: a.label, type: "custom", state: "loaded", format: "name", loaded: true },
                    { id: a.id, value: a.asyncJob.type, type: "custom", state: "loaded", format: "type", loaded: true },
                    { id: a.id, value: updateStatus, type: "custom", state: "loaded", format: "status", loaded: true },
                    { id: a.id, value: updateDetails, type: "custom", state: "loaded", format: "details", loaded: true }
                  ]
                });
              }
            } else {
              const filteredRows = this.rows.filter((f) => f.id === a.id);
              if (filteredRows.length > 0) {
                const startIndex = this.rows.findIndex((i2) => i2.id === a.id);
                this.rows = this.rows.toSpliced(filteredRows.length, startIndex);
              }
              if (this.$store.salesAsyncJobs.length > 0 && this.$store.salesAsyncJobs.some((j) => j.sfsp__SalesAssignmentObject__c === a.id)) {
                this.$store.salesAsyncJobs.filter((f) => f.sfsp__SalesAssignmentObject__c === a.id).forEach((s) => {
                  this.rows.push({
                    data: [
                      { id: s.Id, value: a.label, type: "custom", state: "loaded", format: "name", loaded: true },
                      { id: s.Id, value: s.sfsp__Type__c, type: "custom", state: "loaded", format: "type", loaded: true },
                      { id: s.Id, value: s.sfsp__Status__c, type: "custom", state: "loaded", format: "status", loaded: true },
                      { id: s.Id, value: `${s.Name}-${s.Id}`, type: "custom", state: "loaded", format: "details", loaded: true }
                    ]
                  });
                });
              }
            }
          });
          this.loadingMsg = "";
        }
      }
    };
    const _withScopeId$2 = (n) => (pushScopeId("data-v-f5cc7f87"), n = n(), popScopeId(), n);
    const _hoisted_1$8 = { key: 0 };
    const _hoisted_2$8 = {
      class: "slds-grid slds-grid_vertical slds-align_absolute-center slds-m-vertical_large",
      style: { "min-height": "6.5rem" }
    };
    const _hoisted_3$7 = {
      key: 1,
      style: { "min-height": "6.5rem" }
    };
    const _hoisted_4$7 = {
      key: 0,
      class: "slds-grid slds-grid_vertical-align-center"
    };
    const _hoisted_5$7 = { key: 1 };
    const _hoisted_6$6 = {
      key: 1,
      class: "slds-grid slds-grid_vertical-align-center"
    };
    const _hoisted_7$3 = { key: 1 };
    const _hoisted_8$3 = {
      key: 2,
      class: "slds-grid slds-grid_vertical-align-center"
    };
    const _hoisted_9$1 = { key: 1 };
    const _hoisted_10$1 = {
      key: 3,
      class: "slds-grid slds-grid_vertical-align-center"
    };
    const _hoisted_11$1 = { key: 1 };
    const _hoisted_12$1 = {
      key: 1,
      class: "slds-grid slds-grid_vertical slds-align_absolute-center slds-m-vertical_medium",
      style: { "min-height": "6.5rem" }
    };
    const _hoisted_13$1 = /* @__PURE__ */ _withScopeId$2(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-text-heading_small slds-m-bottom_xx-small" }, "No planning element updates.", -1));
    const _hoisted_14 = [
      _hoisted_13$1
    ];
    const _hoisted_15 = { class: "slds-grid" };
    const _hoisted_16 = { class: "slds-col_bump-left" };
    function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_DataTable = resolveComponent("DataTable");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        title: _ctx.$props.config.title,
        size: "small",
        class: normalizeClass({
          "no-padding": true
        }),
        onClose: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          $data.loadingMsg ? (openBlock(), createElementBlock("div", _hoisted_1$8, [
            createBaseVNode("div", _hoisted_2$8, [
              $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
                description: withCtx(() => [
                  createTextVNode(toDisplayString($data.loadingMsg), 1)
                ]),
                _: 1
              })) : createCommentVNode("", true)
            ])
          ])) : (openBlock(), createElementBlock("div", _hoisted_3$7, [
            $data.rows.length > 0 ? (openBlock(), createBlock(_component_DataTable, {
              key: 0,
              columns: $data.columns,
              rows: $data.rows,
              bordered: ""
            }, {
              cell: withCtx((cell) => [
                cell.data.format === "name" ? (openBlock(), createElementBlock("div", _hoisted_4$7, [
                  cell.data.state === "loading" ? (openBlock(), createBlock(_component_Spinner, {
                    key: 0,
                    size: "x-small",
                    style: { "z-index": "1", "background-color": "unset" }
                  })) : (openBlock(), createElementBlock("div", _hoisted_5$7, toDisplayString(cell.data.value), 1))
                ])) : cell.data.format === "type" ? (openBlock(), createElementBlock("div", _hoisted_6$6, [
                  cell.data.state === "loading" ? (openBlock(), createBlock(_component_Spinner, {
                    key: 0,
                    size: "x-small",
                    style: { "z-index": "1", "background-color": "unset" }
                  })) : (openBlock(), createElementBlock("div", _hoisted_7$3, toDisplayString(cell.data.value), 1))
                ])) : cell.data.format === "status" ? (openBlock(), createElementBlock("div", _hoisted_8$3, [
                  cell.data.state === "loading" ? (openBlock(), createBlock(_component_Spinner, {
                    key: 0,
                    size: "x-small",
                    style: { "z-index": "1", "background-color": "unset" }
                  })) : (openBlock(), createElementBlock("div", _hoisted_9$1, toDisplayString(cell.data.value), 1))
                ])) : cell.data.format === "details" ? (openBlock(), createElementBlock("div", _hoisted_10$1, [
                  cell.data.state === "loading" ? (openBlock(), createBlock(_component_Spinner, {
                    key: 0,
                    size: "x-small",
                    style: { "z-index": "1", "background-color": "unset" }
                  })) : (openBlock(), createElementBlock("div", _hoisted_11$1, toDisplayString(cell.data.value), 1))
                ])) : createCommentVNode("", true)
              ]),
              _: 1
            }, 8, ["columns", "rows"])) : (openBlock(), createElementBlock("div", _hoisted_12$1, _hoisted_14))
          ]))
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_15, [
            createBaseVNode("div", _hoisted_16, [
              createVNode(_component_SLDSButton, {
                class: normalizeClass(["slds-button", { "slds-button_brand": $data.rows.length === 0 }]),
                variant: "neutral",
                onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
              }, {
                default: withCtx(() => [
                  createTextVNode("Close")
                ]),
                _: 1
              }, 8, ["class"])
            ])
          ])
        ]),
        _: 1
      }, 8, ["title"]);
    }
    const PlanningElementsUpdateModal = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$9], ["__scopeId", "data-v-f5cc7f87"]]);
    const _sfc_main$8 = {
      name: "Alert",
      components: {
        SLDSButton,
        ButtonIcon,
        Spinner,
        Icon
      },
      props: {
        /**
         * Type of notification shown to the user
         */
        assistiveText: {
          type: String,
          required: true,
          validator: (value) => {
            const variations = [
              "info",
              "warning",
              "error",
              "offline"
            ];
            const isValid2 = !value || variations.includes(value);
            if (!isValid2)
              console.error(`Valid variant prop values are ${variations.join(", ")}`);
            return isValid2;
          }
        },
        /**
         * Alert Text to be display to user
         */
        alertText: {
          type: String,
          required: true
        },
        /**
         * Alert Link to open a status modal default is PlanningElementsUpdateModal.vue
         */
        alertLink: {
          type: String,
          default: "Tell me more."
        },
        /**
         * HTML title attribute.
         */
        title: {
          type: String,
          default: "User Notification"
        }
      },
      emits: ["close"],
      data() {
        return {
          classes: [
            "slds-notify",
            "slds-notify_alert"
          ],
          showSpinner: true
        };
      },
      computed: {
        alertSymbol() {
          return this.$props.assistiveText === "info" ? "user" : this.$props.assistiveText;
        },
        alertClasses() {
          if (this.$props.assistiveText !== "info") {
            this.classes.push(`slds-alert_${this.$props.assistiveText}`);
          }
          this.classes.push("slds-is-relative");
          return this.classes;
        },
        alertTitle() {
          const assistiveText = this.$props.assistiveText;
          const titleType = assistiveText.charAt(0).toUpperCase() + assistiveText.slice(1);
          return `User ${titleType} Notification`;
        }
      },
      methods: {
        loadPlanUpdateModal() {
          SPM.Components.Root.openModal("planningElementsUpdate", {
            title: "Updates to Sales Plan",
            planId: this.$store.plan.Id
          });
        }
      }
    };
    const _hoisted_1$7 = { class: "slds-assistive-text" };
    const _hoisted_2$7 = ["title"];
    function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Icon = resolveComponent("Icon");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass($options.alertClasses),
        role: "alert"
      }, [
        createBaseVNode("span", _hoisted_1$7, toDisplayString(_ctx.$props.assistiveText), 1),
        createBaseVNode("span", {
          class: "slds-icon_container slds-icon-utility-user slds-m-right_medium",
          title: $options.alertTitle
        }, [
          $data.showSpinner ? (openBlock(), createBlock(_component_Spinner, {
            key: 0,
            size: "x-small",
            theme: "inverse",
            withoutContainer: "",
            class: "slds-is-relative"
          })) : (openBlock(), createBlock(_component_Icon, {
            key: 1,
            name: "user",
            category: "utility",
            size: "x-small",
            iconClass: "slds-icon",
            assistiveText: _ctx.$props.assistiveText,
            variant: "inverse"
          }, null, 8, ["assistiveText"]))
        ], 8, _hoisted_2$7),
        createBaseVNode("h2", null, [
          createTextVNode(toDisplayString(_ctx.$props.alertText) + " ", 1),
          $props.alertLink ? (openBlock(), createElementBlock("a", {
            key: 0,
            onClick: _cache[0] || (_cache[0] = (...args) => $options.loadPlanUpdateModal && $options.loadPlanUpdateModal(...args))
          }, toDisplayString($props.alertLink), 1)) : createCommentVNode("", true)
        ])
      ], 2);
    }
    const Alert = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$8]]);
    const Country_vue_vue_type_style_index_0_scoped_db0de05b_lang = "";
    const _sfc_main$7 = {
      name: "Country",
      components: {
        // Checkbox,
        Icon
        // Picklist,
        // Badge,
        // Spinner,
        // Popover
      },
      props: ["country"],
      data() {
        return {
          isLoading: false,
          progress: "",
          showBoundaryFilter: false,
          boundariesFilterTerm: "",
          filterOptions: []
        };
      },
      watch: {
        "country.selected": {
          handler(selected) {
            if (selected)
              this.loadBoundary(this.country.selectedBoundary);
            this.$emit("change", this.country);
          }
        },
        "country.selectedBoundary": {
          handler(selectedBoundary) {
            this.country.filter.splice(0);
            this.loadBoundary(selectedBoundary);
            this.$emit("change", this.country);
          }
        },
        boundariesFilterTerm() {
          this.filterOptions.forEach((opt) => {
            opt.visible = this.boundariesFilterTerm.length === 0 || opt.Id.toLowerCase().startsWith(this.boundariesFilterTerm.toLowerCase());
          });
        }
      },
      mounted() {
        if (this.country.selected) {
          this.loadBoundary(this.country.selectedBoundary);
        }
      },
      methods: {
        setElementToIgnore(el) {
          this.elementToIgnore = el;
        },
        manageBoundaryFilterSelections(state) {
          this.filterOptions.forEach((fc) => fc.selected = state);
        },
        showPopup() {
          this.showBoundaryFilter = this.country.canFilter;
        },
        cancelBoundaryFilter() {
          this.filterOptions.forEach((opt) => opt.selected = this.country.filter.length === 0 || this.country.filter.includes(opt.Id));
          this.showBoundaryFilter = false;
        },
        applyPopover() {
          this.country.filter = this.filterOptions.filter((opt) => opt.selected).map((opt) => opt.Id);
          this.cancelBoundaryFilter();
          this.$emit("change", this.country);
        },
        loadBoundary(selectedBoundary) {
          this.isLoading = false;
          let hasPointBoundaries = false;
          if (selectedBoundary.endsWith("|Points") || selectedBoundary.endsWith("_Points")) {
            selectedBoundary = selectedBoundary.slice(0, selectedBoundary.length - 7);
            hasPointBoundaries = true;
          }
          const containerSet = this.$store.activeContainerSets[selectedBoundary];
          this.country.hasPointBoundaries = hasPointBoundaries;
          if (containerSet.metadata.ADMIN2) {
            if (containerSet.metadata.ADMIN2.filterable) {
              this.filterOptions = containerSet.metadata.ADMIN2.filter_options.filter((option) => !!option).sort().map((option) => ({ Id: option, Name: option, visible: true, selected: this.country.filter.length === 0 || this.country.filter.includes(option) }));
              this.country.canFilter = this.filterOptions.length > 0;
            } else if (Object.keys(containerSet.metadata.ADMIN2).includes("filterable") && !containerSet.metadata.ADMIN2.filterable) {
              this.country.canFilter = false;
            } else if (!Object.keys(containerSet.metadata.ADMIN2).includes("filterable")) {
              this.isLoading = true;
              this.progress = "Processing: 0%";
              this.$store.loadContainers({
                containerSetId: selectedBoundary,
                onDownloadProgress: (e) => {
                  if (this.country.selectedBoundary === selectedBoundary) {
                    this.progress = `Processing: ${Math.round(100 * e.loaded / e.total)}%`;
                  }
                }
              }).then(() => {
                if (this.country.selectedBoundary !== selectedBoundary)
                  return;
                const items = /* @__PURE__ */ new Set();
                Object.values(containerSet.containers).forEach((container) => {
                  if (container.metadata.hasOwnProperty("ADMIN2")) {
                    items.add(container.metadata.ADMIN2);
                  }
                });
                this.filterOptions = [...items].filter((i2) => !!i2).sort().map((item) => ({ Id: item, Name: item, visible: true, selected: this.country.filter.length === 0 || this.country.filter.includes(item) }));
                this.country.canFilter = this.filterOptions.length > 0;
                this.isLoading = false;
              });
            }
          } else {
            this.country.canFilter = false;
          }
        }
      }
    };
    const _hoisted_1$6 = {
      class: "slds-hint-parent",
      style: { "width": "100%" }
    };
    const _hoisted_2$6 = ["for"];
    const _hoisted_3$6 = ["id", "disabled"];
    const _hoisted_4$6 = {
      key: 0,
      class: "slds-icon_container"
    };
    const _hoisted_5$6 = {
      key: 1,
      class: "slds-icon_container"
    };
    const _hoisted_6$5 = {
      class: "slds-truncate",
      style: { "max-width": "5rem" }
    };
    const _hoisted_7$2 = { key: 0 };
    const _hoisted_8$2 = {
      key: 1,
      class: "slds-truncate",
      style: { "max-width": "5rem" }
    };
    function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      return openBlock(), createElementBlock("tr", _hoisted_1$6, [
        createBaseVNode("td", null, [
          createBaseVNode("label", {
            class: normalizeClass(["slds-checkbox-button", { "slds-checkbox-button_is-checked": $props.country.selected, "slds-checkbox-button_is-disabled": $props.country.disabled }]),
            for: $props.country.id
          }, [
            withDirectives(createBaseVNode("input", {
              id: $props.country.id,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $props.country.selected = $event),
              type: "checkbox",
              class: "slds-assistive-text",
              tabindex: "-1",
              disabled: $props.country.disabled
            }, null, 8, _hoisted_3$6), [
              [vModelCheckbox, $props.country.selected]
            ]),
            $props.country.selected ? (openBlock(), createElementBlock("span", _hoisted_4$6, [
              createVNode(_component_Icon, {
                category: "utility",
                name: "check",
                variant: $props.country.selected && $props.country.disabled ? "default" : "inverse",
                size: "x-small"
              }, null, 8, ["variant"])
            ])) : (openBlock(), createElementBlock("span", _hoisted_5$6, [
              createVNode(_component_Icon, {
                category: "utility",
                name: "add",
                iconClass: ["slds-icon", "slds-icon_x-small", "faux-checkbox-color"]
              })
            ]))
          ], 10, _hoisted_2$6)
        ]),
        createBaseVNode("td", _hoisted_6$5, toDisplayString($props.country.label), 1),
        createBaseVNode("td", null, toDisplayString($props.country.selectedBoundary.split("_")[0]), 1),
        $props.country.disabled ? (openBlock(), createElementBlock("td", _hoisted_7$2, "Boundary already in use")) : (openBlock(), createElementBlock("td", _hoisted_8$2, toDisplayString($props.country.boundary.label), 1)),
        createBaseVNode("td", null, toDisplayString($props.country.boundary.size), 1)
      ]);
    }
    const Country = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$7], ["__scopeId", "data-v-db0de05b"]]);
    const ContainerSetSelector_vue_vue_type_style_index_0_scoped_a82f6e44_lang = "";
    const _sfc_main$6 = {
      name: "ContainerSetSelector",
      components: {
        ButtonIcon,
        Icon,
        Country
      },
      props: ["containerSets", "usedIsoPrefixes"],
      data() {
        return {
          boundaries: [],
          filterTerm: ""
        };
      },
      watch: {
        filterTerm() {
          this.boundaries.forEach((c) => {
            c.visible = this.filterTerm.length === 0 || c.id.toLowerCase().includes(this.filterTerm.toLowerCase());
          });
        }
      },
      async created() {
        await SPM.Utils.Async.wait(250);
        const pointZips = [];
        this.boundaries = [
          ...Object.values(this.$store.activeContainerSets).map(
            (cs) => {
              const defaultValue = { value: cs.id, label: cs.boundary, size: cs.size, hasPointBoundaries: false };
              const country = {
                id: `${cs.country}.${cs.id}`,
                label: cs.country,
                visible: true,
                selected: false,
                disabled: false,
                canFilter: false,
                filter: [],
                boundary: defaultValue,
                selectedBoundary: "",
                hasPointBoundaries: false
              };
              const nodeBoundary = this.$store.salesBoundaries.find((b) => country.boundary.value === b.sfsp__ContainerSet__c && !b.sfsp__IncludePoints__c) || {};
              country.selected = !!nodeBoundary.Id;
              country.selectedBoundary = nodeBoundary.sfsp__ContainerSet__c || country.boundary.value;
              country.disabled = country.selected;
              country.filter = [];
              if (cs.id.startsWith("USA_PCB")) {
                const pointBoundary = this.$store.salesBoundaries.find((b) => country.boundary.value === b.sfsp__ContainerSet__c && b.sfsp__IncludePoints__c) || {};
                pointZips.push({
                  id: `${cs.country}.${cs.id}|Points`,
                  label: cs.country,
                  visible: true,
                  selected: !!pointBoundary.Id,
                  disabled: !!pointBoundary.Id,
                  canFilter: false,
                  filter: [],
                  boundary: { value: `${cs.id}|Points`, label: `${cs.boundary} (with point ZIP codes)`, size: `${cs.size} + Points`, hasPointBoundaries: true },
                  selectedBoundary: `${cs.id}|Points`,
                  hasPointBoundaries: true
                });
              }
              return country;
            }
          )
        ];
        this.boundaries.push(...pointZips);
        this.boundaries.sort((a, b) => {
          if (a.label < b.label) {
            return -1;
          }
          if (a.label > b.label) {
            return 1;
          }
          const compareValues = { a, b };
          ["a", "b"].forEach((key) => {
            const code2 = compareValues[key].boundary.value.split("_")[1] || "";
            let rank = 4;
            if (code2 === "PCB")
              rank = 0;
            else if (code2.startsWith("P"))
              rank = 1;
            else if (code2.startsWith("A"))
              rank = 2;
            compareValues[`${key}Rank`] = rank;
          });
          return compareValues.aRank - compareValues.bRank;
        });
        this.$emit("loaded");
      },
      methods: {
        onCountryChanged() {
          this.containerSets.splice(0, this.containerSets.length, ...this.boundaries.filter((c) => c.selected && !c.disabled).map((c) => ({ id: c.selectedBoundary, filter: c.filter, hasPointBoundaries: c.boundary.hasPointBoundaries, boundary: c.boundary })));
        }
      }
    };
    const _withScopeId$1 = (n) => (pushScopeId("data-v-a82f6e44"), n = n(), popScopeId(), n);
    const _hoisted_1$5 = { class: "slds-p-vertical_small slds-p-horizontal_large slds-theme_shade" };
    const _hoisted_2$5 = { class: "slds-form-element" };
    const _hoisted_3$5 = { class: "slds-form-element__control slds-input-has-icon slds-input-has-icon_left-right" };
    const _hoisted_4$5 = { class: "slds-text-body_small slds-text-color_weak slds-m-top_small" };
    const _hoisted_5$5 = {
      ref: "popupAnchor",
      class: "slds-theme_default",
      style: { "max-height": "400px", "overflow-y": "auto" }
    };
    const _hoisted_6$4 = { class: "slds-table slds-table_cell-buffer slds-table_bordered" };
    const _hoisted_7$1 = /* @__PURE__ */ _withScopeId$1(() => /* @__PURE__ */ createBaseVNode("thead", null, [
      /* @__PURE__ */ createBaseVNode("tr", { class: "slds-line-height_reset" }, [
        /* @__PURE__ */ createBaseVNode("th", { scope: "col" }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Select"
          })
        ]),
        /* @__PURE__ */ createBaseVNode("th", { scope: "col" }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Country"
          }, "Country ")
        ]),
        /* @__PURE__ */ createBaseVNode("th", { scope: "col" }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "ISO Code"
          }, "ISO Code")
        ]),
        /* @__PURE__ */ createBaseVNode("th", { scope: "col" }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Boundary Type"
          }, "Boundary Type")
        ]),
        /* @__PURE__ */ createBaseVNode("th", { scope: "col" }, [
          /* @__PURE__ */ createBaseVNode("div", {
            class: "slds-truncate",
            title: "Boundaries"
          }, "Boundaries")
        ])
      ])
    ], -1));
    const _hoisted_8$1 = { class: "slds-p-around_medium" };
    function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_ButtonIcon = resolveComponent("ButtonIcon");
      const _component_Country = resolveComponent("Country");
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("div", _hoisted_1$5, [
          createBaseVNode("div", _hoisted_2$5, [
            createBaseVNode("div", _hoisted_3$5, [
              createVNode(_component_Icon, {
                category: "utility",
                name: "search",
                iconClass: ["slds-icon", "slds-input__icon", "slds-input__icon_left", "slds-icon-text-default"]
              }),
              withDirectives(createBaseVNode("input", {
                id: "manage-boundaries-search-box",
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.filterTerm = $event),
                type: "text",
                placeholder: "Search Countries...",
                class: "slds-input"
              }, null, 512), [
                [vModelText, $data.filterTerm]
              ]),
              $data.filterTerm.length > 0 ? (openBlock(), createBlock(_component_ButtonIcon, {
                key: 0,
                class: "slds-input__icon slds-input__icon_right",
                title: "Clear",
                assistiveText: "Clear",
                iconCategory: "utility",
                iconName: "clear",
                onClick: _cache[1] || (_cache[1] = ($event) => $data.filterTerm = "")
              })) : createCommentVNode("", true)
            ])
          ]),
          createBaseVNode("div", _hoisted_4$5, "Selected: " + toDisplayString($props.containerSets.length), 1)
        ]),
        createBaseVNode("div", _hoisted_5$5, [
          createBaseVNode("table", _hoisted_6$4, [
            _hoisted_7$1,
            createBaseVNode("tbody", _hoisted_8$1, [
              (openBlock(true), createElementBlock(Fragment, null, renderList($data.boundaries, (country, i2) => {
                return withDirectives((openBlock(), createBlock(_component_Country, {
                  key: i2,
                  country,
                  onChange: $options.onCountryChanged
                }, null, 8, ["country", "onChange"])), [
                  [vShow, country.visible]
                ]);
              }), 128))
            ])
          ])
        ], 512)
      ]);
    }
    const ContainerSetSelector = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$6], ["__scopeId", "data-v-a82f6e44"]]);
    const GeoBoundariesModal_vue_vue_type_style_index_0_scoped_eb0ac2be_lang = "";
    const _sfc_main$5 = {
      name: "GeoBoundariesModal",
      components: {
        ContainerSetSelector,
        Button: SLDSButton,
        Icon,
        Modal,
        Spinner
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          loadingMsg: "Loading Boundaries...",
          containerSets: []
        };
      },
      computed: {
        usedIsoPrefixes() {
          return [...new Set(this.$store.salesBoundaries.map((o) => o.sfsp__ContainerSet__c))];
        }
      },
      async created() {
        if (!this.$store.allContainerSetsLoaded) {
          await this.$store.loadContainerSets();
          this.$store.$patch({ allContainerSetsLoaded: true });
        }
      },
      async mounted() {
        SPM.Components.GeoBoundariesModal = this;
      },
      methods: {
        async save() {
          try {
            this.loadingMsg = "Saving Boundaries...";
            if (!this.$store.isAdmin && !this.$store.isManager)
              return this.$store.toast({ message: "Boundaries failed to update. This user does not have permissions to manage boundaries.", state: "error", duration: null });
            const boundaryRecords = this.containerSets.map((cs) => {
              const containerSet = this.$store.containerSets[cs.id.replace("|Points", "")];
              const containerLabel = cs.hasPointBoundaries ? `${containerSet.label} (with point ZIPs)` : containerSet.label;
              const isoCode = cs.id.replace("|Points", "");
              const existingIsoBoundary = this.$store.salesBoundaries.find((b) => b.sfsp__ContainerSet__c === isoCode && b.sfsp__IncludePoints__c === cs.hasPointBoundaries);
              if (existingIsoBoundary) {
                return {
                  Id: existingIsoBoundary.Id,
                  Name: containerLabel,
                  sfsp__SalesPlan__c: this.config.plan.Id,
                  sfsp__ContainerSet__c: containerSet.id,
                  sfsp__IncludePoints__c: cs.hasPointBoundaries
                };
              }
              return {
                sobjectType: "sfsp__SalesBoundary__c",
                Name: containerLabel,
                sfsp__SalesPlan__c: this.config.plan.Id,
                sfsp__ContainerSet__c: containerSet.id,
                sfsp__IncludePoints__c: cs.hasPointBoundaries
              };
            });
            await SPM.Utils.CRM.upsert({ records: boundaryRecords, onProgress: (percent) => this.loadingMsg = `Saving Boundaries...${percent}%` });
            SPM.Utils.Async.forEachParallel(boundaryRecords, async (boundary) => this.$store.loadContainers({ containerSetId: boundary.sfsp__ContainerSet__c }), 5);
            const asyncJobs = await SPM.Utils.Apex.invoke("InsertSObjects", [
              this.$store.assignmentObjects.filter((obj) => obj.latitude && obj.longitude).map((obj) => ({
                sobjectType: "sfsp__SalesAsyncJob__c",
                sfsp__MaioEndpoint__c: SPM.maioUrl,
                sfsp__SalesAssignmentObject__c: obj.id,
                sfsp__Type__c: "Add Geo Boundaries",
                sfsp__Splunk__c: JSON.stringify({ txnId: this.$store.txnId })
              })),
              true
            ]);
            this.$store.salesAsyncJobs.push(...asyncJobs);
            const jobPromises = asyncJobs.map((job) => SPM.Utils.Apex.invoke("StartJob", [{ job: "PipAssignmentObject", version: SPM.version, requestId: job.Id, assignmentObjectId: job.sfsp__SalesAssignmentObject__c, boundaryObjectIds: boundaryRecords.map((r) => r.Id), isScratch: SPM.isScratch }]));
            const promiseResponses = await Promise.allSettled(jobPromises);
            promiseResponses.forEach((jobResponse2) => console.log(jobResponse2));
            const failedJobs = promiseResponses.filter(({ status, value }) => status === "rejected");
            if (failedJobs.length > 0) {
              await SPM.Utils.Apex.invoke("DeleteIds", [boundaryRecords.map((r) => r.Id), true]);
              this.$store.toast({ message: jobResponse.error || "Unable to start job. Please try again.", state: "error", duration: null });
            } else {
              this.config.callback(boundaryRecords);
            }
          } catch (e) {
            this.$store.toast({ message: "Boundaries failed to update", state: "error", duration: null });
          } finally {
            await this.$nextTick();
            this.loadingMsg = "";
            this.$emit("close");
          }
        }
      }
    };
    const _withScopeId = (n) => (pushScopeId("data-v-eb0ac2be"), n = n(), popScopeId(), n);
    const _hoisted_1$4 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-m-top_small" }, "Enable boundaries for assignment in your Sales Plan", -1));
    const _hoisted_2$4 = {
      class: "slds-grid slds-grid_vertical",
      style: { "min-height": "15rem" }
    };
    const _hoisted_3$4 = {
      class: "slds-grid slds-scoped-notification slds-media slds-media_center slds-scoped-notification_light",
      role: "status"
    };
    const _hoisted_4$4 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("div", { class: "slds-media__body slds-p-left_small" }, [
      /* @__PURE__ */ createBaseVNode("p", null, "Only Select boundaries required for your sales planning processes.")
    ], -1));
    const _hoisted_5$4 = { class: "slds-grid" };
    const _hoisted_6$3 = { class: "slds-col_bump-left" };
    function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Icon = resolveComponent("Icon");
      const _component_ContainerSetSelector = resolveComponent("ContainerSetSelector");
      const _component_Button = resolveComponent("Button");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "manage-geo-boundaries",
        ref: "modal",
        title: "Manage Boundaries",
        size: "small",
        detach: "",
        onClose: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("close"))
      }, {
        tagline: withCtx(() => [
          _hoisted_1$4
        ]),
        content: withCtx(() => [
          createBaseVNode("div", _hoisted_2$4, [
            $data.loadingMsg ? (openBlock(), createBlock(_component_Spinner, { key: 0 }, {
              description: withCtx(() => [
                createTextVNode(toDisplayString($data.loadingMsg), 1)
              ]),
              _: 1
            })) : createCommentVNode("", true),
            createBaseVNode("div", _hoisted_3$4, [
              createVNode(_component_Icon, {
                category: "utility",
                name: "info",
                size: "medium",
                class: "slds-button_icon-container slds-button__icon slds-button__icon_right",
                assistiveText: "Boundary Info"
              }),
              _hoisted_4$4
            ]),
            _ctx.$store.allContainerSetsLoaded ? (openBlock(), createBlock(_component_ContainerSetSelector, {
              key: 1,
              id: "boundaries-selector",
              class: "slds-col",
              containerSets: $data.containerSets,
              usedIsoPrefixes: $options.usedIsoPrefixes,
              onLoaded: _cache[0] || (_cache[0] = ($event) => $data.loadingMsg = "")
            }, null, 8, ["containerSets", "usedIsoPrefixes"])) : createCommentVNode("", true)
          ])
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_5$4, [
            createBaseVNode("div", _hoisted_6$3, [
              createVNode(_component_Button, {
                class: "slds-button slds-button_neutral",
                disabled: $data.loadingMsg.length > 0,
                onClick: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
              }, {
                default: withCtx(() => [
                  createTextVNode("Cancel")
                ]),
                _: 1
              }, 8, ["disabled"]),
              createVNode(_component_Button, {
                class: "slds-button slds-button_brand",
                disabled: $data.containerSets.length === 0 || $data.loadingMsg.length > 0,
                onClick: $options.save
              }, {
                default: withCtx(() => [
                  createTextVNode("Add")
                ]),
                _: 1
              }, 8, ["disabled", "onClick"])
            ])
          ])
        ]),
        _: 1
      }, 512);
    }
    const GeoBoundariesModal = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$5], ["__scopeId", "data-v-eb0ac2be"]]);
    const _sfc_main$4 = {
      name: "NoAccess",
      props: {
        type: {
          type: String,
          default: "plan"
        }
      },
      computed: {
        text() {
          return this.type === "segment" ? "To access this segment, contact its owner." : "To access this sales plan, contact its owner or your Salesforce admin.";
        }
      }
    };
    const _hoisted_1$3 = {
      class: "slds-grid slds-grid_vertical-align-center slds-grid_align-center",
      style: { "height": "100%", "background": "#fff" }
    };
    const _hoisted_2$3 = { class: "slds-illustration slds-illustration_small" };
    const _hoisted_3$3 = /* @__PURE__ */ createStaticVNode('<svg class="slds-illustration__svg" viewBox="0 0 454 212" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-70.000000, -95.000000)"><g><g transform="translate(124.500000, 222.000000)"><g fill="#FFFFFF"><path vector-effect="non-scaling-stroke" d="M18.9209988,1.95433401 L33.259296,51.443436 C33.5666778,52.5043744 32.9557995,53.613617 31.8948612,53.9209988 C31.7139843,53.9734036 31.5266126,54 31.3382972,54 L2.6617028,54 C1.5571333,54 0.661702805,53.1045695 0.661702805,52 C0.661702805,51.8116846 0.688299176,51.6243129 0.74070397,51.443436 L15.0790012,1.95433401 C15.386383,0.893395645 16.4956256,0.282517358 17.556564,0.589899164 C18.2152102,0.780726338 18.7301717,1.29568777 18.9209988,1.95433401 Z"></path></g><g class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><polygon vector-effect="non-scaling-stroke" stroke-linejoin="round" points="17 0.323943662 34 54 -1.81721305e-12 54"></polygon><path vector-effect="non-scaling-stroke" d="M17,4.6953125 C17,43.0456294 17,62.6471919 17,63.5 C17,62.6471919 17,43.0456294 17,4.6953125 Z"></path><path vector-effect="non-scaling-stroke" d="M17,29.3239437 C22.3333333,35.7851611 25,39.1184944 25,39.3239437 C25,39.1184944 22.3333333,35.7851611 17,29.3239437 Z" stroke-linejoin="round" transform="translate(21.000000, 34.323944) scale(-1, 1) translate(-21.000000, -34.323944) "></path></g></g><g transform="translate(145.000000, 194.000000)"><g transform="translate(1.000000, 0.000000)" fill="#FFFFFF"><path vector-effect="non-scaling-stroke" d="M25.6478873,0 L50.879042,84.4273253 C51.1953215,85.4856452 50.5937789,86.5999782 49.535459,86.9162577 C49.3496374,86.9717906 49.1567264,87 48.9627843,87 L2.33299037,87 C1.22842087,87 0.332990367,86.1045695 0.332990367,85 C0.332990367,84.8060578 0.361199757,84.6131469 0.416732643,84.4273253 L25.6478873,0 Z"></path></g><g class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><polygon vector-effect="non-scaling-stroke" stroke-linejoin="round" points="26.5 0 52.5 87 0.5 87"></polygon><path vector-effect="non-scaling-stroke" d="M26.5,2.58642578 C26.5,61.0261034 26.5,90.9972948 26.5,92.5 C26.5,90.9972948 26.5,61.0261034 26.5,2.58642578 Z"></path><path vector-effect="non-scaling-stroke" d="M15.6478873,42 C22.314554,49.078692 25.6478873,52.7453587 25.6478873,53 C25.6478873,52.7453587 22.314554,49.078692 15.6478873,42 Z" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M27.6478873,68 C36.9812207,57.078692 41.6478873,51.7453587 41.6478873,52 C41.6478873,51.7453587 36.9812207,57.078692 27.6478873,68 Z" stroke-linejoin="round"></path></g></g><g transform="translate(404.500000, 245.000000) scale(-1, 1) translate(-404.500000, -245.000000) translate(348.000000, 226.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-linejoin="round" stroke-width="3"><g><polyline vector-effect="non-scaling-stroke" points="0 38 47.5 0 80.5 26"></polyline><polyline vector-effect="non-scaling-stroke" points="71 17 80.5 9 113 36"></polyline></g></g><g transform="translate(72.000000, 262.500000)"><path vector-effect="non-scaling-stroke" d="M153.962142,26.4644491 C151.225735,20.0143094 144.944776,15.5029106 137.633892,15.5029106 C135.619663,15.5029106 133.683612,15.8453541 131.878328,16.4764392 C128.451481,11.1704266 122.567406,7.66985447 115.883789,7.66985447 C109.491267,7.66985447 103.830159,10.8721423 100.350851,15.7935668 C98.9589956,14.968161 97.3423157,14.4956341 95.6177606,14.4956341 C94.1083143,14.4956341 92.6815102,14.8576334 91.4157672,15.5014039 C87.9975328,6.58722215 79.5098304,0.275259875 69.5804557,0.275259875 C60.4632836,0.275259875 52.5615782,5.59684366 48.6837305,13.3681823 C46.3912034,12.266973 43.8314865,11.6515593 41.1312741,11.6515593 C32.4373504,11.6515593 25.1998844,18.0312998 23.6476214,26.4644491 L153.962142,26.4644491 Z" class="slds-illustration__fill-secondary"></path><path vector-effect="non-scaling-stroke" d="M13,25 L143,25" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round"></path><path vector-effect="non-scaling-stroke" d="M0,25 L450,25" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round"></path></g><g transform="translate(344.000000, 247.000000)"><g transform="translate(0.293436, 0.054545)"><path vector-effect="non-scaling-stroke" d="M165.428708,41.9454545 L0.0995432562,41.9454545 C0.0336614956,41.2089487 0,40.4630069 0,39.7090909 C0,26.2132599 10.7866531,15.2727273 24.0926641,15.2727273 C27.7492016,15.2727273 31.215485,16.0989227 34.3199502,17.5772977 C39.5712028,7.14424616 50.271428,0 62.6175975,0 C76.0636257,0 87.5573893,8.47383452 92.1862485,20.441159 C93.9002755,19.5768947 95.8324059,19.0909091 97.8764479,19.0909091 C100.211783,19.0909091 102.401037,19.7252784 104.285841,20.8333889 C108.997403,14.2263569 116.663488,9.92727273 125.320028,9.92727273 C138.043441,9.92727273 148.627152,19.2146805 150.834755,31.4671412 C151.487388,31.3631046 152.156394,31.3090909 152.837838,31.3090909 C159.117096,31.3090909 164.340238,35.8953699 165.428708,41.9454545 Z" class="slds-illustration__fill-secondary"></path><path vector-effect="non-scaling-stroke" d="M32.7065637,40.4454545 L173.706564,40.4454545" class="slds-illustration__stroke-secondary" stroke-width="3" stroke-linecap="round"></path></g></g><g transform="translate(105.000000, 203.000000)"><g transform="translate(106.000000, 0.000000)" fill="#FFFFFF"><polygon vector-effect="non-scaling-stroke" points="121.5 48.5 158.5 48.5 158.5 34.5 47.5 34.5 47.5 48.5 93.5 48.5 93.5 69.5 121.5 69.5 121.5 48.5"></polygon><path vector-effect="non-scaling-stroke" d="M33.9882812,0.21875 C36.5611979,0.21875 70.6126302,0.21875 136.142578,0.21875 L152.384766,11.1132813 C155.083088,16.811292 155.656656,19.677503 154.105469,19.7119141 C152.554281,19.7463252 116.293865,17.6717809 45.3242187,13.4882812 C35.1940104,4.64192708 31.4153646,0.21875 33.9882812,0.21875 Z"></path><path vector-effect="non-scaling-stroke" d="M32.6708984,2.02246094 L21.5554199,0.374195518 L17.6036034,0.374195518 L5.77148437,7.90429688 C3.09089817,12.6737672 3.09089817,15.2284547 5.77148437,15.5683594 C8.45207058,15.9082641 16.1278518,14.3268839 28.7988281,10.8242188 L42.9921875,7.90429688 L41.0699892,5.68448183 L32.6708984,2.02246094 Z"></path><rect x="0" y="34" width="48" height="14"></rect></g><g transform="translate(106.000000, 5.000000)" class="slds-illustration__fill-secondary"><polygon vector-effect="non-scaling-stroke" points="93.3109375 43.4566406 93.3109375 64.6722656 120.925 64.6722656 121.823047 44.1324219 158.5 43.4566406 158.5 97.5 48.5 97.5 48.5 43.6933594"></polygon><path vector-effect="non-scaling-stroke" d="M132.670898,7.66300119e-19 C125.172201,-2.55433373e-19 94.1907552,-2.55433373e-19 39.7265625,7.66300119e-19 L31.8183594,12.5058594 L29.7050781,28.2714844 L157.78125,28.2714844 L157.78125,15.4775391 C148.539714,5.15917969 140.169596,1.78803361e-18 132.670898,7.66300119e-19 Z"></path><path vector-effect="non-scaling-stroke" d="M37.8266602,0 C34.4632704,0 29.4181858,0 22.6914062,0 C16.1624349,0 9.53808594,3.83528646 2.81835938,11.5058594 L0.705078125,30.2714844 L48.4101562,30.2714844 L48.4101562,14.4775391 L48.1789909,12.3275853 C43.283405,4.10919509 39.832628,0 37.8266602,0 Z"></path><rect x="0.5" y="43.5" width="48" height="54"></rect></g><g><rect class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" x="154.5" y="34.5" width="110" height="68"></rect><polygon vector-effect="non-scaling-stroke" class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" points="264.5 48.5 264.5 34.5 154.5 34.5 154.5 48.5 199.5 48.5 199.5 69.5 227.5 69.5 227.5 48.5"></polygon><path vector-effect="non-scaling-stroke" d="M130.5,0.5 L234.5,0.5 C251.068542,0.5 264.5,13.9314575 264.5,30.5 L264.5,34.5 L106.5,34.5 L106.5,24.5 C106.5,11.245166 117.245166,0.5 130.5,0.5 Z" class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M130.5,0.5 L130.5,0.5 C143.754834,0.5 154.5,11.245166 154.5,24.5 L154.5,34.5 L106.5,34.5 L106.5,24.5 C106.5,11.245166 117.245166,0.5 130.5,0.5 Z" class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path><rect class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" x="106.5" y="48.5" width="48" height="54"></rect><rect class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" x="106.5" y="34.5" width="48" height="14"></rect><path vector-effect="non-scaling-stroke" d="M219,52 C219,54.765 216.765,57 214,57 C211.235,57 209,54.765 209,52 C209,49.235 211.235,47 214,47 C216.765,47 219,49.235 219,52 Z" class="slds-illustration__fill-primary"></path><path vector-effect="non-scaling-stroke" d="M214,55 L214,60" class="slds-illustration__stroke-primary" stroke-width="4" stroke-linecap="round"></path><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="164" cy="58" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="164" cy="93" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="255" cy="58" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="255" cy="93" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="145" cy="58" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="145" cy="93" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="116" cy="58" r="3"></circle><circle vector-effect="non-scaling-stroke" class="slds-illustration__fill-primary" cx="116" cy="93" r="3"></circle><path vector-effect="non-scaling-stroke" d="M289.928751,82.2971422 L298,102.518658 L280,102.518658 L288.071249,82.2971422 C288.275982,81.784207 288.857768,81.5343604 289.370703,81.7390942 C289.625359,81.8407378 289.827108,82.0424867 289.928751,82.2971422 Z" class="slds-illustration__fill-primary"></path><path vector-effect="non-scaling-stroke" d="M300.428751,89.8132712 L305.5,102.518658 L293.5,102.518658 L298.571249,89.8132712 C298.775982,89.300336 299.357768,89.0504894 299.870703,89.2552232 C300.125359,89.3568668 300.327108,89.5586158 300.428751,89.8132712 Z" class="slds-illustration__fill-primary"></path><path vector-effect="non-scaling-stroke" d="M93.4287513,82.2971422 L101.5,102.518658 L83.5,102.518658 L91.5712487,82.2971422 C91.7759825,81.784207 92.3577681,81.5343604 92.8707033,81.7390942 C93.1253588,81.8407378 93.3271077,82.0424867 93.4287513,82.2971422 Z" class="slds-illustration__fill-primary" transform="translate(92.500000, 92.517446) scale(-1, 1) translate(-92.500000, -92.517446) "></path><path vector-effect="non-scaling-stroke" d="M76.9287513,89.8132712 L82,102.518658 L70,102.518658 L75.0712487,89.8132712 C75.2759825,89.300336 75.8577681,89.0504894 76.3707033,89.2552232 C76.6253588,89.3568668 76.8271077,89.5586158 76.9287513,89.8132712 Z" class="slds-illustration__fill-primary" transform="translate(76.000000, 96.275510) scale(-1, 1) translate(-76.000000, -96.275510) "></path><path vector-effect="non-scaling-stroke" d="M360,102.5 L372,102.5" class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path><path vector-effect="non-scaling-stroke" d="M0,102.5 L350,102.5" class="slds-illustration__stroke-primary" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path></g></g><g transform="translate(150.000000, 96.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g><g transform="translate(271.000000, 135.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><g><path vector-effect="non-scaling-stroke" d="M44,17.5 L63,17.5 C62.2789714,12.0723971 64.081543,7.53186978 68.4077148,3.87841797 C73.3754883,-0.195556641 79.2734375,0.717773438 82.440918,2.12353516 C85.6083984,3.52929687 87.9606934,5.46069336 89.5913086,9.10524041 C90.2822266,10.6397351 90.7517904,11.9379883 91,13"></path><path vector-effect="non-scaling-stroke" d="M83,20.5 C84.0558268,16.8461914 86.2227376,14.4572754 89.5007324,13.333252 C94.4177246,11.6472168 99.0800781,13.8925781 100.942383,16.1518555 C102.804687,18.4111328 103.39502,20.2260742 103.746582,22.1201172 C103.980957,23.3828125 104.06543,24.8427734 104,26.5 C108.141764,26.3313802 110.918945,27.1647135 112.331543,29 C114.040039,31.1936035 114.215332,33.817627 113.593018,35.75 C112.970703,37.682373 110.894531,40.5 107,40.5 L28,40.5"></path><path vector-effect="non-scaling-stroke" d="M18,27.5 L83.0004985,27.5"></path><path vector-effect="non-scaling-stroke" d="M0,27.5 L8,27.5"></path></g></g><g transform="translate(402.000000, 164.000000)" class="slds-illustration__stroke-secondary" stroke-linecap="round" stroke-width="3"><g transform="translate(31.713442, 25.088326) rotate(-15.000000) translate(-31.713442, -25.088326) translate(4.713442, 6.588326)"><path vector-effect="non-scaling-stroke" d="M31.0360707,3.43528591 C31.0360707,3.43528591 40.5802283,0.671893051 42.6488424,10.6908663" transform="translate(36.842457, 6.888440) rotate(41.000000) translate(-36.842457, -6.888440) "></path><path vector-effect="non-scaling-stroke" d="M40.4282002,10.1797377 C40.4282002,10.1797377 49.9723578,7.4163448 52.0409719,17.435318" transform="translate(46.234586, 13.632892) scale(-1, 1) rotate(-41.000000) translate(-46.234586, -13.632892) "></path><path vector-effect="non-scaling-stroke" d="M0.730284783,29.5865514 C0.730284783,29.5865514 10.2744424,26.8231586 12.3430565,36.8421318"></path><path vector-effect="non-scaling-stroke" d="M12.7302848,29.5865514 C12.7302848,29.5865514 22.2744424,26.8231586 24.3430565,36.8421318" transform="translate(18.536671, 33.039705) scale(-1, 1) translate(-18.536671, -33.039705) "></path></g></g></g></g></g></svg>', 1);
    const _hoisted_4$3 = { class: "slds-text-longform" };
    const _hoisted_5$3 = /* @__PURE__ */ createBaseVNode("h3", { class: "slds-text-heading_medium" }, "No access yet", -1);
    const _hoisted_6$2 = { class: "slds-text-body_regular" };
    function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", _hoisted_1$3, [
        createBaseVNode("div", _hoisted_2$3, [
          _hoisted_3$3,
          createBaseVNode("div", _hoisted_4$3, [
            _hoisted_5$3,
            createBaseVNode("p", _hoisted_6$2, toDisplayString($options.text), 1)
          ])
        ])
      ]);
    }
    const NoAccess = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$4]]);
    const _sfc_main$3 = {
      name: "ConfirmModal",
      components: {
        Button: SLDSButton,
        Checkbox,
        Icon,
        Modal
      },
      props: ["config"],
      computed: {
        confirmButtonClass() {
          var _a2, _b;
          return ((_b = (_a2 = this.config) == null ? void 0 : _a2.confirmButton) == null ? void 0 : _b.type) ? `slds-button slds-button_${this.config.confirmButton.type}` : "slds-button slds-button_brand";
        },
        confirmButtonText() {
          var _a2, _b;
          return ((_b = (_a2 = this.config) == null ? void 0 : _a2.confirmButton) == null ? void 0 : _b.label) ? this.config.confirmButton.label : "Confirm";
        },
        cancelButtonClass() {
          var _a2, _b;
          return ((_b = (_a2 = this.config) == null ? void 0 : _a2.cancelButton) == null ? void 0 : _b.type) ? `slds-button slds-button_${this.config.cancelButton.type}` : "slds-button slds-button_neutral";
        },
        cancelButtonText() {
          var _a2, _b;
          return ((_b = (_a2 = this.config) == null ? void 0 : _a2.cancelButton) == null ? void 0 : _b.label) ? this.config.cancelButton.label : "Cancel";
        }
      },
      methods: {
        confirm() {
          this.config.callback({ options: this.config.options });
          this.$emit("close");
        }
      }
    };
    const _hoisted_1$2 = { class: "slds-grid slds-grid_vertical slds-grid_vertical-align-center slds-grid_align-center" };
    const _hoisted_2$2 = { key: 0 };
    const _hoisted_3$2 = {
      class: "slds-text-color_weak slds-text-heading_small",
      style: { "text-align": "center" }
    };
    const _hoisted_4$2 = { style: { "white-space": "pre-wrap" } };
    const _hoisted_5$2 = { class: "slds-grid" };
    const _hoisted_6$1 = { class: "slds-col_bump-left" };
    function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Icon = resolveComponent("Icon");
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_Button = resolveComponent("Button");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        ref: "modal",
        title: $props.config.title,
        size: "small",
        detach: "",
        onClose: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          createBaseVNode("div", _hoisted_1$2, [
            $props.config.icon ? (openBlock(), createElementBlock("div", _hoisted_2$2, [
              createVNode(_component_Icon, {
                category: $props.config.icon.category,
                name: $props.config.icon.name,
                iconClass: "slds-button__icon",
                assistiveText: $props.config.icon.text,
                size: $props.config.icon.size
              }, null, 8, ["category", "name", "assistiveText", "size"])
            ])) : createCommentVNode("", true),
            createBaseVNode("div", null, [
              createBaseVNode("div", _hoisted_3$2, [
                createBaseVNode("span", _hoisted_4$2, toDisplayString($props.config.description), 1)
              ]),
              (openBlock(true), createElementBlock(Fragment, null, renderList($props.config.options, (option) => {
                return openBlock(), createElementBlock("div", {
                  key: option.id,
                  class: "slds-m-top_small"
                }, [
                  createVNode(_component_Checkbox, {
                    modelValue: option.selected,
                    "onUpdate:modelValue": ($event) => option.selected = $event,
                    labels: { name: option.label }
                  }, null, 8, ["modelValue", "onUpdate:modelValue", "labels"])
                ]);
              }), 128))
            ])
          ])
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", null, [
            createBaseVNode("div", _hoisted_5$2, [
              createBaseVNode("div", _hoisted_6$1, [
                createVNode(_component_Button, {
                  class: normalizeClass($options.cancelButtonClass),
                  onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString($options.cancelButtonText), 1)
                  ]),
                  _: 1
                }, 8, ["class"]),
                createVNode(_component_Button, {
                  class: normalizeClass($options.confirmButtonClass),
                  onClick: $options.confirm
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString($options.confirmButtonText), 1)
                  ]),
                  _: 1
                }, 8, ["class", "onClick"])
              ])
            ])
          ])
        ]),
        _: 1
      }, 8, ["title"]);
    }
    const ConfirmModal = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$3]]);
    const _sfc_main$2 = {
      name: "DiscreteBranchSelector",
      components: {
        SLDSButton,
        Modal,
        Spinner,
        Icon
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          loading: true,
          hideCancel: true,
          selectedBranch: null,
          branches: []
        };
      },
      async mounted() {
        SPM.Components.FocusModal = this;
        this.hideCancel = this.config.requireSelection;
        this.branches = (this.config.userAccessRecords || []).map((uac) => ({
          id: uac.sfsp__SalesNode__c,
          name: uac.sfsp__SalesNode__r.Name,
          accessLevel: uac.sfsp__AccessLevel__c,
          descendantIds: []
        }));
        this.selectedBranch = this.config.currentBranch || this.branches[0].id;
        this.loading = false;
      },
      methods: {
        async setFocus() {
          this.loading = true;
          const branch = this.branches.find((b) => b.id === this.selectedBranch);
          branch.descendantIds = await SPM.Utils.Node.getDescendantIds({ planId: this.config.planId, nodeIds: [branch.id === "All Org" ? "" : branch.id] });
          this.config.callback(branch);
          this.$emit("close");
          this.loading = false;
        }
      }
    };
    const _hoisted_1$1 = { class: "slds-grid slds-grid_vertical slds-grid_vertical-align-center slds-grid_align-center" };
    const _hoisted_2$1 = { class: "slds-p-vertical_medium" };
    const _hoisted_3$1 = /* @__PURE__ */ createBaseVNode("div", {
      class: "slds-p-bottom_medium",
      style: { "font-size": "1rem", "text-align": "center", "margin": "0 9rem" }
    }, "Specify the node that you want to focus on.", -1);
    const _hoisted_4$1 = { class: "slds-p-vertical_medium" };
    const _hoisted_5$1 = { class: "slds-form-element" };
    const _hoisted_6 = { class: "slds-form-element__control" };
    const _hoisted_7 = ["id", "value", "name", "onKeydown", "onClick"];
    const _hoisted_8 = ["for"];
    const _hoisted_9 = {
      class: "slds-visual-picker__figure slds-visual-picker__text",
      style: { "height": "auto" }
    };
    const _hoisted_10 = { class: "slds-text-heading_medium slds-m-bottom_x-small" };
    const _hoisted_11 = ["id"];
    const _hoisted_12 = { class: "slds-grid" };
    const _hoisted_13 = { class: "slds-col_bump-left" };
    function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Icon = resolveComponent("Icon");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "discrete-branch-selector",
        ref: "modal",
        title: "Select a Hierarchy Node",
        size: "base",
        detach: "",
        hideCloseButton: $data.hideCancel,
        onClose: _cache[2] || (_cache[2] = ($event) => $data.loading ? () => {
        } : _ctx.$emit("close")),
        onClick: _cache[3] || (_cache[3] = withModifiers(() => {
        }, ["stop"]))
      }, {
        content: withCtx(() => [
          $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
          createBaseVNode("div", _hoisted_1$1, [
            createBaseVNode("div", _hoisted_2$1, [
              createVNode(_component_Icon, {
                category: "utility",
                name: "hierarchy",
                size: "large",
                assistiveText: "Hierarchy Icon"
              })
            ]),
            _hoisted_3$1,
            createBaseVNode("div", _hoisted_4$1, [
              createBaseVNode("fieldset", _hoisted_5$1, [
                createBaseVNode("div", _hoisted_6, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList($data.branches, (branchNode) => {
                    return openBlock(), createElementBlock("div", {
                      key: $data.selectedBranch === branchNode.id ? `visual-picker-selected-${branchNode.name}` : `visual-picker-${branchNode.name}`,
                      class: "slds-visual-picker slds-visual-picker_vertical"
                    }, [
                      withDirectives(createBaseVNode("input", {
                        type: "radio",
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.selectedBranch = $event),
                        id: $data.selectedBranch === branchNode.id ? `visual-picker-selected-${branchNode.name}` : `visual-picker-${branchNode.name}`,
                        value: branchNode.id,
                        name: branchNode.id,
                        onKeydown: withKeys(($event) => $data.selectedBranch = branchNode.id, ["enter"]),
                        onClick: ($event) => $data.selectedBranch = branchNode.id
                      }, null, 40, _hoisted_7), [
                        [vModelRadio, $data.selectedBranch]
                      ]),
                      createBaseVNode("label", {
                        for: $data.selectedBranch === branchNode.id ? `visual-picker-selected-${branchNode.name}` : `visual-picker-${branchNode.name}`
                      }, [
                        createBaseVNode("span", _hoisted_9, [
                          createBaseVNode("span", null, [
                            createBaseVNode("span", _hoisted_10, toDisplayString(branchNode.name), 1),
                            createBaseVNode("span", {
                              id: `visual-picker-access-${branchNode.name}`,
                              class: "slds-text-title"
                            }, toDisplayString(branchNode.accessLevel), 9, _hoisted_11)
                          ])
                        ]),
                        createVNode(_component_Icon, {
                          category: "utility",
                          name: "check",
                          size: "x-small",
                          variant: "none",
                          class: "slds-visual-picker__text-check",
                          iconClass: "slds-icon-text-check"
                        })
                      ], 8, _hoisted_8)
                    ]);
                  }), 128))
                ])
              ])
            ])
          ])
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", null, [
            createBaseVNode("div", _hoisted_12, [
              createBaseVNode("div", _hoisted_13, [
                !$data.hideCancel ? (openBlock(), createBlock(_component_SLDSButton, {
                  key: 0,
                  class: "slds-button slds-button_neutral",
                  disabled: $data.loading,
                  onClick: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
                }, {
                  default: withCtx(() => [
                    createTextVNode("Cancel")
                  ]),
                  _: 1
                }, 8, ["disabled"])) : createCommentVNode("", true),
                createVNode(_component_SLDSButton, {
                  class: "slds-button slds-button_brand",
                  onClick: $options.setFocus,
                  disabled: !$data.selectedBranch || $props.config.currentBranch && $data.selectedBranch === $props.config.currentBranch || $data.loading
                }, {
                  default: withCtx(() => [
                    createTextVNode("Apply")
                  ]),
                  _: 1
                }, 8, ["onClick", "disabled"])
              ])
            ])
          ])
        ]),
        _: 1
      }, 8, ["hideCloseButton"]);
    }
    const DiscreteBranchSelector = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$2]]);
    const _sfc_main$1 = {
      name: "RefreshAssignmentObject",
      components: {
        SLDSButton,
        Modal,
        Checkbox,
        Spinner
      },
      props: ["config"],
      emits: ["close"],
      data() {
        return {
          assignmentObjects: [],
          loading: false
        };
      },
      computed: {
        objectsToRefresh() {
          return this.assignmentObjects.filter((obj) => obj.selected);
        },
        disableRefresh() {
          return this.objectsToRefresh.length === 0;
        }
      },
      async mounted() {
        this.assignmentObjects = this.$store.plan.sfsp__SalesAssignmentObjects__r.map((obj) => ({
          name: obj.Name,
          Id: obj.Id,
          selected: false
        }));
      },
      methods: {
        async startRefresh() {
          this.loading = true;
          const asyncJobs = await SPM.Utils.Apex.invoke("InsertSObjects", [
            this.objectsToRefresh.map((obj) => ({
              sobjectType: "sfsp__SalesAsyncJob__c",
              sfsp__MaioEndpoint__c: SPM.maioUrl,
              sfsp__SalesAssignmentObject__c: obj.Id,
              sfsp__Type__c: "Refresh Assignment Object",
              sfsp__Splunk__c: JSON.stringify({ txnId: this.$store.txnId })
            })),
            true
          ]);
          this.$store.salesAsyncJobs.push(...asyncJobs);
          const jobPromises = asyncJobs.map((job) => SPM.Utils.Apex.invoke("StartJob", [{ job: "BuildAssignmentObject", version: SPM.version, requestId: job.Id, assignmentObjectId: job.sfsp__SalesAssignmentObject__c, isScratch: SPM.isScratch, refreshData: true }]));
          const promiseResponses = await Promise.allSettled(jobPromises);
          promiseResponses.forEach((jobResponse2) => console.log(jobResponse2));
          const activityDescription = `Refreshed ${this.joinSentence(this.objectsToRefresh.map((o) => o.name))}`;
          await insertActivities([{
            description: activityDescription,
            parentId: this.$store.plan.Id,
            recordType: ActivityRecordTypes.ASSIGNMENT,
            subtype: ActivitySubtypes.REFRESH,
            type: ActivityTypes.MANAGEMENT
          }]);
          this.$nextTick(this.$props.config.callback.bind(this, this.objectsToRefresh));
          this.$emit("close");
          this.loading = false;
        },
        joinSentence(array) {
          let lastWord = "";
          if (array.length > 1) {
            lastWord = ` and ${array.pop()}`;
            if (array.length > 1) {
              lastWord = `,${lastWord}`;
            }
          }
          return array.join(", ") + lastWord;
        }
      }
    };
    const _hoisted_1 = /* @__PURE__ */ createBaseVNode("div", { class: "slds-grid slds-p-around_small" }, "Update selected assignment objects with the latest Salesforce data.", -1);
    const _hoisted_2 = { class: "slds-form-element slds-grid slds-grid_vertical slds-p-left_small" };
    const _hoisted_3 = { class: "slds-listbox slds-listbox_vertical slds-p-top-x_small slds-scrollable_y" };
    const _hoisted_4 = { class: "slds-grid" };
    const _hoisted_5 = { class: "slds-col_bump-left" };
    function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Spinner = resolveComponent("Spinner");
      const _component_Checkbox = resolveComponent("Checkbox");
      const _component_SLDSButton = resolveComponent("SLDSButton");
      const _component_Modal = resolveComponent("Modal");
      return openBlock(), createBlock(_component_Modal, {
        id: "refresh-assignment-object-modal",
        title: "Refresh Assignment Object Data",
        size: "base",
        onClose: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("close"))
      }, {
        content: withCtx(() => [
          createBaseVNode("div", null, [
            $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 0 })) : createCommentVNode("", true),
            _hoisted_1,
            createBaseVNode("div", _hoisted_2, [
              createBaseVNode("ul", _hoisted_3, [
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.assignmentObjects, (item) => {
                  return openBlock(), createElementBlock("li", {
                    key: item.id,
                    class: "slds-listbox__item"
                  }, [
                    createVNode(_component_Checkbox, {
                      id: `select-refresh-${item.name}`,
                      modelValue: item.selected,
                      "onUpdate:modelValue": ($event) => item.selected = $event,
                      labels: { name: item.name }
                    }, null, 8, ["id", "modelValue", "onUpdate:modelValue", "labels"])
                  ]);
                }), 128))
              ])
            ])
          ])
        ]),
        footer: withCtx(() => [
          createBaseVNode("div", _hoisted_4, [
            createBaseVNode("div", _hoisted_5, [
              createVNode(_component_SLDSButton, {
                class: "slds-button slds-button_neutral",
                disabled: $data.loading,
                onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
              }, {
                default: withCtx(() => [
                  createTextVNode(" Cancel ")
                ]),
                _: 1
              }, 8, ["disabled"]),
              createVNode(_component_SLDSButton, {
                id: "start-refresh",
                class: "slds-button slds-button_brand",
                disabled: $options.disableRefresh || $data.loading,
                onClick: $options.startRefresh
              }, {
                default: withCtx(() => [
                  createTextVNode("Refresh")
                ]),
                _: 1
              }, 8, ["disabled", "onClick"])
            ])
          ])
        ]),
        _: 1
      });
    }
    const RefreshAssignmentObjectModal = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);
    const Root_vue_vue_type_style_index_0_lang = "";
    const _sfc_main = {
      name: "AppRoot",
      components: {
        Home,
        PlanOverview,
        SegmentationPlanOverview,
        SetupError,
        SetupErrorNonAdmin,
        SalesNodeModal,
        Alert,
        NoAccess,
        // modals
        ReferenceDataModal,
        HierarchyReferenceDataModal,
        ImportHierarchyModal,
        PlanShareModal,
        BranchShareModal,
        ScenarioModal,
        SalesPlanModal,
        GenericConfirmDeleteModal,
        MetricsModal,
        ExportToCSVModal,
        PublishModal,
        PlanningElementsUpdateModal,
        GeoBoundariesModal,
        ConfirmModal,
        DiscreteBranchSelector,
        RefreshAssignmentObjectModal,
        AddTeamMembersModal,
        // slds
        Spinner,
        Toasts
      },
      data() {
        return {
          loading: true,
          ready: false,
          noAccess: false,
          page: "",
          modals: {
            addTeamMembers: false,
            allocationMetrics: false,
            salesPlan: false,
            assignmentObject: false,
            referenceData: false,
            hierarchyReferenceData: false,
            importHierarchy: false,
            confirmDelete: false,
            discreteBranch: false,
            salesNode: false,
            sharePlan: false,
            shareBranch: false,
            scenario: false,
            planningElementsUpdate: false,
            geoBoundaries: false,
            refreshAssignmentObject: false
          },
          modalConfig: {},
          planId: "",
          toasts: []
        };
      },
      async created() {
        if (SPM.UITheme === "Theme4d") {
          document.body.style.marginTop = "-1.25rem";
        }
        this.planId = SPM.planId;
        this.page = this.planId ? "PlanOverview" : "Home";
        this.$mitt.on("toast", (options) => {
          if (!options.message) {
            throw new Error("Missing message argument.");
          }
          SPM.$store.toast(options);
        });
        this.$mitt.on("accessDenied", () => this.noAccess = true);
        await SPM.Utils.Version244.checkAsyncJobWaitingStatus();
      },
      async mounted() {
        SPM.Components.Root = this;
        const authPromise = SPM.Utils.Apex.invoke("GetAuthorizationInfo");
        let planIdFilter = "";
        if (!this.$store.isAdmin) {
          const userAccessRecords = await SPM.Utils.Apex.invoke("Query", [`SELECT Id, sfsp__SalesPlan__c, sfsp__SalesNode__c, sfsp__AccessLevel__c FROM sfsp__SalesUserAccess__c WHERE sfsp__User__c = '${SPM.currentUser.Id}' AND sfsp__SalesPlan__c != NULL `]) || [];
          const availablePlanIds = userAccessRecords.map((ar) => `'${ar.sfsp__SalesPlan__c}'`);
          planIdFilter = ` AND Id IN (${availablePlanIds.length > 0 ? availablePlanIds.join(",") : null}) `;
          this.$store.$patch({ userAccessRecords });
        }
        const plansPromise = (async () => {
          if (this.page === "Home") {
            const plans = await SPM.Utils.Apex.invoke("Query", [`
                    SELECT
                        CreatedById,
                        CreatedBy.Name,
                        CreatedBy.SmallPhotoUrl,
                        CreatedDate,
                        Name,
                        sfsp__Description__c,
                        sfsp__Period__c,
                        sfsp__Status__c,
                        sfsp__Type__c,
                        sfsp__HierarchyReference__c
                    FROM sfsp__SalesPlan__c
                    WHERE sfsp__Type__c IN ('', 'Segmentation') AND sfsp__Status__c != 'Deleted'${planIdFilter}
                    ORDER BY CreatedDate DESC
                `]);
            this.$store.$patch({ plans });
          }
        })();
        const periodsPromise = (async () => {
          const periods = await SPM.Utils.Apex.invoke("Query", ["SELECT Id, FullyQualifiedLabel, StartDate, EndDate FROM Period WHERE Type = 'Year' AND FiscalYearSettings.YearType = 'Standard'"]);
          this.$store.$patch({ periods });
        })();
        await Promise.allSettled([authPromise, plansPromise, periodsPromise]);
        const authResponse = await authPromise;
        if (!authResponse.authExists) {
          this.page = this.$store.isAdmin ? "SetupError" : "SetupErrorNonAdmin";
        }
        this.loading = false;
        this.ready = true;
      },
      methods: {
        loadPlan(id, callback = () => {
        }) {
          if (window === window.top) {
            if (!id) {
              window.location.reload();
            } else {
              this.planId = id;
              this.page = "PlanOverview";
            }
          } else {
            window.top.location = `/${id}`;
          }
          callback();
        },
        openSegment(id) {
          window.top.location = `/one/one.app#/alohaRedirect/apex/sfsp__SegmentDetails?segmentId=${id}`;
        },
        openModal(name, config) {
          this.modalConfig = {
            callback: () => {
            },
            ...config || {}
          };
          this.modals[name] = true;
        }
      }
    };
    function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_Toasts = resolveComponent("Toasts");
      const _component_Alert = resolveComponent("Alert");
      const _component_Spinner = resolveComponent("Spinner");
      const _component_NoAccess = resolveComponent("NoAccess");
      const _component_Home = resolveComponent("Home");
      const _component_PlanOverview = resolveComponent("PlanOverview");
      const _component_SegmentationPlanOverview = resolveComponent("SegmentationPlanOverview");
      const _component_SetupError = resolveComponent("SetupError");
      const _component_SetupErrorNonAdmin = resolveComponent("SetupErrorNonAdmin");
      const _component_AddTeamMembersModal = resolveComponent("AddTeamMembersModal");
      const _component_SalesNodeModal = resolveComponent("SalesNodeModal");
      const _component_ReferenceDataModal = resolveComponent("ReferenceDataModal");
      const _component_HierarchyReferenceDataModal = resolveComponent("HierarchyReferenceDataModal");
      const _component_PlanShareModal = resolveComponent("PlanShareModal");
      const _component_BranchShareModal = resolveComponent("BranchShareModal");
      const _component_ScenarioModal = resolveComponent("ScenarioModal");
      const _component_SalesPlanModal = resolveComponent("SalesPlanModal");
      const _component_ImportHierarchyModal = resolveComponent("ImportHierarchyModal");
      const _component_GenericConfirmDeleteModal = resolveComponent("GenericConfirmDeleteModal");
      const _component_MetricsModal = resolveComponent("MetricsModal");
      const _component_ExportToCSVModal = resolveComponent("ExportToCSVModal");
      const _component_PublishModal = resolveComponent("PublishModal");
      const _component_PlanningElementsUpdateModal = resolveComponent("PlanningElementsUpdateModal");
      const _component_GeoBoundariesModal = resolveComponent("GeoBoundariesModal");
      const _component_ConfirmModal = resolveComponent("ConfirmModal");
      const _component_DiscreteBranchSelector = resolveComponent("DiscreteBranchSelector");
      const _component_RefreshAssignmentObjectModal = resolveComponent("RefreshAssignmentObjectModal");
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(_component_Toasts, {
          toasts: _ctx.$store.toasts
        }, null, 8, ["toasts"]),
        _ctx.$store.salesAsyncJobs.length > 0 ? (openBlock(), createBlock(_component_Alert, {
          key: 0,
          id: "updating-alert",
          assistiveText: "info",
          alertText: "Updating sales plan."
        })) : createCommentVNode("", true),
        $data.loading ? (openBlock(), createBlock(_component_Spinner, { key: 1 }, {
          description: withCtx(() => [
            createTextVNode("Initializing")
          ]),
          _: 1
        })) : createCommentVNode("", true),
        $data.noAccess ? (openBlock(), createBlock(_component_NoAccess, {
          key: 2,
          id: "noAccess"
        })) : $data.ready && $data.page === "Home" ? (openBlock(), createBlock(_component_Home, {
          key: 3,
          onLoadPlan: $options.loadPlan,
          onOpenSegment: $options.openSegment
        }, null, 8, ["onLoadPlan", "onOpenSegment"])) : $data.ready && $data.page === "PlanOverview" ? (openBlock(), createBlock(_component_PlanOverview, {
          key: 4,
          planId: $data.planId
        }, null, 8, ["planId"])) : $data.ready && $data.page === "SegmentationPlanOverview" ? (openBlock(), createBlock(_component_SegmentationPlanOverview, { key: 5 })) : $data.ready && $data.page === "SetupError" ? (openBlock(), createBlock(_component_SetupError, { key: 6 })) : $data.ready && $data.page === "SetupErrorNonAdmin" ? (openBlock(), createBlock(_component_SetupErrorNonAdmin, { key: 7 })) : createCommentVNode("", true),
        $data.modals.addTeamMembers ? (openBlock(), createBlock(_component_AddTeamMembersModal, {
          key: 8,
          config: $data.modalConfig,
          onClose: _cache[0] || (_cache[0] = ($event) => $data.modals.addTeamMembers = false)
        }, null, 8, ["config"])) : createCommentVNode("", true),
        $data.modals.salesNode ? (openBlock(), createBlock(_component_SalesNodeModal, {
          key: 9,
          config: $data.modalConfig,
          onClose: _cache[1] || (_cache[1] = ($event) => $data.modals.salesNode = false)
        }, null, 8, ["config"])) : $data.modals.referenceData ? (openBlock(), createBlock(_component_ReferenceDataModal, {
          key: 10,
          config: $data.modalConfig,
          onClose: _cache[2] || (_cache[2] = ($event) => $data.modals.referenceData = false)
        }, null, 8, ["config"])) : $data.modals.hierarchyReferenceData ? (openBlock(), createBlock(_component_HierarchyReferenceDataModal, {
          key: 11,
          config: $data.modalConfig,
          onClose: _cache[3] || (_cache[3] = ($event) => $data.modals.hierarchyReferenceData = false)
        }, null, 8, ["config"])) : $data.modals.sharePlan ? (openBlock(), createBlock(_component_PlanShareModal, {
          key: 12,
          config: $data.modalConfig,
          onClose: _cache[4] || (_cache[4] = ($event) => $data.modals.sharePlan = false)
        }, null, 8, ["config"])) : $data.modals.shareBranch ? (openBlock(), createBlock(_component_BranchShareModal, {
          key: 13,
          config: $data.modalConfig,
          onClose: _cache[5] || (_cache[5] = ($event) => $data.modals.shareBranch = false)
        }, null, 8, ["config"])) : $data.modals.scenario ? (openBlock(), createBlock(_component_ScenarioModal, {
          key: 14,
          config: $data.modalConfig,
          onClose: _cache[6] || (_cache[6] = ($event) => $data.modals.scenario = false)
        }, null, 8, ["config"])) : $data.modals.salesPlan ? (openBlock(), createBlock(_component_SalesPlanModal, {
          key: 15,
          config: $data.modalConfig,
          onClose: _cache[7] || (_cache[7] = ($event) => $data.modals.salesPlan = false)
        }, null, 8, ["config"])) : $data.modals.importHierarchy ? (openBlock(), createBlock(_component_ImportHierarchyModal, {
          key: 16,
          config: $data.modalConfig,
          onClose: _cache[8] || (_cache[8] = ($event) => $data.modals.importHierarchy = false)
        }, null, 8, ["config"])) : $data.modals.confirmDelete ? (openBlock(), createBlock(_component_GenericConfirmDeleteModal, {
          key: 17,
          config: $data.modalConfig,
          onClose: _cache[9] || (_cache[9] = ($event) => $data.modals.confirmDelete = false)
        }, null, 8, ["config"])) : $data.modals.allocationMetrics ? (openBlock(), createBlock(_component_MetricsModal, {
          key: 18,
          config: $data.modalConfig,
          onClose: _cache[10] || (_cache[10] = ($event) => $data.modals.allocationMetrics = false)
        }, null, 8, ["config"])) : $data.modals.exportToCSV ? (openBlock(), createBlock(_component_ExportToCSVModal, {
          key: 19,
          config: $data.modalConfig,
          onClose: _cache[11] || (_cache[11] = ($event) => $data.modals.exportToCSV = false)
        }, null, 8, ["config"])) : $data.modals.publish ? (openBlock(), createBlock(_component_PublishModal, {
          key: 20,
          config: $data.modalConfig,
          onClose: _cache[12] || (_cache[12] = ($event) => $data.modals.publish = false)
        }, null, 8, ["config"])) : $data.modals.planningElementsUpdate ? (openBlock(), createBlock(_component_PlanningElementsUpdateModal, {
          key: 21,
          config: $data.modalConfig,
          onClose: _cache[13] || (_cache[13] = ($event) => $data.modals.planningElementsUpdate = false)
        }, null, 8, ["config"])) : $data.modals.geoBoundaries ? (openBlock(), createBlock(_component_GeoBoundariesModal, {
          key: 22,
          config: $data.modalConfig,
          onClose: _cache[14] || (_cache[14] = ($event) => $data.modals.geoBoundaries = false)
        }, null, 8, ["config"])) : $data.modals.confirm ? (openBlock(), createBlock(_component_ConfirmModal, {
          key: 23,
          config: $data.modalConfig,
          onClose: _cache[15] || (_cache[15] = ($event) => $data.modals.confirm = false)
        }, null, 8, ["config"])) : $data.modals.discreteBranch ? (openBlock(), createBlock(_component_DiscreteBranchSelector, {
          key: 24,
          config: $data.modalConfig,
          onClose: _cache[16] || (_cache[16] = ($event) => $data.modals.discreteBranch = false)
        }, null, 8, ["config"])) : $data.modals.refreshAssignmentObject ? (openBlock(), createBlock(_component_RefreshAssignmentObjectModal, {
          key: 25,
          config: $data.modalConfig,
          onClose: _cache[17] || (_cache[17] = ($event) => $data.modals.refreshAssignmentObject = false)
        }, null, 8, ["config"])) : createCommentVNode("", true)
      ], 64);
    }
    const Root = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
    SPM.Utils = UtilsClient({ Buffer: buffer.Buffer, Papa });
    SPM.Components = {};
    SPM.app = createApp({
      components: { IconSettings },
      render() {
        return h(
          IconSettings,
          {
            iconPath: `/resource/${(/* @__PURE__ */ new Date()).getTime()}/sfsp__SLDSAssets/icons`
          },
          () => [h(Root)]
        );
      }
    });
    const pinia = createPinia();
    SPM.app.use(pinia);
    const emitter = mitt();
    SPM.app.config.globalProperties.$mitt = emitter;
    SPM.app.config.globalProperties.$store = SPM.$store = useStore();
    SPM.app.config.globalProperties.$getErrorsByField = (field) => field.$errors.map((error) => error.$message);
    const locale = SPM.currentUser.Locale.replace("sh_ME_USD", "sh-ME").replace("_", "-").slice(0, 5);
    const formatters = {
      Currency: new Intl.NumberFormat(locale, { style: "currency", currency: SPM.currentUser.CurrencyIsoCode, maximumFractionDigits: 0 }),
      Numeric: new Intl.NumberFormat(locale, { style: "decimal", maximumFractionDigits: 0 }),
      Compact: new Intl.NumberFormat("en", { notation: "compact" }),
      DateTime: (options = {}) => new Intl.DateTimeFormat(locale, options)
    };
    SPM.app.config.globalProperties.$F = (type, value, options) => type === "DateTime" ? formatters[type](options).format(value) : formatters[type].format(value);
    SPM.app.mount("#vue-root");
    SPM.version = 246;
    SPM.app.config.errorHandler = (ex, vm, info) => {
      if ((ex == null ? void 0 : ex.type) === "RemoteActionException") {
        const { error } = ex;
        emitter.emit("toast", {
          message: error.type,
          subMessage: error.message,
          state: "error",
          duration: 0
        });
      }
      console.log("Vue Error", ex, vm, info);
    };
  }
});
export default require_bundle();
