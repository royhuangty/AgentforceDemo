import{H as W,cq as z}from"../bundle.js";function y(t,e){return Array.from(t.getElementsByTagName(e))}function L(t){return t[0]==="#"?t:`#${t}`}function H(t,e,r){return Array.from(t.getElementsByTagNameNS(r,e))}function u(t){return t?.normalize(),t&&t.textContent||""}function d(t,e,r){const o=t.getElementsByTagName(e),n=o.length?o[0]:null;return n&&r&&r(n),n}function g(t,e,r){const o={};if(!t)return o;const n=t.getElementsByTagName(e),i=n.length?n[0]:null;return i&&r?r(i,o):o}function A(t,e,r){const o=u(d(t,e));return o&&r?r(o)||{}:{}}function x(t,e,r){const o=parseFloat(u(d(t,e)));if(!isNaN(o))return r&&r(o),o}function O(t,e){const r={};for(const o of e)A(t,o,n=>{r[o]=n});return r}function G(t){return t?.nodeType===1}function R(t,e){const r={},o=e=="stroke"||e==="fill"?e:e+"-color";return t[0]==="#"&&(t=t.substring(1)),t.length===6||t.length===3?r[o]="#"+t:t.length===8&&(r[e+"-opacity"]=parseInt(t.substring(0,2),16)/255,r[o]="#"+t.substring(6,8)+t.substring(4,6)+t.substring(2,4)),r}function k(t,e,r){const o={};return x(t,e,n=>{o[r]=n}),o}function v(t,e){return g(t,"color",r=>R(u(r),e))}function B(t){return g(t,"Icon",(e,r)=>(A(e,"href",o=>{r.icon=o}),r))}function _(t){return g(t,"IconStyle",e=>Object.assign(v(e,"icon"),k(e,"scale","icon-scale"),k(e,"heading","icon-heading"),g(e,"hotSpot",r=>{const o=parseFloat(r.getAttribute("x")||""),n=parseFloat(r.getAttribute("y")||""),i=r.getAttribute("xunits")||"",s=r.getAttribute("yunits")||"";return!isNaN(o)&&!isNaN(n)?{"icon-offset":[o,n],"icon-offset-units":[i,s]}:{}}),B(e)))}function U(t){return g(t,"LabelStyle",e=>Object.assign(v(e,"label"),k(e,"scale","label-scale")))}function X(t){return g(t,"LineStyle",e=>Object.assign(v(e,"stroke"),k(e,"width","stroke-width")))}function Y(t){return g(t,"PolyStyle",(e,r)=>Object.assign(r,g(e,"color",o=>R(u(o),"fill")),A(e,"fill",o=>{if(o==="0")return{"fill-opacity":0}}),A(e,"outline",o=>{if(o==="0")return{"stroke-opacity":0}})))}function I(t){return Object.assign({},Y(t),X(t),U(t),_(t))}const b=t=>Number(t),E={string:t=>t,int:b,uint:b,short:b,ushort:b,float:b,double:b,bool:t=>Boolean(t)};function F(t,e){return g(t,"ExtendedData",(r,o)=>{for(const n of y(r,"Data"))o[n.getAttribute("name")||""]=u(d(n,"value"));for(const n of y(r,"SimpleData")){const i=n.getAttribute("name")||"",s=e[i]||E.string;o[i]=s(u(n))}return o})}function j(t){const e=d(t,"description");for(const r of Array.from(e?.childNodes||[]))if(r.nodeType===4)return{description:{"@type":"html",value:u(r)}};return{}}function D(t){return g(t,"TimeSpan",e=>({timespan:{begin:u(d(e,"begin")),end:u(d(e,"end"))}}))}function q(t){return g(t,"TimeStamp",e=>({timestamp:u(d(e,"when"))}))}function $(t,e){return A(t,"styleUrl",r=>(r=L(r),e[r]?Object.assign({styleUrl:r},e[r]):{styleUrl:r}))}const Z=/\s*/g,tt=/^\s*|\s*$/g,et=/\s+/;function K(t){return t.replace(Z,"").split(",").map(parseFloat).filter(e=>!isNaN(e)).slice(0,3)}function P(t){return t.replace(tt,"").split(et).map(K).filter(e=>e.length>=2)}function rt(t){let e=y(t,"coord");e.length===0&&(e=H(t,"coord","*"));const r=e.map(o=>u(o).split(" ").map(parseFloat));return r.length===0?null:{geometry:r.length>2?{type:"LineString",coordinates:r}:{type:"Point",coordinates:r[0]},times:y(t,"when").map(o=>u(o))}}function V(t){if(t.length===0)return t;const e=t[0],r=t[t.length-1];let o=!0;for(let n=0;n<Math.max(e.length,r.length);n++)if(e[n]!==r[n]){o=!1;break}return o?t:t.concat([t[0]])}function w(t){return u(d(t,"coordinates"))}function J(t){let e=[],r=[];for(let o=0;o<t.childNodes.length;o++){const n=t.childNodes.item(o);if(G(n))switch(n.tagName){case"MultiGeometry":case"MultiTrack":case"gx:MultiTrack":{const i=J(n);e=e.concat(i.geometries),r=r.concat(i.coordTimes);break}case"Point":{const i=K(w(n));i.length>=2&&e.push({type:"Point",coordinates:i});break}case"LinearRing":case"LineString":{const i=P(w(n));i.length>=2&&e.push({type:"LineString",coordinates:i});break}case"Polygon":{const i=[];for(const s of y(n,"LinearRing")){const c=V(P(w(s)));c.length>=4&&i.push(c)}i.length&&e.push({type:"Polygon",coordinates:i});break}case"Track":case"gx:Track":{const i=rt(n);if(!i)break;const{times:s,geometry:c}=i;e.push(c),s.length&&r.push(s);break}}}return{geometries:e,coordTimes:r}}function ot(t){return t.length===0?null:t.length===1?t[0]:{type:"GeometryCollection",geometries:t}}function nt(t,e,r,o){const{coordTimes:n,geometries:i}=J(t),s=ot(i);if(!s&&o.skipNullGeometry)return null;const c={type:"Feature",geometry:s,properties:Object.assign(O(t,["name","address","visibility","open","phoneNumber","description"]),j(t),$(t,e),I(t),F(t,r),D(t),q(t),n.length?{coordinateProperties:{times:n.length===1?n[0]:n}}:{})};c.properties?.visibility!==void 0&&(c.properties.visibility=c.properties.visibility!=="0");const l=t.getAttribute("id");return l!==null&&l!==""&&(c.id=l),c}function it(t){return d(t,"gx:LatLonQuad")?{geometry:{type:"Polygon",coordinates:[V(P(w(t)))]}}:ct(t)}const st=Math.PI/180;function at(t,e,r){const o=[(t[0]+t[2])/2,(t[1]+t[3])/2];return[e[0].map(n=>{const i=n[1]-o[1],s=n[0]-o[0],c=Math.sqrt(Math.pow(i,2)+Math.pow(s,2)),l=Math.atan2(i,s)+r*st;return[o[0]+Math.cos(l)*c,o[1]+Math.sin(l)*c]})]}function ct(t){const e=d(t,"LatLonBox");if(e){const r=x(e,"north"),o=x(e,"west"),n=x(e,"east"),i=x(e,"south"),s=x(e,"rotation");if(typeof r=="number"&&typeof i=="number"&&typeof o=="number"&&typeof n=="number"){const c=[o,i,n,r];let l=[[[o,r],[n,r],[n,i],[o,i],[o,r]]];return typeof s=="number"&&(l=at(c,l,s)),{bbox:c,geometry:{type:"Polygon",coordinates:l}}}}return null}function lt(t,e,r,o){const n=it(t),i=n?.geometry||null;if(!i&&o.skipNullGeometry)return null;const s={type:"Feature",geometry:i,properties:Object.assign({"@geometry-type":"groundoverlay"},O(t,["name","address","visibility","open","phoneNumber","description"]),j(t),$(t,e),I(t),B(t),F(t,r),D(t),q(t))};n?.bbox&&(s.bbox=n.bbox),s.properties?.visibility!==void 0&&(s.properties.visibility=s.properties.visibility!=="0");const c=t.getAttribute("id");return c!==null&&c!==""&&(s.id=c),s}function ut(t){let e=t.getAttribute("id");const r=t.parentNode;return!e&&G(r)&&r.localName==="CascadingStyle"&&(e=r.getAttribute("kml:id")||r.getAttribute("id")),L(e||"")}function pt(t){const e={};for(const r of y(t,"Style"))e[ut(r)]=I(r);for(const r of y(t,"StyleMap")){const o=L(r.getAttribute("id")||"");A(r,"styleUrl",n=>{n=L(n),e[n]&&(e[o]=e[n])})}return e}function ft(t){const e={};for(const r of y(t,"SimpleField"))e[r.getAttribute("name")||""]=E[r.getAttribute("type")||""]||E.string;return e}function*gt(t,e={skipNullGeometry:!1}){const r=pt(t),o=ft(t);for(const n of y(t,"Placemark")){const i=nt(n,r,o,e);i&&(yield i)}for(const n of y(t,"GroundOverlay")){const i=lt(n,r,o,e);i&&(yield i)}}function mt(t,e={skipNullGeometry:!1}){return{type:"FeatureCollection",features:Array.from(gt(t,e))}}const yt=async({fileId:t})=>{const e={Authorization:`Bearer ${MAPS.SessionId}`},{data:r}=await z({method:"GET",url:`/services/apexrest/maps/content/proxy?mapsFileId=${t}`,headers:e});return r},ht=async()=>{const t={action:"getKMLOptions",ajaxResource:"QueryBuilderAPI"};let e=[];try{const{data:r,success:o}=await MAPS.Utils.Apex.invoke("maps.RemoteFunctions.processAJAXRequest",[t]);o&&(e=r)}catch(r){console.error("Can not get kml files",r)}return e},bt=async({fileId:t,qid:e})=>{const{GeoJSONLayer:r,GroupLayer:o}=await W(["esri/layers/GeoJSONLayer","esri/layers/GroupLayer"]);console.groupCollapsed(`add KML: ${e}`),console.log("KMLs are a work in progress. Need to test more samples to capture everything");const n=await yt({fileId:t}),s=new DOMParser().parseFromString(n,"text/xml");if(s.getElementsByTagName("parsererror").length>0)throw console.error(s.getElementsByTagName("parsererror")),console.groupEnd(),new Error("Invalid KML");const c=mt(s),l={},M={type:"unique-value",field:"featureId",defaultSymbol:{type:"simple-fill"},uniqueValueInfos:[]},Q=c.features.flatMap(a=>{const{geometry:p,properties:N}=a,{type:m}=p;return m&&m.toLowerCase()==="geometrycollection"?p.geometries.map(f=>({properties:N,geometry:f,type:"Feature"})):a});let C=0;Q.forEach(a=>{const p=`${e}_${C}`,{geometry:N,properties:m}=a,{type:f}=N;if(m||(a.properties={}),a.properties.featureId=p,f){l[f]||(l[f]={type:"FeatureCollection",features:[]}),l[f].features.push(a);const T=f.toLowerCase();T==="polygon"?M.uniqueValueInfos.push({value:p,symbol:{type:"simple-fill",color:MAPS.Utils.Color.hexToRgba(a.properties.fill||"#3083d3",a.properties["fill-opacity"]||.5),outline:{color:MAPS.Utils.Color.hexToRgba(a.properties.stroke||"#16325C",a.properties["stroke-opacity"]||1),width:a["stroke-width"]||2}}}):T==="linestring"?M.uniqueValueInfos.push({value:p,symbol:{type:"simple-line",color:MAPS.Utils.Color.hexToRgba(a.properties["line-color"]||"#3083d3",a.properties["line-opacity"]||1),width:a.properties.width||a.properties["line-width"]||2}}):T==="point"&&((a?.properties?.icon||"").indexOf("http")>-1?M.uniqueValueInfos.push({value:p,symbol:{type:"picture-marker",url:a.properties.icon}}):M.uniqueValueInfos.push({value:p,symbol:{type:"simple-marker",color:MAPS.Utils.Color.hexToRgba(a.properties["line-color"]||"#3083d3",a.properties["line-opacity"]||1),width:a.properties["line-width"]||2}})),m?.description?.["@type"]==="html"?(m.template=m?.description?.value,l[f].popupTemplate={content:m?.description?.value?"{TEMPLATE}":"{NAME}"}):l[f].popupTemplate={content:"{NAME}"}}C++});const S=new o({id:e,spatialReference:{wkid:4326}});Object.keys(l).forEach(a=>{const p=l[a],N=new Blob([JSON.stringify(p)],{type:"application/json"}),m=URL.createObjectURL(N),f=new r({url:m,renderer:M,spatialReference:{wkid:4326},popupEnabled:!0,popupTemplate:p.popupTemplate});S.add(f)});const h=await S.loadAll();if(h.loadError)throw console.error(h.loadError),console.groupEnd(),new Error(h.loadError);if(Array.isArray(h.loadWarnings)&&h.loadWarnings.length>0)throw console.error(h.loadWarnings),console.groupEnd(),new Error(h.loadWarnings.join(", "));MAPS.view.map.add(S),console.groupEnd()};export{bt as a,ht as g};
