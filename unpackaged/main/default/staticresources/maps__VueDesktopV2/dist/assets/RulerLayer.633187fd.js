import{_ as w,H as A,B as H,f as C,g as D,aH as x,Q as U,r as M,o as p,c,h as l,t as u,i as _,F as O,q as $,a0 as k,e as R}from"../bundle.js";import{C as V}from"./ColorPicker.e47e828c.js";const G=""+MAPS.getURLPath({base:"/resource/1730379547462/maps__VueDesktopV2/dist/",path:"assets/icon_drive.a073562a.svg"}),N=""+MAPS.getURLPath({base:"/resource/1730379547462/maps__VueDesktopV2/dist/",path:"assets/icon_straightline.39fa3bb0.svg"});const{GraphicsLayer:f,Graphic:d,Point:g,geodesicUtils:b}=await A(["esri/layers/GraphicsLayer","esri/Graphic","esri/geometry/Point","esri/geometry/support/geodesicUtils"]),I={components:{ButtonIcon:H,ColorPicker:V},props:{layer:{type:Object,default:()=>{},required:!0}},setup(){const e=C(),i=D();return{mainStore:e,layersStore:i}},data(){return{isVisible:!0,isLoading:!1,isDragging:null,dragHandler:null,hasError:!1,tooManyStops:!1,waypoints:null,transitColor:"#FF0000",lineColor:"#FF0000",driveIcon:G,lineIcon:N}},computed:{layerIcon(){return x().ruler},statusMessage(){return this.isLoading?this.$Labels.Layers_On_The_Map_Header_Ruler_Calculating_Message:this.isDragging?this.$Labels.Layers_On_The_Map_Header_Ruler_Drop_Message:this.hasError?this.$Labels.Layers_On_The_Map_Header_Ruler_Error_No_Route:this.tooManyStops?this.$Labels.Ruler_Too_Many_Vertices:this.$Labels.Layers_On_The_Map_Header_Ruler_No_Info_Yet_Message}},watch:{transitColor(){this.transitPolyline.symbol={type:"simple-line",color:MAPS.Utils.Color.hexToRgba(this.transitColor),width:3}},lineColor(){this.points.forEach(e=>{e.line&&(e.line.symbol={type:"simple-line",color:MAPS.Utils.Color.hexToRgba(this.lineColor,.3),width:2})})}},mounted(){this.lineGraphicsLayer=new f,this.markerGraphicsLayer=new f({id:`ruler-markergraphics-${this.layer.qid}`}),MAPS.view.map.add(this.lineGraphicsLayer),MAPS.view.map.add(this.markerGraphicsLayer),this.points=[{type:"end",graphic:new d({geometry:{type:"point",longitude:this.layer.coordinates.longitude,latitude:this.layer.coordinates.latitude},symbol:this.createPointSymbol("end",!1)})}],this.markerGraphicsLayer.add(this.points[0].graphic),MAPS.view.openPopup({title:this.$Labels.MA_Please_Drag_The_Red_Marker_To_Begin,location:this.points[0].graphic.geometry}),this.transitPolyline=new d({geometry:{type:"polyline",paths:[[this.layer.coordinates.longitude,this.layer.coordinates.latitude],[this.layer.coordinates.longitude,this.layer.coordinates.latitude]]},symbol:{type:"simple-line",color:MAPS.Utils.Color.hexToRgba(this.transitColor),width:3}}),this.lineGraphicsLayer.add(this.transitPolyline);let e;this.dragHandler=MAPS.view.on("drag",async i=>{if(!this.isLoading){if(i.action==="start"){MAPS.view.popup.title===this.$Labels.MA_Please_Drag_The_Red_Marker_To_Begin&&MAPS.view.popup.close();const t=this.getPointMap(),s=(await MAPS.view.hitTest(i)).results.find(o=>t.containsKey(o?.graphic));s&&(i.stopPropagation(),e=t.get(s.graphic),this.isDragging=!0,this.waypoints=null,this.transitPolyline.symbol={type:"simple-line",color:MAPS.Utils.Color.hexToRgba(this.transitColor),width:0},e.type==="end"&&this.points.length===1&&(this.points.unshift({type:"start",graphic:new d({geometry:{type:"point",longitude:e.graphic.geometry.longitude,latitude:e.graphic.geometry.latitude},symbol:this.createPointSymbol("start",!1)}),line:new d({geometry:{type:"polyline",paths:[[e.graphic.geometry.longitude,e.graphic.geometry.latitude],[e.graphic.geometry.longitude,e.graphic.geometry.latitude]]},symbol:{type:"simple-line",color:MAPS.Utils.Color.hexToRgba(this.lineColor,.3),width:2}}),handle:new d({geometry:{type:"point",longitude:e.graphic.geometry.longitude,latitude:e.graphic.geometry.latitude},symbol:this.createPointSymbol("handle",!1)})}),this.lineGraphicsLayer.add(this.points[0].line),this.markerGraphicsLayer.addMany([this.points[0].handle,this.points[0].graphic])))}else if(i.action==="update"){if(e){if(i.stopPropagation(),e.type==="handle"){const t=this.points.at(this.points.indexOf(e.parent)+1);e.parent.handle.geometry=MAPS.view.toMap(i),e.parent.line.geometry={type:"polyline",paths:[[e.parent.graphic.geometry.longitude,e.parent.graphic.geometry.latitude],[e.parent.handle.geometry.longitude,e.parent.handle.geometry.latitude],[t.graphic.geometry.longitude,t.graphic.geometry.latitude]]};return}if(e.graphic.geometry=MAPS.view.toMap(i),e.line){e.line.geometry={type:"polyline",paths:[[e.graphic.geometry.longitude,e.graphic.geometry.latitude],e.line.geometry.paths[0][1]]};const[[t,a],[s,o]]=e.line.geometry.paths[0];e.handle.geometry={type:"point",longitude:(t+s)/2,latitude:(a+o)/2}}if(e!==this.points[0]){const t=this.points.at(this.points.indexOf(e)-1);t.line.geometry={type:"polyline",paths:[t.line.geometry.paths[0][0],[e.graphic.geometry.longitude,e.graphic.geometry.latitude]]};const[[a,s],[o,r]]=t.line.geometry.paths[0];t.handle.geometry={type:"point",longitude:(a+o)/2,latitude:(s+r)/2}}}}else if(i.action==="end"&&e){if(i.stopPropagation(),e.type==="handle"){const t=this.points.indexOf(e.parent)+1,a=this.points.at(t);this.points.splice(t,0,{type:"point",graphic:new d({geometry:{type:"point",longitude:e.parent.handle.geometry.longitude,latitude:e.parent.handle.geometry.latitude},symbol:this.createPointSymbol("point",!1)}),line:new d({geometry:{type:"polyline",paths:[[e.parent.handle.geometry.longitude,e.parent.handle.geometry.latitude],[a.graphic.geometry.longitude,a.graphic.geometry.latitude]]},symbol:{type:"simple-line",color:MAPS.Utils.Color.hexToRgba(this.lineColor,.3),width:2}}),handle:new d({geometry:{type:"point",longitude:(e.parent.handle.geometry.longitude+a.graphic.geometry.longitude)/2,latitude:(e.parent.handle.geometry.latitude+a.graphic.geometry.latitude)/2},symbol:this.createPointSymbol("handle",!1)})}),this.lineGraphicsLayer.add(this.points[t].line),this.markerGraphicsLayer.addMany([this.points[t].handle,this.points[t].graphic]);const s=e.parent;s.line.geometry={type:"polyline",paths:[s.line.geometry.paths[0][0],[s.handle.geometry.longitude,s.handle.geometry.latitude]]};const[[o,r],[h,n]]=s.line.geometry.paths[0];s.handle.geometry={type:"point",longitude:(o+h)/2,latitude:(r+n)/2}}this.isLoading=!0,[...this.getPointMap().values()].forEach(t=>{t.graphic.symbol=this.createPointSymbol(t.type,!0)});try{const t=await MAPS.Utils.Apex.invoke("maps.RemoteFunctions.getRulerData",[this.points.map((s,o)=>({id:`point-${o}`,lat:s.graphic.geometry.latitude,lng:s.graphic.geometry.longitude}))]);let a=0;if(this.waypoints=t?.waypoints?.map((s,o)=>{const r={...s,type:"start"};if(o>0){const{distance:h,nontraffictime:n,totaltraveltime:y,lng:v,lat:T}=t.waypoints[o-1];r.type=o===t.waypoints.length-1?"end":"waypoint";const m=this.formatDriveTimeLabel(n,!0),P=this.formatDriveTimeLabel(y,!1),S=y!==0&&y>n?`<span style="color: #E54E4E;font-weight: bold;">${P}</span><br/><span class="info-drive-no-traffic">${m}</span>`:m;r.transitDetailsHTML=`${this.formatDistance(h)} &bull; ${S}`;const L=b.geodesicDistance(new g({longitude:r.lng,latitude:r.lat}),new g({longitude:v,latitude:T})).distance;a+=L,r.lineDetailsHTML=`<span>${this.formatDistance(L)}</span>`}return r}),this.hasError=!this.waypoints,!this.hasError){Object.assign(this.transitPolyline,{geometry:{type:"polyline",paths:t.geojson.features[0].geometry.coordinates},symbol:{type:"simple-line",color:MAPS.Utils.Color.hexToRgba(this.transitColor),width:3}});const s=this.formatDriveTimeLabel(t.summary.nontraffictime,!0),o=this.formatDriveTimeLabel(t.summary.totaltraveltime,!1),r=t.summary.totaltraveltime!==0&&t.summary.totaltraveltime>t.summary.nontraffictime?`<span style="color: #E54E4E;font-weight: bold;">${o}</span><br/><span class="info-drive-no-traffic">${s}</span>`:s;this.transitDetailsHTML=`${this.formatDistance(t.summary.distance)} &bull; ${r}`;const h=b.geodesicDistance(new g({longitude:t.waypoints[0].lng,latitude:t.waypoints[0].lat}),new g({longitude:t.waypoints.at(-1).lng,latitude:t.waypoints.at(-1).lat})).distance;this.lineDetailsHTML=`<span>${this.formatDistance(t.waypoints.length>2?a:h)}</span>`}}catch{this.tooManyStops=!0}this.isLoading=!1,[...this.getPointMap().values()].forEach(t=>{t.graphic.symbol=this.createPointSymbol(t.type,!1)}),e=null,this.isDragging=!1}}})},unmounted(){this.dragHandler.remove(),MAPS.view.map.removeMany([this.lineGraphicsLayer,this.markerGraphicsLayer])},methods:{formatLabel:U,setVisibility(){this.isVisible?MAPS.view.map.removeMany([this.lineGraphicsLayer,this.markerGraphicsLayer]):MAPS.view.map.addMany([this.lineGraphicsLayer,this.markerGraphicsLayer]),this.isVisible=!this.isVisible},removeLayer(){this.layersStore.removePlottedLayer(this.layer.qid)},formatDriveTimeLabel(e,i){const t=Math.floor(e/3600),a=Math.floor((e-t*3600)/60);return i?t===0?a===1?MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_No_Hour_Singular_Minute_No_Traffic):MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_No_Hour_Multiple_Minutes_No_Traffic,[a]):t===1?a===1?MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Singular_Hour_Singular_Minute_No_Traffic):MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Singular_Hour_Multiple_Minutes_No_Traffic,[a]):a===1?MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Plural_Hour_Singular_Minute,[t]):MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Multiple_Hours_Multiple_Minutes_No_Traffic,[t,a]):t===0?a===1?MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_No_Hour_Singular_Minute):MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_No_Hour_Multiple_Minutes,[a]):t===1?a===1?MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Singular_Hour_Singular_Minute):MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Singular_Hour_Multiple_Minutes,[a]):a===1?MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Plural_Hour_Singular_Minute,[t]):MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Multiple_Hours_Multiple_Minutes,[t,a])},formatDistance(e){const i=this.mainStore.settings.routes.units.value;return e<500?i==="mi"?MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Feet,[(e*3.28084).toFixed(2)]):MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Meters,[e.toFixed(2)]):i==="mi"?MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Miles,[(e/1609.34).toFixed(2)]):MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Kilometers,[(e/1e3).toFixed(2)])},getPointMap(){return this.points.reduce((e,i)=>(e.set(i.graphic,i),i.handle&&e.set(i.handle,{type:"handle",graphic:i.handle,parent:i}),e),new Map)},createPointSymbol(e,i){return{type:"simple-marker",size:{handle:i?4:8}[e]||(i?4:12),color:{handle:[255,255,255,.5],start:[3,128,1].concat(i?[.2]:[]),end:[255,2,0].concat(i?[.2]:[]),point:[255,255,255].concat(i?[.2]:[])}[e],outline:{color:[0,0,0],width:1}}}}},E={class:"ruler-layer"},F={class:"slds-grid slds-grid_vertical-align-center slds-p-around_small slds-border_bottom"},z=["src"],B={class:"slds-text-heading_small slds-m-left_small slds-col_bump-right"},q={key:0},j={class:"slds-p-around_small slds-border_bottom"},K={class:"slds-grid slds-grid_vertical-align-top slds-p-vertical_xx-small"},Q={class:"slds-size_1-of-6"},Y=["src"],J=["innerHTML"],W={class:"slds-grid slds-grid_vertical-align-top slds-p-vertical_xx-small"},X={class:"slds-size_1-of-6"},Z=["src"],ee=["innerHTML"],te={class:"waypoints"},ie={class:"slds-grow"},se={key:0,class:"slds-p-vertical_x-small"},ae={class:"slds-grid slds-grid_vertical-align-top slds-p-vertical_xx-small"},le={class:"slds-size_1-of-6"},oe=["src"],re=["innerHTML"],ne={class:"slds-grid slds-grid_vertical-align-top slds-p-vertical_xx-small"},he={class:"slds-size_1-of-6"},de=["src"],pe=["innerHTML"],ce={class:"slds-grid slds-p-around_small slds-border_top"},_e={key:1,class:"slds-p-around_small"};function ge(e,i,t,a,s,o){const r=M("ButtonIcon"),h=M("ColorPicker");return p(),c("div",E,[l("div",F,[l("img",{src:o.layerIcon},null,8,z),l("div",B,u(o.formatLabel(e.$Labels.Ruler_Layer_Name,[t.layer.number])),1),_(r,{iconCategory:"utility",iconName:s.isVisible?"preview":"hide",size:"small",title:e.$Labels.Toggle_Layer_Visibility,assistiveText:e.$Labels.Toggle_Layer_Visibility,onClick:o.setVisibility},null,8,["iconName","title","assistiveText","onClick"]),_(r,{iconCategory:"utility",iconName:"close",size:"small",title:e.$Labels.Layers_On_The_Map_Remove_Layer,assistiveText:e.$Labels.Layers_On_The_Map_Remove_Layer,onClick:o.removeLayer},null,8,["title","assistiveText","onClick"])]),s.waypoints?(p(),c("div",q,[l("div",j,[l("div",K,[l("div",Q,[l("img",{src:s.driveIcon,style:{width:"17px",opacity:".5"}},null,8,Y)]),l("div",{innerHTML:e.transitDetailsHTML},null,8,J)]),l("div",W,[l("div",X,[l("img",{src:s.lineIcon,style:{width:"17px",opacity:".5"}},null,8,Z)]),l("div",{innerHTML:e.lineDetailsHTML},null,8,ee)])]),l("div",te,[(p(!0),c(O,null,$(s.waypoints,n=>(p(),c("div",{key:n.id,class:"slds-grid slds-grid_vertical-align-top slds-p-horizontal_small slds-p-vertical_x-small"},[l("div",{class:k(["waypoint-circle",n.type])},null,2),l("div",ie,[l("div",null,u(n.address),1),n.type!=="start"?(p(),c("div",se,[l("div",ae,[l("div",le,[l("img",{src:s.driveIcon,style:{width:"17px",opacity:".5"}},null,8,oe)]),l("div",{innerHTML:n.transitDetailsHTML},null,8,re)]),l("div",ne,[l("div",he,[l("img",{src:s.lineIcon,style:{width:"17px",opacity:".5"}},null,8,de)]),l("div",{innerHTML:n.lineDetailsHTML},null,8,pe)])])):R("",!0)])]))),128))]),l("div",ce,[_(h,{modelValue:s.transitColor,"onUpdate:modelValue":i[0]||(i[0]=n=>s.transitColor=n),class:"slds-size_1-of-2",labels:{chooseColor:e.$Labels.Layers_On_The_Map_Transit_Line}},null,8,["modelValue","labels"]),_(h,{modelValue:s.lineColor,"onUpdate:modelValue":i[1]||(i[1]=n=>s.lineColor=n),class:"slds-size_1-of-2",labels:{chooseColor:e.$Labels.Layers_On_The_Map_Straight_Line}},null,8,["modelValue","labels"])])])):(p(),c("div",_e,u(o.statusMessage),1))])}const me=w(I,[["render",ge],["__scopeId","data-v-e17e82fb"]]);export{me as default};
