import{Q as M}from"../bundle.js";const D=async({overlay:r,level:o,filters:p=[]})=>{if(o==="")return[];const i={overlay:r,level:o,filters:p},{status:g,data:n}=await MAPS.Utils.HTTP.SendGISHFRequest({endpoint:"/boundary/search/2",data:i,headers:{orgid:MAPS.orgId,"content-type":"application/json"}});if(g===200){const{geoids:l=[]}=n;return l}throw console.warn(MAPS.app.config.globalProperties.$Labels.ShapeLayer_Overlay_Not_Avail,n),new Error(MAPS.app.config.globalProperties.$Labels.ShapeLayer_Overlay_Not_Avail)},E=async({getFields:r=!1,overlay:o,level:p})=>{const i="/boundary/overlays/2";let g={};if(r){if(!o||!p)throw new Error(MAPS.app.config.globalProperties.$Labels.ShapeLayer_Specify_Country);g={overlay:o,level:p,fields:!0}}const{success:n=!1,data:l={}}=await MAPS.Utils.Apex.invoke("maps.RemoteFunctions.getFromHyperforceGISService",[i,g]);if(n){const{overlays:t=[]}=l;return t}throw console.warn("Failed to get country select options",l),new Error(MAPS.app.config.globalProperties.$Labels.Common_Refresh_And_Try_Again_Contact_Admin)},F=async({overlay:r,level:o,field:p,searchterm:i})=>{const g="/boundary/autocomplete/2",n={overlay:r,level:o,field:p,searchterm:i},{success:l=!1,data:t={}}=await MAPS.Utils.Apex.invoke("maps.RemoteFunctions.getFromHyperforceGISService",[g,n]);if(l)return t.data;throw console.warn(MAPS.app.config.globalProperties.$Labels.ShapeLayer_Cannot_Get_Field_Details,t),new Error(MAPS.app.config.globalProperties.$Labels.ShapeLayer_Cannot_Get_Field_Details)},C=r=>new Promise(o=>{setTimeout(o,r)}),N=async({geoIdArray:r,status:o=()=>{}})=>{const p=r.length;let i=[];const g=100,n=[];let l=!0;for(let e=0;e<r.length;e+=g)i.push(r.slice(e,e+g));o(MAPS.app.config.globalProperties.$Labels.MA_Loading_With_Ellipsis);let t=0;const h=async(e,s)=>{const f=s.length,a=JSON.stringify({geoids:s,format:"GeoJSON",merged:!1});try{await C(t),t<=1e3&&(t+=25);const{status:u,data:c}=await MAPS.Utils.HTTP.SendGISHFRequest({endpoint:"/boundary/geography/2",data:a,headers:{orgid:MAPS.orgId,"content-type":"application/json"}});let S=[],d=[];if(u===200){const{data:_,geomLabels:P}=c;S=_,d=P,t>=1e3&&(t-=1e3)}return{promiseId:e,success:u===200,geoJSON:S,count:d,batchTotal:f}}catch(u){return u.message.indexOf("code 429")>-1?(o("Waiting..."),console.warn("Too many calls to MAIO, we need to wait!",`waiting ${t} before our next call`),t=1e4,await C(t),await h(e,s)):{promiseId:e,success:!1,message:u.message}}},b={},m={},A=e=>{const{geoJSON:s}=e;for(let f=0;f<s.length;f++){const a=s[f],{geojson:u}=a;u.features.forEach(c=>{const{geometry:S,properties:d}=c;if(!S){n.push({type:"polygon",attributes:c.properties,rings:[]});return}const{type:_}=S;if(d===void 0&&(c.properties={}),c.properties.geoId=c.properties.id,c.properties.title=c.properties.label,_){const P=_.toLowerCase();if(P==="polygon"||P==="multipolygon"){const w=[];S.coordinates.forEach($=>{w.push($[0])}),n.push({type:"polygon",attributes:c.properties,rings:w})}}})}},L=i.splice(0,1)[0];let y=0;if(L){const e=await h("firstBatch",L);if(e.success){const{count:s=[],batchTotal:f}=e;y+=f,s.forEach(a=>{b[a.label]||(b[a.label]=0),b[a.label]+=Number(a.count)}),o(`${MAPS.app.config.globalProperties.$Labels.MA_Loading_With_Ellipsis} ${M(MAPS.app.config.globalProperties.$Labels.Mobile_Legend_Count,[y,p])}`),A(e)}else return{success:!1,polygons:n,shapeCounts:m,message:l?"":MAPS.app.config.globalProperties.$Labels.ShapeLayer_Cannot_Show_Data}}return await MAPS.Utils.Async.concurrentRace({maxConcurrency:3,chunks:i,promiseCallback:h,completedCallback:e=>{const{count:s=[],batchTotal:f}=e;y+=f,s.forEach(a=>{b[a.label]||(b[a.label]=0),b[a.label]+=Number(a.count)}),o(`${MAPS.app.config.globalProperties.$Labels.MA_Loading_With_Ellipsis} ${M(MAPS.app.config.globalProperties.$Labels.Mobile_Legend_Count,[y,p])}`),A(e)},rejectedCallback:e=>{l=!1,console.error("e",e),i=[]}}),Object.keys(b).forEach(e=>{const s=b[e];m[e]={label:e,count:s}}),{success:l,polygons:n,shapeCounts:m,message:l?"":MAPS.app.config.globalProperties.$Labels.ShapeLayer_Cannot_Show_Data}};export{D as a,N as b,E as g,F as p};
