(function(){"use strict";const u=(n,...d)=>{if(!n)throw new TypeError("reply - takes at least one argument");postMessage({queryMethodListener:n,queryMethodArguments:d})},y={processRecords:({layerMap:n,batchSize:d})=>{const a=new Map;let e=new Set;const s=[];Object.values(n).forEach(i=>{const{features:o}=i;i.type==="sfMarkerLayer"&&o.forEach(t=>{e.add(t.linkId),e.size===d&&(s.push(Array.from(e)),e=new Set),a.set(t.linkId,[]),a.has(t.linkId)&&a.get(t.linkId).push(t.layerId)})}),e.size>0&&s.push(Array.from(e)),u("processedFeatures",{chunks:s,recordLayerMap:a})},getContactsAndLeads:({layers:n})=>{const d=[];Object.keys(n).forEach(a=>{const{features:e}=n[a];e&&e.length>0&&e.forEach(s=>{["003","00Q"].includes(s.linkId.substring(0,3))&&d.push(s.linkId)})}),u("getContactsAndLeads",{recordIds:d})},processCampaigns:({campaignRows:n,recordIds:d,batchSize:a})=>{let e=[],s=[];const i=[];d.forEach(t=>{const r=(t||"").substring(0,3);r==="003"?e.push(t):r==="00Q"&&s.push(t),e.length===a&&(i.push(e),e=[]),s.length===a&&(i.push(s),s=[])}),e.length>0&&i.push(e),s.length>0&&i.push(s);const o=[];n.forEach(t=>{i.forEach(r=>{r.length&&o.push({action:"add_to_campaign",ajaxResource:"TooltipAJAXResources",campaignId:t.id,campaignStatus:t.memberStatus,overrideExistingMemberStatus:t.overrideStatus,serializedContactIds:r[0].substring(0,3)==="003"?JSON.stringify(r):"[]",serializedLeadIds:r[0].substring(0,3)==="00Q"?JSON.stringify(r):"[]"})})}),u("returnCampaignRequests",{campaignRequests:o})},processClearCoordinatesRecords:({layerMap:n,batchSize:d=200})=>{const a={},e=[],s={};Object.values(n).forEach(o=>{const{features:t}=o;if(o.type==="sfMarkerLayer"){const{records:r}=o;t.forEach(p=>{const{linkId:l="",layerId:c,addressObject:h,addressFields:f}=p,I=r[l];if(s[c]={AddressObject:h,Latitude:f.latitude,Longitude:f.longitude,VerifiedLatitude:f.verifiedLatitude,VerifiedLongitude:f.verifiedLongitude},a[c]||(a[c]=[]),h==="SAME")a[c].push(`${l}::${l}`);else{const g=I[h];a[c].push(`${g}::${l}`)}if(a[c].length===d){const g=s[c];e.push({recordIds:a[c],coordinateFields:g,queryId:c}),a[c]=[]}})}});const i=Object.keys(a);for(let o=0;o<i.length;o++){const t=i[o],r=a[t];if(r.length>0){const p=s[t];e.push({recordIds:r,coordinateFields:p,queryId:t})}}u("processedCoordinateData",{chunks:e})},processRecordsToFollow:({layers:n,batchSize:d=200})=>{const a=new Set;let e=0,s=[];const i=[];Object.values(n).forEach(o=>{const{features:t}=o;t&&t.length>0&&o.type==="sfMarkerLayer"&&t.forEach(r=>{a.has(r.linkId)?e++:(a.add(r.linkId),s.push(r.linkId),s.length===d&&(i.push(s),s=[]))})}),s.length>0&&i.push(s),u("finishedRecordsToFollow",{chunks:i,totalDuplicates:e})}},m=n=>{console.log("direct",n)};onmessage=n=>{n.data instanceof Object&&Object.hasOwn(n.data,"queryMethod")&&Object.hasOwn(n.data,"queryMethodArguments")?y[n.data.queryMethod].apply(self,n.data.queryMethodArguments):m(n.data)}})();
