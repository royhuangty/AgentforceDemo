import{_ as v,l as B,bT as F,r as x,o as k,c as O,h as m,t as S,j as D,i as G,H as U,ac as N,bU as w,bV as _,aQ as E,bW as I,bS as u,aT as $,bX as z,bY as j,L as H,bZ as q,bQ as c,bR as y,b_ as W,a3 as M,b$ as Y,by as b,c0 as J,aO as Q,c1 as V}from"../bundle.js";const Z={name:"BasicWaypointTooltip",components:{SLDSButton:B},props:{attributes:{type:Object,required:!0},location:{type:Object,required:!0}},data(){return{title:"",address:"",notes:"",labels:{message:MAPS.app.config.globalProperties.$Labels.MA_MANUALLY_ENTER_WAYPOINT_MESSAGE,button:MAPS.app.config.globalProperties.$Labels.ActionFramework_Take_Me_There}}},created(){this.notes=this.attributes.notes||""},methods:{takeMeThere(){const{latitude:g,longitude:t}=this.$props.location;F({layerInfo:{features:[{lat:g,lng:t}]}})}}},X={id:"waypoint-content-template"},K={class:"notes"},tt={class:"slds-p-around_small"},st={class:"slds-p-top_x-small"};function et(g,t,s,e,i,a){const o=x("SLDSButton");return k(),O("div",X,[m("div",K,S(i.notes),1),m("div",tt,[D(" ***"+S(i.labels.message)+". ",1),m("div",st,[G(o,{label:i.labels.button,onClick:a.takeMeThere},null,8,["label","onClick"])])])])}const it=v(Z,[["render",et]]),ot={name:"BasicWaypointTooltipHeader",props:{attributes:{type:Object,required:!0}},data(){return{title:"",address:""}},created(){this.title=this.attributes.title||"",this.address=this.attributes.address||this.attributes.title||""}},rt={class:"name slds-text-heading_small slds-p-bottom_xx-small"},at={class:"slds-text-title slds-margin-bottom_x-small slds-p-bottom_xx-small"};function nt(g,t,s,e,i,a){return k(),O("div",null,[m("div",rt,S(i.title),1),m("div",at,S(i.address),1)])}const lt=v(ot,[["render",nt]]),dt="dodger-blue-route-icon",ht="1589ee";let L;const{GraphicsLayer:C,CustomContent:P,GroupLayer:pt,cimSymbolUtils:T,CIMSymbol:R}=await U(["esri/layers/GraphicsLayer","esri/popup/content/CustomContent","esri/layers/GroupLayer","esri/symbols/support/cimSymbolUtils","esri/symbols/CIMSymbol"]);class ct{constructor(){this.options={},this.waypointIdToWaypoint=new Map,this.markerCache=[],this.tooltipCache={},this.isGuideRoute=!1,this.id=N(),this.esriLayerId="",this.routeType="driving",this.strokeColor="#3492EB",this.waypointIcon="dodger-blue-route-icon";const t=new pt({id:this.id,SF_MAPS_TYPE:"navigationLayer",title:MAPS.app.config.globalProperties.$Labels.MA_ROUTE,visibilityMode:"inherited"}),s=new C({id:"routeIcons",title:MAPS.app.config.globalProperties.$Labels.MA_ROUTE,SF_MAPS_TYPE:"navigationWaypoints",graphics:[]}),e=new C({id:"routePath",title:MAPS.app.config.globalProperties.$Labels.MA_ROUTE,SF_MAPS_TYPE:"navigationPolyline",graphics:[]});t.addMany([e,s]),MAPS.view.map.add(t)}setWaypoints(t,s=!1){return t&&t.length?(this.options.waypoints=s?t:w(t),t.forEach(e=>{this.waypointIdToWaypoint.set(e.id,e)})):this.options.waypoints=[],this}setHardBreaks(t){return!t||!Array.isArray(t)||!t.length?this:(this.options.blockedTimes=[],t.forEach(s=>{this.options.blockedTimes.push({startTime:s.start,endTime:s.end})}),this)}setSoftBreaks(t){return!t||!Array.isArray(t)||!t.length?this:(this.options.softBreaks=[],t.forEach(s=>{this.options.softBreaks.push({startTime:s.start+1,endTime:s.end-1})}),this)}setStrokeColor(t){return t.indexOf("#")===-1&&(t=`#${t}`),this.strokeColor=t,this}setWaypointColor(t){return this.waypointColor=t,this}setWaypointIcon(t){return this.waypointIcon=t,this}setOptimized(t=!1){return this.options.optimized=t,this}setTimeBased(t=!1){return this.options.timebased=t,this}setTraffic(t=!1){return this.options.traffic=t,this}setDirections(t=!1){return this.options.directions=t,this}setIsGuideRoute(t=!1){this.isGuideRoute=t;const s=MAPS.view.map.findLayerById(this.id);return s.isGuideRoute=t,this}setTiles(t=!1){return this.options.tiles=t,this}setRouteStart(t){return t&&typeof t=="number"&&(this.options.routestart=t),this}setRouteEnd(t){return t&&typeof t=="number"&&(this.options.routeend=t),this}setDriveProfile(t){return t&&(this.options.driveProfile=t),this}setTimebasedlegacy(t=!1){return this.options.timebasedlegacy=t,this}setRouteTimeBasedOptions(t){if(!t||!t.Start||!t.End)return this;try{const s=_(t.Start);this.setRouteStart(s)}catch{const e=_(E.start);this.setRouteStart(e)}try{const s=_(t.End);this.setRouteEnd(s)}catch{const e=_(E.end);this.setRouteEnd(e)}return this}setFirst(t){return!t||Object.keys(t).length===0?this:(this.options.first&&this.waypointIdToWaypoint.delete(this.options.first.id),this.options.first=t,this.waypointIdToWaypoint.set(t.id,t),this)}setLast(t){return!t||Object.keys(t).length===0?this:(this.options.last&&this.waypointIdToWaypoint.delete(this.options.last.id),this.options.last=t,this.waypointIdToWaypoint.set(t.id,t),this)}setFirstWaypoint(t){if(t&&Object.keys(t).length!==0){this.options.first&&this.waypointIdToWaypoint.delete(this.options.first.id);const s=t.maps__Options__c||"{}",e=I(s);e.start||(e.start=this.options.routestart),this.options.first={lat:t.lat,lng:t.lng,id:t.id,duration:e.duration,start:e.start},this.options.timebased||delete this.options.first.start,this.waypointIdToWaypoint.set(t.id,t)}return this}setLastWaypoint(t){if(t&&Object.keys(t).length!==0){this.options.last&&this.waypointIdToWaypoint.delete(this.options.last.id);const s=t.Options__c||"{}",e=I(s);e.start===Math.round(new Date().getTime()/1e3)&&(e.start=this.options.routeend),this.options.last={lat:t.lat,lng:t.lng,id:t.id,duration:e.duration,start:e.start},this.options.timebased||delete this.options.last.start,this.waypointIdToWaypoint.set(t.id,t)}return this}getRoute(){return this.route}cleanClonedLocationsFromWaypoints(t,s){u(this.route,i=>{let a=(i.waypoints||[]).length;for(;a--;){const o=i.waypoints[a];(o.id===t||o.id===s)&&i.waypoints.splice(a,1)}});let e=this.options.waypoints.length;for(;e--;){const i=this.options.waypoints[e];(i.id===t||i.id===s)&&this.options.waypoints.splice(e,1)}return this}build(t){return L=L||$(),new Promise(async(s,e)=>{if(this.options.first&&(!this.options.first.lat||!this.options.first.lng))throw new Error("Invalid Start Location");if(this.options.last&&(!this.options.last.lat||!this.options.last.lng))throw new Error("Invalid Last Location");const i=z(this.options);for(let r=0;r<this.options.waypoints.length;r++){const n=this.options.waypoints[r];if(this.options.timebased||(n.start=void 0),!n.lat||!n.lng){e(new Error("Invalid Waypoint"));break}else i.optimizationType==="minimize_total_distance"&&(n.duration=1)}this.options.optimization_type=i.optimizationType,this.options.dayranges=i.dayRanges;const{addToScheduleExecuted:a}=L;if(a&&this.options.waypoints.length){const{options:{waypoints:r,dayranges:n}}=this,h=n[0].first.start,p=r.filter(d=>d.start===void 0),f=r.filter(d=>d.start!==void 0);if(f.length){const{shift:d,adjustedWaypoints:A}=j(this.options.dayranges[0],this.options.waypoints,p,h,f);this.options.waypoints=A,this.options.dayranges[0]=d}}let o,l;if(!this.options.waypoints.length&&(this.options.first||this.options.last)){if(this.options.first&&this.options.first.lat){const r=JSON.parse(JSON.stringify(this.options.first));o=r.id.substring(0,10),r.duration=1,r.start++,r.id=o,this.options.waypoints.push(r)}if(this.options.last&&this.options.last.lat){const r=JSON.parse(JSON.stringify(this.options.last));l=r.id.substring(0,10),r.duration=1,r.start--,r.id=l,this.options.waypoints.push(r)}}H.trackFeature({logPayload:{featureName:"plot_route",type:t,isGuideRoute:this.isGuideRoute,isTimeBased:this?.options?.timebased??!1,optimizationType:this.options.optimization_type,stops:(this.options.waypoints||[]).length}}),L.setAddToScheduleExecuted(!1),q(this.options).then(r=>{r.status!=="Failed"?(this.route=r,this.processQueueError(t).then(()=>{this.mixinMetadataWithRouteWaypoints(),this.updateWaypointIndices(),this.tooltipCache=null,this.getTooltipData().then(n=>{(!this.route.hasWaypointError||this.isGuideRoute)&&this.plotRoute(n,{firstCloneId:o,endCloneId:l}),s()}).catch(e)}).catch(n=>{e(n)})):e(MAPS.app.config.globalProperties.$Labels.Schedule_Job_Failed)}).catch(r=>{e(r)})})}plotRoute(t,{firstCloneId:s,endCloneId:e}){Array.isArray(t)&&t.length>0?t.forEach(i=>{i.forEach((a,o)=>{a?this.addMarkerToMap(a,o):o.id!==s&&o.id!==e&&this.addWaypointToMarker(o)})}):this.route.routes!==void 0?this.route.routes.forEach(i=>{this.addWaypointsAsMarkers(i.waypoints)}):this.addWaypointsAsMarkers(this.route.waypoints),this.addPolyLineToMap(this.route.geojson),this.zoomToFitRoute()}async zoomToFitRoute(){const t=MAPS.view.map.findLayerById(this.id),s=t.layers.find(i=>i.id==="routePath"),e=t.layers.find(i=>i.id==="routeIcons");await MAPS.view.goTo([s.graphics,e.graphics],{animate:!1}),MAPS.view.zoom-=1}addPolyLineToMap(t){const{features:s}=t,e=[];for(let n=0;n<s.length;n++){const h=s[n],{geometry:p={}}=h,{coordinates:f=[]}=p;for(let d=0;d<f.length;d++){const A=f[d];e.push(A)}}const i=MAPS.view.map.findLayerById(this.id),a={type:"polyline",hasZ:!1,hasM:!0,paths:e,spatialReference:{wkid:4326}},o=MAPS.Utils.Color.hexToRgba(this.strokeColor,.8),l={type:"graphic",geometry:a,symbol:{type:"simple-line",color:o,width:4}};i.layers.find(n=>n.id==="routePath").graphics.add(l)}getRouteType(){return this.options.timebasedlegacy?c.TIME_BASED_ROUTE:this.options.timebased?c.SCHEDULE:c.ROUTE}processQueueError(t){return new Promise((s,e)=>{if(this.isGuideRoute)s();else if(!this.route)s();else if(this.route.queue!==void 0)this.route.queue.forEach(i=>{const a=y.getWaypointErrorMessage(82014,c.TIME_BASED_ROUTE);i.errormessage=a,i.erroramount=500,delete i.arrivaltime,delete i.departuretime,this.route.waypoints.push(i)});else if(this.route.routes!==void 0){const i=[],a={details:[],status:"FAILED"};this.route.routes.forEach(o=>{o.waypoints.forEach(l=>{if(!a.maioCode)if(l.success===!1){const r=y.getWaypointErrorMessage(82014,c.TIME_BASED_ROUTE);l.errormessage=r,l.erroramount=l.erroramount<200?500:l.erroramount,delete l.arrivaltime,delete l.departuretime,a.maioCode=82014,a.details.push(l)}else i.push(l.id)})}),a.maioCode?e(a):t==="routing"&&this.options.waypoints.forEach(o=>{if(i.indexOf(o.id)===-1){const l=y.getWaypointErrorMessage(82018,c.TIME_BASED_ROUTE);o.errormessage=l,o.erroramount=500,delete o.arrivaltime,delete o.departuretime,this.route.routes.length===0&&(this.route.routes[0]={waypoints:[]}),o.start=this.route.routes[0].waypoints.length===0?Math.round(new Date().getTime()/1e3):this.route.routes[0].waypoints[0].start,this.route.routes[0].waypoints.push(o)}})}s()})}mixinMetadataWithRouteWaypoints(){u(this.route,t=>{!t||!t.waypoints||this.waypointIdToWaypoint&&t.waypoints.forEach((s,e)=>{t.waypoints[e]={...this.waypointIdToWaypoint.get(s.id),...s,distance:s.distance||0,color:`#${this.waypointColor||ht}`,icon:this.waypointIcon||dt},s.errormessage&&s.erroramount&&s.erroramount>120&&(this.route.hasWaypointError=!0)})}),this.options.timebased&&this.updateSummaryTotals()}updateSummaryTotals(){u(this.route,t=>{let s=0;t.waypoints.forEach(e=>{s+=e.duration||0}),s*=60,t.summary.traffictime&&(t.summary.traffictime+=s),t.summary.nontraffictime&&(t.summary.nontraffictime+=s),t.summary.totaltraveltime&&(t.summary.totaltraveltime+=s)})}getWaypointById(t){let s=null;return this.route.routes!==void 0?this.route.routes.forEach(e=>{Array.isArray(e.waypoints)&&([s]=e.waypoints.filter(i=>i.id===t))}):Array.isArray(this.route.waypoints)&&([s]=this.route.waypoints.filter(e=>e.id===t)),s}getTooltipData(){return new Promise((t,s)=>{this.tooltipCache?t(this.tooltipCache):u(this.route,e=>{V({waypoints:e.waypoints,isGuideRoute:this.isGuideRoute,layerId:this.id}).then(i=>{this.tooltipCache=i,t(i)}).catch(s)})})}mixinTooltipMetadataWithWaypoint(t,s){!t.record||u(this.route,e=>{e.waypoints.forEach(i=>{i.id===s.id&&(i.tooltipMetadata=t)})})}updateWaypointIndices(){u(this.route,t=>{const s=this.options.first&&this.options.first.id===t.waypoints[0].id,e=this.options.last&&this.options.first&&this.options.last.lat===this.options.first.lat&&this.options.last.lng===this.options.first.lng,i=t.waypoints.length;let a=1;t.waypoints.forEach(o=>{this.options.first&&o.id===this.options.first.id?(o.isFirst=!0,o.index=0,e&&(o.isFirstLast=!0)):this.options.last&&o.id===this.options.last.id?(o.isLast=!0,o.index=i,s&&e&&(o.isFirstLast=!0)):(o.index=a,a++)})})}addMarkerToMap(t,s){const e=W(s);if(!e)return;const i=new R({data:e});!s.isFirstLast&&!s.isFirst&&!s.isLast&&(T.applyCIMSymbolColor(i,this.strokeColor,{layersToColor:"fill"}),T.applyCIMSymbolColor(i,MAPS.Utils.Color.adjustColorLuminance(this.strokeColor,-.25),{layersToColor:"outline"}));const a={type:"graphic",id:s.id,qid:s.id,geometry:{type:"point",latitude:s.lat,longitude:s.lng},symbol:i,attributes:{...t.attributes,type:"navigation",index:s.index,originalWaypoint:{Id:s.Id,Name:s.Name,maps__Address__c:s.maps__Address__c,maps__BaseObjectId__c:s.maps__BaseObjectId__c,maps__BaseObject__c:s.maps__BaseObject__c,maps__LinkId__c:s.maps__LinkId__c,maps__MarkerLayer__c:s.maps__MarkerLayer__c}},titleFn:r=>{const n=M(Y);b(n,document.createElement("div")),r.innerHTML=n.el.innerHTML},popupTemplate:{title:'<div class="maps-esri-list-title">{tooltip1}</div><div class="maps-popup-header" id="tooltip-content" />',content:[new P({outFields:["*"],creator:r=>{const{graphic:n}=r,h={latitude:n?.geometry?.latitude,longitude:n?.geometry?.longitude},p=M(J,{graphic:n,location:h});return b(p,document.createElement("div")),p.el}})]}};MAPS.view.map.findLayerById(this.id).layers.find(r=>r.id==="routeIcons").add(a)}addWaypointToMarker(t){const s=W(t);if(!s)return;const e=new R({data:s});!t.isFirstLast&&!t.isFirst&&!t.isLast&&(T.applyCIMSymbolColor(e,this.strokeColor,{layersToColor:"fill"}),T.applyCIMSymbolColor(e,MAPS.Utils.Color.adjustColorLuminance(this.strokeColor,-.25),{layersToColor:"outline"}));const i={type:"graphic",id:t.id,qid:t.id,geometry:{type:"point",latitude:t.lat,longitude:t.lng},symbol:e,attributes:{title:t?.Name||t.maps__Address__c,index:t.index,notes:MAPS.Utils.String.htmlDecode(t.maps__Notes__c||"")},titleFn:l=>{const r=M(lt,{attributes:{title:t?.Name||t.maps__Address__c,address:t.maps__Address__c}});b(r,document.createElement("div")),l.innerHTML=r.el.innerHTML},popupTemplate:{title:'<div class="maps-esri-list-title">{title}</div><div class="maps-popup-header" />',outFields:["*"],content:[new P({outFields:["*"],creator:l=>{const{graphic:r}=l,{attributes:n}=r,h=M(it,{attributes:n,location:{latitude:t.lat,longitude:t.lng}});return b(h,document.createElement("div")),h.el}})]}};MAPS.view.map.findLayerById(this.id).layers.find(l=>l.id==="routeIcons").add(i)}addWaypointsAsMarkers(t){t.forEach(s=>{this.addWaypointToMarker(s)})}getWaypointMarker(t){let s=null,e;typeof t=="string"&&t.trim()?e=t.trim():typeof t=="object"&&(e=t.id);const i=this.getMarkers();if(Array.isArray(i)&&i.length>0){const a=i.filter(o=>o.qid===e);Array.isArray(a)&&a.length>0&&([s]=a)}return s}getMarkers(){return MAPS.view.map.findLayerById(this.id).layers.find(i=>i.id==="routeIcons")?.graphics?.items||[]}restoreRouteOnMap(){const t=MAPS.view.map.findLayerById(this.id);t.visible=!0}hideRouteOnMap(){const t=MAPS.view.map.findLayerById(this.id);t.visible=!1}clearRouteOnMap(){Q().removeTooltipDataFromRouteMap({uid:this.id}),this.markerCache=[];const t=MAPS.view.map.findLayerById(this.id);MAPS.view.map.remove(t),MAPS.view.closePopup()}isWaypointLengthInRange(t){const{waypoints:s,first:e,last:i}=this.options;let a=s.length;return e&&a++,i&&a++,y.isWaypointLengthGreaterThanMin(a,t)&&y.isWaypointLengthLessThanMax(this.waypointIdToWaypoint.size,t)}}export{ct as R};
