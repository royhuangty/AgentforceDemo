import{c8 as N,c9 as z,bt as G,_ as W,B as J,J as Q,K,aa as Y,ab as Z,x as X,l as ee,a5 as se,S as ie,E as te,u as D,g as ae,f as E,aH as re,b7 as T,ca as H,cb as le,cc as oe,cd as ne,bk as de,ce,cf as he,cg as ye,ch as $,ci as U,c4 as ue,r as g,o as u,c as m,h as l,t as y,s as V,v as I,j as P,b as A,w as v,i as b,F as x,q as C,a0 as O,e as M,p as pe,k as _e}from"../bundle.js";import{u as me}from"./index.d251dbc7.js";import{H as Le}from"./HeatMapOptions.3785dac9.js";import{T as F,M as be}from"./enums.445299a0.js";import{H as fe}from"./HoveringTooltip.b169338c.js";import"./index.0172543b.js";const ge=async(e,s)=>{const r=await z([s]);G({action:e.action,items:r})},ve={getItems(e){return N(e,ge)[0].children}};const Me={components:{ButtonIcon:J,ActionMenu:Q,ActionMenuItem:K,Layout:Y,LayoutItem:Z,ScopedNotification:X,SLDSButton:ee,Checkbox:se,Spinner:ie,ExpandableSection:te,HeatMapOptions:Le,HoveringTooltip:fe},props:{layer:{type:Object,default:()=>{},required:!0}},setup(){const e=D();return{v$:me(),listStore:e}},data(){return{plottedLayer:null,isLive:!1,loading:!0,legend:{},status:"",loadingMsg:"",errorMessage:"",errorSubMessage:"",layersStore:ae(),mainStore:E(),recordVisibleInfo:"",activeMode:{},geocodedHappened:!1,geocodedRecords:0,badAddressRecords:[],deviceLocationsPolled:!1,successfulDevices:0,failedDevices:[],unmetCriteriaDevices:[],heatmapLoading:!1,heatmapOptions:{heatmapRadius:5,heatmapMaxIntensity:20,heatmapOpacity:10,heatmapDissipating:!1},showAllLegendRows:!1,markersVisible:0,legendFieldLabel:"",isLayerOnMap:!1,totalMarkerCreated:0,hasLegendField:!1,isVariedBy2:!1,rowSelectedForMassAction:null,nonVisibleRowsForProximity:new Set,isProximityLayer:!1,refreshTimeout:null,isMapIt:!1,isPolyline:!1,hoverTimeout:null,tooltipVisible:!1,renderTooltip:!1,failedPolylineRecords:[],linkedShapeLayers:[]}},computed:{isPlotOnLoad(){return this.layersStore.polLayers.find(e=>e.id===this.layer.id)!==void 0},layerIcon(){const e=re();return this.isLive?e.live:this.isPolyline?e.polyline:e.marker},layerOptions(){const e=[];return this.isMapIt||(this.layer.permissions.modify&&e.push({label:this.$Labels.MA_Edit,action:"edit",types:[]}),e.push({label:this.$Labels.MA_REFRESH,action:"refresh",types:[]})),e.push({label:this.$Labels.MA_Zoom_To_Fit,action:"zoom",types:[]}),this.isLive&&e.push({label:this.$Labels.Layers_On_The_Map_OverFlow_Live_Button_Remove_All_Tracking_Histories,action:"remove-tracking-history",types:[]}),e},displayTypes(){const e=[{value:"Markers",label:this.$Labels.MA_Render_Markers,icon:this.$Images.icon_pin,action:"render-marker"}];return this.isLive||(e.push({value:"Scatter",label:this.$Labels.MA_Render_Scatter,icon:this.$Images.icon_scatter,action:"render-scatter"}),e.push({value:"Cluster",label:this.$Labels.MA_Render_Clusters,icon:this.$Images.icon_cluster,action:"render-cluster"}),e.push({value:"Heatmap",label:this.$Labels.MA_Render_Heatmap,icon:this.$Images.icon_heatmap,action:"render-heatmap"})),e},recordsGeocodedLabel(){return MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Plotted_Marker_Layer_Text_GeoCodes,[this.geocodedRecords])},badAddressLabel(){return MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Plotted_Marker_Layer_Text_Bad_Addresses,[this.badAddressRecords.length])},devicesUpdatedLabel(){return MAPS.Utils.Labels.format(this.$Labels.Layers_Updating_Devices,[this.successfulDevices,this.failedDevices.length])},failedDevicesLabel(){return MAPS.Utils.Labels.format(this.$Labels.Devices_Not_Reported,[this.failedDevices.length])},unmetCriteriaLabel(){return MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Plotted_Live_Location_Devices_Not_Visible,[this.unmetCriteriaDevices.length])},failedPolylineLabel(){return MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Plotted_Invalid_Polylines,[this.failedPolylineRecords.length])},legendName(){return`${this.$Labels.MA_LEGEND_FIELD} : ${this.layer.legendFieldLabel}`},legendVisibilityLabel(){return this.showAllLegendRows?this.$Labels.MA_Show_Less:this.$Labels.MA_SHOW_MORE},markerTotals(){return this.totalMarkerCreated},currentMarkerVisible(){return this.layer.isLayerVisible?this.markersVisible:0},markerInfo(){let e="";if(this.activeMode.value==="Markers"||this.activeMode.value==null){const s=this.$Labels.Layers_On_The_Map_Plotted_Marker_Layer_Text_Visible,a=this.$Labels.Layers_On_The_Map_Plotted_Marker_Layer_Text_Markers_Created;e=`${MAPS.Utils.Labels.format(a,[this.markerTotals])}, ${MAPS.Utils.Labels.format(s,[this.currentMarkerVisible])}`}return this.activeMode.value==="Cluster"&&(e=MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Cluster_Records,[this.currentMarkerVisible])),this.activeMode.value==="Scatter"&&(e=MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Scatter_Records,[this.currentMarkerVisible])),this.activeMode.value==="Heatmap"&&(e=MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_HeatMap_Records,[this.currentMarkerVisible])),e},recordCount(){return MAPS.Utils.Labels.format(this.$Labels.Layers_On_The_Map_Plotted_Marker_Layer_Text_Records,[this.markerTotals])},opacityOptions(){const e=[];for(let s=5;s<=95;s+=5)e.push({title:`${s}%`,value:(s/100).toFixed(2)});return e.push({title:"100%",value:"1"}),e},computedHeatmapButtonText(){return this.layer.permissions.modify?this.$Labels.Layers_On_The_Map_Save_Changes:this.$Labels.MA_REFRESH}},watch:{"layer.updateAction":{async handler(e){e==="updateLegend"&&await this.refreshLegendCounts(),e==="createLegend"&&this.updateLayerInfo(),e==="runProximity"&&await T(),e==="refreshLayer"&&this.refresh()}}},async created(){this.isLive=this.layer.type==="live",this.isMapIt=this.layer.isMapIt??!1,this.isPolyline=this.layer.type==="polyline",await this.loadLayer(),this.layersStore.updateIsLoading(this.layer.qid)},unmounted(){this.removeGraphics(),this.refreshTimeout&&clearTimeout(this.refreshTimeout)},methods:{showTooltipInfo(){this.hoverTimeout&&clearTimeout(this.hoverTimeout),this.hoverTimeout=setTimeout(async()=>{this.renderTooltip=!0,await this.$nextTick(),await this.calculateTooltipInfo(),this.tooltipVisible=!0},500)},hideTooltipInfo(){this.hoverTimeout&&clearTimeout(this.hoverTimeout),this.tooltipVisible=!1,this.renderTooltip=!1},async calculateTooltipInfo(){const s=this.$refs.layerHeader;this.$refs.hoveringTooltip&&await this.$refs.hoveringTooltip.calculateTooltipInfo(s)},async addRemoveProxCheck(e){this.isProximityLayer&&this.affectVisibility&&(e?this.layersStore.proximityActivatedLayers.add(`shape-${this.layer.qid}`):(this.layersStore.proximityActivatedLayers.delete(`shape-${this.layer.qid}`),this.layersStore.proximityActivatedLayers.size===0&&await H())),await this.filterProximityAndRefreshLegendCounts()},async filterProximityAndRefreshLegendCounts(){this.layersStore.proximityActivatedLayers.size!==0?(await this.showHideProximityGraphics(),await T()):await this.refreshLegendCounts()},async showHideProximityGraphics(){if(this.isProximityLayer){const e=MAPS.view.map.findLayerById(this.layer.qid),s=e.findLayerById(`shape-${this.layer.qid}`),a=new Set;(await e.findLayerById(`records-${this.layer.qid}`).queryFeatures()).features.forEach(t=>{a.add(t.attributes.objectId)}),s?.graphics.items.forEach(t=>{this.nonVisibleRowsForProximity.has(t.legendId)||!this.layer.isLayerVisible||!this.affectVisibility&&!a.has(t.attributes.linkIdToMarker)?t.visible=!1:t.visible=!0})}},async loadLayer({refresh:e=!1}={}){try{if(MAPS.deletedFeatures.delete(`records-${this.layer.qid}`),await le({layerUID:this.layer.qid,savedQueryId:this.layer.id,isVisibleAreaOnly:this.layer.visibleAreaOnly||!1,renderMode:this.layer.renderAs,layer:this.layer,status:s=>{this.setStatus(s)}}),this.isPolyline&&(this.failedPolylineRecords=this.layer.failedPolylineRecords),this.isMapIt){const{mapItOptions:{proximityOptions:s}}=this.layer;if(s){const a=`records-${this.layer.qid}`,r=MAPS.view.map.findLayerById(a),i=[];if(r){const{features:t}=await r.queryFeatures();t?.forEach(h=>{const{geometry:{latitude:c,longitude:d}}=h;i.push({lat:c,lng:d})})}if(i.length){const t={[a]:{features:i}};oe(t,s)}}}await this.updateLayerInfo(),this.attachLayerAutoRefresh(),e&&this.$bus.emit("refresh-list-view",this.layer.qid),this.loading=!1,this.layer.isLayerVisible=!0,this.isLayerOnMap=!0,this.layer.isLoading=!1}catch(s){this.showError(s.message,s.subMessage),console.warn(s)}},setStatus(e){this.status=e},attachLayerAutoRefresh(){const e=this,{queryData:s={}}=this.layer,{advancedOptions:a={}}=s,{enableMapUpdates:r,mapUpdateUnits:i,updateEvery:t}=a;if(String(r)==="true"){let h;i==="min"?h=t*6e4:h=t*1e3,this.refreshTimeout=setTimeout(()=>{e.refresh()},h)}},openModal(e){const s={layer:this.layer};e==="bad-addresses"?s.badRecords=this.badAddressRecords:e==="bad-polyline-records"?s.badRecords=this.failedPolylineRecords:e==="bad-devices"?s.badRecords=this.failedDevices:e==="unmet-criteria-devices"&&(s.badRecords=this.unmetCriteriaDevices),this.$bus.emit("open-modal",{name:e,config:s})},showError(e,s){this.loading=!1,this.errorMessage=e,this.errorSubMessage=s},async removeGraphics(){await ne([`records-${this.layer.qid}`]),de.removeLayer({id:this.layer.qid}),D().removeListByLayerId(this.layer.qid),MAPS.deletedFeatures.delete(this.layer.qid),this.layersStore.proximityActivatedLayers.has(`shape-${this.layer.qid}`)&&(this.layersStore.proximityActivatedLayers.delete(`shape-${this.layer.qid}`),this.layersStore.proximityActivatedLayers.size===0?await H():await T()),Array.isArray(this.linkedShapeLayers)&&this.linkedShapeLayers.length&&this.removeLinkedShapeLayers()},removeLinkedShapeLayers(){this.linkedShapeLayers.forEach(e=>{this.layersStore.removePlottedLayer(e)})},removeTrackingHistoryLayers(){this.layersStore.getTrackingLayersByLiveId(this.layer.qid).forEach(s=>this.layersStore.removePlottedLayer(s.qid))},removeLayer(){this.removeTrackingHistoryLayers(),this.layersStore.removePlottedLayer(this.layer.qid)},async toggleVisibility(e){const s=MAPS.view.map.findLayerById(this.layer.qid),a=e===!0||!this.layer.isLayerVisible&&!this.activeMode.action;this.layer.isLayerVisible=a?this.layer.isLayerVisible:!this.layer.isLayerVisible,s.visible=this.layer.isLayerVisible,this.setAllRowsListViewVisibility(this.layer.isLayerVisible),a||(await this.addRemoveProxCheck(this.layer.isLayerVisible&&this.activeMode.action==="render-marker"),await this.refreshLegendCounts())},updateFeatureVisibililtyBasedOnRenderType(e){const s=this.layersStore.getPlottedLayerById(this.layer.qid),a=MAPS.view.map.findLayerById(this.layer.qid),{queryData:r}=s,{enabled:i=!1,hideMarkers:t=!1}=r?.proximityOptions||{},h=String(t)==="true";if(String(i)==="true"){const c=a.allLayers.find(_=>_.id===`records-${this.layer.qid}`),d=a.allLayers.find(_=>_.id===`shape-${this.layer.qid}`);let n=!1;c.visible=!0,e==="render-marker"&&(c.visible=!h,n=!0),d&&(d.visible=n)}},async changeDisplayType(e){if(this.layersStore.markerSelection.selectedMarkers.has(`records-${this.layer.qid}`)){E().toast({message:this.$Labels.Marker_Selection_Render_Mode_Warning,position:"bottom-right",state:"warning",duration:5e3});return}if(this.activeMode.action===e){this.activeMode={},await this.toggleVisibility(!this.layer.isLayerVisible);return}this.loading=!0,this.updateFeatureVisibililtyBasedOnRenderType(e),await this.resetVerifiedLocationLayer();const s=MAPS.view.map.findLayerById(this.layer.qid),a=s.findLayerById(`orderBy-${this.layer.qid}`),r=s.findLayerById(`records-${this.layer.qid}`);this.activeMode=this.displayTypes.find(n=>n.action===e);let i=null,t=null,h=null,c=!1,d=null;if(e==="render-marker")h=r.tmpLabelInfo,c=!0,d=r.renderStorage.marker,t=d.visualVariables;else if(e==="render-cluster"){const n=await ce(r);d=r.renderStorage.marker,t=n.visualVariables,i=n.featureReduction}else e==="render-scatter"?d=r.renderStorage.scatter:e==="render-heatmap"&&(r.renderStorage.heatmap.originalValues.heatmapDissipating||(r.renderStorage.heatmap.referenceScale=MAPS.view.scale),d=r.renderStorage.heatmap);r.labelingInfo=h,r.featureReduction=i,r.renderer=d,r.renderer.visualVariables=t,r.renderAs=this.activeMode.value,await this.setRowVisibility({skipLegendRefresh:!0,isRenderModeChange:!0}),this.layer.renderAs=this.activeMode.value,this.layer.isLayerVisible?await this.addRemoveProxCheck(e==="render-marker"):await this.toggleVisibility(!this.layer.isLayerVisible),a&&(a.visible=c),this.loading=!1},async handleAction(e){if(e==="zoom")await he({layerUIDs:[this.layer.qid]});else if(e==="refresh")this.refresh();else if(e==="edit"){let s=F.MARKER;this.isPolyline&&(s=F.POLYLINE),this.isLive&&(s=F.LIVE),this.$bus.emit("open-modal",{name:"save-sfdc-layer",config:{mode:be.PLOTTED_EDIT,type:s,isClone:!1,options:this.layer,callback:a=>{this.layersStore.updateFolderData({folderId:this.layersStore.currentFolder.id}),a.refreshLayer&&(delete this.layer.renderAs,a.visibleAreaOnly?this.layersStore.addVisibleAreaLayer(this.layer.qid):this.layersStore.removeVisibleAreaLayer(this.layer.qid),this.layer.visibleAreaOnly=a.visibleAreaOnly||!1,this.refresh(),this.layersStore.getRecentAndPlotOnLoadLayers())}}})}else e==="remove-tracking-history"&&this.removeTrackingHistoryLayers()},async resetVerifiedLocationLayer(){this.layersStore.verifiedLocationActiveLayers[this.layer.qid]&&await ye({layersToUpdate:[this.layer.qid]})},async refresh(){this.loading||(MAPS.view.closePopup(),this.refreshTimeout&&clearTimeout(this.refreshTimeout),await this.resetVerifiedLocationLayer(),this.loading=!0,this.errorMessage="",this.errorSubMessage="",await this.removeGraphics(),this.layer.legend={},this.isVariedBy2=!1,this.linkedShapeLayers=[],this.isProximityLayer=!1,this.isLayerOnMap=!1,this.layer.isLayerVisible=!1,this.layer.isLoading=!0,await this.loadLayer({refresh:!0}),this.loading=!1,this.layer.isLoading=!1)},populateHeatmapOptions(e){const{heatmapMaxIntensity:s,heatmapRadius:a,heatmapOpacity:r,heatmapDissipating:i}=e?.renderStorage?.heatmap?.originalValues||{};this.heatmapOptions={heatmapRadius:a,heatmapMaxIntensity:s,heatmapOpacity:r,heatmapDissipating:i==="true"}},async applyChanges(){if(this.v$.$invalid){this.mainStore.toasts.push({message:this.$Labels.Layers_Heatmap_Options_Validation_Error,state:"error"});return}let e,s;this.heatmapLoading=!0;try{if(e=MAPS.view.map.findLayerById(this.layer.qid).findLayerById(`records-${this.layer.qid}`),s=e.renderStorage.heatmap,s.radius=this.heatmapOptions.heatmapRadius/2,s.maxPixelIntensity=this.heatmapOptions.heatmapMaxIntensity/100,s.maxDensity=this.heatmapOptions.heatmapMaxIntensity/50,s.colorStops.forEach((r,i)=>{if(i!==0){let t=r.color;t=this.setOpacity(t,this.heatmapOptions.heatmapOpacity),r.color=t}}),s.referenceScale=this.heatmapOptions.heatmapDissipating?0:MAPS.view.scale,this.layer.permissions.modify){const r={...this.heatmapOptions,id:this.layer.id},i=await MAPS.Utils.Apex.invoke("maps.MarkerLayerBuilderController.updateHeatmapOptions",[JSON.stringify(r)]);if(!i.success)throw new Error(i.error.message)}}catch(a){this.mainStore.toasts.push({message:this.$Labels.Layers_Heatmap_Options_Save_Error,state:"error"}),console.error(a)}finally{e.renderer=s,this.heatmapLoading=!1}},setOpacity(e,s){const a=e.substring(5,e.length-1).split(",");return a.length!==4?e:(a[3]=s,`rgba(${a.join(",")})`)},toggleLegendRowUIVisibility(){this.showAllLegendRows=!this.showAllLegendRows,Object.keys(this.layer.legend).forEach(e=>{const s=this.layer.legend[e];s.uiVisible=this.showAllLegendRows||s.total>0,Object.keys(this.layer.legend[e].children).forEach(a=>{const r=this.layer.legend[e].children[a];r.uiVisible=this.showAllLegendRows||r.total>0})})},getLegendVisibility(){const e={};return Object.keys(this.layer.legend).forEach(s=>{const a=this.layer.legend[s];e[s]=a.onMap;const{children:r=[]}=a;r.forEach(i=>{e[i.row_id]=i.onMap})}),e},async selectOrDeselectAll(){const e=[];Object.keys(this.layer.legend).forEach(t=>{this.layer.legend[t].onMap=this.layer.isAnySelected,Object.keys(this.layer.legend[t].children).forEach(h=>{const c=this.layer.legend[t].children[h];c.onMap=this.layer.isAnySelected,this.layer.isAnySelected?(e.push(c.row_id),this.isProximityLayer&&this.nonVisibleRowsForProximity.delete(c.row_id)):this.isProximityLayer&&this.nonVisibleRowsForProximity.add(c.row_id)})}),this.layer.visibleRows=e;const s=`legendId IN ('${e.join("','")}')`,a=MAPS.view.map.findLayerById(this.layer.qid),r=a.findLayerById(`records-${this.layer.qid}`);r.definitionExpression=s;const i=a.findLayerById(`orderBy-${this.layer.qid}`);if(i&&(i.visible=this.layer.isAnySelected),this.setAllRowsListViewVisibility(this.layer.isLayerVisible),this.isPolyline){const t=a.findLayerById(`polyline-${this.layer.qid}`);t.definitionExpression=s}await this.filterProximityAndRefreshLegendCounts()},async setAllRowsListViewVisibility(e){const s=MAPS.view.map.findLayerById(this.layer.qid),a=s.findLayerById(`records-${this.layer.qid}`),r=[],i=new Map;Object.keys(this.layer.legend).forEach(_=>{const{children:L}=this.layer.legend[_];Object.keys(L).forEach(w=>{const f=L[w];i.set(f.row_id,f.onMap),r.push(f.row_id)})});const t=`legendId IN ('${r.join("','")}')`,h=await a.queryFeatures({where:t}),{features:c=[]}=h,{listMap:d}=this.listStore;let n=new Map;d.has(s.id)&&(n=d.get(s.id).recordMap,c.forEach(L=>{const{attributes:w}=L,{legendId:f}=w,{objectId:S}=w,k=n.get(S),q=i.get(f);k.isListViewVisible=e&&this.layer.isAnySelected&&q})),MAPS.app.config.globalProperties.$bus.emit("refresh-list-view",this.layer.qid),MAPS.app.config.globalProperties.$bus.emit("refresh-list-view","selectedMarkers"),this.listStore.selectedRecordMap.set("force-refresh-count",new Map),this.listStore.selectedRecordMap.delete("force-refresh-count")},async setParentVisibility(e){const s=[];e.children.forEach(a=>{a.onMap=e.onMap,s.push(a.row_id)}),await this.setRowVisibility({skipLegendRefresh:!1}),await this.setListViewVisibility(s,e.onMap)},async setParentVisibilityFromChild(e,s){s.onMap=!s.onMap,e.onMap=e.onMap||s.onMap,await this.setRowVisibility({skipLegendRefresh:!1}),await this.setListViewVisibility([s.row_id],s.onMap)},async setListViewVisibility(e,s){const{listMap:a}=this.listStore,r=MAPS.view.map.findLayerById(this.layer.qid);if(!a.has(r.id))return;const i=r.findLayerById(`records-${this.layer.qid}`);if(!i||!e||e.length===0)return;const t=`legendId IN ('${e.join("','")}')`;try{const h=await i.queryFeatures({where:t}),{features:c=[]}=h;if(c.length===0)return;const d=a.get(r.id),{recordMap:n}=d;if(!n)return;c.forEach(_=>{const{attributes:L}=_,{objectId:w}=L,f=n.get(w);f.isListViewVisible=(this.layer.isLayerVisible??!0)&&s}),MAPS.app.config.globalProperties.$bus.emit("refresh-list-view",this.layer.qid),MAPS.app.config.globalProperties.$bus.emit("refresh-list-view","selectedMarkers"),this.listStore.selectedRecordMap.set("force-refresh-count",new Map),this.listStore.selectedRecordMap.delete("force-refresh-count")}catch(h){console.error("Error querying features: ",h)}},async setRowVisibility({skipLegendRefresh:e=!1,isRenderModeChange:s=!1}){const a=[];Object.keys(this.layer.legend).forEach(c=>{Object.keys(this.layer.legend[c].children).forEach(d=>{const n=this.layer.legend[c].children[d];n.onMap?(a.push(n.row_id),this.nonVisibleRowsForProximity.delete(n.row_id)):this.nonVisibleRowsForProximity.add(n.row_id)})}),this.layer.isAnySelected=a.length>0,this.layer.visibleRows=a;const r=`legendId IN ('${a.join("','")}')`,i=MAPS.view.map.findLayerById(this.layer.qid),t=i.findLayerById(`records-${this.layer.qid}`);if(t.definitionExpression=r,this.isPolyline){const c=i.findLayerById(`polyline-${this.layer.qid}`);c.definitionExpression=r}const h=i.findLayerById(`orderBy-${this.layer.qid}`);h&&(s||(h.visible=this.layer.isAnySelected)),e!==!0&&await this.filterProximityAndRefreshLegendCounts(),MAPS.view.closePopup()},async refreshLegendCounts(){const s=MAPS.view.map.findLayerById(this.layer.qid).findLayerById(`records-${this.layer.qid}`);await this.showHideProximityGraphics();const a=await s.queryFeatures({type:"query"}),{features:r=[]}=a.toJSON();this.badAddressRecords=s.badAddresses||[];const i={};MAPS.deletedFeatures.has(`records-${this.layer.qid}`)&&MAPS.deletedFeatures.get(`records-${this.layer.qid}`).forEach(n=>{n?.attributes?.legendId&&(i[n.attributes.legendId]||(i[n.attributes.legendId]=0),i[n.attributes.legendId]++)});const t=this.getLegendVisibility(),{legendBuckets:h,totalVisibleFeatures:c}=await $({features:r,isLayerVisible:this.layer.isLayerVisible,isPolyline:this.isPolyline,deletedCountMap:i,isRefresh:!0,activeRows:t,queryData:this.layer.queryData,translations:{Mobile_Legend_Count:this.$Labels.Mobile_Legend_Count,MA_Other:this.$Labels.MA_Other}});this.markersVisible=c,Object.keys(this.layer.legend).forEach(d=>{const n=h[d],_=this.layer.legend[d];_.total=n.total,_.visible=n.visible,_.rowCountSummary=n.rowCountSummary,_.uiVisible=this.showAllLegendRows||n.uiVisible;const{children:L=[]}=_,{children:w}=n;Object.keys(L).forEach(f=>{const S=L[f],k=w[f];S.visible=k.visible,S.total=k.total,S.rowCountSummary=k.rowCountSummary,S.uiVisible=this.showAllLegendRows||k.uiVisible})}),this.layer.updateAction=""},async updateLayerInfo(){this.isVariedBy2=this.layer?.queryData?.isVariedBy2;const e=U(this.layer.qid);this.showAllLegendRows=!1,this.displayTypes.forEach(d=>{d.value===e.renderAs&&(this.activeMode=d)});const s={};MAPS.deletedFeatures.has(`records-${this.layer.qid}`)&&MAPS.deletedFeatures.get(`records-${this.layer.qid}`).forEach(n=>{n?.attributes?.legendId&&(s[n.attributes.legendId]||(s[n.attributes.legendId]=0),s[n.attributes.legendId]++)});const a=await e.queryFeatures(),{features:r=[]}=a.toJSON(),{legendBuckets:i,totalVisibleFeatures:t,totalFeatures:h}=await $({features:r,isLayerVisible:!0,isPolyline:this.isPolyline,deletedCountMap:s,queryData:this.layer.queryData,translations:{Mobile_Legend_Count:this.$Labels.Mobile_Legend_Count,MA_Other:this.$Labels.MA_Other}});this.layer.legend=i,this.layer.isAnySelected=!0,this.totalMarkerCreated=h,this.markersVisible=t,this.geocodedRecords=e.totalGeocodes,this.isProximityLayer=e.isProximityLayer,this.affectVisibility=e.affectVisibility,e.legendLabel&&(this.hasLegendField=!0,this.layer.legendFieldLabel=e.legendLabel),this.geocodedHappened=e.geocodedHappened||!1,this.badAddressRecords=e.badAddresses||[],this.successfulDevices=e.successfulDevices,this.deviceLocationsPolled=e.deviceLocationsPolled||!1,this.failedDevices=e.failedDevices||[],this.unmetCriteriaDevices=e.unmetCriteriaDevices||[],this.populateHeatmapOptions(e);const c=[];Object.keys(this.layer.legend).forEach(d=>{const{children:n}=this.layer.legend[d];Object.keys(n).forEach(_=>{const L=n[_];L.onMap&&c.push(L.row_id)})}),this.linkedShapeLayers=this.layer.linkedShapeUIDs||[],delete this.layer.linkedShapeUIDs,this.layer.visibleRows=c,this.layer.updateAction=""},async showLegendMassActionsContext(e,s){e.preventDefault();const a=await this.getLegendRowContextForMassAction(s);this.addLegendRowStylingForContextMenu(s.row_id);const r=e.target.getBoundingClientRect();ue.showContextMenu({onClose:this.dismissLegendRowStylingForContextMenu,x:423,y:r.top,adjustPadding:{y:-10},items:ve.getItems(a)})},addLegendRowStylingForContextMenu(e){this.rowSelectedForMassAction=e},dismissLegendRowStylingForContextMenu(){this.rowSelectedForMassAction=null},async getLegendRowContextForMassAction(e){const s=this.layer.qid,a=U(s),i=this.layersStore.plottedLayers.find(d=>d.qid===s),t=e.children?e.children.map(d=>d.row_id):[e.row_id],h=await a.queryFeatures({type:"query",returnGeometry:!0,outFields:["*"],where:`legendId IN ('${t.join("', '")}')`}),{features:c}=h.toJSON();return{layerId:s,layerType:a.SF_MAPS_TYPE,oidField:"oid",features:c,plottedLayer:JSON.stringify(i)}}}},R=e=>(pe("data-v-02ceca6c"),e=e(),_e(),e),we={class:"PlottedRowUnit-MarkerLayer slds-is-relative"},Se={class:"slds-col slds-grow-none",style:{position:"relative",width:"20px",height:"20px"}},ke={key:0,role:"status",class:"slds-spinner slds-spinner_x-small slds-spinner_brand"},Ae={class:"slds-assistive-text"},xe=R(()=>l("div",{class:"slds-spinner__dot-a"},null,-1)),Ve=R(()=>l("div",{class:"slds-spinner__dot-b"},null,-1)),Ie=["src"],Pe=R(()=>l("div",{class:"ftu-plotonload"},null,-1)),Re={class:"basicinfo slds-col slds-p-left_small slds-col_bump-right slds-size_9-of-12"},Ce=["title"],Oe=["title"],qe=["title"],Te=["title"],Fe=["title"],Be=["src"],De={class:"slds-assistive-text"},Ee={class:"slds-p-around_x-small slds-border_bottom"},He={class:"slds-grid slds-grid_vertical-align-center"},$e={class:"slds-p-right_x-small"},Ue=["src"],je={style:{color:"black"}},Ne={class:"slds-p-around_x-small slds-border_bottom"},ze={key:1,class:"slds-p-around_small"},Ge={class:"slds-p-vertical_x-small slds-p-horizontal_medium"},We={class:"plottinginfo-wrapper"},Je={class:"inline status","data-q3-id":"mapSidebarLayerRecordCount","data-test-id":"maps-sf-layer-count",style:{"margin-top":"6px"}},Qe={class:"info"},Ke={"data-q3-id":"mapSidebarLayerSuccessfulDevices"},Ye={"data-q3-id":"mapSidebarLayerFailedDevices","data-test-id":"maps-sf-layer-marker-info"},Ze={key:1,"data-q3-id":"mapSidebarLayerGeocodedRecords","data-test-id":"maps-sf-layer-geocode"},Xe={key:2,"data-q3-id":"mapSidebarLayerBadPolylineRecords"},es={"data-q3-id":"mapSidebarLayerMarkerInfo","data-test-id":"maps-sf-layer-marker-info"},ss=R(()=>l("br",null,null,-1)),is={key:3,"data-q3-id":"mapLegendFieldName","data-test-id":"maps-sf-layer-legend-name"},ts={class:"mapsLegend"},as={class:"legend-row slds-p-horizontal_small slds-p-vertical_xxx-small slds-grid slds-grid_vertical-align-center slds-border_top"},rs={class:"slds-col_bump-left slds-p-horizontal_small"},ls=["onContextmenu"],os={class:"slds-col_bump-left slds-p-horizontal_small slds-text-title_bold"},ns=["src"],ds=["data-q3-id","onClick","onContextmenu"],cs={class:"slds-form-element"},hs={class:"slds-form-element__control"},ys=["data-q3-id"],us=["id","value","checked"],ps=["data-q3-id"],_s=R(()=>l("span",{class:"slds-checkbox_faux"},null,-1)),ms={class:"slds-form-element__label"},Ls={class:"slds-col_bump-left slds-p-horizontal_small"},bs=["src"];function fs(e,s,a,r,i,t){const h=g("ButtonIcon"),c=g("Checkbox"),d=g("ActionMenuItem"),n=g("ActionMenu"),_=g("HoveringTooltip"),L=g("ScopedNotification"),w=g("Spinner"),f=g("HeatMapOptions"),S=g("SLDSButton"),k=g("ExpandableSection"),q=g("LayoutItem"),j=g("Layout");return u(),m("div",we,[l("div",{ref:"layerHeader",class:O(["slds-grid slds-grid_vertical-align-center slds-p-around_x-small",{"is-plot-on-load":t.isPlotOnLoad}]),onMouseover:s[1]||(s[1]=(...o)=>t.showTooltipInfo&&t.showTooltipInfo(...o)),onMouseleave:s[2]||(s[2]=(...o)=>t.hideTooltipInfo&&t.hideTooltipInfo(...o))},[l("div",Se,[i.loading?(u(),m("div",ke,[l("span",Ae,y(e.$Labels.Layers_On_The_Map_Loading),1),xe,Ve])):(u(),m("img",{key:1,src:t.layerIcon,style:{width:"20px",height:"20px"}},null,8,Ie)),Pe]),l("div",Re,[l("div",{class:"slds-text-heading_medium slds-truncate","data-q3-id":"mapSidebarLayerName",title:a.layer.name},y(a.layer.name),9,Ce),l("div",{class:"slds-text-color_weak","data-q3-id":"mapSidebarLayerBaseObjectLabel",title:a.layer.queryData?.options?.baseObjectLabel},y(a.layer.queryData?.options?.baseObjectLabel),9,Oe),V(l("div",{class:"slds-text-color_weak"},y(i.loadingMsg),513),[[I,i.loading]]),V(l("div",{class:"slds-text-color_error",title:i.errorMessage},[P(y(i.errorMessage)+" ",1),V(l("div",{class:"slds-p-top_x-small",title:i.errorSubMessage},y(i.errorSubMessage),9,Te),[[I,i.errorMessage&&i.errorSubMessage]])],8,qe),[[I,!i.loading]])]),i.isPolyline?M("",!0):(u(),A(n,{key:0,"data-q3-id":"mapSidebarLayerRenderModeMenu",disabled:!i.isLayerOnMap||i.loading},{button:v(()=>[a.layer.isLayerVisible?(u(),m("button",{key:1,class:"slds-button slds-button_icon slds-button_icon-bare slds-button_icon-small",title:i.activeMode.label},[l("img",{src:i.activeMode.icon,style:{height:"18px"}},null,8,Be),l("span",De,y(e.$Labels.MA_Options),1)],8,Fe)):(u(),A(h,{key:0,"data-q3-id":"mapSidebarLayerRenderModeButton",iconCategory:"utility",iconName:"hide",size:"small",title:e.$Labels.Layers_On_The_Map_OverFlow_Header_Options,assistiveText:e.$Labels.Layers_On_The_Map_OverFlow_Header_Options},null,8,["title","assistiveText"]))]),default:v(()=>[l("div",Ee,y(e.$Labels.Layers_On_The_Map_OverFlow_Header_Query_Display),1),b(d,{role:"menuitemcheckbox",label:e.$Labels.Layers_On_The_Map_OverFlow_Checkbox_Markers_Are_Visible,onClick:t.toggleVisibility},{default:v(()=>[b(c,{modelValue:a.layer.isLayerVisible,"onUpdate:modelValue":s[0]||(s[0]=o=>a.layer.isLayerVisible=o),"data-q3-id":"mapSidebarLayerVisibilityCheckbox",labels:{name:e.$Labels.Layers_On_The_Map_OverFlow_Checkbox_Markers_Are_Visible},class:"slds-p-horizontal_xxx-small layer-action-item"},null,8,["modelValue","labels"])]),_:1},8,["label","onClick"]),(u(!0),m(x,null,C(t.displayTypes,o=>(u(),A(d,{key:o.value,"data-q3-id":`mapSidebarLayerDisplayTypeMenuItem-${o.value}`,label:o.label,class:O(["maps-render-mode",{"mode-active":i.activeMode.action===o.action}]),onClick:p=>t.changeDisplayType(o.action)},{default:v(()=>[l("div",He,[l("div",$e,[l("img",{src:o.icon},null,8,Ue)]),l("div",je,y(o.label),1)])]),_:2},1032,["data-q3-id","label","class","onClick"]))),128))]),_:1},8,["disabled"])),b(n,{disabled:i.loading},{button:v(()=>[b(h,{"data-q3-id":"mapSidebarLayerOverflowMenuButton",iconCategory:"utility",iconName:"threedots_vertical",size:"small",title:e.$Labels.Layer_Options,assistiveText:e.$Labels.Layer_Options},null,8,["title","assistiveText"])]),default:v(()=>[l("div",Ne,y(e.$Labels.MA_Options),1),(u(!0),m(x,null,C(t.layerOptions,o=>(u(),A(d,{key:o.action,"data-q3-id":`mapSidebarLayerOverflowMenuItem-${o.action}`,label:o.label,onClick:p=>t.handleAction(o.action)},null,8,["data-q3-id","label","onClick"]))),128))]),_:1},8,["disabled"]),b(h,{"data-q3-id":"mapSidebarLayerRemoveButton",iconCategory:"utility",disabled:i.loading,iconName:"close",size:"small",title:e.$Labels.Layers_On_The_Map_Remove_Layer,assistiveText:e.$Labels.Layers_On_The_Map_Remove_Layer,onClick:t.removeLayer},null,8,["disabled","title","assistiveText","onClick"])],34),i.renderTooltip?(u(),A(_,{key:0,ref:"hoveringTooltip",tooltipVisible:i.tooltipVisible,layer:a.layer,showBaseObject:!1},null,8,["tooltipVisible","layer"])):M("",!0),i.loading&&i.status?(u(),m("div",ze,[b(L,{class:"slds-m-bottom_small"},{content:v(()=>[P(y(i.status),1)]),_:1})])):M("",!0),!i.loading&&!i.errorMessage?(u(),m(x,{key:2},[l("div",Ge,[l("div",We,[l("div",Je,y(t.recordCount),1),l("div",Qe,[i.isLive&&(i.failedDevices.length>0||i.deviceLocationsPolled)?(u(),m(x,{key:0},[l("div",Ke,y(t.devicesUpdatedLabel),1),l("div",Ye,[P(y(e.$Labels.Layers_On_The_Map_Plotted_Live_Location_Devices_Status)+" ",1),l("a",{href:"#",class:"slds-text-link slds-m-right_xx-small",onClick:s[3]||(s[3]=o=>t.openModal("bad-devices"))},y(t.failedDevicesLabel),1),l("a",{href:"#",class:"slds-text-link",onClick:s[4]||(s[4]=o=>t.openModal("unmet-criteria-devices"))},y(t.unmetCriteriaLabel),1)])],64)):M("",!0),i.badAddressRecords.length>0||i.geocodedHappened?(u(),m("div",Ze,[P(y(t.recordsGeocodedLabel)+": ",1),l("a",{href:"#",class:"slds-text-link",onClick:s[5]||(s[5]=o=>t.openModal("bad-addresses"))},y(t.badAddressLabel),1)])):M("",!0),i.isPolyline&&i.failedPolylineRecords.length?(u(),m("div",Xe,[l("a",{href:"#",class:"slds-text-link",onClick:s[6]||(s[6]=o=>t.openModal("bad-polyline-records"))},y(t.failedPolylineLabel),1)])):M("",!0),l("div",es,y(t.markerInfo),1),ss,i.hasLegendField?(u(),m("div",is,y(t.legendName),1)):M("",!0)])])]),i.activeMode.value==="Heatmap"?(u(),A(j,{key:0,class:"slds-grid slds-wrap slds-grid_vertical-align-center slds-p-horizontal_medium slds-p-bottom_medium"},{default:v(()=>[i.heatmapLoading?(u(),A(w,{key:0})):M("",!0),b(q,{style:{width:"100%"}},{default:v(()=>[b(k,{title:e.$Labels.modal_MLB_option_DO_section_HeatMap_modal_Section_Text},{default:v(()=>[b(f,{options:i.heatmapOptions},null,8,["options"]),b(S,{variant:"neutral",title:t.computedHeatmapButtonText,class:"slds-button_stretch slds-m-top_x-small",onClick:t.applyChanges},{default:v(()=>[P(y(t.computedHeatmapButtonText),1)]),_:1},8,["title","onClick"])]),_:1},8,["title"])]),_:1})]),_:1})):M("",!0),l("div",ts,[l("div",as,[b(c,{modelValue:a.layer.isAnySelected,"onUpdate:modelValue":s[7]||(s[7]=o=>a.layer.isAnySelected=o),"data-q3-id":"mapLegendToggleSelectAllCheckbox",labels:{name:" "},class:"slds-col",onChange:t.selectOrDeselectAll},null,8,["modelValue","onChange"]),l("div",rs,[b(S,{"data-q3-id":"mapLegendToggleShowLessButton",variant:"base",iconCategory:"utility",iconName:i.showAllLegendRows?"chevronup":"chevrondown",iconPosition:"right",iconClass:["slds-icon_xx-small"],label:t.legendVisibilityLabel,onClick:t.toggleLegendRowUIVisibility},null,8,["iconName","label","onClick"])])]),(u(!0),m(x,null,C(a.layer.legend,o=>(u(),m("div",{key:o.row_id},[V(l("div",{class:O(["legend-row-header slds-p-horizontal_small slds-p-vertical_xxx-small slds-grid slds-grid_vertical-align-center slds-border_top",{highlight:o.row_id===i.rowSelectedForMassAction}]),onContextmenu:p=>t.showLegendMassActionsContext(p,o)},[b(c,{modelValue:o.onMap,"onUpdate:modelValue":p=>o.onMap=p,"data-q3-id":`mapLegendToggleSelectAllCheckbox-${o.row_id}`,labels:{name:o.label},class:"slds-text-title_bold",onChange:p=>t.setParentVisibility(o)},null,8,["modelValue","onUpdate:modelValue","data-q3-id","labels","onChange"]),b(h,{"data-q3-id":`mapLegendToggleShowLessButton-${o.row_id}`,iconCategory:"utility",iconName:o.expanded?"chevrondown":"chevronright",size:"small",title:o.expanded?e.$Labels.MA_Show_Less:e.$Labels.MA_SHOW_MORE,assistiveText:o.expanded?e.$Labels.MA_Show_Less:e.$Labels.MA_SHOW_MORE,onClick:p=>o.expanded=!o.expanded},null,8,["data-q3-id","iconName","title","assistiveText","onClick"]),l("div",os,y(o.rowCountSummary),1),l("img",{src:o.url,style:{height:"20px",width:"20px"}},null,8,ns)],42,ls),[[I,o.uiVisible&&i.isVariedBy2]]),o.expanded?(u(!0),m(x,{key:0},C(o.children,p=>V((u(),m("div",{key:p.row_id,"data-q3-id":`mapLegendToggleSelectAllCheckbox-${p.row_id}`,class:O(["legend-row slds-p-vertical_xxx-small slds-p-right_small slds-grid slds-grid_vertical-align-center slds-border_top",{highlight:p.row_id===i.rowSelectedForMassAction,"slds-p-left_large":i.isVariedBy2,"slds-p-left_small":!i.isVariedBy2}]),style:{cursor:"pointer"},onClick:B=>t.setParentVisibilityFromChild(o,p),onContextmenu:B=>t.showLegendMassActionsContext(B,p)},[l("div",cs,[l("div",hs,[l("div",{class:"slds-checkbox","data-q3-id":`mapLegendToggleSelectAllCheckbox-${p.row_id}`,style:{cursor:"pointer"}},[l("input",{id:p.row_id,type:"checkbox",name:"options",value:p.row_id,checked:p.onMap},null,8,us),l("label",{class:"slds-checkbox__label","data-q3-id":`mapLegendFieldName-${p.row_id}`,style:{cursor:"pointer"},for:"checkbox-unique-id-81"},[_s,l("span",ms,y(p.label),1)],8,ps)],8,ys)])]),l("div",Ls,y(p.rowCountSummary),1),l("img",{src:p.url,style:{height:"20px",width:"20px"}},null,8,bs)],42,ds)),[[I,p.uiVisible]])),128)):M("",!0)]))),128))])],64)):M("",!0)])}const As=W(Me,[["render",fs],["__scopeId","data-v-02ceca6c"]]);export{As as default};
